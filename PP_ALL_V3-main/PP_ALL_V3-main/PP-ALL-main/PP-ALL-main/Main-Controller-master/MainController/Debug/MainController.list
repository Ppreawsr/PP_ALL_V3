
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a614  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a7ec  0800a7ec  0000b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a84c  0800a84c  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a84c  0800a84c  0000b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a854  0800a854  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a85c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  20000218  0800aa74  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000138c  0800aa74  0000c38c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d03  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e93  00000000  00000000  00023f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00026de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  00028090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017575  00000000  00000000  0005007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb19  00000000  00000000  000675f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016610c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e0  00000000  00000000  00166150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c0  00000000  00000000  0016b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a7d4 	.word	0x0800a7d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800a7d4 	.word	0x0800a7d4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_frsub>:
 8000ae4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae8:	e002      	b.n	8000af0 <__addsf3>
 8000aea:	bf00      	nop

08000aec <__aeabi_fsub>:
 8000aec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af0 <__addsf3>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	bf1f      	itttt	ne
 8000af4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af8:	ea92 0f03 	teqne	r2, r3
 8000afc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b04:	d06a      	beq.n	8000bdc <__addsf3+0xec>
 8000b06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b0e:	bfc1      	itttt	gt
 8000b10:	18d2      	addgt	r2, r2, r3
 8000b12:	4041      	eorgt	r1, r0
 8000b14:	4048      	eorgt	r0, r1
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	2b19      	cmp	r3, #25
 8000b1e:	bf88      	it	hi
 8000b20:	4770      	bxhi	lr
 8000b22:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4240      	negne	r0, r0
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4249      	negne	r1, r1
 8000b42:	ea92 0f03 	teq	r2, r3
 8000b46:	d03f      	beq.n	8000bc8 <__addsf3+0xd8>
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b50:	eb10 000c 	adds.w	r0, r0, ip
 8000b54:	f1c3 0320 	rsb	r3, r3, #32
 8000b58:	fa01 f103 	lsl.w	r1, r1, r3
 8000b5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__addsf3+0x78>
 8000b62:	4249      	negs	r1, r1
 8000b64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b68:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b6c:	d313      	bcc.n	8000b96 <__addsf3+0xa6>
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b72:	d306      	bcc.n	8000b82 <__addsf3+0x92>
 8000b74:	0840      	lsrs	r0, r0, #1
 8000b76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7a:	f102 0201 	add.w	r2, r2, #1
 8000b7e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b80:	d251      	bcs.n	8000c26 <__addsf3+0x136>
 8000b82:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	ea40 0003 	orr.w	r0, r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	0049      	lsls	r1, r1, #1
 8000b98:	eb40 0000 	adc.w	r0, r0, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba4:	d2ed      	bcs.n	8000b82 <__addsf3+0x92>
 8000ba6:	fab0 fc80 	clz	ip, r0
 8000baa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bae:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bb6:	bfaa      	itet	ge
 8000bb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bbc:	4252      	neglt	r2, r2
 8000bbe:	4318      	orrge	r0, r3
 8000bc0:	bfbc      	itt	lt
 8000bc2:	40d0      	lsrlt	r0, r2
 8000bc4:	4318      	orrlt	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	f092 0f00 	teq	r2, #0
 8000bcc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd0:	bf06      	itte	eq
 8000bd2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	3201      	addeq	r2, #1
 8000bd8:	3b01      	subne	r3, #1
 8000bda:	e7b5      	b.n	8000b48 <__addsf3+0x58>
 8000bdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be4:	bf18      	it	ne
 8000be6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bea:	d021      	beq.n	8000c30 <__addsf3+0x140>
 8000bec:	ea92 0f03 	teq	r2, r3
 8000bf0:	d004      	beq.n	8000bfc <__addsf3+0x10c>
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	4608      	moveq	r0, r1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea90 0f01 	teq	r0, r1
 8000c00:	bf1c      	itt	ne
 8000c02:	2000      	movne	r0, #0
 8000c04:	4770      	bxne	lr
 8000c06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0a:	d104      	bne.n	8000c16 <__addsf3+0x126>
 8000c0c:	0040      	lsls	r0, r0, #1
 8000c0e:	bf28      	it	cs
 8000c10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c14:	4770      	bx	lr
 8000c16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1a:	bf3c      	itt	cc
 8000c1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c20:	4770      	bxcc	lr
 8000c22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	4770      	bx	lr
 8000c30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c34:	bf16      	itet	ne
 8000c36:	4608      	movne	r0, r1
 8000c38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c3c:	4601      	movne	r1, r0
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	bf06      	itte	eq
 8000c42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c46:	ea90 0f01 	teqeq	r0, r1
 8000c4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_ui2f>:
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e004      	b.n	8000c60 <__aeabi_i2f+0x8>
 8000c56:	bf00      	nop

08000c58 <__aeabi_i2f>:
 8000c58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c5c:	bf48      	it	mi
 8000c5e:	4240      	negmi	r0, r0
 8000c60:	ea5f 0c00 	movs.w	ip, r0
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	e01c      	b.n	8000cae <__aeabi_l2f+0x2a>

08000c74 <__aeabi_ul2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e00a      	b.n	8000c98 <__aeabi_l2f+0x14>
 8000c82:	bf00      	nop

08000c84 <__aeabi_l2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__aeabi_l2f+0x14>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	ea5f 0c01 	movs.w	ip, r1
 8000c9c:	bf02      	ittt	eq
 8000c9e:	4684      	moveq	ip, r0
 8000ca0:	4601      	moveq	r1, r0
 8000ca2:	2000      	moveq	r0, #0
 8000ca4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca8:	bf08      	it	eq
 8000caa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb2:	fabc f28c 	clz	r2, ip
 8000cb6:	3a08      	subs	r2, #8
 8000cb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cbc:	db10      	blt.n	8000ce0 <__aeabi_l2f+0x5c>
 8000cbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	f020 0001 	biceq.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	f102 0220 	add.w	r2, r2, #32
 8000ce4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295
 8000d14:	f000 b96a 	b.w	8000fec <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f806 	bl	8000d30 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__udivmoddi4>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	9d08      	ldr	r5, [sp, #32]
 8000d36:	460c      	mov	r4, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14e      	bne.n	8000dda <__udivmoddi4+0xaa>
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	458c      	cmp	ip, r1
 8000d40:	4686      	mov	lr, r0
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	d962      	bls.n	8000e0e <__udivmoddi4+0xde>
 8000d48:	b14a      	cbz	r2, 8000d5e <__udivmoddi4+0x2e>
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	fa20 f303 	lsr.w	r3, r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d62:	fa1f f68c 	uxth.w	r6, ip
 8000d66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb04 f106 	mul.w	r1, r4, r6
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d90a      	bls.n	8000d94 <__udivmoddi4+0x64>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d86:	f080 8112 	bcs.w	8000fae <__udivmoddi4+0x27e>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 810f 	bls.w	8000fae <__udivmoddi4+0x27e>
 8000d90:	3c02      	subs	r4, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1a59      	subs	r1, r3, r1
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f606 	mul.w	r6, r0, r6
 8000daa:	429e      	cmp	r6, r3
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x94>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db6:	f080 80fc 	bcs.w	8000fb2 <__udivmoddi4+0x282>
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	f240 80f9 	bls.w	8000fb2 <__udivmoddi4+0x282>
 8000dc0:	4463      	add	r3, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	1b9b      	subs	r3, r3, r6
 8000dc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa6>
 8000dce:	40d3      	lsrs	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xba>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb4>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x150>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xcc>
 8000df6:	4290      	cmp	r0, r2
 8000df8:	f0c0 80f0 	bcc.w	8000fdc <__udivmoddi4+0x2ac>
 8000dfc:	1a86      	subs	r6, r0, r2
 8000dfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d0e6      	beq.n	8000dd6 <__udivmoddi4+0xa6>
 8000e08:	e9c5 6300 	strd	r6, r3, [r5]
 8000e0c:	e7e3      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x204>
 8000e14:	eba1 040c 	sub.w	r4, r1, ip
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e32:	fb07 f006 	mul.w	r0, r7, r6
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x11c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x11a>
 8000e44:	4298      	cmp	r0, r3
 8000e46:	f200 80cd 	bhi.w	8000fe4 <__udivmoddi4+0x2b4>
 8000e4a:	4626      	mov	r6, r4
 8000e4c:	1a1c      	subs	r4, r3, r0
 8000e4e:	fa1f f38e 	uxth.w	r3, lr
 8000e52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e56:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	429f      	cmp	r7, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x148>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x146>
 8000e70:	429f      	cmp	r7, r3
 8000e72:	f200 80b0 	bhi.w	8000fd6 <__udivmoddi4+0x2a6>
 8000e76:	4620      	mov	r0, r4
 8000e78:	1bdb      	subs	r3, r3, r7
 8000e7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x9c>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e90:	fa04 f301 	lsl.w	r3, r4, r1
 8000e94:	ea43 030c 	orr.w	r3, r3, ip
 8000e98:	40f4      	lsrs	r4, r6
 8000e9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000e9e:	0c38      	lsrs	r0, r7, #16
 8000ea0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea8:	fa1f fc87 	uxth.w	ip, r7
 8000eac:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb8:	45a1      	cmp	r9, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90a      	bls.n	8000ed6 <__udivmoddi4+0x1a6>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ec6:	f080 8084 	bcs.w	8000fd2 <__udivmoddi4+0x2a2>
 8000eca:	45a1      	cmp	r9, r4
 8000ecc:	f240 8081 	bls.w	8000fd2 <__udivmoddi4+0x2a2>
 8000ed0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	eba4 0409 	sub.w	r4, r4, r9
 8000eda:	fa1f f983 	uxth.w	r9, r3
 8000ede:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ee6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x1d2>
 8000ef2:	193c      	adds	r4, r7, r4
 8000ef4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef8:	d267      	bcs.n	8000fca <__udivmoddi4+0x29a>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d965      	bls.n	8000fca <__udivmoddi4+0x29a>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f06:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0a:	eba4 040c 	sub.w	r4, r4, ip
 8000f0e:	429c      	cmp	r4, r3
 8000f10:	46ce      	mov	lr, r9
 8000f12:	469c      	mov	ip, r3
 8000f14:	d351      	bcc.n	8000fba <__udivmoddi4+0x28a>
 8000f16:	d04e      	beq.n	8000fb6 <__udivmoddi4+0x286>
 8000f18:	b155      	cbz	r5, 8000f30 <__udivmoddi4+0x200>
 8000f1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000f1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	40cb      	lsrs	r3, r1
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	40cc      	lsrs	r4, r1
 8000f2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000f30:	2100      	movs	r1, #0
 8000f32:	e750      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000f34:	f1c2 0320 	rsb	r3, r2, #32
 8000f38:	fa20 f103 	lsr.w	r1, r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa24 f303 	lsr.w	r3, r4, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	430c      	orrs	r4, r1
 8000f48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f50:	fa1f f78c 	uxth.w	r7, ip
 8000f54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f58:	fb08 3110 	mls	r1, r8, r0, r3
 8000f5c:	0c23      	lsrs	r3, r4, #16
 8000f5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f62:	fb00 f107 	mul.w	r1, r0, r7
 8000f66:	4299      	cmp	r1, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x24c>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f72:	d22c      	bcs.n	8000fce <__udivmoddi4+0x29e>
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d92a      	bls.n	8000fce <__udivmoddi4+0x29e>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f84:	fb08 3311 	mls	r3, r8, r1, r3
 8000f88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f8c:	fb01 f307 	mul.w	r3, r1, r7
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x276>
 8000f94:	eb1c 0404 	adds.w	r4, ip, r4
 8000f98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f9c:	d213      	bcs.n	8000fc6 <__udivmoddi4+0x296>
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	d911      	bls.n	8000fc6 <__udivmoddi4+0x296>
 8000fa2:	3902      	subs	r1, #2
 8000fa4:	4464      	add	r4, ip
 8000fa6:	1ae4      	subs	r4, r4, r3
 8000fa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fac:	e739      	b.n	8000e22 <__udivmoddi4+0xf2>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	e6f0      	b.n	8000d94 <__udivmoddi4+0x64>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e706      	b.n	8000dc4 <__udivmoddi4+0x94>
 8000fb6:	45c8      	cmp	r8, r9
 8000fb8:	d2ae      	bcs.n	8000f18 <__udivmoddi4+0x1e8>
 8000fba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc2:	3801      	subs	r0, #1
 8000fc4:	e7a8      	b.n	8000f18 <__udivmoddi4+0x1e8>
 8000fc6:	4631      	mov	r1, r6
 8000fc8:	e7ed      	b.n	8000fa6 <__udivmoddi4+0x276>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	e799      	b.n	8000f02 <__udivmoddi4+0x1d2>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e7d4      	b.n	8000f7c <__udivmoddi4+0x24c>
 8000fd2:	46d6      	mov	lr, sl
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1a6>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e74d      	b.n	8000e78 <__udivmoddi4+0x148>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	4623      	mov	r3, r4
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e70f      	b.n	8000e04 <__udivmoddi4+0xd4>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	e730      	b.n	8000e4c <__udivmoddi4+0x11c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000234 	.word	0x20000234

08001030 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <modbus_3t5_Timeout+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	755a      	strb	r2, [r3, #21]

}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000234 	.word	0x20000234

08001050 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f008 fa23 	bl	80094a4 <HAL_UART_GetError>
 800105e:	4603      	mov	r3, r0
 8001060:	2b20      	cmp	r3, #32
 8001062:	d101      	bne.n	8001068 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001064:	f7ff ffc4 	bl	8000ff0 <modbus_1t5_Timeout>

	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800107a:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <Modbus_init+0xa0>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <Modbus_init+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <Modbus_init+0xa4>)
 800108e:	210e      	movs	r1, #14
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fa51 	bl	8007538 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2110      	movs	r1, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f008 f9ab 	bl	80093f8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 f9c2 	bl	8009430 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <Modbus_init+0xa8>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fc89 	bl	80089cc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <Modbus_init+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <Modbus_init+0xa0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <Modbus_init+0xa0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80010cc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010d0:	4413      	add	r3, r2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010d8:	4619      	mov	r1, r3
 80010da:	f007 fdb1 	bl	8008c40 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <Modbus_init+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10c      	bne.n	8001108 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <Modbus_init+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 ff09 	bl	8005f0c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <Modbus_init+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fc54 	bl	80069b0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000234 	.word	0x20000234
 8001114:	08001031 	.word	0x08001031
 8001118:	08001051 	.word	0x08001051

0800111c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001128:	23ff      	movs	r3, #255	@ 0xff
 800112a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001130:	e013      	b.n	800115a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	4053      	eors	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <CRC16+0x64>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4053      	eors	r3, r2
 800114e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <CRC16+0x68>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	803a      	strh	r2, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e6      	bne.n	8001132 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000100 	.word	0x20000100
 8001184:	20000000 	.word	0x20000000

08001188 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800118e:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7ddb      	ldrb	r3, [r3, #23]
 8001194:	3b01      	subs	r3, #1
 8001196:	2b03      	cmp	r3, #3
 8001198:	d80a      	bhi.n	80011b0 <Modbus_Protocal_Worker+0x28>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <Modbus_Protocal_Worker+0x18>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011bb 	.word	0x080011bb
 80011a4:	0800134f 	.word	0x0800134f
 80011a8:	08001247 	.word	0x08001247
 80011ac:	0800128b 	.word	0x0800128b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	75da      	strb	r2, [r3, #23]
		break;
 80011b8:	e0e1      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011ba:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80011ce:	f000 f9cd 	bl	800156c <Modbus_Emission>
 80011d2:	e018      	b.n	8001206 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80011d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80011de:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d00b      	beq.n	8001206 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2203      	movs	r2, #3
 8001204:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001206:	4b60      	ldr	r3, [pc, #384]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001210:	2b20      	cmp	r3, #32
 8001212:	f040 80ad 	bne.w	8001370 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b57      	ldr	r3, [pc, #348]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001232:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800123e:	4619      	mov	r1, r3
 8001240:	f007 fcfe 	bl	8008c40 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001244:	e094      	b.n	8001370 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001246:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8091 	beq.w	8001374 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22fe      	movs	r2, #254	@ 0xfe
 8001258:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800125a:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001276:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001278:	1a8a      	subs	r2, r1, r2
 800127a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800127c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001288:	e074      	b.n	8001374 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001292:	f113 0f02 	cmn.w	r3, #2
 8001296:	d150      	bne.n	800133a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff ff31 	bl	800111c <CRC16>
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012be:	793a      	ldrb	r2, [r7, #4]
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012cc:	3b02      	subs	r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10c      	bne.n	80012f2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80012d8:	797a      	ldrb	r2, [r7, #5]
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012e6:	3b01      	subs	r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d004      	beq.n	80012fc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ff      	movs	r2, #255	@ 0xff
 80012f8:	759a      	strb	r2, [r3, #22]
				break;
 80012fa:	e040      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d113      	bne.n	8001336 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800131e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001328:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800132a:	461a      	mov	r2, r3
 800132c:	f009 fa44 	bl	800a7b8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001330:	f000 f904 	bl	800153c <Modbus_frame_response>
 8001334:	e001      	b.n	800133a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001336:	bf00      	nop
					}
		break;


	}
}
 8001338:	e021      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7d5b      	ldrb	r3, [r3, #21]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	75da      	strb	r2, [r3, #23]
		break;
 800134c:	e014      	b.n	8001378 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001358:	2b20      	cmp	r3, #32
 800135a:	d10f      	bne.n	800137c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	75da      	strb	r2, [r3, #23]
		break;
 800136e:	e005      	b.n	800137c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001370:	bf00      	nop
 8001372:	e004      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001374:	bf00      	nop
 8001376:	e002      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001378:	bf00      	nop
 800137a:	e000      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 800137c:	bf00      	nop
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000234 	.word	0x20000234

0800138c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <modbusWrite1Register+0x7c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	7e5b      	ldrb	r3, [r3, #25]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <modbusWrite1Register+0x7c>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	7e92      	ldrb	r2, [r2, #26]
 80013a2:	4413      	add	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d903      	bls.n	80013ba <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 f8a0 	bl	80014f8 <ModbusErrorReply>
			 return;
 80013b8:	e023      	b.n	8001402 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	440b      	add	r3, r1
 80013ca:	7ed2      	ldrb	r2, [r2, #27]
 80013cc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	440b      	add	r3, r1
 80013de:	7f12      	ldrb	r2, [r2, #28]
 80013e0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80013f0:	2208      	movs	r2, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	f009 f9e0 	bl	800a7b8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000234 	.word	0x20000234

0800140c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001412:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	7edb      	ldrb	r3, [r3, #27]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	4a35      	ldr	r2, [pc, #212]	@ (80014f4 <modbusRead1Register+0xe8>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	7f12      	ldrb	r2, [r2, #28]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	4a30      	ldr	r2, [pc, #192]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	7e92      	ldrb	r2, [r2, #26]
 8001436:	4413      	add	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <modbusRead1Register+0x3a>
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b7d      	cmp	r3, #125	@ 0x7d
 8001444:	d903      	bls.n	800144e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001446:	2003      	movs	r0, #3
 8001448:	f000 f856 	bl	80014f8 <ModbusErrorReply>
		 return;
 800144c:	e04e      	b.n	80014ec <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	429a      	cmp	r2, r3
 8001458:	d808      	bhi.n	800146c <modbusRead1Register+0x60>
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	d903      	bls.n	8001474 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800146c:	2002      	movs	r0, #2
 800146e:	f000 f843 	bl	80014f8 <ModbusErrorReply>
		 return;
 8001472:	e03b      	b.n	80014ec <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800148e:	2400      	movs	r4, #0
 8001490:	e020      	b.n	80014d4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	4423      	add	r3, r4
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	18d1      	adds	r1, r2, r3
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	1c63      	adds	r3, r4, #1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	7849      	ldrb	r1, [r1, #1]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	4423      	add	r3, r4
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18d1      	adds	r1, r2, r3
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	0063      	lsls	r3, r4, #1
 80014c6:	3303      	adds	r3, #3
 80014c8:	7809      	ldrb	r1, [r1, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	460a      	mov	r2, r1
 80014ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80014d2:	3401      	adds	r4, #1
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	429c      	cmp	r4, r3
 80014d8:	dbdb      	blt.n	8001492 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000234 	.word	0x20000234

080014f8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ModbusErrorReply+0x40>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	7e1a      	ldrb	r2, [r3, #24]
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <ModbusErrorReply+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <ModbusErrorReply+0x40>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <ModbusErrorReply+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000234 	.word	0x20000234

0800153c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <Modbus_frame_response+0x2c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d004      	beq.n	8001554 <Modbus_frame_response+0x18>
 800154a:	2b06      	cmp	r3, #6
 800154c:	d105      	bne.n	800155a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800154e:	f7ff ff1d 	bl	800138c <modbusWrite1Register>
		break;
 8001552:	e006      	b.n	8001562 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001554:	f7ff ff5a 	bl	800140c <modbusRead1Register>
		break;
 8001558:	e003      	b.n	8001562 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ffcc 	bl	80014f8 <ModbusErrorReply>
		break;
 8001560:	bf00      	nop

	}
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000234 	.word	0x20000234

0800156c <Modbus_Emission>:

void Modbus_Emission()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <Modbus_Emission+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157c:	2b20      	cmp	r3, #32
 800157e:	d15d      	bne.n	800163c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <Modbus_Emission+0xe8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <Modbus_Emission+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <Modbus_Emission+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001596:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001598:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <Modbus_Emission+0xe8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <Modbus_Emission+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80015a8:	461a      	mov	r2, r3
 80015aa:	f009 f905 	bl	800a7b8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <Modbus_Emission+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3203      	adds	r2, #3
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <Modbus_Emission+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015d4:	3b02      	subs	r3, #2
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff fd9f 	bl	800111c <CRC16>
 80015de:	4603      	mov	r3, r0
 80015e0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015ee:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80015f0:	7939      	ldrb	r1, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	460a      	mov	r2, r1
 80015f6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <Modbus_Emission+0xe8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <Modbus_Emission+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001606:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001608:	7979      	ldrb	r1, [r7, #5]
 800160a:	4413      	add	r3, r2
 800160c:	460a      	mov	r2, r1
 800160e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <Modbus_Emission+0xe8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161c:	2b20      	cmp	r3, #32
 800161e:	d10d      	bne.n	800163c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <Modbus_Emission+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <Modbus_Emission+0xe8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_Emission+0xe8>)
 8001630:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001632:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001636:	461a      	mov	r2, r3
 8001638:	f007 fa82 	bl	8008b40 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <Modbus_Emission+0xe8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <Modbus_Emission+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	755a      	strb	r2, [r3, #21]

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000234 	.word	0x20000234

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f002 fcb1 	bl	8003fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f974 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f000 fd3e 	bl	80020e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800166c:	f000 fcee 	bl	800204c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001670:	f000 fc52 	bl	8001f18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001674:	f000 fc9c 	bl	8001fb0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001678:	f000 f9b6 	bl	80019e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800167c:	f000 fa88 	bl	8001b90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001680:	f000 fada 	bl	8001c38 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001684:	f000 fb9c 	bl	8001dc0 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001688:	f000 fc20 	bl	8001ecc <MX_TIM16_Init>
  MX_TIM4_Init();
 800168c:	f000 fb4a 	bl	8001d24 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001690:	f000 fbe6 	bl	8001e60 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 6.1;
 8001694:	4b8c      	ldr	r3, [pc, #560]	@ (80018c8 <main+0x270>)
 8001696:	4a8d      	ldr	r2, [pc, #564]	@ (80018cc <main+0x274>)
 8001698:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 800169a:	4b8b      	ldr	r3, [pc, #556]	@ (80018c8 <main+0x270>)
 800169c:	4a8c      	ldr	r2, [pc, #560]	@ (80018d0 <main+0x278>)
 800169e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 80016a0:	4b89      	ldr	r3, [pc, #548]	@ (80018c8 <main+0x270>)
 80016a2:	4a8c      	ldr	r2, [pc, #560]	@ (80018d4 <main+0x27c>)
 80016a4:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	4887      	ldr	r0, [pc, #540]	@ (80018c8 <main+0x270>)
 80016aa:	f009 f823 	bl	800a6f4 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	4989      	ldr	r1, [pc, #548]	@ (80018d8 <main+0x280>)
 80016b2:	488a      	ldr	r0, [pc, #552]	@ (80018dc <main+0x284>)
 80016b4:	f007 fac4 	bl	8008c40 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80016b8:	4889      	ldr	r0, [pc, #548]	@ (80018e0 <main+0x288>)
 80016ba:	f004 fc27 	bl	8005f0c <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80016be:	4b89      	ldr	r3, [pc, #548]	@ (80018e4 <main+0x28c>)
 80016c0:	4a89      	ldr	r2, [pc, #548]	@ (80018e8 <main+0x290>)
 80016c2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80016c4:	4b87      	ldr	r3, [pc, #540]	@ (80018e4 <main+0x28c>)
 80016c6:	4a89      	ldr	r2, [pc, #548]	@ (80018ec <main+0x294>)
 80016c8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016ca:	4b86      	ldr	r3, [pc, #536]	@ (80018e4 <main+0x28c>)
 80016cc:	2215      	movs	r2, #21
 80016ce:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80016d0:	4b84      	ldr	r3, [pc, #528]	@ (80018e4 <main+0x28c>)
 80016d2:	22c8      	movs	r2, #200	@ 0xc8
 80016d4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80016d6:	4986      	ldr	r1, [pc, #536]	@ (80018f0 <main+0x298>)
 80016d8:	4882      	ldr	r0, [pc, #520]	@ (80018e4 <main+0x28c>)
 80016da:	f7ff fcc9 	bl	8001070 <Modbus_init>
  reed = 0;
 80016de:	4b85      	ldr	r3, [pc, #532]	@ (80018f4 <main+0x29c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 400;
 80016e4:	4b84      	ldr	r3, [pc, #528]	@ (80018f8 <main+0x2a0>)
 80016e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80016ea:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2600;
 80016ec:	4b82      	ldr	r3, [pc, #520]	@ (80018f8 <main+0x2a0>)
 80016ee:	f640 2228 	movw	r2, #2600	@ 0xa28
 80016f2:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3600;
 80016f4:	4b80      	ldr	r3, [pc, #512]	@ (80018f8 <main+0x2a0>)
 80016f6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80016fa:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4800;
 80016fc:	4b7e      	ldr	r3, [pc, #504]	@ (80018f8 <main+0x2a0>)
 80016fe:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001702:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5600;
 8001704:	4b7c      	ldr	r3, [pc, #496]	@ (80018f8 <main+0x2a0>)
 8001706:	f44f 52af 	mov.w	r2, #5600	@ 0x15e0
 800170a:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 800170c:	487b      	ldr	r0, [pc, #492]	@ (80018fc <main+0x2a4>)
 800170e:	f004 fb8d 	bl	8005e2c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	4879      	ldr	r0, [pc, #484]	@ (80018fc <main+0x2a4>)
 8001716:	f004 fd0f 	bl	8006138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800171a:	2104      	movs	r1, #4
 800171c:	4877      	ldr	r0, [pc, #476]	@ (80018fc <main+0x2a4>)
 800171e:	f004 fd0b 	bl	8006138 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001722:	213c      	movs	r1, #60	@ 0x3c
 8001724:	4876      	ldr	r0, [pc, #472]	@ (8001900 <main+0x2a8>)
 8001726:	f005 fa85 	bl	8006c34 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 800172a:	4876      	ldr	r0, [pc, #472]	@ (8001904 <main+0x2ac>)
 800172c:	f004 fb7e 	bl	8005e2c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001730:	4875      	ldr	r0, [pc, #468]	@ (8001908 <main+0x2b0>)
 8001732:	f004 fbeb 	bl	8005f0c <HAL_TIM_Base_Start_IT>
//
//  else if (position_goal < 300)
//  {
//	  pos_err = position_goal;
//  }
  registerFrame[0x00].U16 = 22881;
 8001736:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <main+0x298>)
 8001738:	f645 1261 	movw	r2, #22881	@ 0x5961
 800173c:	801a      	strh	r2, [r3, #0]
  Modbus_Protocal_Worker();
 800173e:	f7ff fd23 	bl	8001188 <Modbus_Protocal_Worker>

  buf[0] = 3;
 8001742:	4b72      	ldr	r3, [pc, #456]	@ (800190c <main+0x2b4>)
 8001744:	2203      	movs	r2, #3
 8001746:	701a      	strb	r2, [r3, #0]
  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8001748:	2204      	movs	r2, #4
 800174a:	496e      	ldr	r1, [pc, #440]	@ (8001904 <main+0x2ac>)
 800174c:	486f      	ldr	r0, [pc, #444]	@ (800190c <main+0x2b4>)
 800174e:	f002 fb2f 	bl	8003db0 <updateLED>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b6e      	ldr	r3, [pc, #440]	@ (8001910 <main+0x2b8>)
 8001758:	701a      	strb	r2, [r3, #0]
  piingpong = 0;
 800175a:	4b6e      	ldr	r3, [pc, #440]	@ (8001914 <main+0x2bc>)
 800175c:	2200      	movs	r2, #0
 800175e:	801a      	strh	r2, [r3, #0]
  uint8_t result = HomeZ();
 8001760:	f002 fbcc 	bl	8003efc <HomeZ>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(2000);
 8001768:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800176c:	f002 fc9c 	bl	80040a8 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001770:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <main+0x2a8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001778:	4b67      	ldr	r3, [pc, #412]	@ (8001918 <main+0x2c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe feaf 	bl	80004e0 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 80018c0 <main+0x268>
 800178a:	ec43 2b10 	vmov	d0, r2, r3
 800178e:	f000 ff63 	bl	8002658 <generate_trapezoidal_velocity_profile>
  Home = 0;
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <main+0x2c4>)
 8001794:	2200      	movs	r2, #0
 8001796:	801a      	strh	r2, [r3, #0]
  rou = 0;
 8001798:	4b61      	ldr	r3, [pc, #388]	@ (8001920 <main+0x2c8>)
 800179a:	2200      	movs	r2, #0
 800179c:	801a      	strh	r2, [r3, #0]
//	  Mode = 1;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 800179e:	f7ff fcf3 	bl	8001188 <Modbus_Protocal_Worker>
	  BaseAction();
 80017a2:	f001 f979 	bl	8002a98 <BaseAction>
	  OrderSeparate();
 80017a6:	f001 fd3d 	bl	8003224 <OrderSeparate>
	  ControlJoy();
 80017aa:	f000 fd5d 	bl	8002268 <ControlJoy>
//		  currentTime = 0;
//		  _micros = 0;
////		  end = 0;

	  static uint64_t timestampqei =0;
	  int64_t currentTimeqei = micros();
 80017ae:	f001 fe7b 	bl	80034a8 <micros>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTimeqei > timestampqei)
 80017ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017be:	4959      	ldr	r1, [pc, #356]	@ (8001924 <main+0x2cc>)
 80017c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017c4:	4290      	cmp	r0, r2
 80017c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80017ca:	d20c      	bcs.n	80017e6 <main+0x18e>
	  {
		  timestampqei = currentTimeqei + 100000;//us
 80017cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017d0:	4955      	ldr	r1, [pc, #340]	@ (8001928 <main+0x2d0>)
 80017d2:	1854      	adds	r4, r2, r1
 80017d4:	f143 0500 	adc.w	r5, r3, #0
 80017d8:	4622      	mov	r2, r4
 80017da:	462b      	mov	r3, r5
 80017dc:	4951      	ldr	r1, [pc, #324]	@ (8001924 <main+0x2cc>)
 80017de:	e9c1 2300 	strd	r2, r3, [r1]
	  	  ACC_Update();
 80017e2:	f001 ff0b 	bl	80035fc <ACC_Update>
	  }

//	  }
	  if(fin == 1 && fabs(((setPos+16) - qeifloat/10)) >= 0.5)
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <main+0x2d4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d144      	bne.n	8001878 <main+0x220>
 80017ee:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <main+0x2d8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3310      	adds	r3, #16
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001934 <main+0x2dc>)
 80017fe:	edd3 6a00 	vldr	s13, [r3]
 8001802:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8001806:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	eef0 7ae7 	vabs.f32	s15, s15
 8001812:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	db2b      	blt.n	8001878 <main+0x220>
	  {
		  generate_trapezoidal_velocity_profile(time_op,(setPos/10.0)+16.0);
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <main+0x2c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe5b 	bl	80004e0 <__aeabi_f2d>
 800182a:	4680      	mov	r8, r0
 800182c:	4689      	mov	r9, r1
 800182e:	4b40      	ldr	r3, [pc, #256]	@ (8001930 <main+0x2d8>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe42 	bl	80004bc <__aeabi_i2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <main+0x2e0>)
 800183e:	f7fe ffd1 	bl	80007e4 <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <main+0x2e4>)
 8001850:	f7fe fce8 	bl	8000224 <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	ec43 2b17 	vmov	d7, r2, r3
 800185c:	eeb0 1a47 	vmov.f32	s2, s14
 8001860:	eef0 1a67 	vmov.f32	s3, s15
 8001864:	ec49 8b10 	vmov	d0, r8, r9
 8001868:	f000 fef6 	bl	8002658 <generate_trapezoidal_velocity_profile>
		  Mode = 1;
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <main+0x2e8>)
 800186e:	2201      	movs	r2, #1
 8001870:	801a      	strh	r2, [r3, #0]
		  fin = 0;
 8001872:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <main+0x2d4>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	  }
	  xx = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001878:	2140      	movs	r1, #64	@ 0x40
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f003 f9f9 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <main+0x2ec>)
 8001888:	701a      	strb	r2, [r3, #0]
//	  }
	  //TRAJECTORY


	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <main+0x2a8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <main+0x2f0>)
 8001892:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2))*(60.00/8192);
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <main+0x2a8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdfe 	bl	800049c <__aeabi_ui2d>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <main+0x2f4>)
 80018a6:	f7fe fe73 	bl	8000590 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f8c7 	bl	8000a44 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <main+0x2dc>)
 80018ba:	6013      	str	r3, [r2, #0]
  {
 80018bc:	e76f      	b.n	800179e <main+0x146>
 80018be:	bf00      	nop
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40300000 	.word	0x40300000
 80018c8:	200011e8 	.word	0x200011e8
 80018cc:	40c33333 	.word	0x40c33333
 80018d0:	3a83126f 	.word	0x3a83126f
 80018d4:	3c23d70a 	.word	0x3c23d70a
 80018d8:	20000ae4 	.word	0x20000ae4
 80018dc:	2000082c 	.word	0x2000082c
 80018e0:	20000568 	.word	0x20000568
 80018e4:	20000af8 	.word	0x20000af8
 80018e8:	200008f8 	.word	0x200008f8
 80018ec:	20000700 	.word	0x20000700
 80018f0:	20000fe8 	.word	0x20000fe8
 80018f4:	20000fd6 	.word	0x20000fd6
 80018f8:	20001178 	.word	0x20001178
 80018fc:	20000238 	.word	0x20000238
 8001900:	20000304 	.word	0x20000304
 8001904:	200003d0 	.word	0x200003d0
 8001908:	20000634 	.word	0x20000634
 800190c:	20000208 	.word	0x20000208
 8001910:	20001216 	.word	0x20001216
 8001914:	20000fd2 	.word	0x20000fd2
 8001918:	20000200 	.word	0x20000200
 800191c:	200011de 	.word	0x200011de
 8001920:	20001214 	.word	0x20001214
 8001924:	20001268 	.word	0x20001268
 8001928:	000186a0 	.word	0x000186a0
 800192c:	20001217 	.word	0x20001217
 8001930:	20001182 	.word	0x20001182
 8001934:	20000aec 	.word	0x20000aec
 8001938:	40240000 	.word	0x40240000
 800193c:	40300000 	.word	0x40300000
 8001940:	200011dc 	.word	0x200011dc
 8001944:	200011a5 	.word	0x200011a5
 8001948:	20000ae8 	.word	0x20000ae8
 800194c:	3f7e0000 	.word	0x3f7e0000

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	@ 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2238      	movs	r2, #56	@ 0x38
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fefe 	bl	800a760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001972:	2000      	movs	r0, #0
 8001974:	f003 f9c6 	bl	8004d04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001982:	2340      	movs	r3, #64	@ 0x40
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001986:	2302      	movs	r3, #2
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800198a:	2302      	movs	r3, #2
 800198c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800198e:	2304      	movs	r3, #4
 8001990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001992:	2355      	movs	r3, #85	@ 0x55
 8001994:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001996:	2302      	movs	r3, #2
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800199a:	2302      	movs	r3, #2
 800199c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800199e:	2302      	movs	r3, #2
 80019a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fa60 	bl	8004e6c <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019b2:	f001 fe5b 	bl	800366c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b6:	230f      	movs	r3, #15
 80019b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ba:	2303      	movs	r3, #3
 80019bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2104      	movs	r1, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fd5e 	bl	8005490 <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019da:	f001 fe47 	bl	800366c <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	@ 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b09e      	sub	sp, #120	@ 0x78
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001a08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2234      	movs	r2, #52	@ 0x34
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f008 fe96 	bl	800a760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a34:	4b54      	ldr	r3, [pc, #336]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a36:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <MX_TIM1_Init+0x1a4>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001a3a:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a46:	4b50      	ldr	r3, [pc, #320]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a54:	4b4c      	ldr	r3, [pc, #304]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a60:	4849      	ldr	r0, [pc, #292]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a62:	f004 f97f 	bl	8005d64 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001a6c:	f001 fdfe 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4842      	ldr	r0, [pc, #264]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a7e:	f005 fbf5 	bl	800726c <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a88:	f001 fdf0 	bl	800366c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8c:	483e      	ldr	r0, [pc, #248]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001a8e:	f004 fae5 	bl	800605c <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a98:	f001 fde8 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4836      	ldr	r0, [pc, #216]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001ab0:	f006 fc90 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001aba:	f001 fdd7 	bl	800366c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001aca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	482d      	ldr	r0, [pc, #180]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001ad4:	f006 fda8 	bl	8008628 <HAL_TIMEx_ConfigBreakInput>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001ade:	f001 fdc5 	bl	800366c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	@ 0x60
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aee:	2300      	movs	r3, #0
 8001af0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4820      	ldr	r0, [pc, #128]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001b08:	f005 fa9c 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001b12:	f001 fdab 	bl	800366c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001b20:	f005 fa90 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001b2a:	f001 fd9f 	bl	800366c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001b6c:	f006 fcc8 	bl	8008500 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001b76:	f001 fd79 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b7a:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <MX_TIM1_Init+0x1a0>)
 8001b7c:	f001 fee6 	bl	800394c <HAL_TIM_MspPostInit>

}
 8001b80:	bf00      	nop
 8001b82:	3778      	adds	r7, #120	@ 0x78
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000238 	.word	0x20000238
 8001b8c:	40012c00 	.word	0x40012c00

08001b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	@ 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f008 fdde 	bl	800a760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bae:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001c02:	f004 ff63 	bl	8006acc <HAL_TIM_Encoder_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001c0c:	f001 fd2e 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_TIM2_Init+0xa4>)
 8001c1e:	f006 fbd9 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c28:	f001 fd20 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	@ 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000304 	.word	0x20000304

08001c38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	@ 0x38
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d20 <MX_TIM3_Init+0xe8>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c7e:	226a      	movs	r2, #106	@ 0x6a
 8001c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c8e:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001c90:	f004 f868 	bl	8005d64 <HAL_TIM_Base_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c9a:	f001 fce7 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481c      	ldr	r0, [pc, #112]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001cac:	f005 fade 	bl	800726c <HAL_TIM_ConfigClockSource>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cb6:	f001 fcd9 	bl	800366c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cba:	4818      	ldr	r0, [pc, #96]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001cbc:	f004 f9ce 	bl	800605c <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cc6:	f001 fcd1 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4810      	ldr	r0, [pc, #64]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001cda:	f006 fb7b 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ce4:	f001 fcc2 	bl	800366c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce8:	2360      	movs	r3, #96	@ 0x60
 8001cea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001d00:	f005 f9a0 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d0a:	f001 fcaf 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MX_TIM3_Init+0xe4>)
 8001d10:	f001 fe1c 	bl	800394c <HAL_TIM_MspPostInit>

}
 8001d14:	bf00      	nop
 8001d16:	3738      	adds	r7, #56	@ 0x38
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200003d0 	.word	0x200003d0
 8001d20:	40000400 	.word	0x40000400

08001d24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d44:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <MX_TIM4_Init+0x98>)
 8001d46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d4a:	22a9      	movs	r2, #169	@ 0xa9
 8001d4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001d54:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d6a:	f003 fffb 	bl	8005d64 <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001d74:	f001 fc7a 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001d86:	f005 fa71 	bl	800726c <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d90:	f001 fc6c 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_TIM4_Init+0x94>)
 8001da2:	f006 fb17 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001dac:	f001 fc5e 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000049c 	.word	0x2000049c
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001de0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <MX_TIM5_Init+0x9c>)
 8001de2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001de6:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001dea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001df4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001df8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e06:	4814      	ldr	r0, [pc, #80]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001e08:	f003 ffac 	bl	8005d64 <HAL_TIM_Base_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001e12:	f001 fc2b 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001e24:	f005 fa22 	bl	800726c <HAL_TIM_ConfigClockSource>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001e2e:	f001 fc1d 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <MX_TIM5_Init+0x98>)
 8001e40:	f006 fac8 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e4a:	f001 fc0f 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000568 	.word	0x20000568
 8001e5c:	40000c00 	.word	0x40000c00

08001e60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <MX_TIM7_Init+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e78:	22a9      	movs	r2, #169	@ 0xa9
 8001e7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001e92:	f003 ff67 	bl	8005d64 <HAL_TIM_Base_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e9c:	f001 fbe6 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_TIM7_Init+0x64>)
 8001eae:	f006 fa91 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001eb8:	f001 fbd8 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000634 	.word	0x20000634
 8001ec8:	40001400 	.word	0x40001400

08001ecc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <MX_TIM16_Init+0x48>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ed8:	22a9      	movs	r2, #169	@ 0xa9
 8001eda:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ee4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <MX_TIM16_Init+0x44>)
 8001efe:	f003 ff31 	bl	8005d64 <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f08:	f001 fbb0 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000700 	.word	0x20000700
 8001f14:	40014400 	.word	0x40014400

08001f18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f1e:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <MX_USART1_UART_Init+0x94>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f22:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4e:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f60:	4811      	ldr	r0, [pc, #68]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f62:	f006 fcd3 	bl	800890c <HAL_UART_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f6c:	f001 fb7e 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f70:	2100      	movs	r1, #0
 8001f72:	480d      	ldr	r0, [pc, #52]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f74:	f008 faf3 	bl	800a55e <HAL_UARTEx_SetTxFifoThreshold>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f7e:	f001 fb75 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f82:	2100      	movs	r1, #0
 8001f84:	4808      	ldr	r0, [pc, #32]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f86:	f008 fb28 	bl	800a5da <HAL_UARTEx_SetRxFifoThreshold>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f90:	f001 fb6c 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f96:	f008 faa9 	bl	800a4ec <HAL_UARTEx_DisableFifoMode>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f001 fb64 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000082c 	.word	0x2000082c
 8001fac:	40013800 	.word	0x40013800

08001fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fb6:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <MX_USART2_UART_Init+0x98>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fbc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fc8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffc:	4811      	ldr	r0, [pc, #68]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8001ffe:	f006 fc85 	bl	800890c <HAL_UART_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002008:	f001 fb30 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200c:	2100      	movs	r1, #0
 800200e:	480d      	ldr	r0, [pc, #52]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8002010:	f008 faa5 	bl	800a55e <HAL_UARTEx_SetTxFifoThreshold>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800201a:	f001 fb27 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	4808      	ldr	r0, [pc, #32]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8002022:	f008 fada 	bl	800a5da <HAL_UARTEx_SetRxFifoThreshold>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800202c:	f001 fb1e 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	@ (8002044 <MX_USART2_UART_Init+0x94>)
 8002032:	f008 fa5b 	bl	800a4ec <HAL_UARTEx_DisableFifoMode>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800203c:	f001 fb16 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200008f8 	.word	0x200008f8
 8002048:	40004400 	.word	0x40004400

0800204c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002056:	4a23      	ldr	r2, [pc, #140]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6493      	str	r3, [r2, #72]	@ 0x48
 800205e:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <MX_DMA_Init+0x98>)
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	4a1d      	ldr	r2, [pc, #116]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6493      	str	r3, [r2, #72]	@ 0x48
 8002076:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6493      	str	r3, [r2, #72]	@ 0x48
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <MX_DMA_Init+0x98>)
 8002090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	200b      	movs	r0, #11
 80020a0:	f002 f8ff 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020a4:	200b      	movs	r0, #11
 80020a6:	f002 f916 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	200c      	movs	r0, #12
 80020b0:	f002 f8f7 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020b4:	200c      	movs	r0, #12
 80020b6:	f002 f90e 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	200d      	movs	r0, #13
 80020c0:	f002 f8ef 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f002 f906 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2039      	movs	r0, #57	@ 0x39
 80020d0:	f002 f8e7 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80020d4:	2039      	movs	r0, #57	@ 0x39
 80020d6:	f002 f8fe 	bl	80042d6 <HAL_NVIC_EnableIRQ>

}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4b57      	ldr	r3, [pc, #348]	@ (800225c <MX_GPIO_Init+0x174>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a56      	ldr	r2, [pc, #344]	@ (800225c <MX_GPIO_Init+0x174>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b54      	ldr	r3, [pc, #336]	@ (800225c <MX_GPIO_Init+0x174>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002116:	4b51      	ldr	r3, [pc, #324]	@ (800225c <MX_GPIO_Init+0x174>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a50      	ldr	r2, [pc, #320]	@ (800225c <MX_GPIO_Init+0x174>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b4e      	ldr	r3, [pc, #312]	@ (800225c <MX_GPIO_Init+0x174>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <MX_GPIO_Init+0x174>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <MX_GPIO_Init+0x174>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b48      	ldr	r3, [pc, #288]	@ (800225c <MX_GPIO_Init+0x174>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b45      	ldr	r3, [pc, #276]	@ (800225c <MX_GPIO_Init+0x174>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a44      	ldr	r2, [pc, #272]	@ (800225c <MX_GPIO_Init+0x174>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b42      	ldr	r3, [pc, #264]	@ (800225c <MX_GPIO_Init+0x174>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f240 6111 	movw	r1, #1553	@ 0x611
 8002164:	483e      	ldr	r0, [pc, #248]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002166:	f002 fd9d 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	483d      	ldr	r0, [pc, #244]	@ (8002264 <MX_GPIO_Init+0x17c>)
 8002170:	f002 fd98 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800217e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4836      	ldr	r0, [pc, #216]	@ (8002264 <MX_GPIO_Init+0x17c>)
 800218c:	f002 fbf0 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002198:	2301      	movs	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a6:	f002 fbe3 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9;
 80021aa:	f240 6311 	movw	r3, #1553	@ 0x611
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4827      	ldr	r0, [pc, #156]	@ (8002260 <MX_GPIO_Init+0x178>)
 80021c4:	f002 fbd4 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4821      	ldr	r0, [pc, #132]	@ (8002264 <MX_GPIO_Init+0x17c>)
 80021e0:	f002 fbc6 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80021ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f002 fbb7 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002202:	2320      	movs	r3, #32
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002206:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220c:	2301      	movs	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4812      	ldr	r0, [pc, #72]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002218:	f002 fbaa 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800221c:	2340      	movs	r3, #64	@ 0x40
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002224:	2301      	movs	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	480c      	ldr	r0, [pc, #48]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002230:	f002 fb9e 	bl	8004970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2017      	movs	r0, #23
 800223a:	f002 f832 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800223e:	2017      	movs	r0, #23
 8002240:	f002 f849 	bl	80042d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2028      	movs	r0, #40	@ 0x28
 800224a:	f002 f82a 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800224e:	2028      	movs	r0, #40	@ 0x28
 8002250:	f002 f841 	bl	80042d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	48000400 	.word	0x48000400
 8002264:	48000800 	.word	0x48000800

08002268 <ControlJoy>:

/* USER CODE BEGIN 4 */
void ControlJoy(){
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x0)
 800226c:	4b9c      	ldr	r3, [pc, #624]	@ (80024e0 <ControlJoy+0x278>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d113      	bne.n	800229c <ControlJoy+0x34>
 8002274:	4b9b      	ldr	r3, [pc, #620]	@ (80024e4 <ControlJoy+0x27c>)
 8002276:	8c1b      	ldrh	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <ControlJoy+0x34>
	  {
		  generate_trapezoidal_velocity_profile(time_op,16.0);
 800227c:	4b9a      	ldr	r3, [pc, #616]	@ (80024e8 <ControlJoy+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f92d 	bl	80004e0 <__aeabi_f2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	ed9f 1b93 	vldr	d1, [pc, #588]	@ 80024d8 <ControlJoy+0x270>
 800228e:	ec43 2b10 	vmov	d0, r2, r3
 8002292:	f000 f9e1 	bl	8002658 <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0;
 8002296:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <ControlJoy+0x278>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]

	  }

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x1)
 800229c:	4b90      	ldr	r3, [pc, #576]	@ (80024e0 <ControlJoy+0x278>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b80      	cmp	r3, #128	@ 0x80
 80022a2:	f040 80b9 	bne.w	8002418 <ControlJoy+0x1b0>
 80022a6:	4b8f      	ldr	r3, [pc, #572]	@ (80024e4 <ControlJoy+0x27c>)
 80022a8:	8c1b      	ldrh	r3, [r3, #32]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f040 80b4 	bne.w	8002418 <ControlJoy+0x1b0>
	  				{
	  					if (TT == 0)
 80022b0:	4b8e      	ldr	r3, [pc, #568]	@ (80024ec <ControlJoy+0x284>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d114      	bne.n	80022ea <ControlJoy+0x82>
	  					{
	  						shelfPos[0] = qeifloat*10.0;
 80022c0:	4b8b      	ldr	r3, [pc, #556]	@ (80024f0 <ControlJoy+0x288>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f90b 	bl	80004e0 <__aeabi_f2d>
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b89      	ldr	r3, [pc, #548]	@ (80024f4 <ControlJoy+0x28c>)
 80022d0:	f7fe f95e 	bl	8000590 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fb92 	bl	8000a04 <__aeabi_d2uiz>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b84      	ldr	r3, [pc, #528]	@ (80024f8 <ControlJoy+0x290>)
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	e088      	b.n	80023fc <ControlJoy+0x194>

	  					}

	  					else if (TT == 1)
 80022ea:	4b80      	ldr	r3, [pc, #512]	@ (80024ec <ControlJoy+0x284>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022f4:	eef4 7a47 	vcmp.f32	s15, s14
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d114      	bne.n	8002328 <ControlJoy+0xc0>
	  							{
	  						shelfPos[1] = qeifloat*10.0;
 80022fe:	4b7c      	ldr	r3, [pc, #496]	@ (80024f0 <ControlJoy+0x288>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8ec 	bl	80004e0 <__aeabi_f2d>
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	4b79      	ldr	r3, [pc, #484]	@ (80024f4 <ControlJoy+0x28c>)
 800230e:	f7fe f93f 	bl	8000590 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fb73 	bl	8000a04 <__aeabi_d2uiz>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b75      	ldr	r3, [pc, #468]	@ (80024f8 <ControlJoy+0x290>)
 8002324:	805a      	strh	r2, [r3, #2]
 8002326:	e069      	b.n	80023fc <ControlJoy+0x194>

	  							}

	  					else if (TT == 2)
 8002328:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <ControlJoy+0x284>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002332:	eef4 7a47 	vcmp.f32	s15, s14
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d114      	bne.n	8002366 <ControlJoy+0xfe>
	  							{
	  						shelfPos[2] = qeifloat*10.0;
 800233c:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <ControlJoy+0x288>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8cd 	bl	80004e0 <__aeabi_f2d>
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <ControlJoy+0x28c>)
 800234c:	f7fe f920 	bl	8000590 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fb54 	bl	8000a04 <__aeabi_d2uiz>
 800235c:	4603      	mov	r3, r0
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b65      	ldr	r3, [pc, #404]	@ (80024f8 <ControlJoy+0x290>)
 8002362:	809a      	strh	r2, [r3, #4]
 8002364:	e04a      	b.n	80023fc <ControlJoy+0x194>

	  							}

	  					else if (TT == 3)
 8002366:	4b61      	ldr	r3, [pc, #388]	@ (80024ec <ControlJoy+0x284>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002370:	eef4 7a47 	vcmp.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d114      	bne.n	80023a4 <ControlJoy+0x13c>
	  							{
	  						shelfPos[3] = qeifloat*10.0;
 800237a:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <ControlJoy+0x288>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8ae 	bl	80004e0 <__aeabi_f2d>
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b5a      	ldr	r3, [pc, #360]	@ (80024f4 <ControlJoy+0x28c>)
 800238a:	f7fe f901 	bl	8000590 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f7fe fb35 	bl	8000a04 <__aeabi_d2uiz>
 800239a:	4603      	mov	r3, r0
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <ControlJoy+0x290>)
 80023a0:	80da      	strh	r2, [r3, #6]
 80023a2:	e02b      	b.n	80023fc <ControlJoy+0x194>

	  							}

	  					else if (TT == 4)
 80023a4:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <ControlJoy+0x284>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023ae:	eef4 7a47 	vcmp.f32	s15, s14
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d114      	bne.n	80023e2 <ControlJoy+0x17a>
	  							{
	  						shelfPos[4] = qeifloat*10.0;
 80023b8:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <ControlJoy+0x288>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f88f 	bl	80004e0 <__aeabi_f2d>
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	4b4b      	ldr	r3, [pc, #300]	@ (80024f4 <ControlJoy+0x28c>)
 80023c8:	f7fe f8e2 	bl	8000590 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fb16 	bl	8000a04 <__aeabi_d2uiz>
 80023d8:	4603      	mov	r3, r0
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b46      	ldr	r3, [pc, #280]	@ (80024f8 <ControlJoy+0x290>)
 80023de:	811a      	strh	r2, [r3, #8]
 80023e0:	e00c      	b.n	80023fc <ControlJoy+0x194>

	  							}
	  					else if ( TT >=  5)
 80023e2:	4b42      	ldr	r3, [pc, #264]	@ (80024ec <ControlJoy+0x284>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	db02      	blt.n	80023fc <ControlJoy+0x194>
	  					{
	  						flagShelf = 1;
 80023f6:	4b41      	ldr	r3, [pc, #260]	@ (80024fc <ControlJoy+0x294>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
	  					}
	  					TT += 1;
 80023fc:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <ControlJoy+0x284>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <ControlJoy+0x284>)
 800240c:	edc3 7a00 	vstr	s15, [r3]
	  					joystickPayload[0] = 0;
 8002410:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <ControlJoy+0x278>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e088      	b.n	800252a <ControlJoy+0x2c2>
	  				}

	  else if ( joystickPayload[0] == 0x40)
 8002418:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <ControlJoy+0x278>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b40      	cmp	r3, #64	@ 0x40
 800241e:	d109      	bne.n	8002434 <ControlJoy+0x1cc>
		{
//		  //generate_trapezoidal_velocity_profile(time_op, ((setPos/10.0) + 0.1));
		  setPos += 1;
 8002420:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <ControlJoy+0x298>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <ControlJoy+0x298>)
 800242a:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 800242c:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <ControlJoy+0x278>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e07a      	b.n	800252a <ControlJoy+0x2c2>
		}
	  else if ( joystickPayload[0] == 0x41)
 8002434:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <ControlJoy+0x278>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b41      	cmp	r3, #65	@ 0x41
 800243a:	d109      	bne.n	8002450 <ControlJoy+0x1e8>
	  		{
		  setPos += 10;
 800243c:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <ControlJoy+0x298>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	330a      	adds	r3, #10
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <ControlJoy+0x298>)
 8002446:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 8002448:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <ControlJoy+0x278>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e06c      	b.n	800252a <ControlJoy+0x2c2>
	  		}
	  else if ( joystickPayload[0] == 0x42)
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <ControlJoy+0x278>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b42      	cmp	r3, #66	@ 0x42
 8002456:	d109      	bne.n	800246c <ControlJoy+0x204>
	  		{
		  setPos += 100;
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <ControlJoy+0x298>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	3364      	adds	r3, #100	@ 0x64
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <ControlJoy+0x298>)
 8002462:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <ControlJoy+0x278>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e05e      	b.n	800252a <ControlJoy+0x2c2>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <ControlJoy+0x278>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b43      	cmp	r3, #67	@ 0x43
 8002472:	d10a      	bne.n	800248a <ControlJoy+0x222>
	  		{
		  setPos += 1000;
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <ControlJoy+0x298>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <ControlJoy+0x298>)
 8002480:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <ControlJoy+0x278>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e04f      	b.n	800252a <ControlJoy+0x2c2>
//	  else if ( joystickPayload[0] == 0x00)
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  	  else if ( joystickPayload[0] == 0x01 && (setPos-10) >= 0)
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <ControlJoy+0x278>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10d      	bne.n	80024ae <ControlJoy+0x246>
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <ControlJoy+0x298>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	2b09      	cmp	r3, #9
 8002498:	d909      	bls.n	80024ae <ControlJoy+0x246>
	  	  		{
	  		setPos -= 10;
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <ControlJoy+0x298>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	3b0a      	subs	r3, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <ControlJoy+0x298>)
 80024a4:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <ControlJoy+0x278>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e03d      	b.n	800252a <ControlJoy+0x2c2>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02 && (setPos-100) >= 0)
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <ControlJoy+0x278>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d126      	bne.n	8002504 <ControlJoy+0x29c>
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <ControlJoy+0x298>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	2b63      	cmp	r3, #99	@ 0x63
 80024bc:	d922      	bls.n	8002504 <ControlJoy+0x29c>
	  	  		{
	  		setPos -= 100;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <ControlJoy+0x298>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	3b64      	subs	r3, #100	@ 0x64
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <ControlJoy+0x298>)
 80024c8:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <ControlJoy+0x278>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e02b      	b.n	800252a <ControlJoy+0x2c2>
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40300000 	.word	0x40300000
 80024e0:	20000ae4 	.word	0x20000ae4
 80024e4:	20000fe8 	.word	0x20000fe8
 80024e8:	20000200 	.word	0x20000200
 80024ec:	20000af0 	.word	0x20000af0
 80024f0:	20000aec 	.word	0x20000aec
 80024f4:	40240000 	.word	0x40240000
 80024f8:	20001178 	.word	0x20001178
 80024fc:	20000fd0 	.word	0x20000fd0
 8002500:	20001182 	.word	0x20001182
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03 && (setPos-1000) >= 0)
 8002504:	4b4e      	ldr	r3, [pc, #312]	@ (8002640 <ControlJoy+0x3d8>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d10e      	bne.n	800252a <ControlJoy+0x2c2>
 800250c:	4b4d      	ldr	r3, [pc, #308]	@ (8002644 <ControlJoy+0x3dc>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002514:	d309      	bcc.n	800252a <ControlJoy+0x2c2>
	  	  		{
	  		setPos -= 1000;
 8002516:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <ControlJoy+0x3dc>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800251e:	b29a      	uxth	r2, r3
 8002520:	4b48      	ldr	r3, [pc, #288]	@ (8002644 <ControlJoy+0x3dc>)
 8002522:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 8002524:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <ControlJoy+0x3d8>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	  	  		}

	  	  if ( joystickPayload[0] == 0x82 )
 800252a:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <ControlJoy+0x3d8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b82      	cmp	r3, #130	@ 0x82
 8002530:	d120      	bne.n	8002574 <ControlJoy+0x30c>
	  	  {
	  		  if (Va == 0)
 8002532:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <ControlJoy+0x3e0>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <ControlJoy+0x2ec>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002540:	4842      	ldr	r0, [pc, #264]	@ (800264c <ControlJoy+0x3e4>)
 8002542:	f002 fbaf 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			Va = 1;
 8002546:	4b40      	ldr	r3, [pc, #256]	@ (8002648 <ControlJoy+0x3e0>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
		  		joystickPayload[0] = 0 ;
 800254c:	4b3c      	ldr	r3, [pc, #240]	@ (8002640 <ControlJoy+0x3d8>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e00f      	b.n	8002574 <ControlJoy+0x30c>
	  		  }
	  		  else if ( Va == 1)
 8002554:	4b3c      	ldr	r3, [pc, #240]	@ (8002648 <ControlJoy+0x3e0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10b      	bne.n	8002574 <ControlJoy+0x30c>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002562:	483a      	ldr	r0, [pc, #232]	@ (800264c <ControlJoy+0x3e4>)
 8002564:	f002 fb9e 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			Va = 0;
 8002568:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <ControlJoy+0x3e0>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
 800256e:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <ControlJoy+0x3d8>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }

	  	  if ( joystickPayload[0] == 0x81 )
 8002574:	4b32      	ldr	r3, [pc, #200]	@ (8002640 <ControlJoy+0x3d8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b81      	cmp	r3, #129	@ 0x81
 800257a:	d15e      	bne.n	800263a <ControlJoy+0x3d2>
	  	  {
	  		 if (C == 0)
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <ControlJoy+0x3e8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d12b      	bne.n	80025dc <ControlJoy+0x374>
	  		 {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800258a:	4830      	ldr	r0, [pc, #192]	@ (800264c <ControlJoy+0x3e4>)
 800258c:	f002 fb8a 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002590:	2201      	movs	r2, #1
 8002592:	2180      	movs	r1, #128	@ 0x80
 8002594:	482f      	ldr	r0, [pc, #188]	@ (8002654 <ControlJoy+0x3ec>)
 8002596:	f002 fb85 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET )
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a0:	f002 fb68 	bl	8004c74 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d111      	bne.n	80025ce <ControlJoy+0x366>
 80025aa:	2140      	movs	r1, #64	@ 0x40
 80025ac:	4827      	ldr	r0, [pc, #156]	@ (800264c <ControlJoy+0x3e4>)
 80025ae:	f002 fb61 	bl	8004c74 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <ControlJoy+0x366>
	  				{
	  				  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80025b8:	2201      	movs	r2, #1
 80025ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025be:	4823      	ldr	r0, [pc, #140]	@ (800264c <ControlJoy+0x3e4>)
 80025c0:	f002 fb70 	bl	8004ca4 <HAL_GPIO_WritePin>
	  				  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 80025c4:	2201      	movs	r2, #1
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	4822      	ldr	r0, [pc, #136]	@ (8002654 <ControlJoy+0x3ec>)
 80025ca:	f002 fb6b 	bl	8004ca4 <HAL_GPIO_WritePin>
	  				}
	  			joystickPayload[0] = 0 ;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <ControlJoy+0x3d8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
	  			C = 1;
 80025d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <ControlJoy+0x3e8>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
	  			C = 0;
	  		 }
	  	  }

}
 80025da:	e02e      	b.n	800263a <ControlJoy+0x3d2>
	  		 else if ( C == 1)
 80025dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <ControlJoy+0x3e8>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d12a      	bne.n	800263a <ControlJoy+0x3d2>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80025e4:	2201      	movs	r2, #1
 80025e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025ea:	4818      	ldr	r0, [pc, #96]	@ (800264c <ControlJoy+0x3e4>)
 80025ec:	f002 fb5a 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 80025f0:	2200      	movs	r2, #0
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	4817      	ldr	r0, [pc, #92]	@ (8002654 <ControlJoy+0x3ec>)
 80025f6:	f002 fb55 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET )
 80025fa:	2140      	movs	r1, #64	@ 0x40
 80025fc:	4813      	ldr	r0, [pc, #76]	@ (800264c <ControlJoy+0x3e4>)
 80025fe:	f002 fb39 	bl	8004c74 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d112      	bne.n	800262e <ControlJoy+0x3c6>
 8002608:	2180      	movs	r1, #128	@ 0x80
 800260a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800260e:	f002 fb31 	bl	8004c74 <HAL_GPIO_ReadPin>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <ControlJoy+0x3c6>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800261e:	480b      	ldr	r0, [pc, #44]	@ (800264c <ControlJoy+0x3e4>)
 8002620:	f002 fb40 	bl	8004ca4 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002624:	2201      	movs	r2, #1
 8002626:	2180      	movs	r1, #128	@ 0x80
 8002628:	480a      	ldr	r0, [pc, #40]	@ (8002654 <ControlJoy+0x3ec>)
 800262a:	f002 fb3b 	bl	8004ca4 <HAL_GPIO_WritePin>
	  			joystickPayload[0] = 0 ;
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <ControlJoy+0x3d8>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
	  			C = 0;
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <ControlJoy+0x3e8>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000ae4 	.word	0x20000ae4
 8002644:	20001182 	.word	0x20001182
 8002648:	20000af5 	.word	0x20000af5
 800264c:	48000400 	.word	0x48000400
 8002650:	20000af4 	.word	0x20000af4
 8002654:	48000800 	.word	0x48000800

08002658 <generate_trapezoidal_velocity_profile>:
///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002662:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 8002666:	4b29      	ldr	r3, [pc, #164]	@ (800270c <generate_trapezoidal_velocity_profile+0xb4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff38 	bl	80004e0 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002678:	f7fd fdd2 	bl	8000220 <__aeabi_dsub>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe f9de 	bl	8000a44 <__aeabi_d2f>
 8002688:	4603      	mov	r3, r0
 800268a:	4a21      	ldr	r2, [pc, #132]	@ (8002710 <generate_trapezoidal_velocity_profile+0xb8>)
 800268c:	6013      	str	r3, [r2, #0]
	total_time = t2;
 800268e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002692:	f7fe f9d7 	bl	8000a44 <__aeabi_d2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <generate_trapezoidal_velocity_profile+0xbc>)
 800269a:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <generate_trapezoidal_velocity_profile+0xbc>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80026a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <generate_trapezoidal_velocity_profile+0xc0>)
 80026ac:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <generate_trapezoidal_velocity_profile+0xbc>)
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <generate_trapezoidal_velocity_profile+0xc0>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	4b15      	ldr	r3, [pc, #84]	@ (800271c <generate_trapezoidal_velocity_profile+0xc4>)
 80026c6:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 80026ca:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <generate_trapezoidal_velocity_profile+0xb8>)
 80026cc:	edd3 6a00 	vldr	s13, [r3]
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <generate_trapezoidal_velocity_profile+0xc0>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <generate_trapezoidal_velocity_profile+0xc4>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <generate_trapezoidal_velocity_profile+0xc8>)
 80026e6:	edc3 7a00 	vstr	s15, [r3]

	HAL_TIM_Base_Start_IT(&htim4);
 80026ea:	480e      	ldr	r0, [pc, #56]	@ (8002724 <generate_trapezoidal_velocity_profile+0xcc>)
 80026ec:	f003 fc0e 	bl	8005f0c <HAL_TIM_Base_Start_IT>
	piingpong = 0;
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <generate_trapezoidal_velocity_profile+0xd0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	801a      	strh	r2, [r3, #0]
	fin = 0;
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <generate_trapezoidal_velocity_profile+0xd4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
	Mode = 0;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <generate_trapezoidal_velocity_profile+0xd8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]

  }
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000aec 	.word	0x20000aec
 8002710:	200011b0 	.word	0x200011b0
 8002714:	200011b4 	.word	0x200011b4
 8002718:	200011b8 	.word	0x200011b8
 800271c:	200011bc 	.word	0x200011bc
 8002720:	200011c0 	.word	0x200011c0
 8002724:	2000049c 	.word	0x2000049c
 8002728:	20000fd2 	.word	0x20000fd2
 800272c:	20001217 	.word	0x20001217
 8002730:	200011dc 	.word	0x200011dc
 8002734:	00000000 	.word	0x00000000

08002738 <generate_Velocity>:

void generate_Velocity()
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
//////acc//////////////

////////////////////
		t = (time_op) * i / num_points;
 800273e:	4b9c      	ldr	r3, [pc, #624]	@ (80029b0 <generate_Velocity+0x278>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe fa94 	bl	8000c74 <__aeabi_ul2f>
 800274c:	ee07 0a10 	vmov	s14, r0
 8002750:	4b98      	ldr	r3, [pc, #608]	@ (80029b4 <generate_Velocity+0x27c>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee67 6a27 	vmul.f32	s13, s14, s15
 800275a:	4b97      	ldr	r3, [pc, #604]	@ (80029b8 <generate_Velocity+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276a:	4b94      	ldr	r3, [pc, #592]	@ (80029bc <generate_Velocity+0x284>)
 800276c:	edc3 7a00 	vstr	s15, [r3]
		if (t < t_acc) {
 8002770:	4b92      	ldr	r3, [pc, #584]	@ (80029bc <generate_Velocity+0x284>)
 8002772:	ed93 7a00 	vldr	s14, [r3]
 8002776:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <generate_Velocity+0x288>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d510      	bpl.n	80027a8 <generate_Velocity+0x70>
			velocity = (Peak * (t / t_acc));
 8002786:	4b8d      	ldr	r3, [pc, #564]	@ (80029bc <generate_Velocity+0x284>)
 8002788:	edd3 6a00 	vldr	s13, [r3]
 800278c:	4b8c      	ldr	r3, [pc, #560]	@ (80029c0 <generate_Velocity+0x288>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002796:	4b8b      	ldr	r3, [pc, #556]	@ (80029c4 <generate_Velocity+0x28c>)
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a0:	4b89      	ldr	r3, [pc, #548]	@ (80029c8 <generate_Velocity+0x290>)
 80027a2:	edc3 7a00 	vstr	s15, [r3]
 80027a6:	e034      	b.n	8002812 <generate_Velocity+0xda>
		} else if (t >= t_acc && t <+ t_acc + t_const) {
 80027a8:	4b84      	ldr	r3, [pc, #528]	@ (80029bc <generate_Velocity+0x284>)
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	4b84      	ldr	r3, [pc, #528]	@ (80029c0 <generate_Velocity+0x288>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	db14      	blt.n	80027e8 <generate_Velocity+0xb0>
 80027be:	4b80      	ldr	r3, [pc, #512]	@ (80029c0 <generate_Velocity+0x288>)
 80027c0:	ed93 7a00 	vldr	s14, [r3]
 80027c4:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <generate_Velocity+0x294>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <generate_Velocity+0x284>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	dd04      	ble.n	80027e8 <generate_Velocity+0xb0>
			velocity = Peak;
 80027de:	4b79      	ldr	r3, [pc, #484]	@ (80029c4 <generate_Velocity+0x28c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a79      	ldr	r2, [pc, #484]	@ (80029c8 <generate_Velocity+0x290>)
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e014      	b.n	8002812 <generate_Velocity+0xda>
		} else {
			velocity = (Peak * ((time_op - t) / t_acc));
 80027e8:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <generate_Velocity+0x27c>)
 80027ea:	ed93 7a00 	vldr	s14, [r3]
 80027ee:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <generate_Velocity+0x284>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f8:	4b71      	ldr	r3, [pc, #452]	@ (80029c0 <generate_Velocity+0x288>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <generate_Velocity+0x28c>)
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280c:	4b6e      	ldr	r3, [pc, #440]	@ (80029c8 <generate_Velocity+0x290>)
 800280e:	edc3 7a00 	vstr	s15, [r3]
		}
		position += velocity/1000.0;
 8002812:	4b6f      	ldr	r3, [pc, #444]	@ (80029d0 <generate_Velocity+0x298>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe62 	bl	80004e0 <__aeabi_f2d>
 800281c:	4604      	mov	r4, r0
 800281e:	460d      	mov	r5, r1
 8002820:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <generate_Velocity+0x290>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe5b 	bl	80004e0 <__aeabi_f2d>
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b69      	ldr	r3, [pc, #420]	@ (80029d4 <generate_Velocity+0x29c>)
 8002830:	f7fd ffd8 	bl	80007e4 <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fcf2 	bl	8000224 <__adddf3>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f8fc 	bl	8000a44 <__aeabi_d2f>
 800284c:	4603      	mov	r3, r0
 800284e:	4a60      	ldr	r2, [pc, #384]	@ (80029d0 <generate_Velocity+0x298>)
 8002850:	6013      	str	r3, [r2, #0]

		position_now = position;
 8002852:	4b5f      	ldr	r3, [pc, #380]	@ (80029d0 <generate_Velocity+0x298>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a60      	ldr	r2, [pc, #384]	@ (80029d8 <generate_Velocity+0x2a0>)
 8002858:	6013      	str	r3, [r2, #0]

		Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <generate_Velocity+0x2a0>)
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	4b5e      	ldr	r3, [pc, #376]	@ (80029dc <generate_Velocity+0x2a4>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	4b5d      	ldr	r3, [pc, #372]	@ (80029e0 <generate_Velocity+0x2a8>)
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	edd7 7a02 	vldr	s15, [r7, #8]
 800287c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	edd3 6a01 	vldr	s13, [r3, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	edd3 7a03 	vldr	s15, [r3, #12]
 800288c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002890:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	edd3 6a02 	vldr	s13, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	edd3 7a04 	vldr	s15, [r3, #16]
 80028a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a45      	ldr	r2, [pc, #276]	@ (80029e4 <generate_Velocity+0x2ac>)
 80028ce:	6013      	str	r3, [r2, #0]



		BTempV = Vfeedback;
 80028d0:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <generate_Velocity+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a44      	ldr	r2, [pc, #272]	@ (80029e8 <generate_Velocity+0x2b0>)
 80028d6:	6013      	str	r3, [r2, #0]

		VInM = Vfeedback * (24.0/65535.0);
 80028d8:	4b42      	ldr	r3, [pc, #264]	@ (80029e4 <generate_Velocity+0x2ac>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fdff 	bl	80004e0 <__aeabi_f2d>
 80028e2:	a32f      	add	r3, pc, #188	@ (adr r3, 80029a0 <generate_Velocity+0x268>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fe52 	bl	8000590 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f8a6 	bl	8000a44 <__aeabi_d2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a3c      	ldr	r2, [pc, #240]	@ (80029ec <generate_Velocity+0x2b4>)
 80028fc:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

		zStop = 0;
 80028fe:	4b3c      	ldr	r3, [pc, #240]	@ (80029f0 <generate_Velocity+0x2b8>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		pwmM = Vfeedback * (65535.0/24.0);
 8002904:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <generate_Velocity+0x2ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fde9 	bl	80004e0 <__aeabi_f2d>
 800290e:	a326      	add	r3, pc, #152	@ (adr r3, 80029a8 <generate_Velocity+0x270>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fe3c 	bl	8000590 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f848 	bl	80009b4 <__aeabi_d2iz>
 8002924:	4603      	mov	r3, r0
 8002926:	4a33      	ldr	r2, [pc, #204]	@ (80029f4 <generate_Velocity+0x2bc>)
 8002928:	6013      	str	r3, [r2, #0]

		if(Vfeedback >= 0)
 800292a:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <generate_Velocity+0x2ac>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	db09      	blt.n	800294e <generate_Velocity+0x216>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 800293a:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <generate_Velocity+0x2bc>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b2e      	ldr	r3, [pc, #184]	@ (80029f8 <generate_Velocity+0x2c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002944:	4b2c      	ldr	r3, [pc, #176]	@ (80029f8 <generate_Velocity+0x2c0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
 800294c:	e011      	b.n	8002972 <generate_Velocity+0x23a>


		}

		else if (Vfeedback < 0)
 800294e:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <generate_Velocity+0x2ac>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d509      	bpl.n	8002972 <generate_Velocity+0x23a>
		{

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800295e:	4b26      	ldr	r3, [pc, #152]	@ (80029f8 <generate_Velocity+0x2c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002966:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <generate_Velocity+0x2bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	425a      	negs	r2, r3
 800296c:	4b22      	ldr	r3, [pc, #136]	@ (80029f8 <generate_Velocity+0x2c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

		if ( i >= time_op*1000)
 8002972:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <generate_Velocity+0x278>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f97a 	bl	8000c74 <__aeabi_ul2f>
 8002980:	ee06 0a90 	vmov	s13, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <generate_Velocity+0x27c>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80029fc <generate_Velocity+0x2c4>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299a:	da31      	bge.n	8002a00 <generate_Velocity+0x2c8>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 800299c:	e063      	b.n	8002a66 <generate_Velocity+0x32e>
 800299e:	bf00      	nop
 80029a0:	00180018 	.word	0x00180018
 80029a4:	3f380018 	.word	0x3f380018
 80029a8:	00000000 	.word	0x00000000
 80029ac:	40a55540 	.word	0x40a55540
 80029b0:	200011c8 	.word	0x200011c8
 80029b4:	20000200 	.word	0x20000200
 80029b8:	20000204 	.word	0x20000204
 80029bc:	200011d0 	.word	0x200011d0
 80029c0:	200011b8 	.word	0x200011b8
 80029c4:	200011c0 	.word	0x200011c0
 80029c8:	200011d4 	.word	0x200011d4
 80029cc:	200011bc 	.word	0x200011bc
 80029d0:	200011d8 	.word	0x200011d8
 80029d4:	408f4000 	.word	0x408f4000
 80029d8:	200011ac 	.word	0x200011ac
 80029dc:	20000aec 	.word	0x20000aec
 80029e0:	200011e8 	.word	0x200011e8
 80029e4:	200011e0 	.word	0x200011e0
 80029e8:	2000120c 	.word	0x2000120c
 80029ec:	200011e4 	.word	0x200011e4
 80029f0:	20000af6 	.word	0x20000af6
 80029f4:	20001210 	.word	0x20001210
 80029f8:	20000238 	.word	0x20000238
 80029fc:	447a0000 	.word	0x447a0000
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <generate_Velocity+0x338>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Stop_IT(&htim4);
 8002a08:	4819      	ldr	r0, [pc, #100]	@ (8002a70 <generate_Velocity+0x338>)
 8002a0a:	f003 faf7 	bl	8005ffc <HAL_TIM_Base_Stop_IT>
			rou += 1;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <generate_Velocity+0x33c>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <generate_Velocity+0x33c>)
 8002a18:	801a      	strh	r2, [r3, #0]
			i = 0;
 8002a1a:	4917      	ldr	r1, [pc, #92]	@ (8002a78 <generate_Velocity+0x340>)
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9c1 2300 	strd	r2, r3, [r1]
			buf[0] = 2;
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <generate_Velocity+0x344>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
			L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4913      	ldr	r1, [pc, #76]	@ (8002a80 <generate_Velocity+0x348>)
 8002a32:	4812      	ldr	r0, [pc, #72]	@ (8002a7c <generate_Velocity+0x344>)
 8002a34:	f001 f9bc 	bl	8003db0 <updateLED>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <generate_Velocity+0x34c>)
 8002a3e:	701a      	strb	r2, [r3, #0]
			if ( registerFrame[0x10].U16 != 0)
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <generate_Velocity+0x350>)
 8002a42:	8c1b      	ldrh	r3, [r3, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <generate_Velocity+0x316>
				piingpong  = 1;
 8002a48:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <generate_Velocity+0x354>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	801a      	strh	r2, [r3, #0]
			fin = 1;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <generate_Velocity+0x358>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002a54:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <generate_Velocity+0x35c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <generate_Velocity+0x35c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000049c 	.word	0x2000049c
 8002a74:	20001214 	.word	0x20001214
 8002a78:	200011c8 	.word	0x200011c8
 8002a7c:	20000208 	.word	0x20000208
 8002a80:	200003d0 	.word	0x200003d0
 8002a84:	20001216 	.word	0x20001216
 8002a88:	20000fe8 	.word	0x20000fe8
 8002a8c:	20000fd2 	.word	0x20000fd2
 8002a90:	20001217 	.word	0x20001217
 8002a94:	20000238 	.word	0x20000238

08002a98 <BaseAction>:
//{
//return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
//}

//
void BaseAction(void){
 8002a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a9c:	af00      	add	r7, sp, #0
	static uint16_t timestamp1 = 0;
	  static uint16_t timestamp2 = 0;
	  static uint16_t timestamp3 = 0;
	  static uint16_t timestamp4 = 0;

	  position_goal = setPos/10.0;
 8002a9e:	4ba6      	ldr	r3, [pc, #664]	@ (8002d38 <BaseAction+0x2a0>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fd0a 	bl	80004bc <__aeabi_i2d>
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	4ba3      	ldr	r3, [pc, #652]	@ (8002d3c <BaseAction+0x2a4>)
 8002aae:	f7fd fe99 	bl	80007e4 <__aeabi_ddiv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fd ffc3 	bl	8000a44 <__aeabi_d2f>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8002d40 <BaseAction+0x2a8>)
 8002ac2:	6013      	str	r3, [r2, #0]
	  if (velocity < 0)
 8002ac4:	4b9f      	ldr	r3, [pc, #636]	@ (8002d44 <BaseAction+0x2ac>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	d508      	bpl.n	8002ae6 <BaseAction+0x4e>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW] * -1;
 8002ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8002d48 <BaseAction+0x2b0>)
 8002ad6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002ada:	eef1 7a67 	vneg.f32	s15, s15
 8002ade:	4b9b      	ldr	r3, [pc, #620]	@ (8002d4c <BaseAction+0x2b4>)
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
 8002ae4:	e00b      	b.n	8002afe <BaseAction+0x66>
	  }

	  else if (velocity >= 0)
 8002ae6:	4b97      	ldr	r3, [pc, #604]	@ (8002d44 <BaseAction+0x2ac>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	db03      	blt.n	8002afe <BaseAction+0x66>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW];
 8002af6:	4b94      	ldr	r3, [pc, #592]	@ (8002d48 <BaseAction+0x2b0>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	4a94      	ldr	r2, [pc, #592]	@ (8002d4c <BaseAction+0x2b4>)
 8002afc:	6013      	str	r3, [r2, #0]
	  }

	  if (QEIdata.QEILinearAcc < 0)
 8002afe:	4b92      	ldr	r3, [pc, #584]	@ (8002d48 <BaseAction+0x2b0>)
 8002b00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	d508      	bpl.n	8002b20 <BaseAction+0x88>
	  	  {
		  	  linear_accel = QEIdata.QEILinearAcc * -1;
 8002b0e:	4b8e      	ldr	r3, [pc, #568]	@ (8002d48 <BaseAction+0x2b0>)
 8002b10:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b14:	eef1 7a67 	vneg.f32	s15, s15
 8002b18:	4b8d      	ldr	r3, [pc, #564]	@ (8002d50 <BaseAction+0x2b8>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]
 8002b1e:	e00b      	b.n	8002b38 <BaseAction+0xa0>
	  	  }

	  	  else if (QEIdata.QEILinearAcc >= 0)
 8002b20:	4b89      	ldr	r3, [pc, #548]	@ (8002d48 <BaseAction+0x2b0>)
 8002b22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	db03      	blt.n	8002b38 <BaseAction+0xa0>
	  	  {
	  		  linear_accel = QEIdata.QEILinearAcc;
 8002b30:	4b85      	ldr	r3, [pc, #532]	@ (8002d48 <BaseAction+0x2b0>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a86      	ldr	r2, [pc, #536]	@ (8002d50 <BaseAction+0x2b8>)
 8002b36:	6013      	str	r3, [r2, #0]
	  	  }


	  //linear_accel = accerelometer;
	  linear_position = qeifloat-16.0 ;
 8002b38:	4b86      	ldr	r3, [pc, #536]	@ (8002d54 <BaseAction+0x2bc>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b46:	4b84      	ldr	r3, [pc, #528]	@ (8002d58 <BaseAction+0x2c0>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]

	  rState1=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002b4c:	2140      	movs	r1, #64	@ 0x40
 8002b4e:	4883      	ldr	r0, [pc, #524]	@ (8002d5c <BaseAction+0x2c4>)
 8002b50:	f002 f890 	bl	8004c74 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b81      	ldr	r3, [pc, #516]	@ (8002d60 <BaseAction+0x2c8>)
 8002b5a:	801a      	strh	r2, [r3, #0]
	  rState2=  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b62:	f002 f887 	bl	8004c74 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d64 <BaseAction+0x2cc>)
 8002b6c:	801a      	strh	r2, [r3, #0]


	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8002b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d68 <BaseAction+0x2d0>)
 8002b70:	889b      	ldrh	r3, [r3, #4]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b7d      	ldr	r3, [pc, #500]	@ (8002d6c <BaseAction+0x2d4>)
 8002b76:	701a      	strb	r2, [r3, #0]
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8002b78:	4b7b      	ldr	r3, [pc, #492]	@ (8002d68 <BaseAction+0x2d0>)
 8002b7a:	88db      	ldrh	r3, [r3, #6]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d70 <BaseAction+0x2d8>)
 8002b80:	701a      	strb	r2, [r3, #0]
	  reed = rState1 + (2 * rState2); //for 2 back 1
 8002b82:	4b77      	ldr	r3, [pc, #476]	@ (8002d60 <BaseAction+0x2c8>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b76      	ldr	r3, [pc, #472]	@ (8002d64 <BaseAction+0x2cc>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b77      	ldr	r3, [pc, #476]	@ (8002d74 <BaseAction+0x2dc>)
 8002b98:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8002b9a:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <BaseAction+0x2dc>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	005a      	lsls	r2, r3, #1
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <BaseAction+0x2e0>)
 8002ba2:	fb83 3102 	smull	r3, r1, r3, r2
 8002ba6:	17d3      	asrs	r3, r2, #31
 8002ba8:	1ac9      	subs	r1, r1, r3
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	1ad1      	subs	r1, r2, r3
 8002bb2:	b28a      	uxth	r2, r1
 8002bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d68 <BaseAction+0x2d0>)
 8002bb6:	811a      	strh	r2, [r3, #8]


	  registerFrame[0x11].U16 = (float)(linear_position * 10); //Position
 8002bb8:	4b67      	ldr	r3, [pc, #412]	@ (8002d58 <BaseAction+0x2c0>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bca:	ee17 3a90 	vmov	r3, s15
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b65      	ldr	r3, [pc, #404]	@ (8002d68 <BaseAction+0x2d0>)
 8002bd2:	845a      	strh	r2, [r3, #34]	@ 0x22
	  registerFrame[0x12].U16 = (float)(linear_velocity * 10); //Velocity
 8002bd4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d4c <BaseAction+0x2b4>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be6:	ee17 3a90 	vmov	r3, s15
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4b5e      	ldr	r3, [pc, #376]	@ (8002d68 <BaseAction+0x2d0>)
 8002bee:	849a      	strh	r2, [r3, #36]	@ 0x24
	  registerFrame[0x13].U16 = (float)(linear_accel * 10)	; //Acceleration
 8002bf0:	4b57      	ldr	r3, [pc, #348]	@ (8002d50 <BaseAction+0x2b8>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <BaseAction+0x2d0>)
 8002c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <BaseAction+0x2e4>)
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	4b55      	ldr	r3, [pc, #340]	@ (8002d68 <BaseAction+0x2d0>)
 8002c12:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	  if (vacuum == 1)
 8002c16:	4b55      	ldr	r3, [pc, #340]	@ (8002d6c <BaseAction+0x2d4>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <BaseAction+0x194>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c24:	484d      	ldr	r0, [pc, #308]	@ (8002d5c <BaseAction+0x2c4>)
 8002c26:	f002 f83d 	bl	8004ca4 <HAL_GPIO_WritePin>
 8002c2a:	e005      	b.n	8002c38 <BaseAction+0x1a0>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c32:	484a      	ldr	r0, [pc, #296]	@ (8002d5c <BaseAction+0x2c4>)
 8002c34:	f002 f836 	bl	8004ca4 <HAL_GPIO_WritePin>
	  }

	  if (gripper ==1)
 8002c38:	4b4d      	ldr	r3, [pc, #308]	@ (8002d70 <BaseAction+0x2d8>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <BaseAction+0x1d0>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c46:	4845      	ldr	r0, [pc, #276]	@ (8002d5c <BaseAction+0x2c4>)
 8002c48:	f002 f82c 	bl	8004ca4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	484b      	ldr	r0, [pc, #300]	@ (8002d80 <BaseAction+0x2e8>)
 8002c52:	f002 f827 	bl	8004ca4 <HAL_GPIO_WritePin>

		  //HAL_TIM_Base_Start(&htim1);
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002c56:	2100      	movs	r1, #0
 8002c58:	484a      	ldr	r0, [pc, #296]	@ (8002d84 <BaseAction+0x2ec>)
 8002c5a:	f003 fa6d 	bl	8006138 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002c5e:	2104      	movs	r1, #4
 8002c60:	4848      	ldr	r0, [pc, #288]	@ (8002d84 <BaseAction+0x2ec>)
 8002c62:	f003 fa69 	bl	8006138 <HAL_TIM_PWM_Start>
 8002c66:	e016      	b.n	8002c96 <BaseAction+0x1fe>
//		  {
//			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
//			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
//		  }
	  }
	  else if (gripper == 0)
 8002c68:	4b41      	ldr	r3, [pc, #260]	@ (8002d70 <BaseAction+0x2d8>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d112      	bne.n	8002c96 <BaseAction+0x1fe>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002c70:	2201      	movs	r2, #1
 8002c72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c76:	4839      	ldr	r0, [pc, #228]	@ (8002d5c <BaseAction+0x2c4>)
 8002c78:	f002 f814 	bl	8004ca4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2180      	movs	r1, #128	@ 0x80
 8002c80:	483f      	ldr	r0, [pc, #252]	@ (8002d80 <BaseAction+0x2e8>)
 8002c82:	f002 f80f 	bl	8004ca4 <HAL_GPIO_WritePin>
//		  HAL_TIM_Base_Start(&htim1);
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002c86:	2100      	movs	r1, #0
 8002c88:	483e      	ldr	r0, [pc, #248]	@ (8002d84 <BaseAction+0x2ec>)
 8002c8a:	f003 fa55 	bl	8006138 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002c8e:	2104      	movs	r1, #4
 8002c90:	483c      	ldr	r0, [pc, #240]	@ (8002d84 <BaseAction+0x2ec>)
 8002c92:	f003 fa51 	bl	8006138 <HAL_TIM_PWM_Start>



	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8002c96:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <BaseAction+0x2d0>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <BaseAction+0x212>
		  registerFrame[0x00].U16 = 22881;
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <BaseAction+0x2d0>)
 8002ca4:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002ca8:	801a      	strh	r2, [r3, #0]
		  //deb++;
	  }

	  /////Set shelves
	  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8002caa:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <BaseAction+0x2d0>)
 8002cac:	885b      	ldrh	r3, [r3, #2]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <BaseAction+0x226>
	  {
		  registerFrame[0x01].U16 = 0; //change to idle mode
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <BaseAction+0x2d0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	805a      	strh	r2, [r3, #2]
		  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <BaseAction+0x2d0>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	841a      	strh	r2, [r3, #32]
//		  set_position_box();
	  }
	  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <BaseAction+0x2d0>)
 8002cc0:	8c1b      	ldrh	r3, [r3, #32]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d123      	bne.n	8002d0e <BaseAction+0x276>
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <BaseAction+0x2f0>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d11f      	bne.n	8002d0e <BaseAction+0x276>
	  {
		  registerFrame[0x23].U16 = shelfPos[0];
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <BaseAction+0x2f4>)
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <BaseAction+0x2d0>)
 8002cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		  registerFrame[0x24].U16 = shelfPos[1];
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <BaseAction+0x2f4>)
 8002cda:	885a      	ldrh	r2, [r3, #2]
 8002cdc:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <BaseAction+0x2d0>)
 8002cde:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		  registerFrame[0x25].U16 = shelfPos[2];
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d8c <BaseAction+0x2f4>)
 8002ce4:	889a      	ldrh	r2, [r3, #4]
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <BaseAction+0x2d0>)
 8002ce8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		  registerFrame[0x26].U16 = shelfPos[3];
 8002cec:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <BaseAction+0x2f4>)
 8002cee:	88da      	ldrh	r2, [r3, #6]
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <BaseAction+0x2d0>)
 8002cf2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		  registerFrame[0x27].U16 = shelfPos[4];
 8002cf6:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <BaseAction+0x2f4>)
 8002cf8:	891a      	ldrh	r2, [r3, #8]
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <BaseAction+0x2d0>)
 8002cfc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		  registerFrame[0x10].U16 = 0; //
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <BaseAction+0x2d0>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	841a      	strh	r2, [r3, #32]
		  flagShelf = 0;
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <BaseAction+0x2f0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e25e      	b.n	80031cc <BaseAction+0x734>
	  }

		///////1
	  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <BaseAction+0x2d0>)
 8002d10:	885b      	ldrh	r3, [r3, #2]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d140      	bne.n	8002d98 <BaseAction+0x300>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <BaseAction+0x2d0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 2; //Z-home
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <BaseAction+0x2d0>)
 8002d1e:	2202      	movs	r2, #2
 8002d20:	841a      	strh	r2, [r3, #32]
		  		//setPos = shelfPos[0]; // set goal to home
		  setPos = 0;
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <BaseAction+0x2a0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	801a      	strh	r2, [r3, #0]
//		  		  uint8_t result = HomeZ();
//		  		  HAL_Delay(2000);
//		  		  generate_trapezoidal_velocity_profile(time_op,setPos/10.0);
		  Home = 0;
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <BaseAction+0x2f8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	801a      	strh	r2, [r3, #0]
		  rou = 0;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <BaseAction+0x2fc>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e24a      	b.n	80031cc <BaseAction+0x734>
 8002d36:	bf00      	nop
 8002d38:	20001182 	.word	0x20001182
 8002d3c:	40240000 	.word	0x40240000
 8002d40:	200011a8 	.word	0x200011a8
 8002d44:	200011d4 	.word	0x200011d4
 8002d48:	20001218 	.word	0x20001218
 8002d4c:	20000fdc 	.word	0x20000fdc
 8002d50:	20000fe0 	.word	0x20000fe0
 8002d54:	20000aec 	.word	0x20000aec
 8002d58:	20000fe4 	.word	0x20000fe4
 8002d5c:	48000400 	.word	0x48000400
 8002d60:	20000fd8 	.word	0x20000fd8
 8002d64:	20000fda 	.word	0x20000fda
 8002d68:	20000fe8 	.word	0x20000fe8
 8002d6c:	20000fd4 	.word	0x20000fd4
 8002d70:	20000fd5 	.word	0x20000fd5
 8002d74:	20000fd6 	.word	0x20000fd6
 8002d78:	55555556 	.word	0x55555556
 8002d7c:	20001184 	.word	0x20001184
 8002d80:	48000800 	.word	0x48000800
 8002d84:	20000238 	.word	0x20000238
 8002d88:	20000fd0 	.word	0x20000fd0
 8002d8c:	20001178 	.word	0x20001178
 8002d90:	200011de 	.word	0x200011de
 8002d94:	20001214 	.word	0x20001214
	  }
	/////point mode
	  else if((registerFrame[0x01].U16) == 8)
 8002d98:	4b81      	ldr	r3, [pc, #516]	@ (8002fa0 <BaseAction+0x508>)
 8002d9a:	885b      	ldrh	r3, [r3, #2]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d10b      	bne.n	8002db8 <BaseAction+0x320>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002da0:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa0 <BaseAction+0x508>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 16; // Z-go point
 8002da6:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <BaseAction+0x508>)
 8002da8:	2210      	movs	r2, #16
 8002daa:	841a      	strh	r2, [r3, #32]

		  setPos = ((registerFrame[0x30].U16)); // goal = point 30->base system 4 point mode
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <BaseAction+0x508>)
 8002dae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8002db2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa4 <BaseAction+0x50c>)
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e209      	b.n	80031cc <BaseAction+0x734>
				//generate_trapezoidal_velocity_profile(time_op,setPos);
	  }
	/////jog mode
	  //read (convert to array)
	  else if((registerFrame[0x01].U16 ==4))
 8002db8:	4b79      	ldr	r3, [pc, #484]	@ (8002fa0 <BaseAction+0x508>)
 8002dba:	885b      	ldrh	r3, [r3, #2]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d10f      	bne.n	8002de0 <BaseAction+0x348>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002dc0:	4b77      	ldr	r3, [pc, #476]	@ (8002fa0 <BaseAction+0x508>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	805a      	strh	r2, [r3, #2]

		  temPick = (registerFrame[0x21].U16);
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <BaseAction+0x508>)
 8002dc8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002dcc:	4b76      	ldr	r3, [pc, #472]	@ (8002fa8 <BaseAction+0x510>)
 8002dce:	801a      	strh	r2, [r3, #0]
		  temPlace = (registerFrame[0x22].U16);
 8002dd0:	4b73      	ldr	r3, [pc, #460]	@ (8002fa0 <BaseAction+0x508>)
 8002dd2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002dd6:	4b75      	ldr	r3, [pc, #468]	@ (8002fac <BaseAction+0x514>)
 8002dd8:	801a      	strh	r2, [r3, #0]

		  OrderSeparate();
 8002dda:	f000 fa23 	bl	8003224 <OrderSeparate>
 8002dde:	e1f5      	b.n	80031cc <BaseAction+0x734>
	  }
			//run
	  else if(rnd > 0)
 8002de0:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <BaseAction+0x518>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 81ae 	beq.w	8003146 <BaseAction+0x6ae>
	  {
				//first round
		  if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <BaseAction+0x508>)
 8002dec:	8c1b      	ldrh	r3, [r3, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d122      	bne.n	8002e38 <BaseAction+0x3a0>
 8002df2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <BaseAction+0x518>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d11e      	bne.n	8002e38 <BaseAction+0x3a0>
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb4 <BaseAction+0x51c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11a      	bne.n	8002e38 <BaseAction+0x3a0>
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <BaseAction+0x520>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d116      	bne.n	8002e38 <BaseAction+0x3a0>
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002fbc <BaseAction+0x524>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <BaseAction+0x3a0>
		  {
			  mode = 9; // for debug - pick
 8002e12:	4b6b      	ldr	r3, [pc, #428]	@ (8002fc0 <BaseAction+0x528>)
 8002e14:	2209      	movs	r2, #9
 8002e16:	701a      	strb	r2, [r3, #0]
			  (registerFrame[0x10].U16) = 4; // Z-go pick
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <BaseAction+0x508>)
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	841a      	strh	r2, [r3, #32]
			  setPos = shelfPos[pick[5-rnd]-1];
 8002e1e:	4b64      	ldr	r3, [pc, #400]	@ (8002fb0 <BaseAction+0x518>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f1c3 0305 	rsb	r3, r3, #5
 8002e26:	4a67      	ldr	r2, [pc, #412]	@ (8002fc4 <BaseAction+0x52c>)
 8002e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	4a66      	ldr	r2, [pc, #408]	@ (8002fc8 <BaseAction+0x530>)
 8002e30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e34:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa4 <BaseAction+0x50c>)
 8002e36:	801a      	strh	r2, [r3, #0]
		  }
		  if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 8002e38:	4b64      	ldr	r3, [pc, #400]	@ (8002fcc <BaseAction+0x534>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80d1 	beq.w	8002fe4 <BaseAction+0x54c>
 8002e42:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <BaseAction+0x508>)
 8002e44:	8c1b      	ldrh	r3, [r3, #32]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	f040 80cc 	bne.w	8002fe4 <BaseAction+0x54c>
		  {
				///////place down
			  if(mode == 6){
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc0 <BaseAction+0x528>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d10a      	bne.n	8002e6a <BaseAction+0x3d2>
				  timestamp1 = HAL_GetTick() + 100; // delay before gripper move
 8002e54:	f001 f91c 	bl	8004090 <HAL_GetTick>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3364      	adds	r3, #100	@ 0x64
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd0 <BaseAction+0x538>)
 8002e62:	801a      	strh	r2, [r3, #0]
				  mode = 60;
 8002e64:	4b56      	ldr	r3, [pc, #344]	@ (8002fc0 <BaseAction+0x528>)
 8002e66:	223c      	movs	r2, #60	@ 0x3c
 8002e68:	701a      	strb	r2, [r3, #0]
			  }
			  if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 8002e6a:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <BaseAction+0x520>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d021      	beq.n	8002eb6 <BaseAction+0x41e>
 8002e72:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb0 <BaseAction+0x518>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01d      	beq.n	8002eb6 <BaseAction+0x41e>
 8002e7a:	4b50      	ldr	r3, [pc, #320]	@ (8002fbc <BaseAction+0x524>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d119      	bne.n	8002eb6 <BaseAction+0x41e>
 8002e82:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb4 <BaseAction+0x51c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d115      	bne.n	8002eb6 <BaseAction+0x41e>
 8002e8a:	f001 f901 	bl	8004090 <HAL_GetTick>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd0 <BaseAction+0x538>)
 8002e92:	8812      	ldrh	r2, [r2, #0]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d30e      	bcc.n	8002eb6 <BaseAction+0x41e>
				  registerFrame[0x03].U16 = 1; // gripper forward
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <BaseAction+0x508>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	80da      	strh	r2, [r3, #6]
				  timestamp2 = HAL_GetTick() + 100; //delay before release box
 8002e9e:	f001 f8f7 	bl	8004090 <HAL_GetTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3364      	adds	r3, #100	@ 0x64
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <BaseAction+0x53c>)
 8002eac:	801a      	strh	r2, [r3, #0]
				  mode = 61;
 8002eae:	4b44      	ldr	r3, [pc, #272]	@ (8002fc0 <BaseAction+0x528>)
 8002eb0:	223d      	movs	r2, #61	@ 0x3d
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e03d      	b.n	8002f32 <BaseAction+0x49a>
			  }
			  else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <BaseAction+0x520>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d119      	bne.n	8002ef2 <BaseAction+0x45a>
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8002fbc <BaseAction+0x524>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d115      	bne.n	8002ef2 <BaseAction+0x45a>
 8002ec6:	f001 f8e3 	bl	8004090 <HAL_GetTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4a41      	ldr	r2, [pc, #260]	@ (8002fd4 <BaseAction+0x53c>)
 8002ece:	8812      	ldrh	r2, [r2, #0]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d30e      	bcc.n	8002ef2 <BaseAction+0x45a>
			  {
				  registerFrame[0x02].U16 = 0; //vacuum off
 8002ed4:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <BaseAction+0x508>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 100; // delay before retract gripper
 8002eda:	f001 f8d9 	bl	8004090 <HAL_GetTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3364      	adds	r3, #100	@ 0x64
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <BaseAction+0x540>)
 8002ee8:	801a      	strh	r2, [r3, #0]
				  mode = 62;
 8002eea:	4b35      	ldr	r3, [pc, #212]	@ (8002fc0 <BaseAction+0x528>)
 8002eec:	223e      	movs	r2, #62	@ 0x3e
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e01f      	b.n	8002f32 <BaseAction+0x49a>
			  }
			  else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 8002ef2:	4b32      	ldr	r3, [pc, #200]	@ (8002fbc <BaseAction+0x524>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11b      	bne.n	8002f32 <BaseAction+0x49a>
 8002efa:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb4 <BaseAction+0x51c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d117      	bne.n	8002f32 <BaseAction+0x49a>
 8002f02:	f001 f8c5 	bl	8004090 <HAL_GetTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <BaseAction+0x540>)
 8002f0a:	8812      	ldrh	r2, [r2, #0]
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d310      	bcc.n	8002f32 <BaseAction+0x49a>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <BaseAction+0x508>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	80da      	strh	r2, [r3, #6]
				  load = 0;
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <BaseAction+0x544>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 100; // delay before moving to pick
 8002f1c:	f001 f8b8 	bl	8004090 <HAL_GetTick>
 8002f20:	4603      	mov	r3, r0
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3364      	adds	r3, #100	@ 0x64
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <BaseAction+0x548>)
 8002f2a:	801a      	strh	r2, [r3, #0]
				  mode = 63;
 8002f2c:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <BaseAction+0x528>)
 8002f2e:	223f      	movs	r2, #63	@ 0x3f
 8002f30:	701a      	strb	r2, [r3, #0]
			  }
				///////finish place -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <BaseAction+0x51c>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 8147 	bne.w	80031ca <BaseAction+0x732>
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <BaseAction+0x520>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 8142 	bne.w	80031ca <BaseAction+0x732>
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <BaseAction+0x524>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 813d 	bne.w	80031ca <BaseAction+0x732>
 8002f50:	f001 f89e 	bl	8004090 <HAL_GetTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <BaseAction+0x548>)
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f0c0 8135 	bcc.w	80031ca <BaseAction+0x732>
			  {
				  rnd--;
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <BaseAction+0x518>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <BaseAction+0x518>)
 8002f6a:	701a      	strb	r2, [r3, #0]
				  if(rnd>0)
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <BaseAction+0x518>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 812a 	beq.w	80031ca <BaseAction+0x732>
				  {
					  (registerFrame[0x10].U16) = 4; // Z-go pick
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <BaseAction+0x508>)
 8002f78:	2204      	movs	r2, #4
 8002f7a:	841a      	strh	r2, [r3, #32]
					  setPos = shelfPos[pick[5-rnd]-1];
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <BaseAction+0x518>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f1c3 0305 	rsb	r3, r3, #5
 8002f84:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc4 <BaseAction+0x52c>)
 8002f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc8 <BaseAction+0x530>)
 8002f8e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f92:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <BaseAction+0x50c>)
 8002f94:	801a      	strh	r2, [r3, #0]
					  mode = 9;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <BaseAction+0x528>)
 8002f98:	2209      	movs	r2, #9
 8002f9a:	701a      	strb	r2, [r3, #0]
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8002f9c:	e115      	b.n	80031ca <BaseAction+0x732>
 8002f9e:	bf00      	nop
 8002fa0:	20000fe8 	.word	0x20000fe8
 8002fa4:	20001182 	.word	0x20001182
 8002fa8:	20001188 	.word	0x20001188
 8002fac:	2000118a 	.word	0x2000118a
 8002fb0:	200011a2 	.word	0x200011a2
 8002fb4:	20000fd5 	.word	0x20000fd5
 8002fb8:	20000fd6 	.word	0x20000fd6
 8002fbc:	20000fd4 	.word	0x20000fd4
 8002fc0:	20001186 	.word	0x20001186
 8002fc4:	2000118c 	.word	0x2000118c
 8002fc8:	20001178 	.word	0x20001178
 8002fcc:	20000fd2 	.word	0x20000fd2
 8002fd0:	20001270 	.word	0x20001270
 8002fd4:	20001272 	.word	0x20001272
 8002fd8:	20001274 	.word	0x20001274
 8002fdc:	200011a4 	.word	0x200011a4
 8002fe0:	20001276 	.word	0x20001276
				  }
			  }
		  }
		  else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 8002fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80031e0 <BaseAction+0x748>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80ef 	beq.w	80031cc <BaseAction+0x734>
 8002fee:	4b7d      	ldr	r3, [pc, #500]	@ (80031e4 <BaseAction+0x74c>)
 8002ff0:	8c1b      	ldrh	r3, [r3, #32]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	f040 80ea 	bne.w	80031cc <BaseAction+0x734>
		  {
				//////pick up
			  if(mode == 9){
 8002ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80031e8 <BaseAction+0x750>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d107      	bne.n	8003010 <BaseAction+0x578>
				  timestamp1 = HAL_GetTick() + 50; // delay before gripper go pick
 8003000:	f001 f846 	bl	8004090 <HAL_GetTick>
 8003004:	4603      	mov	r3, r0
 8003006:	b29b      	uxth	r3, r3
 8003008:	3332      	adds	r3, #50	@ 0x32
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b77      	ldr	r3, [pc, #476]	@ (80031ec <BaseAction+0x754>)
 800300e:	801a      	strh	r2, [r3, #0]
					//mode = 90;
			  }
			  if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 8003010:	4b77      	ldr	r3, [pc, #476]	@ (80031f0 <BaseAction+0x758>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d11a      	bne.n	800304e <BaseAction+0x5b6>
 8003018:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <BaseAction+0x75c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d116      	bne.n	800304e <BaseAction+0x5b6>
 8003020:	4b75      	ldr	r3, [pc, #468]	@ (80031f8 <BaseAction+0x760>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d112      	bne.n	800304e <BaseAction+0x5b6>
 8003028:	f001 f832 	bl	8004090 <HAL_GetTick>
 800302c:	4603      	mov	r3, r0
 800302e:	4a6f      	ldr	r2, [pc, #444]	@ (80031ec <BaseAction+0x754>)
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	4293      	cmp	r3, r2
 8003034:	d30b      	bcc.n	800304e <BaseAction+0x5b6>
			  {
				  timestamp2 = HAL_GetTick() + 100; // delay before picking box
 8003036:	f001 f82b 	bl	8004090 <HAL_GetTick>
 800303a:	4603      	mov	r3, r0
 800303c:	b29b      	uxth	r3, r3
 800303e:	3364      	adds	r3, #100	@ 0x64
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b6e      	ldr	r3, [pc, #440]	@ (80031fc <BaseAction+0x764>)
 8003044:	801a      	strh	r2, [r3, #0]
				  registerFrame[0x03].U16 = 1; //gripper forward
 8003046:	4b67      	ldr	r3, [pc, #412]	@ (80031e4 <BaseAction+0x74c>)
 8003048:	2201      	movs	r2, #1
 800304a:	80da      	strh	r2, [r3, #6]
 800304c:	e03c      	b.n	80030c8 <BaseAction+0x630>
					//mode = 91;
			  }
			  else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 800304e:	4b69      	ldr	r3, [pc, #420]	@ (80031f4 <BaseAction+0x75c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d117      	bne.n	8003086 <BaseAction+0x5ee>
 8003056:	4b68      	ldr	r3, [pc, #416]	@ (80031f8 <BaseAction+0x760>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <BaseAction+0x5ee>
 800305e:	f001 f817 	bl	8004090 <HAL_GetTick>
 8003062:	4603      	mov	r3, r0
 8003064:	4a65      	ldr	r2, [pc, #404]	@ (80031fc <BaseAction+0x764>)
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	4293      	cmp	r3, r2
 800306a:	d30c      	bcc.n	8003086 <BaseAction+0x5ee>
			  {
				  registerFrame[0x02].U16 = 1; //vacuum on
 800306c:	4b5d      	ldr	r3, [pc, #372]	@ (80031e4 <BaseAction+0x74c>)
 800306e:	2201      	movs	r2, #1
 8003070:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 400; // delay before pulling box back
 8003072:	f001 f80d 	bl	8004090 <HAL_GetTick>
 8003076:	4603      	mov	r3, r0
 8003078:	b29b      	uxth	r3, r3
 800307a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <BaseAction+0x768>)
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	e020      	b.n	80030c8 <BaseAction+0x630>
					//mode = 92;

			  }
			  else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 8003086:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <BaseAction+0x758>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d11c      	bne.n	80030c8 <BaseAction+0x630>
 800308e:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <BaseAction+0x75c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d118      	bne.n	80030c8 <BaseAction+0x630>
 8003096:	4b58      	ldr	r3, [pc, #352]	@ (80031f8 <BaseAction+0x760>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d114      	bne.n	80030c8 <BaseAction+0x630>
 800309e:	f000 fff7 	bl	8004090 <HAL_GetTick>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a56      	ldr	r2, [pc, #344]	@ (8003200 <BaseAction+0x768>)
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d30d      	bcc.n	80030c8 <BaseAction+0x630>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 80030ac:	4b4d      	ldr	r3, [pc, #308]	@ (80031e4 <BaseAction+0x74c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	80da      	strh	r2, [r3, #6]
				  load = 1;
 80030b2:	4b54      	ldr	r3, [pc, #336]	@ (8003204 <BaseAction+0x76c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 200; // delay before moving again
 80030b8:	f000 ffea 	bl	8004090 <HAL_GetTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	b29b      	uxth	r3, r3
 80030c0:	33c8      	adds	r3, #200	@ 0xc8
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <BaseAction+0x770>)
 80030c6:	801a      	strh	r2, [r3, #0]
					//mode = 93;
			  }
				///////finish pick -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 80030c8:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <BaseAction+0x75c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d17d      	bne.n	80031cc <BaseAction+0x734>
 80030d0:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <BaseAction+0x758>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d179      	bne.n	80031cc <BaseAction+0x734>
 80030d8:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <BaseAction+0x760>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d175      	bne.n	80031cc <BaseAction+0x734>
 80030e0:	f000 ffd6 	bl	8004090 <HAL_GetTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4a48      	ldr	r2, [pc, #288]	@ (8003208 <BaseAction+0x770>)
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d36e      	bcc.n	80031cc <BaseAction+0x734>
			  {
				  (registerFrame[0x10].U16) = 8; // Z-go place
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <BaseAction+0x74c>)
 80030f0:	2208      	movs	r2, #8
 80030f2:	841a      	strh	r2, [r3, #32]
				  if(place[5-rnd] == 5)
 80030f4:	4b45      	ldr	r3, [pc, #276]	@ (800320c <BaseAction+0x774>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f1c3 0305 	rsb	r3, r3, #5
 80030fc:	4a44      	ldr	r2, [pc, #272]	@ (8003210 <BaseAction+0x778>)
 80030fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d10f      	bne.n	8003126 <BaseAction+0x68e>
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 150; // goal + 5mm
 8003106:	4b41      	ldr	r3, [pc, #260]	@ (800320c <BaseAction+0x774>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	f1c3 0305 	rsb	r3, r3, #5
 800310e:	4a40      	ldr	r2, [pc, #256]	@ (8003210 <BaseAction+0x778>)
 8003110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003114:	3b01      	subs	r3, #1
 8003116:	4a3f      	ldr	r2, [pc, #252]	@ (8003214 <BaseAction+0x77c>)
 8003118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800311c:	3396      	adds	r3, #150	@ 0x96
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <BaseAction+0x780>)
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	e052      	b.n	80031cc <BaseAction+0x734>
				  }
				  else
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 150; // goal + 5mm
 8003126:	4b39      	ldr	r3, [pc, #228]	@ (800320c <BaseAction+0x774>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f1c3 0305 	rsb	r3, r3, #5
 800312e:	4a38      	ldr	r2, [pc, #224]	@ (8003210 <BaseAction+0x778>)
 8003130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003134:	3b01      	subs	r3, #1
 8003136:	4a37      	ldr	r2, [pc, #220]	@ (8003214 <BaseAction+0x77c>)
 8003138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313c:	3396      	adds	r3, #150	@ 0x96
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <BaseAction+0x780>)
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	e042      	b.n	80031cc <BaseAction+0x734>
			  }
		  }
	  }

	  //end jog
	  else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <BaseAction+0x74c>)
 8003148:	8c1b      	ldrh	r3, [r3, #32]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d10a      	bne.n	8003164 <BaseAction+0x6cc>
 800314e:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <BaseAction+0x774>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <BaseAction+0x6cc>
	  {
		  (registerFrame[0x10].U16 = 0); // End Jogs
 8003156:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <BaseAction+0x74c>)
 8003158:	2200      	movs	r2, #0
 800315a:	841a      	strh	r2, [r3, #32]
		  mode = 255;
 800315c:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <BaseAction+0x750>)
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e033      	b.n	80031cc <BaseAction+0x734>
	  }
		/////End point & Home
	  else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8003164:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <BaseAction+0x748>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02f      	beq.n	80031cc <BaseAction+0x734>
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <BaseAction+0x74c>)
 800316e:	8c1b      	ldrh	r3, [r3, #32]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d003      	beq.n	800317c <BaseAction+0x6e4>
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <BaseAction+0x74c>)
 8003176:	8c1b      	ldrh	r3, [r3, #32]
 8003178:	2b10      	cmp	r3, #16
 800317a:	d127      	bne.n	80031cc <BaseAction+0x734>
	  {
		  //finish point & home mode
		  static uint64_t Timestamp = 0;
		  if(rnd2 == 0){
 800317c:	4b27      	ldr	r3, [pc, #156]	@ (800321c <BaseAction+0x784>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10e      	bne.n	80031a2 <BaseAction+0x70a>
			  Timestamp = HAL_GetTick() + 1000; //delay
 8003184:	f000 ff84 	bl	8004090 <HAL_GetTick>
 8003188:	4603      	mov	r3, r0
 800318a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800318e:	2200      	movs	r2, #0
 8003190:	4698      	mov	r8, r3
 8003192:	4691      	mov	r9, r2
 8003194:	4b22      	ldr	r3, [pc, #136]	@ (8003220 <BaseAction+0x788>)
 8003196:	e9c3 8900 	strd	r8, r9, [r3]
			  rnd2 = 1;
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <BaseAction+0x784>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e014      	b.n	80031cc <BaseAction+0x734>
		  }
		  else if(HAL_GetTick() >= Timestamp)
 80031a2:	f000 ff75 	bl	8004090 <HAL_GetTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2200      	movs	r2, #0
 80031aa:	461c      	mov	r4, r3
 80031ac:	4615      	mov	r5, r2
 80031ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003220 <BaseAction+0x788>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	4294      	cmp	r4, r2
 80031b6:	eb75 0303 	sbcs.w	r3, r5, r3
 80031ba:	d307      	bcc.n	80031cc <BaseAction+0x734>
		  {
			  registerFrame[0x10].U16 = 0; // finish point & home mode
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <BaseAction+0x74c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	841a      	strh	r2, [r3, #32]
			  rnd2 = 0;
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <BaseAction+0x784>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e000      	b.n	80031cc <BaseAction+0x734>
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80031ca:	bf00      	nop
		  }
	  }
	  if(registerFrame[0x10].U16 == 0){
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <BaseAction+0x74c>)
 80031ce:	8c1b      	ldrh	r3, [r3, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <BaseAction+0x742>
		  piingpong = 0;
 80031d4:	4b02      	ldr	r3, [pc, #8]	@ (80031e0 <BaseAction+0x748>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	801a      	strh	r2, [r3, #0]
	  }
}
 80031da:	bf00      	nop
 80031dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031e0:	20000fd2 	.word	0x20000fd2
 80031e4:	20000fe8 	.word	0x20000fe8
 80031e8:	20001186 	.word	0x20001186
 80031ec:	20001270 	.word	0x20001270
 80031f0:	20000fd6 	.word	0x20000fd6
 80031f4:	20000fd5 	.word	0x20000fd5
 80031f8:	20000fd4 	.word	0x20000fd4
 80031fc:	20001272 	.word	0x20001272
 8003200:	20001274 	.word	0x20001274
 8003204:	200011a4 	.word	0x200011a4
 8003208:	20001276 	.word	0x20001276
 800320c:	200011a2 	.word	0x200011a2
 8003210:	20001198 	.word	0x20001198
 8003214:	20001178 	.word	0x20001178
 8003218:	20001182 	.word	0x20001182
 800321c:	200011a3 	.word	0x200011a3
 8003220:	20001278 	.word	0x20001278

08003224 <OrderSeparate>:
}

//

void OrderSeparate(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
	//rnd = 0;
	////// Convert to string
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 800322a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800322e:	80fb      	strh	r3, [r7, #6]
 8003230:	e056      	b.n	80032e0 <OrderSeparate+0xbc>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 8003232:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <OrderSeparate+0xd8>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	429a      	cmp	r2, r3
 800323a:	d858      	bhi.n	80032ee <OrderSeparate+0xca>
 800323c:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <OrderSeparate+0xd8>)
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b05      	cmp	r3, #5
 800324a:	d850      	bhi.n	80032ee <OrderSeparate+0xca>
 800324c:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <OrderSeparate+0xdc>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	429a      	cmp	r2, r3
 8003254:	d84b      	bhi.n	80032ee <OrderSeparate+0xca>
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <OrderSeparate+0xdc>)
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b05      	cmp	r3, #5
 8003264:	d843      	bhi.n	80032ee <OrderSeparate+0xca>
		{
			//rnd = 0;
			//mode = 0;
			break;
		}
		pick[rnd] = temPick/p; // use this for pick
 8003266:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <OrderSeparate+0xd8>)
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <OrderSeparate+0xe0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	b29a      	uxth	r2, r3
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <OrderSeparate+0xe4>)
 800327a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <OrderSeparate+0xdc>)
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <OrderSeparate+0xe0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	b29a      	uxth	r2, r3
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <OrderSeparate+0xe8>)
 8003292:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 8003296:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <OrderSeparate+0xd8>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	fbb3 f1f2 	udiv	r1, r3, r2
 80032a0:	fb01 f202 	mul.w	r2, r1, r2
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <OrderSeparate+0xd8>)
 80032aa:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <OrderSeparate+0xdc>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80032b6:	fb01 f202 	mul.w	r2, r1, r2
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <OrderSeparate+0xdc>)
 80032c0:	801a      	strh	r2, [r3, #0]
		rnd++;
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <OrderSeparate+0xe0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <OrderSeparate+0xe0>)
 80032cc:	701a      	strb	r2, [r3, #0]
		rou = 20;
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <OrderSeparate+0xec>)
 80032d0:	2214      	movs	r2, #20
 80032d2:	801a      	strh	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003314 <OrderSeparate+0xf0>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	08db      	lsrs	r3, r3, #3
 80032de:	80fb      	strh	r3, [r7, #6]
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <OrderSeparate+0xca>
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <OrderSeparate+0xd8>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1a1      	bne.n	8003232 <OrderSeparate+0xe>
	}
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20001188 	.word	0x20001188
 8003300:	2000118a 	.word	0x2000118a
 8003304:	200011a2 	.word	0x200011a2
 8003308:	2000118c 	.word	0x2000118c
 800330c:	20001198 	.word	0x20001198
 8003310:	20001214 	.word	0x20001214
 8003314:	cccccccd 	.word	0xcccccccd

08003318 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <serviceMotor+0x48>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
	if(dir){
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8003330:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <serviceMotor+0x4c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <serviceMotor+0x4c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 8003340:	e007      	b.n	8003352 <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003342:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <serviceMotor+0x4c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <serviceMotor+0x4c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000af6 	.word	0x20000af6
 8003364:	20000238 	.word	0x20000238

08003368 <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
	return zStop;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <getZStop+0x14>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000af6 	.word	0x20000af6

08003380 <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
    if((GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003390:	d117      	bne.n	80033c2 <HAL_GPIO_EXTI_Callback+0x42>
 8003392:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <HAL_GPIO_EXTI_Callback+0x6c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d112      	bne.n	80033c2 <HAL_GPIO_EXTI_Callback+0x42>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x70>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	639a      	str	r2, [r3, #56]	@ 0x38
        zStop = 1;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <HAL_GPIO_EXTI_Callback+0x6c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80033b2:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
        qeifloat = 0;
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_GPIO_EXTI_Callback+0x78>)
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    }
    if ((GPIO_Pin == GPIO_PIN_5))
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d10c      	bne.n	80033e2 <HAL_GPIO_EXTI_Callback+0x62>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80033d0:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80033d8:	2200      	movs	r2, #0
 80033da:	2101      	movs	r1, #1
 80033dc:	4807      	ldr	r0, [pc, #28]	@ (80033fc <HAL_GPIO_EXTI_Callback+0x7c>)
 80033de:	f001 fc61 	bl	8004ca4 <HAL_GPIO_WritePin>
    }

}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000af6 	.word	0x20000af6
 80033f0:	20000238 	.word	0x20000238
 80033f4:	20000304 	.word	0x20000304
 80033f8:	20000aec 	.word	0x20000aec
 80033fc:	48000400 	.word	0x48000400

08003400 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d103      	bne.n	800341a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8003412:	2104      	movs	r1, #4
 8003414:	4804      	ldr	r0, [pc, #16]	@ (8003428 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003416:	f003 f9cd 	bl	80067b4 <HAL_TIM_PWM_Stop_DMA>
	}

}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40000400 	.word	0x40000400
 8003428:	200003d0 	.word	0x200003d0

0800342c <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800342c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		//registerFrame[0x00].U16 = 22881; //send "Ya" // dont use interrupt cuz unstable
	}
	else if(htim == &htim4)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a14      	ldr	r2, [pc, #80]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10f      	bne.n	8003466 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		i+=1;
 8003446:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f112 0801 	adds.w	r8, r2, #1
 8003450:	f143 0900 	adc.w	r9, r3, #0
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003456:	e9c3 8900 	strd	r8, r9, [r3]
		//piingpong = 0;
		fin = 0;
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
		generate_Velocity();
 8003460:	f7ff f96a 	bl	8002738 <generate_Velocity>
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 8003464:	e00e      	b.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if(htim == &htim7)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10a      	bne.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x58>
	_micros += UINT16_MAX;
 800346e:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003478:	1854      	adds	r4, r2, r1
 800347a:	f143 0500 	adc.w	r5, r3, #0
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003480:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800348e:	bf00      	nop
 8003490:	20000568 	.word	0x20000568
 8003494:	2000049c 	.word	0x2000049c
 8003498:	200011c8 	.word	0x200011c8
 800349c:	20001217 	.word	0x20001217
 80034a0:	20000634 	.word	0x20000634
 80034a4:	20001248 	.word	0x20001248

080034a8 <micros>:

uint64_t micros()
{
 80034a8:	b4b0      	push	{r4, r5, r7}
 80034aa:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <micros+0x2c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	2200      	movs	r2, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	4611      	mov	r1, r2
 80034b8:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <micros+0x30>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	1884      	adds	r4, r0, r2
 80034c0:	eb41 0503 	adc.w	r5, r1, r3
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
}
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bcb0      	pop	{r4, r5, r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000634 	.word	0x20000634
 80034d8:	20001248 	.word	0x20001248
 80034dc:	00000000 	.word	0x00000000

080034e0 <QEIEncoderPosVel_Update>:

float QEIEncoderPosVel_Update()
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 80034e6:	f7ff ffdf 	bl	80034a8 <micros>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	493c      	ldr	r1, [pc, #240]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 80034f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.Positions[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80034f4:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <QEIEncoderPosVel_Update+0x104>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	469a      	mov	sl, r3
 80034fe:	4693      	mov	fp, r2
 8003500:	4b37      	ldr	r3, [pc, #220]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 8003502:	e9c3 ab00 	strd	sl, fp, [r3]
//QEIdata.QEIAngularVelocity[NEW]=QEIdata.QEIAngularVelocity[OLD];

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
 8003506:	4b36      	ldr	r3, [pc, #216]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 8003508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350c:	4b34      	ldr	r3, [pc, #208]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 800350e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003512:	ebb0 0802 	subs.w	r8, r0, r2
 8003516:	eb61 0903 	sbc.w	r9, r1, r3
 800351a:	4642      	mov	r2, r8
 800351c:	464b      	mov	r3, r9
 800351e:	4932      	ldr	r1, [pc, #200]	@ (80035e8 <QEIEncoderPosVel_Update+0x108>)
 8003520:	e9c1 2300 	strd	r2, r3, [r1]
//if(diffPosition > 2147483647)
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
diffTime = (QEIdata.TimeStamps[NEW]-QEIdata.TimeStamps[OLD]) * 0.000001;
 8003524:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 8003526:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800352a:	4b2d      	ldr	r3, [pc, #180]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 800352c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003530:	1a84      	subs	r4, r0, r2
 8003532:	eb61 0503 	sbc.w	r5, r1, r3
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fc fff3 	bl	8000524 <__aeabi_ul2d>
 800353e:	a326      	add	r3, pc, #152	@ (adr r3, 80035d8 <QEIEncoderPosVel_Update+0xf8>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f7fd f824 	bl	8000590 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fa78 	bl	8000a44 <__aeabi_d2f>
 8003554:	4603      	mov	r3, r0
 8003556:	4a25      	ldr	r2, [pc, #148]	@ (80035ec <QEIEncoderPosVel_Update+0x10c>)
 8003558:	6013      	str	r3, [r2, #0]
//calculate anglar velocity
diffVelocity = (diffPosition / diffTime)*(60.0/8192)*100.0;
 800355a:	4b23      	ldr	r3, [pc, #140]	@ (80035e8 <QEIEncoderPosVel_Update+0x108>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fb8e 	bl	8000c84 <__aeabi_l2f>
 8003568:	ee06 0a90 	vmov	s13, r0
 800356c:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <QEIEncoderPosVel_Update+0x10c>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003576:	ee17 0a10 	vmov	r0, s14
 800357a:	f7fc ffb1 	bl	80004e0 <__aeabi_f2d>
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <QEIEncoderPosVel_Update+0x110>)
 8003584:	f7fd f804 	bl	8000590 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <QEIEncoderPosVel_Update+0x114>)
 8003596:	f7fc fffb 	bl	8000590 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fa4f 	bl	8000a44 <__aeabi_d2f>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <QEIEncoderPosVel_Update+0x118>)
 80035aa:	6013      	str	r3, [r2, #0]
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.Positions[OLD] = QEIdata.Positions[NEW];
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	490b      	ldr	r1, [pc, #44]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 80035b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 80035b8:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 80035ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035be:	4908      	ldr	r1, [pc, #32]	@ (80035e0 <QEIEncoderPosVel_Update+0x100>)
 80035c0:	e9c1 2306 	strd	r2, r3, [r1, #24]

return diffVelocity;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <QEIEncoderPosVel_Update+0x118>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	ee07 3a90 	vmov	s15, r3
//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 80035cc:	eeb0 0a67 	vmov.f32	s0, s15
 80035d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d4:	f3af 8000 	nop.w
 80035d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80035dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80035e0:	20001218 	.word	0x20001218
 80035e4:	20000304 	.word	0x20000304
 80035e8:	20001250 	.word	0x20001250
 80035ec:	20001258 	.word	0x20001258
 80035f0:	3f7e0000 	.word	0x3f7e0000
 80035f4:	40590000 	.word	0x40590000
 80035f8:	2000125c 	.word	0x2000125c

080035fc <ACC_Update>:

void ACC_Update()
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 8003600:	f7ff ff52 	bl	80034a8 <micros>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4915      	ldr	r1, [pc, #84]	@ (8003660 <ACC_Update+0x64>)
 800360a:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.QEIAngularVelocity[NEW] =  QEIEncoderPosVel_Update();
 800360e:	f7ff ff67 	bl	80034e0 <QEIEncoderPosVel_Update>
 8003612:	eef0 7a40 	vmov.f32	s15, s0
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <ACC_Update+0x64>)
 8003618:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
//diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
diffVelocitys = QEIdata.QEIAngularVelocity[NEW] - QEIdata.QEIAngularVelocity[OLD];
 800361c:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <ACC_Update+0x64>)
 800361e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <ACC_Update+0x64>)
 8003624:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362c:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <ACC_Update+0x68>)
 800362e:	edc3 7a00 	vstr	s15, [r3]
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
//calculate anglar velocity
QEIdata.QEILinearAcc = (diffVelocitys / diffTime);
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <ACC_Update+0x68>)
 8003634:	edd3 6a00 	vldr	s13, [r3]
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <ACC_Update+0x6c>)
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003642:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <ACC_Update+0x64>)
 8003644:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.QEIAngularVelocity[OLD] = QEIdata.QEIAngularVelocity[NEW];
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <ACC_Update+0x64>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <ACC_Update+0x64>)
 800364e:	6293      	str	r3, [r2, #40]	@ 0x28
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <ACC_Update+0x64>)
 8003652:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003656:	4902      	ldr	r1, [pc, #8]	@ (8003660 <ACC_Update+0x64>)
 8003658:	e9c1 2306 	strd	r2, r3, [r1, #24]

//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20001218 	.word	0x20001218
 8003664:	20001260 	.word	0x20001260
 8003668:	20001258 	.word	0x20001258

0800366c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <Error_Handler+0x8>

08003678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <HAL_MspInit+0x44>)
 8003680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003682:	4a0e      	ldr	r2, [pc, #56]	@ (80036bc <HAL_MspInit+0x44>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6613      	str	r3, [r2, #96]	@ 0x60
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <HAL_MspInit+0x44>)
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <HAL_MspInit+0x44>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <HAL_MspInit+0x44>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_MspInit+0x44>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036ae:	f001 fbcd 	bl	8004e4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08e      	sub	sp, #56	@ 0x38
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a72      	ldr	r2, [pc, #456]	@ (80038a8 <HAL_TIM_Base_MspInit+0x1e8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d139      	bne.n	8003756 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e2:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e6:	4a71      	ldr	r2, [pc, #452]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80036e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ee:	4b6f      	ldr	r3, [pc, #444]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fa:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	4a6b      	ldr	r2, [pc, #428]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003706:	4b69      	ldr	r3, [pc, #420]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003712:	2340      	movs	r3, #64	@ 0x40
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003716:	2312      	movs	r3, #18
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371a:	2301      	movs	r3, #1
 800371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2300      	movs	r3, #0
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003722:	2306      	movs	r3, #6
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003730:	f001 f91e 	bl	8004970 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	2018      	movs	r0, #24
 800373a:	f000 fdb2 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800373e:	2018      	movs	r0, #24
 8003740:	f000 fdc9 	bl	80042d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	2019      	movs	r0, #25
 800374a:	f000 fdaa 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800374e:	2019      	movs	r0, #25
 8003750:	f000 fdc1 	bl	80042d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003754:	e0a3      	b.n	800389e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a55      	ldr	r2, [pc, #340]	@ (80038b0 <HAL_TIM_Base_MspInit+0x1f0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d137      	bne.n	80037d0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	4a51      	ldr	r2, [pc, #324]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	6593      	str	r3, [r2, #88]	@ 0x58
 800376c:	4b4f      	ldr	r3, [pc, #316]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8003778:	4b4e      	ldr	r3, [pc, #312]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 800377a:	4a4f      	ldr	r2, [pc, #316]	@ (80038b8 <HAL_TIM_Base_MspInit+0x1f8>)
 800377c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800377e:	4b4d      	ldr	r3, [pc, #308]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003780:	223e      	movs	r2, #62	@ 0x3e
 8003782:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003786:	2210      	movs	r2, #16
 8003788:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800378a:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003790:	4b48      	ldr	r3, [pc, #288]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003796:	4b47      	ldr	r3, [pc, #284]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800379c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800379e:	4b45      	ldr	r3, [pc, #276]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037a4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80037a6:	4b43      	ldr	r3, [pc, #268]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80037ac:	4b41      	ldr	r3, [pc, #260]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80037b2:	4840      	ldr	r0, [pc, #256]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037b4:	f000 fdaa 	bl	800430c <HAL_DMA_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 80037be:	f7ff ff55 	bl	800366c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a3b      	ldr	r2, [pc, #236]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80037c8:	4a3a      	ldr	r2, [pc, #232]	@ (80038b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037ce:	e066      	b.n	800389e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a39      	ldr	r2, [pc, #228]	@ (80038bc <HAL_TIM_Base_MspInit+0x1fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d114      	bne.n	8003804 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037da:	4b34      	ldr	r3, [pc, #208]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	4a33      	ldr	r2, [pc, #204]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037e6:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	201e      	movs	r0, #30
 80037f8:	f000 fd53 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037fc:	201e      	movs	r0, #30
 80037fe:	f000 fd6a 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 8003802:	e04c      	b.n	800389e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_TIM_Base_MspInit+0x200>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d114      	bne.n	8003838 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800380e:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6593      	str	r3, [r2, #88]	@ 0x58
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	2032      	movs	r0, #50	@ 0x32
 800382c:	f000 fd39 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003830:	2032      	movs	r0, #50	@ 0x32
 8003832:	f000 fd50 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 8003836:	e032      	b.n	800389e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <HAL_TIM_Base_MspInit+0x204>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d114      	bne.n	800386c <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003842:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003848:	f043 0320 	orr.w	r3, r3, #32
 800384c:	6593      	str	r3, [r2, #88]	@ 0x58
 800384e:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	2037      	movs	r0, #55	@ 0x37
 8003860:	f000 fd1f 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003864:	2037      	movs	r0, #55	@ 0x37
 8003866:	f000 fd36 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 800386a:	e018      	b.n	800389e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <HAL_TIM_Base_MspInit+0x208>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d113      	bne.n	800389e <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003880:	6613      	str	r3, [r2, #96]	@ 0x60
 8003882:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <HAL_TIM_Base_MspInit+0x1ec>)
 8003884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	2019      	movs	r0, #25
 8003894:	f000 fd05 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003898:	2019      	movs	r0, #25
 800389a:	f000 fd1c 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 800389e:	bf00      	nop
 80038a0:	3738      	adds	r7, #56	@ 0x38
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40000400 	.word	0x40000400
 80038b4:	200007cc 	.word	0x200007cc
 80038b8:	40020030 	.word	0x40020030
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40001400 	.word	0x40001400
 80038c8:	40014400 	.word	0x40014400

080038cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d128      	bne.n	8003940 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	4a15      	ldr	r2, [pc, #84]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038fa:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	4a0f      	ldr	r2, [pc, #60]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800391e:	2322      	movs	r3, #34	@ 0x22
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800392e:	2301      	movs	r3, #1
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800393c:	f001 f818 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	@ 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	@ 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	@ (80039f8 <HAL_TIM_MspPostInit+0xac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d11e      	bne.n	80039ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a22      	ldr	r2, [pc, #136]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800398a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003998:	2306      	movs	r3, #6
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039a6:	f000 ffe3 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80039aa:	e021      	b.n	80039f0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <HAL_TIM_MspPostInit+0xb4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d11c      	bne.n	80039f0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_TIM_MspPostInit+0xb0>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039ce:	2310      	movs	r3, #16
 80039d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039de:	2302      	movs	r3, #2
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	4619      	mov	r1, r3
 80039e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ec:	f000 ffc0 	bl	8004970 <HAL_GPIO_Init>
}
 80039f0:	bf00      	nop
 80039f2:	3728      	adds	r7, #40	@ 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40000400 	.word	0x40000400

08003a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0a0      	sub	sp, #128	@ 0x80
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a1c:	f107 0318 	add.w	r3, r7, #24
 8003a20:	2254      	movs	r2, #84	@ 0x54
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f006 fe9b 	bl	800a760 <memset>
  if(huart->Instance==USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a80      	ldr	r2, [pc, #512]	@ (8003c30 <HAL_UART_MspInit+0x22c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d161      	bne.n	8003af8 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a3c:	f107 0318 	add.w	r3, r7, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 ff41 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a4c:	f7ff fe0e 	bl	800366c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a50:	4b78      	ldr	r3, [pc, #480]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a54:	4a77      	ldr	r2, [pc, #476]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a5c:	4b75      	ldr	r3, [pc, #468]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a68:	4b72      	ldr	r3, [pc, #456]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6c:	4a71      	ldr	r2, [pc, #452]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a80:	2330      	movs	r3, #48	@ 0x30
 8003a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a90:	2307      	movs	r3, #7
 8003a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4867      	ldr	r0, [pc, #412]	@ (8003c38 <HAL_UART_MspInit+0x234>)
 8003a9c:	f000 ff68 	bl	8004970 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003aa0:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003aa2:	4a67      	ldr	r2, [pc, #412]	@ (8003c40 <HAL_UART_MspInit+0x23c>)
 8003aa4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003aa6:	4b65      	ldr	r3, [pc, #404]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003aa8:	2218      	movs	r2, #24
 8003aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aac:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab2:	4b62      	ldr	r3, [pc, #392]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab8:	4b60      	ldr	r3, [pc, #384]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003aba:	2280      	movs	r2, #128	@ 0x80
 8003abc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003abe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003aca:	4b5c      	ldr	r3, [pc, #368]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003ad2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ad8:	4858      	ldr	r0, [pc, #352]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003ada:	f000 fc17 	bl	800430c <HAL_DMA_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003ae4:	f7ff fdc2 	bl	800366c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a54      	ldr	r2, [pc, #336]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003af0:	4a52      	ldr	r2, [pc, #328]	@ (8003c3c <HAL_UART_MspInit+0x238>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003af6:	e097      	b.n	8003c28 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a51      	ldr	r2, [pc, #324]	@ (8003c44 <HAL_UART_MspInit+0x240>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f040 8092 	bne.w	8003c28 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b0c:	f107 0318 	add.w	r3, r7, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fed9 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8003b1c:	f7ff fda6 	bl	800366c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b20:	4b44      	ldr	r3, [pc, #272]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	4a43      	ldr	r2, [pc, #268]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b2c:	4b41      	ldr	r3, [pc, #260]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b38:	4b3e      	ldr	r3, [pc, #248]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b44:	4b3b      	ldr	r3, [pc, #236]	@ (8003c34 <HAL_UART_MspInit+0x230>)
 8003b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b50:	230c      	movs	r3, #12
 8003b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b60:	2307      	movs	r3, #7
 8003b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b6e:	f000 feff 	bl	8004970 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003b72:	4b35      	ldr	r3, [pc, #212]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <HAL_UART_MspInit+0x248>)
 8003b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003b78:	4b33      	ldr	r3, [pc, #204]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b7a:	221a      	movs	r2, #26
 8003b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b7e:	4b32      	ldr	r3, [pc, #200]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b84:	4b30      	ldr	r3, [pc, #192]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b90:	4b2d      	ldr	r3, [pc, #180]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b96:	4b2c      	ldr	r3, [pc, #176]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba2:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ba8:	4827      	ldr	r0, [pc, #156]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003baa:	f000 fbaf 	bl	800430c <HAL_DMA_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003bb4:	f7ff fd5a 	bl	800366c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003bc0:	4a21      	ldr	r2, [pc, #132]	@ (8003c48 <HAL_UART_MspInit+0x244>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <HAL_UART_MspInit+0x250>)
 8003bca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bce:	221b      	movs	r2, #27
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003be0:	2280      	movs	r2, #128	@ 0x80
 8003be2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003bf0:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003bfc:	4814      	ldr	r0, [pc, #80]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003bfe:	f000 fb85 	bl	800430c <HAL_DMA_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003c08:	f7ff fd30 	bl	800366c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a10      	ldr	r2, [pc, #64]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003c10:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003c12:	4a0f      	ldr	r2, [pc, #60]	@ (8003c50 <HAL_UART_MspInit+0x24c>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2026      	movs	r0, #38	@ 0x26
 8003c1e:	f000 fb40 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c22:	2026      	movs	r0, #38	@ 0x26
 8003c24:	f000 fb57 	bl	80042d6 <HAL_NVIC_EnableIRQ>
}
 8003c28:	bf00      	nop
 8003c2a:	3780      	adds	r7, #128	@ 0x80
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40021000 	.word	0x40021000
 8003c38:	48000800 	.word	0x48000800
 8003c3c:	200009c4 	.word	0x200009c4
 8003c40:	4002041c 	.word	0x4002041c
 8003c44:	40004400 	.word	0x40004400
 8003c48:	20000a24 	.word	0x20000a24
 8003c4c:	4002001c 	.word	0x4002001c
 8003c50:	20000a84 	.word	0x20000a84
 8003c54:	40020008 	.word	0x40020008

08003c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <NMI_Handler+0x4>

08003c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <HardFault_Handler+0x4>

08003c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <MemManage_Handler+0x4>

08003c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <BusFault_Handler+0x4>

08003c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <UsageFault_Handler+0x4>

08003c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cae:	f000 f9dd 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <DMA1_Channel1_IRQHandler+0x10>)
 8003cbe:	f000 fd08 	bl	80046d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000a84 	.word	0x20000a84

08003ccc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003cd0:	4802      	ldr	r0, [pc, #8]	@ (8003cdc <DMA1_Channel2_IRQHandler+0x10>)
 8003cd2:	f000 fcfe 	bl	80046d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000a24 	.word	0x20000a24

08003ce0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ce4:	4802      	ldr	r0, [pc, #8]	@ (8003cf0 <DMA1_Channel3_IRQHandler+0x10>)
 8003ce6:	f000 fcf4 	bl	80046d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200007cc 	.word	0x200007cc

08003cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003cf8:	2020      	movs	r0, #32
 8003cfa:	f000 ffeb 	bl	8004cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003d0a:	f003 f821 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000238 	.word	0x20000238

08003d18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d1c:	4803      	ldr	r0, [pc, #12]	@ (8003d2c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003d1e:	f003 f817 	bl	8006d50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003d22:	4803      	ldr	r0, [pc, #12]	@ (8003d30 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003d24:	f003 f814 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000238 	.word	0x20000238
 8003d30:	20000700 	.word	0x20000700

08003d34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <TIM4_IRQHandler+0x10>)
 8003d3a:	f003 f809 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	2000049c 	.word	0x2000049c

08003d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <USART2_IRQHandler+0x10>)
 8003d4e:	f004 ffc3 	bl	8008cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200008f8 	.word	0x200008f8

08003d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d64:	f000 ffb6 	bl	8004cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003d68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d6c:	f000 ffb2 	bl	8004cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d78:	4802      	ldr	r0, [pc, #8]	@ (8003d84 <TIM5_IRQHandler+0x10>)
 8003d7a:	f002 ffe9 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000568 	.word	0x20000568

08003d88 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d8c:	4802      	ldr	r0, [pc, #8]	@ (8003d98 <TIM7_DAC_IRQHandler+0x10>)
 8003d8e:	f002 ffdf 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000634 	.word	0x20000634

08003d9c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003da0:	4802      	ldr	r0, [pc, #8]	@ (8003dac <DMA2_Channel2_IRQHandler+0x10>)
 8003da2:	f000 fc96 	bl	80046d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200009c4 	.word	0x200009c4

08003db0 <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b09b      	sub	sp, #108	@ 0x6c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 8003dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef0 <updateLED+0x140>)
 8003dbe:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 8003dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <updateLED+0x144>)
 8003dca:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dd8:	e076      	b.n	8003ec8 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 8003dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d032      	beq.n	8003e4c <updateLED+0x9c>
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	dc46      	bgt.n	8003e78 <updateLED+0xc8>
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d002      	beq.n	8003df4 <updateLED+0x44>
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d016      	beq.n	8003e20 <updateLED+0x70>
 8003df2:	e041      	b.n	8003e78 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003df4:	f107 0414 	add.w	r4, r7, #20
 8003df8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 8003e02:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003e10:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003e14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003e1e:	e041      	b.n	8003ea4 <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 8003e20:	f107 0414 	add.w	r4, r7, #20
 8003e24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003e2e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003e32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003e3c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003e40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003e4a:	e02b      	b.n	8003ea4 <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003e4c:	f107 0414 	add.w	r4, r7, #20
 8003e50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003e5a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003e5e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8003e68:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003e6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003e76:	e015      	b.n	8003ea4 <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003e78:	f107 0414 	add.w	r4, r7, #20
 8003e7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003e86:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003e8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003e94:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003e98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003ea2:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 8003ea4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	333c      	adds	r3, #60	@ 0x3c
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <updateLED+0x148>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f107 0114 	add.w	r1, r7, #20
 8003eba:	2230      	movs	r2, #48	@ 0x30
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f006 fc7b 	bl	800a7b8 <memcpy>
	for (int i = 0; i < 3; i++){
 8003ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	dd85      	ble.n	8003dda <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 8003ece:	2278      	movs	r2, #120	@ 0x78
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <updateLED+0x148>)
 8003ed4:	f006 fc44 	bl	800a760 <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 8003ed8:	2384      	movs	r3, #132	@ 0x84
 8003eda:	4a07      	ldr	r2, [pc, #28]	@ (8003ef8 <updateLED+0x148>)
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	68b8      	ldr	r0, [r7, #8]
 8003ee0:	f002 fa3c 	bl	800635c <HAL_TIM_PWM_Start_DMA>
 8003ee4:	4603      	mov	r3, r0

}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	376c      	adds	r7, #108	@ 0x6c
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd90      	pop	{r4, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	0800a7ec 	.word	0x0800a7ec
 8003ef4:	0800a7fc 	.word	0x0800a7fc
 8003ef8:	20001280 	.word	0x20001280

08003efc <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 8003f02:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8003f06:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 8003f08:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003f0c:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 8003f0e:	f000 f8bf 	bl	8004090 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f7ff f9fb 	bl	8003318 <serviceMotor>

	while(HAL_GetTick() < Timeout){
 8003f22:	e00a      	b.n	8003f3a <HomeZ+0x3e>
		if(getZStop() == 1){
 8003f24:	f7ff fa20 	bl	8003368 <getZStop>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HomeZ+0x3e>
			//HAL_Delay(50);
			serviceMotor(0, 0);
 8003f2e:	2100      	movs	r1, #0
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7ff f9f1 	bl	8003318 <serviceMotor>
			return 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e006      	b.n	8003f48 <HomeZ+0x4c>
	while(HAL_GetTick() < Timeout){
 8003f3a:	f000 f8a9 	bl	8004090 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d8ee      	bhi.n	8003f24 <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 8003f46:	2301      	movs	r3, #1

}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <SystemInit+0x20>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	4a05      	ldr	r2, [pc, #20]	@ (8003f70 <SystemInit+0x20>)
 8003f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f74:	480d      	ldr	r0, [pc, #52]	@ (8003fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f78:	f7ff ffea 	bl	8003f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f7e:	490d      	ldr	r1, [pc, #52]	@ (8003fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <LoopForever+0xe>)
  movs r3, #0
 8003f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003f84:	e002      	b.n	8003f8c <LoopCopyDataInit>

08003f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f8a:	3304      	adds	r3, #4

08003f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f90:	d3f9      	bcc.n	8003f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f92:	4a0a      	ldr	r2, [pc, #40]	@ (8003fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f94:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc0 <LoopForever+0x16>)
  movs r3, #0
 8003f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f98:	e001      	b.n	8003f9e <LoopFillZerobss>

08003f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f9c:	3204      	adds	r2, #4

08003f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fa0:	d3fb      	bcc.n	8003f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fa2:	f006 fbe5 	bl	800a770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fa6:	f7fd fb57 	bl	8001658 <main>

08003faa <LoopForever>:

LoopForever:
    b LoopForever
 8003faa:	e7fe      	b.n	8003faa <LoopForever>
  ldr   r0, =_estack
 8003fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fb4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003fb8:	0800a85c 	.word	0x0800a85c
  ldr r2, =_sbss
 8003fbc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003fc0:	2000138c 	.word	0x2000138c

08003fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fc4:	e7fe      	b.n	8003fc4 <ADC1_2_IRQHandler>

08003fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f000 f95b 	bl	800428c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f000 f80e 	bl	8003ff8 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
 8003fe6:	e001      	b.n	8003fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fe8:	f7ff fb46 	bl	8003678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fec:	79fb      	ldrb	r3, [r7, #7]

}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <HAL_InitTick+0x68>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800400c:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <HAL_InitTick+0x6c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <HAL_InitTick+0x68>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004018:	fbb1 f3f3 	udiv	r3, r1, r3
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f966 	bl	80042f2 <HAL_SYSTICK_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10f      	bne.n	800404c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d809      	bhi.n	8004046 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004032:	2200      	movs	r2, #0
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	f04f 30ff 	mov.w	r0, #4294967295
 800403a:	f000 f932 	bl	80042a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800403e:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <HAL_InitTick+0x70>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e007      	b.n	8004056 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e004      	b.n	8004056 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e001      	b.n	8004056 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000214 	.word	0x20000214
 8004064:	2000020c 	.word	0x2000020c
 8004068:	20000210 	.word	0x20000210

0800406c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_IncTick+0x1c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_IncTick+0x20>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4413      	add	r3, r2
 800407a:	4a03      	ldr	r2, [pc, #12]	@ (8004088 <HAL_IncTick+0x1c>)
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20001388 	.word	0x20001388
 800408c:	20000214 	.word	0x20000214

08004090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return uwTick;
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_GetTick+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20001388 	.word	0x20001388

080040a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff ffee 	bl	8004090 <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d004      	beq.n	80040cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_Delay+0x40>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040cc:	bf00      	nop
 80040ce:	f7ff ffdf 	bl	8004090 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d8f7      	bhi.n	80040ce <HAL_Delay+0x26>
  {
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000214 	.word	0x20000214

080040ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004108:	4013      	ands	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411e:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	60d3      	str	r3, [r2, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <__NVIC_GetPriorityGrouping+0x18>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	f003 0307 	and.w	r3, r3, #7
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	db0b      	blt.n	800417a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	4907      	ldr	r1, [pc, #28]	@ (8004188 <__NVIC_EnableIRQ+0x38>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2001      	movs	r0, #1
 8004172:	fa00 f202 	lsl.w	r2, r0, r2
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e100 	.word	0xe000e100

0800418c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	2b00      	cmp	r3, #0
 800419e:	db0a      	blt.n	80041b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	490c      	ldr	r1, [pc, #48]	@ (80041d8 <__NVIC_SetPriority+0x4c>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	0112      	lsls	r2, r2, #4
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	440b      	add	r3, r1
 80041b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b4:	e00a      	b.n	80041cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	4908      	ldr	r1, [pc, #32]	@ (80041dc <__NVIC_SetPriority+0x50>)
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	3b04      	subs	r3, #4
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	440b      	add	r3, r1
 80041ca:	761a      	strb	r2, [r3, #24]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000e100 	.word	0xe000e100
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	@ 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f1c3 0307 	rsb	r3, r3, #7
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	bf28      	it	cs
 80041fe:	2304      	movcs	r3, #4
 8004200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3304      	adds	r3, #4
 8004206:	2b06      	cmp	r3, #6
 8004208:	d902      	bls.n	8004210 <NVIC_EncodePriority+0x30>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3b03      	subs	r3, #3
 800420e:	e000      	b.n	8004212 <NVIC_EncodePriority+0x32>
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	43d9      	mvns	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	4313      	orrs	r3, r2
         );
}
 800423a:	4618      	mov	r0, r3
 800423c:	3724      	adds	r7, #36	@ 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004258:	d301      	bcc.n	800425e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800425a:	2301      	movs	r3, #1
 800425c:	e00f      	b.n	800427e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800425e:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <SysTick_Config+0x40>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004266:	210f      	movs	r1, #15
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f7ff ff8e 	bl	800418c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <SysTick_Config+0x40>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004276:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <SysTick_Config+0x40>)
 8004278:	2207      	movs	r2, #7
 800427a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000e010 	.word	0xe000e010

0800428c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff29 	bl	80040ec <__NVIC_SetPriorityGrouping>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042b0:	f7ff ff40 	bl	8004134 <__NVIC_GetPriorityGrouping>
 80042b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff90 	bl	80041e0 <NVIC_EncodePriority>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff5f 	bl	800418c <__NVIC_SetPriority>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff33 	bl	8004150 <__NVIC_EnableIRQ>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ffa4 	bl	8004248 <SysTick_Config>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e08d      	b.n	800443a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	4b47      	ldr	r3, [pc, #284]	@ (8004444 <HAL_DMA_Init+0x138>)
 8004326:	429a      	cmp	r2, r3
 8004328:	d80f      	bhi.n	800434a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b45      	ldr	r3, [pc, #276]	@ (8004448 <HAL_DMA_Init+0x13c>)
 8004332:	4413      	add	r3, r2
 8004334:	4a45      	ldr	r2, [pc, #276]	@ (800444c <HAL_DMA_Init+0x140>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	009a      	lsls	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a42      	ldr	r2, [pc, #264]	@ (8004450 <HAL_DMA_Init+0x144>)
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40
 8004348:	e00e      	b.n	8004368 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	4b40      	ldr	r3, [pc, #256]	@ (8004454 <HAL_DMA_Init+0x148>)
 8004352:	4413      	add	r3, r2
 8004354:	4a3d      	ldr	r2, [pc, #244]	@ (800444c <HAL_DMA_Init+0x140>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <HAL_DMA_Init+0x14c>)
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800438c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa76 	bl	80048ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c8:	d102      	bne.n	80043d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <HAL_DMA_Init+0x104>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d80c      	bhi.n	8004410 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa96 	bl	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e008      	b.n	8004422 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40020407 	.word	0x40020407
 8004448:	bffdfff8 	.word	0xbffdfff8
 800444c:	cccccccd 	.word	0xcccccccd
 8004450:	40020000 	.word	0x40020000
 8004454:	bffdfbf8 	.word	0xbffdfbf8
 8004458:	40020400 	.word	0x40020400

0800445c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_DMA_Start_IT+0x20>
 8004478:	2302      	movs	r3, #2
 800447a:	e066      	b.n	800454a <HAL_DMA_Start_IT+0xee>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d155      	bne.n	800453c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9bb 	bl	8004830 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 020e 	orr.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e00f      	b.n	80044f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 020a 	orr.w	r2, r2, #10
 80044f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004510:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004528:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e005      	b.n	8004548 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004544:	2302      	movs	r3, #2
 8004546:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d005      	beq.n	8004576 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e037      	b.n	80045e6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020e 	bic.w	r2, r2, #14
 8004584:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004594:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045c2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045da:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045e4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d00d      	beq.n	8004638 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2204      	movs	r2, #4
 8004620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e047      	b.n	80046c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020e 	bic.w	r2, r2, #14
 8004646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004662:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004684:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800469c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    }
  }
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2204      	movs	r2, #4
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d026      	beq.n	800474c <HAL_DMA_IRQHandler+0x7a>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d021      	beq.n	800474c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0204 	bic.w	r2, r2, #4
 8004724:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	2104      	movs	r1, #4
 8004734:	fa01 f202 	lsl.w	r2, r1, r2
 8004738:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800474a:	e06c      	b.n	8004826 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2202      	movs	r2, #2
 8004756:	409a      	lsls	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02e      	beq.n	80047be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d029      	beq.n	80047be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 020a 	bic.w	r2, r2, #10
 8004786:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2102      	movs	r1, #2
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d038      	beq.n	8004826 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047bc:	e033      	b.n	8004826 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2208      	movs	r2, #8
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02a      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d025      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 020e 	bic.w	r2, r2, #14
 80047ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f202 	lsl.w	r2, r1, r2
 80047fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004826:	bf00      	nop
 8004828:	bf00      	nop
}
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004846:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004858:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	f003 021f 	and.w	r2, r3, #31
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b10      	cmp	r3, #16
 800487c:	d108      	bne.n	8004890 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800488e:	e007      	b.n	80048a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b16      	ldr	r3, [pc, #88]	@ (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d802      	bhi.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80048c0:	4b15      	ldr	r3, [pc, #84]	@ (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e001      	b.n	80048ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80048c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b08      	subs	r3, #8
 80048d6:	4a12      	ldr	r2, [pc, #72]	@ (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40020407 	.word	0x40020407
 8004918:	40020800 	.word	0x40020800
 800491c:	40020820 	.word	0x40020820
 8004920:	cccccccd 	.word	0xcccccccd
 8004924:	40020880 	.word	0x40020880

08004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a08      	ldr	r2, [pc, #32]	@ (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800494a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	1000823f 	.word	0x1000823f
 800496c:	40020940 	.word	0x40020940

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800497e:	e15a      	b.n	8004c36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 814c 	beq.w	8004c30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d005      	beq.n	80049b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d130      	bne.n	8004a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e6:	2201      	movs	r2, #1
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0201 	and.w	r2, r3, #1
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d017      	beq.n	8004a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d123      	bne.n	8004aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	08da      	lsrs	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3208      	adds	r2, #8
 8004a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	220f      	movs	r2, #15
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3208      	adds	r2, #8
 8004a9c:	6939      	ldr	r1, [r7, #16]
 8004a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2203      	movs	r2, #3
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0203 	and.w	r2, r3, #3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80a6 	beq.w	8004c30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6613      	str	r3, [r2, #96]	@ 0x60
 8004af0:	4b58      	ldr	r3, [pc, #352]	@ (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004afc:	4a56      	ldr	r2, [pc, #344]	@ (8004c58 <HAL_GPIO_Init+0x2e8>)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	3302      	adds	r3, #2
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	220f      	movs	r2, #15
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b26:	d01f      	beq.n	8004b68 <HAL_GPIO_Init+0x1f8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8004c5c <HAL_GPIO_Init+0x2ec>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d019      	beq.n	8004b64 <HAL_GPIO_Init+0x1f4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a4b      	ldr	r2, [pc, #300]	@ (8004c60 <HAL_GPIO_Init+0x2f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_GPIO_Init+0x1f0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c64 <HAL_GPIO_Init+0x2f4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00d      	beq.n	8004b5c <HAL_GPIO_Init+0x1ec>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a49      	ldr	r2, [pc, #292]	@ (8004c68 <HAL_GPIO_Init+0x2f8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <HAL_GPIO_Init+0x1e8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a48      	ldr	r2, [pc, #288]	@ (8004c6c <HAL_GPIO_Init+0x2fc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_GPIO_Init+0x1e4>
 8004b50:	2305      	movs	r3, #5
 8004b52:	e00a      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b54:	2306      	movs	r3, #6
 8004b56:	e008      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	e006      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e004      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e002      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	f002 0203 	and.w	r2, r2, #3
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	4093      	lsls	r3, r2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b7a:	4937      	ldr	r1, [pc, #220]	@ (8004c58 <HAL_GPIO_Init+0x2e8>)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	3302      	adds	r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b88:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bac:	4a30      	ldr	r2, [pc, #192]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bd6:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bdc:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c00:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c06:	4b1a      	ldr	r3, [pc, #104]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c2a:	4a11      	ldr	r2, [pc, #68]	@ (8004c70 <HAL_GPIO_Init+0x300>)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3301      	adds	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f ae9d 	bne.w	8004980 <HAL_GPIO_Init+0x10>
  }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	48000400 	.word	0x48000400
 8004c60:	48000800 	.word	0x48000800
 8004c64:	48000c00 	.word	0x48000c00
 8004c68:	48001000 	.word	0x48001000
 8004c6c:	48001400 	.word	0x48001400
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e001      	b.n	8004c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cc0:	e002      	b.n	8004cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cde:	4b08      	ldr	r3, [pc, #32]	@ (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cea:	4a05      	ldr	r2, [pc, #20]	@ (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fb44 	bl	8003380 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40010400 	.word	0x40010400

08004d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d141      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d12:	4b4b      	ldr	r3, [pc, #300]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d131      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d20:	4b47      	ldr	r3, [pc, #284]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d26:	4a46      	ldr	r2, [pc, #280]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d30:	4b43      	ldr	r3, [pc, #268]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d38:	4a41      	ldr	r2, [pc, #260]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d40:	4b40      	ldr	r3, [pc, #256]	@ (8004e44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2232      	movs	r2, #50	@ 0x32
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0c9b      	lsrs	r3, r3, #18
 8004d52:	3301      	adds	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d56:	e002      	b.n	8004d5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d5e:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6a:	d102      	bne.n	8004d72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f2      	bne.n	8004d58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d72:	4b33      	ldr	r3, [pc, #204]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7e:	d158      	bne.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e057      	b.n	8004e34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d84:	4b2e      	ldr	r3, [pc, #184]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d94:	e04d      	b.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9c:	d141      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d9e:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004daa:	d131      	bne.n	8004e10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dac:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db2:	4a23      	ldr	r2, [pc, #140]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dbc:	4b20      	ldr	r3, [pc, #128]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2232      	movs	r2, #50	@ 0x32
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	0c9b      	lsrs	r3, r3, #18
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de2:	e002      	b.n	8004dea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dea:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d102      	bne.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f2      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0a:	d112      	bne.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e011      	b.n	8004e34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e16:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e20:	e007      	b.n	8004e32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e22:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e2a:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40007000 	.word	0x40007000
 8004e44:	2000020c 	.word	0x2000020c
 8004e48:	431bde83 	.word	0x431bde83

08004e4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4a04      	ldr	r2, [pc, #16]	@ (8004e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e5a:	6093      	str	r3, [r2, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40007000 	.word	0x40007000

08004e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e2fe      	b.n	800547c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d075      	beq.n	8004f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8a:	4b97      	ldr	r3, [pc, #604]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e94:	4b94      	ldr	r3, [pc, #592]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d102      	bne.n	8004eaa <HAL_RCC_OscConfig+0x3e>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x44>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x108>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d157      	bne.n	8004f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e2d9      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x74>
 8004ed2:	4b85      	ldr	r3, [pc, #532]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a84      	ldr	r2, [pc, #528]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e01d      	b.n	8004f1c <HAL_RCC_OscConfig+0xb0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x98>
 8004eea:	4b7f      	ldr	r3, [pc, #508]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7e      	ldr	r2, [pc, #504]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7b      	ldr	r2, [pc, #492]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0xb0>
 8004f04:	4b78      	ldr	r3, [pc, #480]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a77      	ldr	r2, [pc, #476]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b75      	ldr	r3, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a74      	ldr	r2, [pc, #464]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7ff f8b4 	bl	8004090 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7ff f8b0 	bl	8004090 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	@ 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e29e      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0xc0>
 8004f4a:	e014      	b.n	8004f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7ff f8a0 	bl	8004090 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f54:	f7ff f89c 	bl	8004090 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	@ 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e28a      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f66:	4b60      	ldr	r3, [pc, #384]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0xe8>
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d075      	beq.n	800506e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f82:	4b59      	ldr	r3, [pc, #356]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f8c:	4b56      	ldr	r3, [pc, #344]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x136>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d002      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x13c>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11f      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x154>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e25d      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b49      	ldr	r3, [pc, #292]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	4946      	ldr	r1, [pc, #280]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fd4:	4b45      	ldr	r3, [pc, #276]	@ (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff f80d 	bl	8003ff8 <HAL_InitTick>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d043      	beq.n	800506c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e249      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d023      	beq.n	8005038 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7ff f848 	bl	8004090 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005004:	f7ff f844 	bl	8004090 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e232      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005016:	4b34      	ldr	r3, [pc, #208]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4b31      	ldr	r3, [pc, #196]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	492d      	ldr	r1, [pc, #180]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
 8005036:	e01a      	b.n	800506e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2a      	ldr	r2, [pc, #168]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 800503e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7ff f824 	bl	8004090 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7ff f820 	bl	8004090 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e20e      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800505e:	4b22      	ldr	r3, [pc, #136]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1e0>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800506c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d041      	beq.n	80050fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01c      	beq.n	80050bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 8005084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005088:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fe fffd 	bl	8004090 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509a:	f7fe fff9 	bl	8004090 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e1e7      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ac:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ef      	beq.n	800509a <HAL_RCC_OscConfig+0x22e>
 80050ba:	e020      	b.n	80050fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 80050be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c2:	4a09      	ldr	r2, [pc, #36]	@ (80050e8 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fe ffe0 	bl	8004090 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050d2:	e00d      	b.n	80050f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fe ffdc 	bl	8004090 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d906      	bls.n	80050f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e1ca      	b.n	800547c <HAL_RCC_OscConfig+0x610>
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ea      	bne.n	80050d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a6 	beq.w	8005258 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510c:	2300      	movs	r3, #0
 800510e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005110:	4b84      	ldr	r3, [pc, #528]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_OscConfig+0x2b4>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x2b6>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	4b7f      	ldr	r3, [pc, #508]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512a:	4a7e      	ldr	r2, [pc, #504]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005130:	6593      	str	r3, [r2, #88]	@ 0x58
 8005132:	4b7c      	ldr	r3, [pc, #496]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800513e:	2301      	movs	r3, #1
 8005140:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005142:	4b79      	ldr	r3, [pc, #484]	@ (8005328 <HAL_RCC_OscConfig+0x4bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d118      	bne.n	8005180 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514e:	4b76      	ldr	r3, [pc, #472]	@ (8005328 <HAL_RCC_OscConfig+0x4bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a75      	ldr	r2, [pc, #468]	@ (8005328 <HAL_RCC_OscConfig+0x4bc>)
 8005154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515a:	f7fe ff99 	bl	8004090 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005162:	f7fe ff95 	bl	8004090 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e183      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005174:	4b6c      	ldr	r3, [pc, #432]	@ (8005328 <HAL_RCC_OscConfig+0x4bc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d108      	bne.n	800519a <HAL_RCC_OscConfig+0x32e>
 8005188:	4b66      	ldr	r3, [pc, #408]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	4a65      	ldr	r2, [pc, #404]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005198:	e024      	b.n	80051e4 <HAL_RCC_OscConfig+0x378>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d110      	bne.n	80051c4 <HAL_RCC_OscConfig+0x358>
 80051a2:	4b60      	ldr	r3, [pc, #384]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f043 0304 	orr.w	r3, r3, #4
 80051ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051c2:	e00f      	b.n	80051e4 <HAL_RCC_OscConfig+0x378>
 80051c4:	4b57      	ldr	r3, [pc, #348]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ca:	4a56      	ldr	r2, [pc, #344]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051d4:	4b53      	ldr	r3, [pc, #332]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	4a52      	ldr	r2, [pc, #328]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d016      	beq.n	800521a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fe ff50 	bl	8004090 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f2:	e00a      	b.n	800520a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fe ff4c 	bl	8004090 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e138      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520a:	4b46      	ldr	r3, [pc, #280]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ed      	beq.n	80051f4 <HAL_RCC_OscConfig+0x388>
 8005218:	e015      	b.n	8005246 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fe ff39 	bl	8004090 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fe ff35 	bl	8004090 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e121      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005238:	4b3a      	ldr	r3, [pc, #232]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ed      	bne.n	8005222 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	4a34      	ldr	r2, [pc, #208]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d03c      	beq.n	80052de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01c      	beq.n	80052a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800526c:	4b2d      	ldr	r3, [pc, #180]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 800526e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005272:	4a2c      	ldr	r2, [pc, #176]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fe ff08 	bl	8004090 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005284:	f7fe ff04 	bl	8004090 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0f2      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005296:	4b23      	ldr	r3, [pc, #140]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <HAL_RCC_OscConfig+0x418>
 80052a4:	e01b      	b.n	80052de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80052a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fe feeb 	bl	8004090 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052be:	f7fe fee7 	bl	8004090 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e0d5      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052d0:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1ef      	bne.n	80052be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80c9 	beq.w	800547a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	f000 8083 	beq.w	80053fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d15e      	bne.n	80053bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a08      	ldr	r2, [pc, #32]	@ (8005324 <HAL_RCC_OscConfig+0x4b8>)
 8005304:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fe fec1 	bl	8004090 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	e00c      	b.n	800532c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005312:	f7fe febd 	bl	8004090 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d905      	bls.n	800532c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e0ab      	b.n	800547c <HAL_RCC_OscConfig+0x610>
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ec      	bne.n	8005312 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005338:	4b52      	ldr	r3, [pc, #328]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	4b52      	ldr	r3, [pc, #328]	@ (8005488 <HAL_RCC_OscConfig+0x61c>)
 800533e:	4013      	ands	r3, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6a11      	ldr	r1, [r2, #32]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005348:	3a01      	subs	r2, #1
 800534a:	0112      	lsls	r2, r2, #4
 800534c:	4311      	orrs	r1, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005352:	0212      	lsls	r2, r2, #8
 8005354:	4311      	orrs	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800535a:	0852      	lsrs	r2, r2, #1
 800535c:	3a01      	subs	r2, #1
 800535e:	0552      	lsls	r2, r2, #21
 8005360:	4311      	orrs	r1, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	3a01      	subs	r2, #1
 800536a:	0652      	lsls	r2, r2, #25
 800536c:	4311      	orrs	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005372:	06d2      	lsls	r2, r2, #27
 8005374:	430a      	orrs	r2, r1
 8005376:	4943      	ldr	r1, [pc, #268]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 8005378:	4313      	orrs	r3, r2
 800537a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800537c:	4b41      	ldr	r3, [pc, #260]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a40      	ldr	r2, [pc, #256]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 8005382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005386:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005388:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a3d      	ldr	r2, [pc, #244]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800538e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005392:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fe fe7c 	bl	8004090 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539c:	f7fe fe78 	bl	8004090 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e066      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ae:	4b35      	ldr	r3, [pc, #212]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x530>
 80053ba:	e05e      	b.n	800547a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053bc:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a30      	ldr	r2, [pc, #192]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fe fe62 	bl	8004090 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fe fe5e 	bl	8004090 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e04c      	b.n	800547c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e2:	4b28      	ldr	r3, [pc, #160]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053ee:	4b25      	ldr	r3, [pc, #148]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	4924      	ldr	r1, [pc, #144]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 80053f4:	4b25      	ldr	r3, [pc, #148]	@ (800548c <HAL_RCC_OscConfig+0x620>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	60cb      	str	r3, [r1, #12]
 80053fa:	e03e      	b.n	800547a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e039      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005408:	4b1e      	ldr	r3, [pc, #120]	@ (8005484 <HAL_RCC_OscConfig+0x618>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 0203 	and.w	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	429a      	cmp	r2, r3
 800541a:	d12c      	bne.n	8005476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	3b01      	subs	r3, #1
 8005428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d123      	bne.n	8005476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d11b      	bne.n	8005476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d113      	bne.n	8005476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	3b01      	subs	r3, #1
 800545c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d109      	bne.n	8005476 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	3b01      	subs	r3, #1
 8005470:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d001      	beq.n	800547a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40021000 	.word	0x40021000
 8005488:	019f800c 	.word	0x019f800c
 800548c:	feeefffc 	.word	0xfeeefffc

08005490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e11e      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b91      	ldr	r3, [pc, #580]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d910      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b8e      	ldr	r3, [pc, #568]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 020f 	bic.w	r2, r3, #15
 80054be:	498c      	ldr	r1, [pc, #560]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b8a      	ldr	r3, [pc, #552]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e106      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d073      	beq.n	80055cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d129      	bne.n	8005540 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ec:	4b81      	ldr	r3, [pc, #516]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0f4      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054fc:	f000 f99e 	bl	800583c <RCC_GetSysClockFreqFromPLLSource>
 8005500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4a7c      	ldr	r2, [pc, #496]	@ (80056f8 <HAL_RCC_ClockConfig+0x268>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d93f      	bls.n	800558a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800550a:	4b7a      	ldr	r3, [pc, #488]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800551e:	2b00      	cmp	r3, #0
 8005520:	d033      	beq.n	800558a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005526:	2b00      	cmp	r3, #0
 8005528:	d12f      	bne.n	800558a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800552a:	4b72      	ldr	r3, [pc, #456]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005532:	4a70      	ldr	r2, [pc, #448]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005538:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800553a:	2380      	movs	r3, #128	@ 0x80
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e024      	b.n	800558a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d107      	bne.n	8005558 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005548:	4b6a      	ldr	r3, [pc, #424]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0c6      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005558:	4b66      	ldr	r3, [pc, #408]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0be      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005568:	f000 f8ce 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 800556c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4a61      	ldr	r2, [pc, #388]	@ (80056f8 <HAL_RCC_ClockConfig+0x268>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d909      	bls.n	800558a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005576:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800557e:	4a5d      	ldr	r2, [pc, #372]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005584:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005586:	2380      	movs	r3, #128	@ 0x80
 8005588:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800558a:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 0203 	bic.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4957      	ldr	r1, [pc, #348]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fe fd78 	bl	8004090 <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a4:	f7fe fd74 	bl	8004090 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e095      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	4b4e      	ldr	r3, [pc, #312]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 020c 	and.w	r2, r3, #12
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1eb      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d023      	beq.n	8005620 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e4:	4b43      	ldr	r3, [pc, #268]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4a42      	ldr	r2, [pc, #264]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80055ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055fc:	4b3d      	ldr	r3, [pc, #244]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005604:	4a3b      	ldr	r2, [pc, #236]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800560a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800560c:	4b39      	ldr	r3, [pc, #228]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4936      	ldr	r1, [pc, #216]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
 800561e:	e008      	b.n	8005632 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d105      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005626:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4a32      	ldr	r2, [pc, #200]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800562c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005630:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005632:	4b2f      	ldr	r3, [pc, #188]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d21d      	bcs.n	800567c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005640:	4b2b      	ldr	r3, [pc, #172]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 020f 	bic.w	r2, r3, #15
 8005648:	4929      	ldr	r1, [pc, #164]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005650:	f7fe fd1e 	bl	8004090 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	e00a      	b.n	800566e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005658:	f7fe fd1a 	bl	8004090 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e03b      	b.n	80056e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b20      	ldr	r3, [pc, #128]	@ (80056f0 <HAL_RCC_ClockConfig+0x260>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d1ed      	bne.n	8005658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4917      	ldr	r1, [pc, #92]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a6:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	490f      	ldr	r1, [pc, #60]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056ba:	f000 f825 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <HAL_RCC_ClockConfig+0x264>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	490c      	ldr	r1, [pc, #48]	@ (80056fc <HAL_RCC_ClockConfig+0x26c>)
 80056cc:	5ccb      	ldrb	r3, [r1, r3]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	fa22 f303 	lsr.w	r3, r2, r3
 80056d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005700 <HAL_RCC_ClockConfig+0x270>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056da:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x274>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fc8a 	bl	8003ff8 <HAL_InitTick>
 80056e4:	4603      	mov	r3, r0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40022000 	.word	0x40022000
 80056f4:	40021000 	.word	0x40021000
 80056f8:	04c4b400 	.word	0x04c4b400
 80056fc:	0800a80c 	.word	0x0800a80c
 8005700:	2000020c 	.word	0x2000020c
 8005704:	20000210 	.word	0x20000210

08005708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800570e:	4b2c      	ldr	r3, [pc, #176]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
 8005716:	2b04      	cmp	r3, #4
 8005718:	d102      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800571a:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e047      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005720:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 030c 	and.w	r3, r3, #12
 8005728:	2b08      	cmp	r3, #8
 800572a:	d102      	bne.n	8005732 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800572c:	4b26      	ldr	r3, [pc, #152]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	e03e      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005732:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d136      	bne.n	80057ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800573e:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005748:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	3301      	adds	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b03      	cmp	r3, #3
 800575a:	d10c      	bne.n	8005776 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800575c:	4a1a      	ldr	r2, [pc, #104]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	4a16      	ldr	r2, [pc, #88]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005766:	68d2      	ldr	r2, [r2, #12]
 8005768:	0a12      	lsrs	r2, r2, #8
 800576a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
      break;
 8005774:	e00c      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005776:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	4a10      	ldr	r2, [pc, #64]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005780:	68d2      	ldr	r2, [r2, #12]
 8005782:	0a12      	lsrs	r2, r2, #8
 8005784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
      break;
 800578e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0e5b      	lsrs	r3, r3, #25
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e001      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057b0:	693b      	ldr	r3, [r7, #16]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	016e3600 	.word	0x016e3600

080057cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	2000020c 	.word	0x2000020c

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057e8:	f7ff fff0 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4904      	ldr	r1, [pc, #16]	@ (800580c <HAL_RCC_GetPCLK1Freq+0x28>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000
 800580c:	0800a81c 	.word	0x0800a81c

08005810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005814:	f7ff ffda 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	0adb      	lsrs	r3, r3, #11
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4904      	ldr	r1, [pc, #16]	@ (8005838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	0800a81c 	.word	0x0800a81c

0800583c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800584c:	4b1b      	ldr	r3, [pc, #108]	@ (80058bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d10c      	bne.n	800587a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005860:	4a17      	ldr	r2, [pc, #92]	@ (80058c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800586a:	68d2      	ldr	r2, [r2, #12]
 800586c:	0a12      	lsrs	r2, r2, #8
 800586e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	617b      	str	r3, [r7, #20]
    break;
 8005878:	e00c      	b.n	8005894 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	4a0e      	ldr	r2, [pc, #56]	@ (80058bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005884:	68d2      	ldr	r2, [r2, #12]
 8005886:	0a12      	lsrs	r2, r2, #8
 8005888:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
    break;
 8005892:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	0e5b      	lsrs	r3, r3, #25
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	3301      	adds	r3, #1
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058ae:	687b      	ldr	r3, [r7, #4]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40021000 	.word	0x40021000
 80058c0:	016e3600 	.word	0x016e3600
 80058c4:	00f42400 	.word	0x00f42400

080058c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058d0:	2300      	movs	r3, #0
 80058d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058d4:	2300      	movs	r3, #0
 80058d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8098 	beq.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058e6:	2300      	movs	r3, #0
 80058e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ea:	4b43      	ldr	r3, [pc, #268]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f6:	4b40      	ldr	r3, [pc, #256]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	4a3f      	ldr	r2, [pc, #252]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005900:	6593      	str	r3, [r2, #88]	@ 0x58
 8005902:	4b3d      	ldr	r3, [pc, #244]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590e:	2301      	movs	r3, #1
 8005910:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005912:	4b3a      	ldr	r3, [pc, #232]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a39      	ldr	r2, [pc, #228]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800591c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800591e:	f7fe fbb7 	bl	8004090 <HAL_GetTick>
 8005922:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005924:	e009      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005926:	f7fe fbb3 	bl	8004090 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d902      	bls.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	74fb      	strb	r3, [r7, #19]
        break;
 8005938:	e005      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800593a:	4b30      	ldr	r3, [pc, #192]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ef      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005946:	7cfb      	ldrb	r3, [r7, #19]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d159      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800594c:	4b2a      	ldr	r3, [pc, #168]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005956:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01e      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	429a      	cmp	r2, r3
 8005966:	d019      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005968:	4b23      	ldr	r3, [pc, #140]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005974:	4b20      	ldr	r3, [pc, #128]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597a:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005984:	4b1c      	ldr	r3, [pc, #112]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598a:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005994:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fe fb73 	bl	8004090 <HAL_GetTick>
 80059aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ac:	e00b      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fe fb6f 	bl	8004090 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d902      	bls.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	74fb      	strb	r3, [r7, #19]
            break;
 80059c4:	e006      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c6:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ec      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e8:	4903      	ldr	r1, [pc, #12]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059f2:	7cfb      	ldrb	r3, [r7, #19]
 80059f4:	74bb      	strb	r3, [r7, #18]
 80059f6:	e005      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a04:	7c7b      	ldrb	r3, [r7, #17]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a22:	4ba1      	ldr	r3, [pc, #644]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a28:	f023 0203 	bic.w	r2, r3, #3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	499d      	ldr	r1, [pc, #628]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a44:	4b98      	ldr	r3, [pc, #608]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f023 020c 	bic.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4995      	ldr	r1, [pc, #596]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a66:	4b90      	ldr	r3, [pc, #576]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	498c      	ldr	r1, [pc, #560]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a88:	4b87      	ldr	r3, [pc, #540]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4984      	ldr	r1, [pc, #528]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	497b      	ldr	r1, [pc, #492]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005acc:	4b76      	ldr	r3, [pc, #472]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	4973      	ldr	r1, [pc, #460]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aee:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	496a      	ldr	r1, [pc, #424]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b10:	4b65      	ldr	r3, [pc, #404]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4962      	ldr	r1, [pc, #392]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b32:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	4959      	ldr	r1, [pc, #356]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b54:	4b54      	ldr	r3, [pc, #336]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b5a:	f023 0203 	bic.w	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	4951      	ldr	r1, [pc, #324]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b76:	4b4c      	ldr	r3, [pc, #304]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4948      	ldr	r1, [pc, #288]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b98:	4b43      	ldr	r3, [pc, #268]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	4940      	ldr	r1, [pc, #256]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bd0:	4b35      	ldr	r3, [pc, #212]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bde:	4932      	ldr	r1, [pc, #200]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c08:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	4924      	ldr	r1, [pc, #144]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c28:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c40:	4b19      	ldr	r3, [pc, #100]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	4916      	ldr	r1, [pc, #88]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b11      	ldr	r3, [pc, #68]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a10      	ldr	r2, [pc, #64]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d019      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	4908      	ldr	r1, [pc, #32]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c96:	d109      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a02      	ldr	r2, [pc, #8]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca2:	60d3      	str	r3, [r2, #12]
 8005ca4:	e002      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005cb8:	4b29      	ldr	r3, [pc, #164]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	4926      	ldr	r1, [pc, #152]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cd8:	4b21      	ldr	r3, [pc, #132]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	4918      	ldr	r1, [pc, #96]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d10:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a12      	ldr	r2, [pc, #72]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d28:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d36:	490a      	ldr	r1, [pc, #40]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d46:	d105      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d48:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a04      	ldr	r2, [pc, #16]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000

08005d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e054      	b.n	8005e20 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d111      	bne.n	8005da6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f002 faac 	bl	80082e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a23      	ldr	r2, [pc, #140]	@ (8005e28 <HAL_TIM_Base_Init+0xc4>)
 8005d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f001 fdf5 	bl	80079a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	080036c1 	.word	0x080036c1

08005e2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e04c      	b.n	8005ede <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <HAL_TIM_Base_Start+0xc0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d022      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d01d      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a22      	ldr	r2, [pc, #136]	@ (8005ef0 <HAL_TIM_Base_Start+0xc4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d018      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a21      	ldr	r2, [pc, #132]	@ (8005ef4 <HAL_TIM_Base_Start+0xc8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef8 <HAL_TIM_Base_Start+0xcc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	@ (8005efc <HAL_TIM_Base_Start+0xd0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f00 <HAL_TIM_Base_Start+0xd4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_Base_Start+0x70>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	@ (8005f04 <HAL_TIM_Base_Start+0xd8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d115      	bne.n	8005ec8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	4b19      	ldr	r3, [pc, #100]	@ (8005f08 <HAL_TIM_Base_Start+0xdc>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d015      	beq.n	8005eda <HAL_TIM_Base_Start+0xae>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d011      	beq.n	8005eda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	e008      	b.n	8005eda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40013400 	.word	0x40013400
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40015000 	.word	0x40015000
 8005f08:	00010007 	.word	0x00010007

08005f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d001      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e054      	b.n	8005fce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a26      	ldr	r2, [pc, #152]	@ (8005fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d022      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4e:	d01d      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a22      	ldr	r2, [pc, #136]	@ (8005fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d018      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a21      	ldr	r2, [pc, #132]	@ (8005fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d013      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00e      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1e      	ldr	r2, [pc, #120]	@ (8005fec <HAL_TIM_Base_Start_IT+0xe0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x80>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d115      	bne.n	8005fb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	4b19      	ldr	r3, [pc, #100]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d015      	beq.n	8005fca <HAL_TIM_Base_Start_IT+0xbe>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d011      	beq.n	8005fca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb6:	e008      	b.n	8005fca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e000      	b.n	8005fcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40013400 	.word	0x40013400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40015000 	.word	0x40015000
 8005ff8:	00010007 	.word	0x00010007

08005ffc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a1a      	ldr	r2, [r3, #32]
 800601a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <HAL_TIM_Base_Stop_IT+0x48>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800602e:	4013      	ands	r3, r2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <HAL_TIM_Base_Stop_IT+0x48>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e054      	b.n	8006118 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d111      	bne.n	800609e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f002 f930 	bl	80082e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a23      	ldr	r2, [pc, #140]	@ (8006120 <HAL_TIM_PWM_Init+0xc4>)
 8006094:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f001 fc79 	bl	80079a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	08006125 	.word	0x08006125

08006124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_TIM_PWM_Start+0x24>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	e03c      	b.n	80061d6 <HAL_TIM_PWM_Start+0x9e>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b04      	cmp	r3, #4
 8006160:	d109      	bne.n	8006176 <HAL_TIM_PWM_Start+0x3e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	e02f      	b.n	80061d6 <HAL_TIM_PWM_Start+0x9e>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b08      	cmp	r3, #8
 800617a:	d109      	bne.n	8006190 <HAL_TIM_PWM_Start+0x58>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	e022      	b.n	80061d6 <HAL_TIM_PWM_Start+0x9e>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b0c      	cmp	r3, #12
 8006194:	d109      	bne.n	80061aa <HAL_TIM_PWM_Start+0x72>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e015      	b.n	80061d6 <HAL_TIM_PWM_Start+0x9e>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_PWM_Start+0x8c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e008      	b.n	80061d6 <HAL_TIM_PWM_Start+0x9e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0a6      	b.n	800632c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xb6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ec:	e023      	b.n	8006236 <HAL_TIM_PWM_Start+0xfe>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xc6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061fc:	e01b      	b.n	8006236 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0xd6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800620c:	e013      	b.n	8006236 <HAL_TIM_PWM_Start+0xfe>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xe6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800621c:	e00b      	b.n	8006236 <HAL_TIM_PWM_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xf6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800622c:	e003      	b.n	8006236 <HAL_TIM_PWM_Start+0xfe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2201      	movs	r2, #1
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f002 f82c 	bl	800829c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3a      	ldr	r2, [pc, #232]	@ (8006334 <HAL_TIM_PWM_Start+0x1fc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_PWM_Start+0x148>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a39      	ldr	r2, [pc, #228]	@ (8006338 <HAL_TIM_PWM_Start+0x200>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_PWM_Start+0x148>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a37      	ldr	r2, [pc, #220]	@ (800633c <HAL_TIM_PWM_Start+0x204>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_PWM_Start+0x148>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a36      	ldr	r2, [pc, #216]	@ (8006340 <HAL_TIM_PWM_Start+0x208>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_PWM_Start+0x148>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a34      	ldr	r2, [pc, #208]	@ (8006344 <HAL_TIM_PWM_Start+0x20c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_PWM_Start+0x148>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a33      	ldr	r2, [pc, #204]	@ (8006348 <HAL_TIM_PWM_Start+0x210>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d101      	bne.n	8006284 <HAL_TIM_PWM_Start+0x14c>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_TIM_PWM_Start+0x14e>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a25      	ldr	r2, [pc, #148]	@ (8006334 <HAL_TIM_PWM_Start+0x1fc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ac:	d01d      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a26      	ldr	r2, [pc, #152]	@ (800634c <HAL_TIM_PWM_Start+0x214>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <HAL_TIM_PWM_Start+0x218>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a23      	ldr	r2, [pc, #140]	@ (8006354 <HAL_TIM_PWM_Start+0x21c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <HAL_TIM_PWM_Start+0x200>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <HAL_TIM_PWM_Start+0x204>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1b2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a18      	ldr	r2, [pc, #96]	@ (8006348 <HAL_TIM_PWM_Start+0x210>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d115      	bne.n	8006316 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	4b19      	ldr	r3, [pc, #100]	@ (8006358 <HAL_TIM_PWM_Start+0x220>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d015      	beq.n	8006328 <HAL_TIM_PWM_Start+0x1f0>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006302:	d011      	beq.n	8006328 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	e008      	b.n	8006328 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e000      	b.n	800632a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006328:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800
 8006348:	40015000 	.word	0x40015000
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	bf0c      	ite	eq
 8006380:	2301      	moveq	r3, #1
 8006382:	2300      	movne	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e03c      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d109      	bne.n	80063a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e02f      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d109      	bne.n	80063bc <HAL_TIM_PWM_Start_DMA+0x60>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e022      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d109      	bne.n	80063d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e015      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d109      	bne.n	80063f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e008      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
 8006408:	e1b5      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e03c      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x142>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d109      	bne.n	800643e <HAL_TIM_PWM_Start_DMA+0xe2>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e02f      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x142>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e022      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x142>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d109      	bne.n	8006472 <HAL_TIM_PWM_Start_DMA+0x116>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	bf0c      	ite	eq
 800646a:	2301      	moveq	r3, #1
 800646c:	2300      	movne	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e015      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x142>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b10      	cmp	r3, #16
 8006476:	d109      	bne.n	800648c <HAL_TIM_PWM_Start_DMA+0x130>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e008      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x142>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d034      	beq.n	800650c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_TIM_PWM_Start_DMA+0x152>
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e161      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start_DMA+0x166>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064c0:	e026      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start_DMA+0x176>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064d0:	e01e      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x186>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064e0:	e016      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_PWM_Start_DMA+0x196>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064f0:	e00e      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006500:	e006      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800650a:	e001      	b.n	8006510 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e132      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b0c      	cmp	r3, #12
 8006514:	f200 80ae 	bhi.w	8006674 <HAL_TIM_PWM_Start_DMA+0x318>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006555 	.word	0x08006555
 8006524:	08006675 	.word	0x08006675
 8006528:	08006675 	.word	0x08006675
 800652c:	08006675 	.word	0x08006675
 8006530:	0800659d 	.word	0x0800659d
 8006534:	08006675 	.word	0x08006675
 8006538:	08006675 	.word	0x08006675
 800653c:	08006675 	.word	0x08006675
 8006540:	080065e5 	.word	0x080065e5
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	08006675 	.word	0x08006675
 8006550:	0800662d 	.word	0x0800662d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	4a89      	ldr	r2, [pc, #548]	@ (8006780 <HAL_TIM_PWM_Start_DMA+0x424>)
 800655a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	4a88      	ldr	r2, [pc, #544]	@ (8006784 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	4a87      	ldr	r2, [pc, #540]	@ (8006788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800656a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3334      	adds	r3, #52	@ 0x34
 8006578:	461a      	mov	r2, r3
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	f7fd ff6e 	bl	800445c <HAL_DMA_Start_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e0f5      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006598:	60da      	str	r2, [r3, #12]
      break;
 800659a:	e06e      	b.n	800667a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	4a77      	ldr	r2, [pc, #476]	@ (8006780 <HAL_TIM_PWM_Start_DMA+0x424>)
 80065a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	4a76      	ldr	r2, [pc, #472]	@ (8006784 <HAL_TIM_PWM_Start_DMA+0x428>)
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	4a75      	ldr	r2, [pc, #468]	@ (8006788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3338      	adds	r3, #56	@ 0x38
 80065c0:	461a      	mov	r2, r3
 80065c2:	887b      	ldrh	r3, [r7, #2]
 80065c4:	f7fd ff4a 	bl	800445c <HAL_DMA_Start_IT>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0d1      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065e0:	60da      	str	r2, [r3, #12]
      break;
 80065e2:	e04a      	b.n	800667a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4a65      	ldr	r2, [pc, #404]	@ (8006780 <HAL_TIM_PWM_Start_DMA+0x424>)
 80065ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a64      	ldr	r2, [pc, #400]	@ (8006784 <HAL_TIM_PWM_Start_DMA+0x428>)
 80065f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	4a63      	ldr	r2, [pc, #396]	@ (8006788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80065fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	333c      	adds	r3, #60	@ 0x3c
 8006608:	461a      	mov	r2, r3
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	f7fd ff26 	bl	800445c <HAL_DMA_Start_IT>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0ad      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006628:	60da      	str	r2, [r3, #12]
      break;
 800662a:	e026      	b.n	800667a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	4a53      	ldr	r2, [pc, #332]	@ (8006780 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006632:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	4a52      	ldr	r2, [pc, #328]	@ (8006784 <HAL_TIM_PWM_Start_DMA+0x428>)
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006640:	4a51      	ldr	r2, [pc, #324]	@ (8006788 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006642:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3340      	adds	r3, #64	@ 0x40
 8006650:	461a      	mov	r2, r3
 8006652:	887b      	ldrh	r3, [r7, #2]
 8006654:	f7fd ff02 	bl	800445c <HAL_DMA_Start_IT>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e089      	b.n	8006776 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006670:	60da      	str	r2, [r3, #12]
      break;
 8006672:	e002      	b.n	800667a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	bf00      	nop
  }

  if (status == HAL_OK)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d179      	bne.n	8006774 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f001 fe07 	bl	800829c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3e      	ldr	r2, [pc, #248]	@ (800678c <HAL_TIM_PWM_Start_DMA+0x430>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_TIM_PWM_Start_DMA+0x36e>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a3c      	ldr	r2, [pc, #240]	@ (8006790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_TIM_PWM_Start_DMA+0x36e>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006794 <HAL_TIM_PWM_Start_DMA+0x438>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIM_PWM_Start_DMA+0x36e>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a39      	ldr	r2, [pc, #228]	@ (8006798 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIM_PWM_Start_DMA+0x36e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a38      	ldr	r2, [pc, #224]	@ (800679c <HAL_TIM_PWM_Start_DMA+0x440>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIM_PWM_Start_DMA+0x36e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a36      	ldr	r2, [pc, #216]	@ (80067a0 <HAL_TIM_PWM_Start_DMA+0x444>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_PWM_Start_DMA+0x372>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <HAL_TIM_PWM_Start_DMA+0x374>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a28      	ldr	r2, [pc, #160]	@ (800678c <HAL_TIM_PWM_Start_DMA+0x430>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f6:	d01d      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <HAL_TIM_PWM_Start_DMA+0x448>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a28      	ldr	r2, [pc, #160]	@ (80067a8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a26      	ldr	r2, [pc, #152]	@ (80067ac <HAL_TIM_PWM_Start_DMA+0x450>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_TIM_PWM_Start_DMA+0x434>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_TIM_PWM_Start_DMA+0x444>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d115      	bne.n	8006760 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	4b1d      	ldr	r3, [pc, #116]	@ (80067b0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800673c:	4013      	ands	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b06      	cmp	r3, #6
 8006744:	d015      	beq.n	8006772 <HAL_TIM_PWM_Start_DMA+0x416>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	d011      	beq.n	8006772 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675e:	e008      	b.n	8006772 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e000      	b.n	8006774 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	0800788f 	.word	0x0800788f
 8006784:	0800793b 	.word	0x0800793b
 8006788:	080077f9 	.word	0x080077f9
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40013400 	.word	0x40013400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40015000 	.word	0x40015000
 80067a4:	40000400 	.word	0x40000400
 80067a8:	40000800 	.word	0x40000800
 80067ac:	40000c00 	.word	0x40000c00
 80067b0:	00010007 	.word	0x00010007

080067b4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b0c      	cmp	r3, #12
 80067c6:	d855      	bhi.n	8006874 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80067c8:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80067ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ce:	bf00      	nop
 80067d0:	08006805 	.word	0x08006805
 80067d4:	08006875 	.word	0x08006875
 80067d8:	08006875 	.word	0x08006875
 80067dc:	08006875 	.word	0x08006875
 80067e0:	08006821 	.word	0x08006821
 80067e4:	08006875 	.word	0x08006875
 80067e8:	08006875 	.word	0x08006875
 80067ec:	08006875 	.word	0x08006875
 80067f0:	0800683d 	.word	0x0800683d
 80067f4:	08006875 	.word	0x08006875
 80067f8:	08006875 	.word	0x08006875
 80067fc:	08006875 	.word	0x08006875
 8006800:	08006859 	.word	0x08006859
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006812:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd fef3 	bl	8004604 <HAL_DMA_Abort_IT>
      break;
 800681e:	e02c      	b.n	800687a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800682e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	4618      	mov	r0, r3
 8006836:	f7fd fee5 	bl	8004604 <HAL_DMA_Abort_IT>
      break;
 800683a:	e01e      	b.n	800687a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800684a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	4618      	mov	r0, r3
 8006852:	f7fd fed7 	bl	8004604 <HAL_DMA_Abort_IT>
      break;
 8006856:	e010      	b.n	800687a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006866:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd fec9 	bl	8004604 <HAL_DMA_Abort_IT>
      break;
 8006872:	e002      	b.n	800687a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
      break;
 8006878:	bf00      	nop
  }

  if (status == HAL_OK)
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8086 	bne.w	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fd06 	bl	800829c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a40      	ldr	r2, [pc, #256]	@ (8006998 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d018      	beq.n	80068cc <HAL_TIM_PWM_Stop_DMA+0x118>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a3f      	ldr	r2, [pc, #252]	@ (800699c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <HAL_TIM_PWM_Stop_DMA+0x118>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3d      	ldr	r2, [pc, #244]	@ (80069a0 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00e      	beq.n	80068cc <HAL_TIM_PWM_Stop_DMA+0x118>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3c      	ldr	r2, [pc, #240]	@ (80069a4 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d009      	beq.n	80068cc <HAL_TIM_PWM_Stop_DMA+0x118>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3a      	ldr	r2, [pc, #232]	@ (80069a8 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_TIM_PWM_Stop_DMA+0x118>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a39      	ldr	r2, [pc, #228]	@ (80069ac <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d101      	bne.n	80068d0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <HAL_TIM_PWM_Stop_DMA+0x11e>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d017      	beq.n	8006906 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_TIM_PWM_Stop_DMA+0x152>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	f244 4344 	movw	r3, #17476	@ 0x4444
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_TIM_PWM_Stop_DMA+0x152>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Stop_DMA+0x192>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006944:	e023      	b.n	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b04      	cmp	r3, #4
 800694a:	d104      	bne.n	8006956 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006954:	e01b      	b.n	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b08      	cmp	r3, #8
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006964:	e013      	b.n	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006974:	e00b      	b.n	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006984:	e003      	b.n	800698e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	40014800 	.word	0x40014800
 80069ac:	40015000 	.word	0x40015000

080069b0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069d8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d108      	bne.n	80069f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d105      	bne.n	80069f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e6:	7b7b      	ldrb	r3, [r7, #13]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d102      	bne.n	80069f2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ec:	7b3b      	ldrb	r3, [r7, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d001      	beq.n	80069f6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e059      	b.n	8006aaa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0202 	orr.w	r2, r2, #2
 8006a24:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0204 	orr.w	r2, r2, #4
 8006a34:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fc2c 	bl	800829c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	2104      	movs	r1, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fc25 	bl	800829c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a17      	ldr	r2, [pc, #92]	@ (8006ab4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	@ (8006abc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a12      	ldr	r2, [pc, #72]	@ (8006ac0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d101      	bne.n	8006a92 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400
 8006ac4:	40014800 	.word	0x40014800
 8006ac8:	40015000 	.word	0x40015000

08006acc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0a2      	b.n	8006c26 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d111      	bne.n	8006b10 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fbf7 	bl	80082e8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a4a      	ldr	r2, [pc, #296]	@ (8006c30 <HAL_TIM_Encoder_Init+0x164>)
 8006b06:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f000 ff36 	bl	80079a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	4313      	orrs	r3, r2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b82:	f023 030c 	bic.w	r3, r3, #12
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	011a      	lsls	r2, r3, #4
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	031b      	lsls	r3, r3, #12
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006bc0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006bc8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	080038cd 	.word	0x080038cd

08006c34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d110      	bne.n	8006c86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d102      	bne.n	8006c70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c6a:	7b7b      	ldrb	r3, [r7, #13]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d001      	beq.n	8006c74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e069      	b.n	8006d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c84:	e031      	b.n	8006cea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d110      	bne.n	8006cae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d102      	bne.n	8006c98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c92:	7b3b      	ldrb	r3, [r7, #12]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e055      	b.n	8006d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cac:	e01d      	b.n	8006cea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d108      	bne.n	8006cc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d105      	bne.n	8006cc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cba:	7b7b      	ldrb	r3, [r7, #13]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d102      	bne.n	8006cc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cc0:	7b3b      	ldrb	r3, [r7, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d001      	beq.n	8006cca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e03e      	b.n	8006d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_TIM_Encoder_Start+0xc4>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d008      	beq.n	8006d08 <HAL_TIM_Encoder_Start+0xd4>
 8006cf6:	e00f      	b.n	8006d18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 facb 	bl	800829c <TIM_CCxChannelCmd>
      break;
 8006d06:	e016      	b.n	8006d36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	2104      	movs	r1, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fac3 	bl	800829c <TIM_CCxChannelCmd>
      break;
 8006d16:	e00e      	b.n	8006d36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fabb 	bl	800829c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fab4 	bl	800829c <TIM_CCxChannelCmd>
      break;
 8006d34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d026      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d021      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0202 	mvn.w	r2, #2
 8006d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
 8006da4:	e009      	b.n	8006dba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d026      	beq.n	8006e18 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d021      	beq.n	8006e18 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0204 	mvn.w	r2, #4
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	e009      	b.n	8006e12 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d026      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d021      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0208 	mvn.w	r2, #8
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	e009      	b.n	8006e6a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d026      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d021      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0210 	mvn.w	r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2208      	movs	r2, #8
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
 8006eac:	e009      	b.n	8006ec2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00e      	beq.n	8006ef0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0201 	mvn.w	r2, #1
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00e      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f06f 0220 	mvn.w	r2, #32
 8006f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800705e:	2302      	movs	r3, #2
 8007060:	e0ff      	b.n	8007262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b14      	cmp	r3, #20
 800706e:	f200 80f0 	bhi.w	8007252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007072:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	080070cd 	.word	0x080070cd
 800707c:	08007253 	.word	0x08007253
 8007080:	08007253 	.word	0x08007253
 8007084:	08007253 	.word	0x08007253
 8007088:	0800710d 	.word	0x0800710d
 800708c:	08007253 	.word	0x08007253
 8007090:	08007253 	.word	0x08007253
 8007094:	08007253 	.word	0x08007253
 8007098:	0800714f 	.word	0x0800714f
 800709c:	08007253 	.word	0x08007253
 80070a0:	08007253 	.word	0x08007253
 80070a4:	08007253 	.word	0x08007253
 80070a8:	0800718f 	.word	0x0800718f
 80070ac:	08007253 	.word	0x08007253
 80070b0:	08007253 	.word	0x08007253
 80070b4:	08007253 	.word	0x08007253
 80070b8:	080071d1 	.word	0x080071d1
 80070bc:	08007253 	.word	0x08007253
 80070c0:	08007253 	.word	0x08007253
 80070c4:	08007253 	.word	0x08007253
 80070c8:	08007211 	.word	0x08007211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fd1c 	bl	8007b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0208 	orr.w	r2, r2, #8
 80070e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0204 	bic.w	r2, r2, #4
 80070f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	619a      	str	r2, [r3, #24]
      break;
 800710a:	e0a5      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fd96 	bl	8007c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6999      	ldr	r1, [r3, #24]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	021a      	lsls	r2, r3, #8
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	619a      	str	r2, [r3, #24]
      break;
 800714c:	e084      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fe09 	bl	8007d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0208 	orr.w	r2, r2, #8
 8007168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0204 	bic.w	r2, r2, #4
 8007178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69d9      	ldr	r1, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	61da      	str	r2, [r3, #28]
      break;
 800718c:	e064      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fe7b 	bl	8007e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69d9      	ldr	r1, [r3, #28]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	021a      	lsls	r2, r3, #8
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	61da      	str	r2, [r3, #28]
      break;
 80071ce:	e043      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 feee 	bl	8007fb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0208 	orr.w	r2, r2, #8
 80071ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0204 	bic.w	r2, r2, #4
 80071fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800720e:	e023      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 ff38 	bl	800808c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800722a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800723a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	021a      	lsls	r2, r3, #8
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007250:	e002      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop

0800726c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIM_ConfigClockSource+0x1c>
 8007284:	2302      	movs	r3, #2
 8007286:	e0f6      	b.n	8007476 <HAL_TIM_ConfigClockSource+0x20a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80072a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a6f      	ldr	r2, [pc, #444]	@ (8007480 <HAL_TIM_ConfigClockSource+0x214>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f000 80c1 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 80072c8:	4a6d      	ldr	r2, [pc, #436]	@ (8007480 <HAL_TIM_ConfigClockSource+0x214>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f200 80c6 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 80072d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007484 <HAL_TIM_ConfigClockSource+0x218>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	f000 80b9 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 80072d8:	4a6a      	ldr	r2, [pc, #424]	@ (8007484 <HAL_TIM_ConfigClockSource+0x218>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f200 80be 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 80072e0:	4a69      	ldr	r2, [pc, #420]	@ (8007488 <HAL_TIM_ConfigClockSource+0x21c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f000 80b1 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 80072e8:	4a67      	ldr	r2, [pc, #412]	@ (8007488 <HAL_TIM_ConfigClockSource+0x21c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f200 80b6 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 80072f0:	4a66      	ldr	r2, [pc, #408]	@ (800748c <HAL_TIM_ConfigClockSource+0x220>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f000 80a9 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 80072f8:	4a64      	ldr	r2, [pc, #400]	@ (800748c <HAL_TIM_ConfigClockSource+0x220>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	f200 80ae 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007300:	4a63      	ldr	r2, [pc, #396]	@ (8007490 <HAL_TIM_ConfigClockSource+0x224>)
 8007302:	4293      	cmp	r3, r2
 8007304:	f000 80a1 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007308:	4a61      	ldr	r2, [pc, #388]	@ (8007490 <HAL_TIM_ConfigClockSource+0x224>)
 800730a:	4293      	cmp	r3, r2
 800730c:	f200 80a6 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007310:	4a60      	ldr	r2, [pc, #384]	@ (8007494 <HAL_TIM_ConfigClockSource+0x228>)
 8007312:	4293      	cmp	r3, r2
 8007314:	f000 8099 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007318:	4a5e      	ldr	r2, [pc, #376]	@ (8007494 <HAL_TIM_ConfigClockSource+0x228>)
 800731a:	4293      	cmp	r3, r2
 800731c:	f200 809e 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007320:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007324:	f000 8091 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007328:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800732c:	f200 8096 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007334:	f000 8089 	beq.w	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007338:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800733c:	f200 808e 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007344:	d03e      	beq.n	80073c4 <HAL_TIM_ConfigClockSource+0x158>
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800734a:	f200 8087 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007352:	f000 8086 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1f6>
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735a:	d87f      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 800735c:	2b70      	cmp	r3, #112	@ 0x70
 800735e:	d01a      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x12a>
 8007360:	2b70      	cmp	r3, #112	@ 0x70
 8007362:	d87b      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007364:	2b60      	cmp	r3, #96	@ 0x60
 8007366:	d050      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x19e>
 8007368:	2b60      	cmp	r3, #96	@ 0x60
 800736a:	d877      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 800736c:	2b50      	cmp	r3, #80	@ 0x50
 800736e:	d03c      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x17e>
 8007370:	2b50      	cmp	r3, #80	@ 0x50
 8007372:	d873      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007374:	2b40      	cmp	r3, #64	@ 0x40
 8007376:	d058      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x1be>
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d86f      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 800737c:	2b30      	cmp	r3, #48	@ 0x30
 800737e:	d064      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007380:	2b30      	cmp	r3, #48	@ 0x30
 8007382:	d86b      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 8007384:	2b20      	cmp	r3, #32
 8007386:	d060      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007388:	2b20      	cmp	r3, #32
 800738a:	d867      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d05c      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007390:	2b10      	cmp	r3, #16
 8007392:	d05a      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x1de>
 8007394:	e062      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073a6:	f000 ff59 	bl	800825c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	609a      	str	r2, [r3, #8]
      break;
 80073c2:	e04f      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073d4:	f000 ff42 	bl	800825c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073e6:	609a      	str	r2, [r3, #8]
      break;
 80073e8:	e03c      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f6:	461a      	mov	r2, r3
 80073f8:	f000 feb4 	bl	8008164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2150      	movs	r1, #80	@ 0x50
 8007402:	4618      	mov	r0, r3
 8007404:	f000 ff0d 	bl	8008222 <TIM_ITRx_SetConfig>
      break;
 8007408:	e02c      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007416:	461a      	mov	r2, r3
 8007418:	f000 fed3 	bl	80081c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2160      	movs	r1, #96	@ 0x60
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fefd 	bl	8008222 <TIM_ITRx_SetConfig>
      break;
 8007428:	e01c      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007436:	461a      	mov	r2, r3
 8007438:	f000 fe94 	bl	8008164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2140      	movs	r1, #64	@ 0x40
 8007442:	4618      	mov	r0, r3
 8007444:	f000 feed 	bl	8008222 <TIM_ITRx_SetConfig>
      break;
 8007448:	e00c      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 fee4 	bl	8008222 <TIM_ITRx_SetConfig>
      break;
 800745a:	e003      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
      break;
 8007460:	e000      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	00100070 	.word	0x00100070
 8007484:	00100060 	.word	0x00100060
 8007488:	00100050 	.word	0x00100050
 800748c:	00100040 	.word	0x00100040
 8007490:	00100030 	.word	0x00100030
 8007494:	00100020 	.word	0x00100020

08007498 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	460b      	mov	r3, r1
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e14a      	b.n	80077ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	f040 80dd 	bne.w	800771c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007562:	7afb      	ldrb	r3, [r7, #11]
 8007564:	2b1f      	cmp	r3, #31
 8007566:	f200 80d6 	bhi.w	8007716 <HAL_TIM_RegisterCallback+0x1de>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <HAL_TIM_RegisterCallback+0x38>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075f1 	.word	0x080075f1
 8007574:	080075f9 	.word	0x080075f9
 8007578:	08007601 	.word	0x08007601
 800757c:	08007609 	.word	0x08007609
 8007580:	08007611 	.word	0x08007611
 8007584:	08007619 	.word	0x08007619
 8007588:	08007621 	.word	0x08007621
 800758c:	08007629 	.word	0x08007629
 8007590:	08007631 	.word	0x08007631
 8007594:	08007639 	.word	0x08007639
 8007598:	08007641 	.word	0x08007641
 800759c:	08007649 	.word	0x08007649
 80075a0:	08007651 	.word	0x08007651
 80075a4:	08007659 	.word	0x08007659
 80075a8:	08007663 	.word	0x08007663
 80075ac:	0800766d 	.word	0x0800766d
 80075b0:	08007677 	.word	0x08007677
 80075b4:	08007681 	.word	0x08007681
 80075b8:	0800768b 	.word	0x0800768b
 80075bc:	08007695 	.word	0x08007695
 80075c0:	0800769f 	.word	0x0800769f
 80075c4:	080076a9 	.word	0x080076a9
 80075c8:	080076b3 	.word	0x080076b3
 80075cc:	080076bd 	.word	0x080076bd
 80075d0:	080076c7 	.word	0x080076c7
 80075d4:	080076d1 	.word	0x080076d1
 80075d8:	080076db 	.word	0x080076db
 80075dc:	080076e5 	.word	0x080076e5
 80075e0:	080076ef 	.word	0x080076ef
 80075e4:	080076f9 	.word	0x080076f9
 80075e8:	08007703 	.word	0x08007703
 80075ec:	0800770d 	.word	0x0800770d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80075f6:	e0f7      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80075fe:	e0f3      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007606:	e0ef      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800760e:	e0eb      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007616:	e0e7      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800761e:	e0e3      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007626:	e0df      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800762e:	e0db      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007636:	e0d7      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800763e:	e0d3      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007646:	e0cf      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800764e:	e0cb      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007656:	e0c7      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007660:	e0c2      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800766a:	e0bd      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007674:	e0b8      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800767e:	e0b3      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007688:	e0ae      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007692:	e0a9      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800769c:	e0a4      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80076a6:	e09f      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80076b0:	e09a      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80076ba:	e095      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80076c4:	e090      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80076ce:	e08b      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80076d8:	e086      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80076e2:	e081      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80076ec:	e07c      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80076f6:	e077      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007700:	e072      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800770a:	e06d      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007714:	e068      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
        break;
 800771a:	e065      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d15d      	bne.n	80077e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	2b0d      	cmp	r3, #13
 800772c:	d857      	bhi.n	80077de <HAL_TIM_RegisterCallback+0x2a6>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <HAL_TIM_RegisterCallback+0x1fc>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800776d 	.word	0x0800776d
 8007738:	08007775 	.word	0x08007775
 800773c:	0800777d 	.word	0x0800777d
 8007740:	08007785 	.word	0x08007785
 8007744:	0800778d 	.word	0x0800778d
 8007748:	08007795 	.word	0x08007795
 800774c:	0800779d 	.word	0x0800779d
 8007750:	080077a5 	.word	0x080077a5
 8007754:	080077ad 	.word	0x080077ad
 8007758:	080077b5 	.word	0x080077b5
 800775c:	080077bd 	.word	0x080077bd
 8007760:	080077c5 	.word	0x080077c5
 8007764:	080077cd 	.word	0x080077cd
 8007768:	080077d5 	.word	0x080077d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007772:	e039      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800777a:	e035      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007782:	e031      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800778a:	e02d      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007792:	e029      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800779a:	e025      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80077a2:	e021      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80077aa:	e01d      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80077b2:	e019      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80077ba:	e015      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80077c2:	e011      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80077ca:	e00d      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80077d2:	e009      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80077dc:	e004      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
        break;
 80077e2:	e001      	b.n	80077e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop

080077f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d107      	bne.n	8007820 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800781e:	e02a      	b.n	8007876 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d107      	bne.n	800783a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2202      	movs	r2, #2
 800782e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007838:	e01d      	b.n	8007876 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d107      	bne.n	8007854 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2204      	movs	r2, #4
 8007848:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007852:	e010      	b.n	8007876 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d107      	bne.n	800786e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2208      	movs	r2, #8
 8007862:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800786c:	e003      	b.n	8007876 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	771a      	strb	r2, [r3, #28]
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d10b      	bne.n	80078be <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d136      	bne.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078bc:	e031      	b.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d10b      	bne.n	80078e0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2202      	movs	r2, #2
 80078cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d125      	bne.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078de:	e020      	b.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d10b      	bne.n	8007902 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2204      	movs	r2, #4
 80078ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d114      	bne.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007900:	e00f      	b.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d10a      	bne.n	8007922 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2208      	movs	r2, #8
 8007910:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	771a      	strb	r2, [r3, #28]
}
 8007932:	bf00      	nop
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	429a      	cmp	r2, r3
 8007950:	d103      	bne.n	800795a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	771a      	strb	r2, [r3, #28]
 8007958:	e019      	b.n	800798e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d103      	bne.n	800796c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2202      	movs	r2, #2
 8007968:	771a      	strb	r2, [r3, #28]
 800796a:	e010      	b.n	800798e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d103      	bne.n	800797e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2204      	movs	r2, #4
 800797a:	771a      	strb	r2, [r3, #28]
 800797c:	e007      	b.n	800798e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d102      	bne.n	800798e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2208      	movs	r2, #8
 800798c:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	771a      	strb	r2, [r3, #28]
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a4c      	ldr	r2, [pc, #304]	@ (8007aec <TIM_Base_SetConfig+0x144>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d017      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d013      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a49      	ldr	r2, [pc, #292]	@ (8007af0 <TIM_Base_SetConfig+0x148>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00f      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a48      	ldr	r2, [pc, #288]	@ (8007af4 <TIM_Base_SetConfig+0x14c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00b      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a47      	ldr	r2, [pc, #284]	@ (8007af8 <TIM_Base_SetConfig+0x150>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d007      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a46      	ldr	r2, [pc, #280]	@ (8007afc <TIM_Base_SetConfig+0x154>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_Base_SetConfig+0x48>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a45      	ldr	r2, [pc, #276]	@ (8007b00 <TIM_Base_SetConfig+0x158>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d108      	bne.n	8007a02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a39      	ldr	r2, [pc, #228]	@ (8007aec <TIM_Base_SetConfig+0x144>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d023      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a10:	d01f      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a36      	ldr	r2, [pc, #216]	@ (8007af0 <TIM_Base_SetConfig+0x148>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01b      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <TIM_Base_SetConfig+0x14c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d017      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a34      	ldr	r2, [pc, #208]	@ (8007af8 <TIM_Base_SetConfig+0x150>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a33      	ldr	r2, [pc, #204]	@ (8007afc <TIM_Base_SetConfig+0x154>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00f      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a33      	ldr	r2, [pc, #204]	@ (8007b04 <TIM_Base_SetConfig+0x15c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00b      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a32      	ldr	r2, [pc, #200]	@ (8007b08 <TIM_Base_SetConfig+0x160>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d007      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a31      	ldr	r2, [pc, #196]	@ (8007b0c <TIM_Base_SetConfig+0x164>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_Base_SetConfig+0xaa>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b00 <TIM_Base_SetConfig+0x158>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d108      	bne.n	8007a64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a18      	ldr	r2, [pc, #96]	@ (8007aec <TIM_Base_SetConfig+0x144>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d013      	beq.n	8007ab8 <TIM_Base_SetConfig+0x110>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1a      	ldr	r2, [pc, #104]	@ (8007afc <TIM_Base_SetConfig+0x154>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00f      	beq.n	8007ab8 <TIM_Base_SetConfig+0x110>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007b04 <TIM_Base_SetConfig+0x15c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_Base_SetConfig+0x110>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <TIM_Base_SetConfig+0x160>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_Base_SetConfig+0x110>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	@ (8007b0c <TIM_Base_SetConfig+0x164>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_Base_SetConfig+0x110>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a13      	ldr	r2, [pc, #76]	@ (8007b00 <TIM_Base_SetConfig+0x158>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d103      	bne.n	8007ac0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d105      	bne.n	8007ade <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	611a      	str	r2, [r3, #16]
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40013400 	.word	0x40013400
 8007b00:	40015000 	.word	0x40015000
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800

08007b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	f023 0201 	bic.w	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 0302 	bic.w	r3, r3, #2
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a30      	ldr	r2, [pc, #192]	@ (8007c2c <TIM_OC1_SetConfig+0x11c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <TIM_OC1_SetConfig+0x88>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a2f      	ldr	r2, [pc, #188]	@ (8007c30 <TIM_OC1_SetConfig+0x120>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_OC1_SetConfig+0x88>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8007c34 <TIM_OC1_SetConfig+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <TIM_OC1_SetConfig+0x88>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2d      	ldr	r2, [pc, #180]	@ (8007c38 <TIM_OC1_SetConfig+0x128>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_OC1_SetConfig+0x88>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8007c3c <TIM_OC1_SetConfig+0x12c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_OC1_SetConfig+0x88>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a2b      	ldr	r2, [pc, #172]	@ (8007c40 <TIM_OC1_SetConfig+0x130>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d10c      	bne.n	8007bb2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0308 	bic.w	r3, r3, #8
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f023 0304 	bic.w	r3, r3, #4
 8007bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c2c <TIM_OC1_SetConfig+0x11c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d013      	beq.n	8007be2 <TIM_OC1_SetConfig+0xd2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <TIM_OC1_SetConfig+0x120>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00f      	beq.n	8007be2 <TIM_OC1_SetConfig+0xd2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c34 <TIM_OC1_SetConfig+0x124>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00b      	beq.n	8007be2 <TIM_OC1_SetConfig+0xd2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8007c38 <TIM_OC1_SetConfig+0x128>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <TIM_OC1_SetConfig+0xd2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a19      	ldr	r2, [pc, #100]	@ (8007c3c <TIM_OC1_SetConfig+0x12c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_OC1_SetConfig+0xd2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a18      	ldr	r2, [pc, #96]	@ (8007c40 <TIM_OC1_SetConfig+0x130>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d111      	bne.n	8007c06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	621a      	str	r2, [r3, #32]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40012c00 	.word	0x40012c00
 8007c30:	40013400 	.word	0x40013400
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40014400 	.word	0x40014400
 8007c3c:	40014800 	.word	0x40014800
 8007c40:	40015000 	.word	0x40015000

08007c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	f023 0210 	bic.w	r2, r3, #16
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f023 0320 	bic.w	r3, r3, #32
 8007c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8007d54 <TIM_OC2_SetConfig+0x110>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_OC2_SetConfig+0x74>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a2b      	ldr	r2, [pc, #172]	@ (8007d58 <TIM_OC2_SetConfig+0x114>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC2_SetConfig+0x74>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d5c <TIM_OC2_SetConfig+0x118>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10d      	bne.n	8007cd4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8007d54 <TIM_OC2_SetConfig+0x110>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d013      	beq.n	8007d04 <TIM_OC2_SetConfig+0xc0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a1e      	ldr	r2, [pc, #120]	@ (8007d58 <TIM_OC2_SetConfig+0x114>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00f      	beq.n	8007d04 <TIM_OC2_SetConfig+0xc0>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d60 <TIM_OC2_SetConfig+0x11c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <TIM_OC2_SetConfig+0xc0>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1d      	ldr	r2, [pc, #116]	@ (8007d64 <TIM_OC2_SetConfig+0x120>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d007      	beq.n	8007d04 <TIM_OC2_SetConfig+0xc0>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <TIM_OC2_SetConfig+0x124>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC2_SetConfig+0xc0>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a17      	ldr	r2, [pc, #92]	@ (8007d5c <TIM_OC2_SetConfig+0x118>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d113      	bne.n	8007d2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40015000 	.word	0x40015000
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e78 <TIM_OC3_SetConfig+0x10c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d007      	beq.n	8007dde <TIM_OC3_SetConfig+0x72>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8007e7c <TIM_OC3_SetConfig+0x110>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_OC3_SetConfig+0x72>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a29      	ldr	r2, [pc, #164]	@ (8007e80 <TIM_OC3_SetConfig+0x114>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d10d      	bne.n	8007dfa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <TIM_OC3_SetConfig+0x10c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <TIM_OC3_SetConfig+0xbe>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <TIM_OC3_SetConfig+0x110>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00f      	beq.n	8007e2a <TIM_OC3_SetConfig+0xbe>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e84 <TIM_OC3_SetConfig+0x118>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_OC3_SetConfig+0xbe>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1c      	ldr	r2, [pc, #112]	@ (8007e88 <TIM_OC3_SetConfig+0x11c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_OC3_SetConfig+0xbe>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007e8c <TIM_OC3_SetConfig+0x120>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_OC3_SetConfig+0xbe>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a16      	ldr	r2, [pc, #88]	@ (8007e80 <TIM_OC3_SetConfig+0x114>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d113      	bne.n	8007e52 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40015000 	.word	0x40015000
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800

08007e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	021b      	lsls	r3, r3, #8
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	031b      	lsls	r3, r3, #12
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa0 <TIM_OC4_SetConfig+0x110>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_OC4_SetConfig+0x74>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa4 <TIM_OC4_SetConfig+0x114>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_OC4_SetConfig+0x74>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa8 <TIM_OC4_SetConfig+0x118>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d10d      	bne.n	8007f20 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a1f      	ldr	r2, [pc, #124]	@ (8007fa0 <TIM_OC4_SetConfig+0x110>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <TIM_OC4_SetConfig+0xc0>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa4 <TIM_OC4_SetConfig+0x114>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00f      	beq.n	8007f50 <TIM_OC4_SetConfig+0xc0>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a1e      	ldr	r2, [pc, #120]	@ (8007fac <TIM_OC4_SetConfig+0x11c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00b      	beq.n	8007f50 <TIM_OC4_SetConfig+0xc0>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <TIM_OC4_SetConfig+0x120>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d007      	beq.n	8007f50 <TIM_OC4_SetConfig+0xc0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <TIM_OC4_SetConfig+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_OC4_SetConfig+0xc0>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	@ (8007fa8 <TIM_OC4_SetConfig+0x118>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d113      	bne.n	8007f78 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	019b      	lsls	r3, r3, #6
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	019b      	lsls	r3, r3, #6
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40013400 	.word	0x40013400
 8007fa8:	40015000 	.word	0x40015000
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800

08007fb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ffc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a19      	ldr	r2, [pc, #100]	@ (8008074 <TIM_OC5_SetConfig+0xbc>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <TIM_OC5_SetConfig+0x82>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a18      	ldr	r2, [pc, #96]	@ (8008078 <TIM_OC5_SetConfig+0xc0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_OC5_SetConfig+0x82>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a17      	ldr	r2, [pc, #92]	@ (800807c <TIM_OC5_SetConfig+0xc4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_OC5_SetConfig+0x82>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <TIM_OC5_SetConfig+0xc8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_OC5_SetConfig+0x82>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <TIM_OC5_SetConfig+0xcc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_OC5_SetConfig+0x82>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a14      	ldr	r2, [pc, #80]	@ (8008088 <TIM_OC5_SetConfig+0xd0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d109      	bne.n	800804e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40013400 	.word	0x40013400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800
 8008088:	40015000 	.word	0x40015000

0800808c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	051b      	lsls	r3, r3, #20
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a1a      	ldr	r2, [pc, #104]	@ (800814c <TIM_OC6_SetConfig+0xc0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <TIM_OC6_SetConfig+0x84>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a19      	ldr	r2, [pc, #100]	@ (8008150 <TIM_OC6_SetConfig+0xc4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_OC6_SetConfig+0x84>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a18      	ldr	r2, [pc, #96]	@ (8008154 <TIM_OC6_SetConfig+0xc8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_OC6_SetConfig+0x84>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a17      	ldr	r2, [pc, #92]	@ (8008158 <TIM_OC6_SetConfig+0xcc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_OC6_SetConfig+0x84>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a16      	ldr	r2, [pc, #88]	@ (800815c <TIM_OC6_SetConfig+0xd0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC6_SetConfig+0x84>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a15      	ldr	r2, [pc, #84]	@ (8008160 <TIM_OC6_SetConfig+0xd4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d109      	bne.n	8008124 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008116:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	029b      	lsls	r3, r3, #10
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800
 8008160:	40015000 	.word	0x40015000

08008164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0201 	bic.w	r2, r3, #1
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800818e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f023 030a 	bic.w	r3, r3, #10
 80081a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b087      	sub	sp, #28
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	f023 0210 	bic.w	r2, r3, #16
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	031b      	lsls	r3, r3, #12
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	f043 0307 	orr.w	r3, r3, #7
 8008248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	609a      	str	r2, [r3, #8]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	021a      	lsls	r2, r3, #8
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	431a      	orrs	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4313      	orrs	r3, r2
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	609a      	str	r2, [r3, #8]
}
 8008290:	bf00      	nop
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	2201      	movs	r2, #1
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	43db      	mvns	r3, r3
 80082be:	401a      	ands	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a1a      	ldr	r2, [r3, #32]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a26      	ldr	r2, [pc, #152]	@ (800838c <TIM_ResetCallback+0xa4>)
 80082f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a25      	ldr	r2, [pc, #148]	@ (8008390 <TIM_ResetCallback+0xa8>)
 80082fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a24      	ldr	r2, [pc, #144]	@ (8008394 <TIM_ResetCallback+0xac>)
 8008304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a23      	ldr	r2, [pc, #140]	@ (8008398 <TIM_ResetCallback+0xb0>)
 800830c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a22      	ldr	r2, [pc, #136]	@ (800839c <TIM_ResetCallback+0xb4>)
 8008314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <TIM_ResetCallback+0xb8>)
 800831c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a20      	ldr	r2, [pc, #128]	@ (80083a4 <TIM_ResetCallback+0xbc>)
 8008324:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a1f      	ldr	r2, [pc, #124]	@ (80083a8 <TIM_ResetCallback+0xc0>)
 800832c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a1e      	ldr	r2, [pc, #120]	@ (80083ac <TIM_ResetCallback+0xc4>)
 8008334:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <TIM_ResetCallback+0xc8>)
 800833c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <TIM_ResetCallback+0xcc>)
 8008344:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a1b      	ldr	r2, [pc, #108]	@ (80083b8 <TIM_ResetCallback+0xd0>)
 800834c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a1a      	ldr	r2, [pc, #104]	@ (80083bc <TIM_ResetCallback+0xd4>)
 8008354:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a19      	ldr	r2, [pc, #100]	@ (80083c0 <TIM_ResetCallback+0xd8>)
 800835c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a18      	ldr	r2, [pc, #96]	@ (80083c4 <TIM_ResetCallback+0xdc>)
 8008364:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a17      	ldr	r2, [pc, #92]	@ (80083c8 <TIM_ResetCallback+0xe0>)
 800836c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a16      	ldr	r2, [pc, #88]	@ (80083cc <TIM_ResetCallback+0xe4>)
 8008374:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a15      	ldr	r2, [pc, #84]	@ (80083d0 <TIM_ResetCallback+0xe8>)
 800837c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	0800342d 	.word	0x0800342d
 8008390:	08007499 	.word	0x08007499
 8008394:	080074fd 	.word	0x080074fd
 8008398:	08007511 	.word	0x08007511
 800839c:	080074c1 	.word	0x080074c1
 80083a0:	080074d5 	.word	0x080074d5
 80083a4:	080074ad 	.word	0x080074ad
 80083a8:	08003401 	.word	0x08003401
 80083ac:	080074e9 	.word	0x080074e9
 80083b0:	08007525 	.word	0x08007525
 80083b4:	0800886d 	.word	0x0800886d
 80083b8:	08008881 	.word	0x08008881
 80083bc:	08008895 	.word	0x08008895
 80083c0:	080088a9 	.word	0x080088a9
 80083c4:	080088bd 	.word	0x080088bd
 80083c8:	080088d1 	.word	0x080088d1
 80083cc:	080088e5 	.word	0x080088e5
 80083d0:	080088f9 	.word	0x080088f9

080083d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e074      	b.n	80084d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a34      	ldr	r2, [pc, #208]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d009      	beq.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a33      	ldr	r2, [pc, #204]	@ (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d004      	beq.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a31      	ldr	r2, [pc, #196]	@ (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d108      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d022      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846c:	d01d      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1f      	ldr	r2, [pc, #124]	@ (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d018      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1d      	ldr	r2, [pc, #116]	@ (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1c      	ldr	r2, [pc, #112]	@ (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00e      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a18      	ldr	r2, [pc, #96]	@ (80084fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a11      	ldr	r2, [pc, #68]	@ (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10c      	bne.n	80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40015000 	.word	0x40015000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40014000 	.word	0x40014000

08008500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008518:	2302      	movs	r3, #2
 800851a:	e078      	b.n	800860e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a19      	ldr	r2, [pc, #100]	@ (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d11c      	bne.n	80085fc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	051b      	lsls	r3, r3, #20
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40015000 	.word	0x40015000

08008628 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008628:	b480      	push	{r7}
 800862a:	b08b      	sub	sp, #44	@ 0x2c
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008644:	2302      	movs	r3, #2
 8008646:	e10b      	b.n	8008860 <HAL_TIMEx_ConfigBreakInput+0x238>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b80      	cmp	r3, #128	@ 0x80
 8008656:	f000 8096 	beq.w	8008786 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800865a:	2b80      	cmp	r3, #128	@ 0x80
 800865c:	f200 809c 	bhi.w	8008798 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008660:	2b20      	cmp	r3, #32
 8008662:	d849      	bhi.n	80086f8 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8097 	beq.w	8008798 <HAL_TIMEx_ConfigBreakInput+0x170>
 800866a:	3b01      	subs	r3, #1
 800866c:	2b1f      	cmp	r3, #31
 800866e:	f200 8093 	bhi.w	8008798 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008672:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <HAL_TIMEx_ConfigBreakInput+0x50>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	080086ff 	.word	0x080086ff
 800867c:	08008713 	.word	0x08008713
 8008680:	08008799 	.word	0x08008799
 8008684:	08008727 	.word	0x08008727
 8008688:	08008799 	.word	0x08008799
 800868c:	08008799 	.word	0x08008799
 8008690:	08008799 	.word	0x08008799
 8008694:	0800873b 	.word	0x0800873b
 8008698:	08008799 	.word	0x08008799
 800869c:	08008799 	.word	0x08008799
 80086a0:	08008799 	.word	0x08008799
 80086a4:	08008799 	.word	0x08008799
 80086a8:	08008799 	.word	0x08008799
 80086ac:	08008799 	.word	0x08008799
 80086b0:	08008799 	.word	0x08008799
 80086b4:	0800874f 	.word	0x0800874f
 80086b8:	08008799 	.word	0x08008799
 80086bc:	08008799 	.word	0x08008799
 80086c0:	08008799 	.word	0x08008799
 80086c4:	08008799 	.word	0x08008799
 80086c8:	08008799 	.word	0x08008799
 80086cc:	08008799 	.word	0x08008799
 80086d0:	08008799 	.word	0x08008799
 80086d4:	08008799 	.word	0x08008799
 80086d8:	08008799 	.word	0x08008799
 80086dc:	08008799 	.word	0x08008799
 80086e0:	08008799 	.word	0x08008799
 80086e4:	08008799 	.word	0x08008799
 80086e8:	08008799 	.word	0x08008799
 80086ec:	08008799 	.word	0x08008799
 80086f0:	08008799 	.word	0x08008799
 80086f4:	08008763 	.word	0x08008763
 80086f8:	2b40      	cmp	r3, #64	@ 0x40
 80086fa:	d03b      	beq.n	8008774 <HAL_TIMEx_ConfigBreakInput+0x14c>
 80086fc:	e04c      	b.n	8008798 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80086fe:	2301      	movs	r3, #1
 8008700:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800870a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800870c:	2309      	movs	r3, #9
 800870e:	617b      	str	r3, [r7, #20]
      break;
 8008710:	e04b      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008712:	2302      	movs	r3, #2
 8008714:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008716:	2301      	movs	r3, #1
 8008718:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800871a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800871e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008720:	230a      	movs	r3, #10
 8008722:	617b      	str	r3, [r7, #20]
      break;
 8008724:	e041      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008726:	2304      	movs	r3, #4
 8008728:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800872a:	2302      	movs	r3, #2
 800872c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800872e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008732:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008734:	230b      	movs	r3, #11
 8008736:	617b      	str	r3, [r7, #20]
      break;
 8008738:	e037      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800873a:	2308      	movs	r3, #8
 800873c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800873e:	2303      	movs	r3, #3
 8008740:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008746:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008748:	230c      	movs	r3, #12
 800874a:	617b      	str	r3, [r7, #20]
      break;
 800874c:	e02d      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800874e:	2310      	movs	r3, #16
 8008750:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008752:	2304      	movs	r3, #4
 8008754:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800875a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800875c:	230d      	movs	r3, #13
 800875e:	617b      	str	r3, [r7, #20]
      break;
 8008760:	e023      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8008762:	2320      	movs	r3, #32
 8008764:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008766:	2305      	movs	r3, #5
 8008768:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
      break;
 8008772:	e01a      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8008774:	2340      	movs	r3, #64	@ 0x40
 8008776:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008778:	2306      	movs	r3, #6
 800877a:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
      break;
 8008784:	e011      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008786:	2380      	movs	r3, #128	@ 0x80
 8008788:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800878a:	2307      	movs	r3, #7
 800878c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
      break;
 8008796:	e008      	b.n	80087aa <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
      break;
 80087a8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d003      	beq.n	80087b8 <HAL_TIMEx_ConfigBreakInput+0x190>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d025      	beq.n	8008802 <HAL_TIMEx_ConfigBreakInput+0x1da>
 80087b6:	e049      	b.n	800884c <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087be:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	43db      	mvns	r3, r3
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4013      	ands	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	409a      	lsls	r2, r3
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	4013      	ands	r3, r2
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	43db      	mvns	r3, r3
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4013      	ands	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	409a      	lsls	r2, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4013      	ands	r3, r2
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008800:	e028      	b.n	8008854 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008808:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	43db      	mvns	r3, r3
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4013      	ands	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	409a      	lsls	r2, r3
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	4013      	ands	r3, r2
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	43db      	mvns	r3, r3
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4013      	ands	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	409a      	lsls	r2, r3
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4013      	ands	r3, r2
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800884a:	e003      	b.n	8008854 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800885c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008860:	4618      	mov	r0, r3
 8008862:	372c      	adds	r7, #44	@ 0x2c
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e050      	b.n	80089c0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	2b00      	cmp	r3, #0
 8008926:	d114      	bne.n	8008952 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fdc5 	bl	80094c0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a21      	ldr	r2, [pc, #132]	@ (80089c8 <HAL_UART_Init+0xbc>)
 8008944:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2224      	movs	r2, #36	@ 0x24
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0201 	bic.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f8f2 	bl	8009b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fdf3 	bl	8009564 <UART_SetConfig>
 800897e:	4603      	mov	r3, r0
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e01b      	b.n	80089c0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f971 	bl	8009ca0 <UART_CheckIdleState>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	08003a05 	.word	0x08003a05

080089cc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	460b      	mov	r3, r1
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d109      	bne.n	80089f8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e09c      	b.n	8008b32 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d16c      	bne.n	8008adc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	2b0c      	cmp	r3, #12
 8008a06:	d85e      	bhi.n	8008ac6 <HAL_UART_RegisterCallback+0xfa>
 8008a08:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <HAL_UART_RegisterCallback+0x44>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008a4f 	.word	0x08008a4f
 8008a18:	08008a59 	.word	0x08008a59
 8008a1c:	08008a63 	.word	0x08008a63
 8008a20:	08008a6d 	.word	0x08008a6d
 8008a24:	08008a77 	.word	0x08008a77
 8008a28:	08008a81 	.word	0x08008a81
 8008a2c:	08008a8b 	.word	0x08008a8b
 8008a30:	08008a95 	.word	0x08008a95
 8008a34:	08008a9f 	.word	0x08008a9f
 8008a38:	08008aa9 	.word	0x08008aa9
 8008a3c:	08008ab3 	.word	0x08008ab3
 8008a40:	08008abd 	.word	0x08008abd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008a4c:	e070      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008a56:	e06b      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a60:	e066      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a6a:	e061      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a74:	e05c      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a7e:	e057      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a88:	e052      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a92:	e04d      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a9c:	e048      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008aa6:	e043      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008ab0:	e03e      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008aba:	e039      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ac4:	e034      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008acc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
        break;
 8008ada:	e029      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d11a      	bne.n	8008b1c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	2b0b      	cmp	r3, #11
 8008aea:	d002      	beq.n	8008af2 <HAL_UART_RegisterCallback+0x126>
 8008aec:	2b0c      	cmp	r3, #12
 8008aee:	d005      	beq.n	8008afc <HAL_UART_RegisterCallback+0x130>
 8008af0:	e009      	b.n	8008b06 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008afa:	e019      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008b04:	e014      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	75fb      	strb	r3, [r7, #23]
        break;
 8008b1a:	e009      	b.n	8008b30 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08a      	sub	sp, #40	@ 0x28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d167      	bne.n	8008c28 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_UART_Transmit_DMA+0x24>
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e060      	b.n	8008c2a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	88fa      	ldrh	r2, [r7, #6]
 8008b7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2221      	movs	r2, #33	@ 0x21
 8008b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d028      	beq.n	8008be8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b9a:	4a26      	ldr	r2, [pc, #152]	@ (8008c34 <HAL_UART_Transmit_DMA+0xf4>)
 8008b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ba2:	4a25      	ldr	r2, [pc, #148]	@ (8008c38 <HAL_UART_Transmit_DMA+0xf8>)
 8008ba4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008baa:	4a24      	ldr	r2, [pc, #144]	@ (8008c3c <HAL_UART_Transmit_DMA+0xfc>)
 8008bac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3328      	adds	r3, #40	@ 0x28
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	f7fb fc47 	bl	800445c <HAL_DMA_Start_IT>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d009      	beq.n	8008be8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e020      	b.n	8008c2a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2240      	movs	r2, #64	@ 0x40
 8008bee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c10:	623a      	str	r2, [r7, #32]
 8008c12:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	69f9      	ldr	r1, [r7, #28]
 8008c16:	6a3a      	ldr	r2, [r7, #32]
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e5      	bne.n	8008bf0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e000      	b.n	8008c2a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c28:	2302      	movs	r3, #2
  }
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3728      	adds	r7, #40	@ 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	0800a16b 	.word	0x0800a16b
 8008c38:	0800a209 	.word	0x0800a209
 8008c3c:	0800a3a3 	.word	0x0800a3a3

08008c40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	@ 0x28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d137      	bne.n	8008cc8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <HAL_UART_Receive_DMA+0x24>
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e030      	b.n	8008cca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a18      	ldr	r2, [pc, #96]	@ (8008cd4 <HAL_UART_Receive_DMA+0x94>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d01f      	beq.n	8008cb8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d018      	beq.n	8008cb8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	623b      	str	r3, [r7, #32]
 8008ca6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	69f9      	ldr	r1, [r7, #28]
 8008caa:	6a3a      	ldr	r2, [r7, #32]
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e6      	bne.n	8008c86 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f906 	bl	8009ed0 <UART_Start_Receive_DMA>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	e000      	b.n	8008cca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3728      	adds	r7, #40	@ 0x28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40008000 	.word	0x40008000

08008cd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b0ba      	sub	sp, #232	@ 0xe8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d06:	4013      	ands	r3, r2
 8008d08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11b      	bne.n	8008d4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d015      	beq.n	8008d4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d105      	bne.n	8008d38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 82f3 	beq.w	8009328 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
      }
      return;
 8008d4a:	e2ed      	b.n	8009328 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8129 	beq.w	8008fa8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d5a:	4b90      	ldr	r3, [pc, #576]	@ (8008f9c <HAL_UART_IRQHandler+0x2c4>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d106      	bne.n	8008d70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d66:	4b8e      	ldr	r3, [pc, #568]	@ (8008fa0 <HAL_UART_IRQHandler+0x2c8>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 811c 	beq.w	8008fa8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d011      	beq.n	8008da0 <HAL_UART_IRQHandler+0xc8>
 8008d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d96:	f043 0201 	orr.w	r2, r3, #1
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d011      	beq.n	8008dd0 <HAL_UART_IRQHandler+0xf8>
 8008dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc6:	f043 0204 	orr.w	r2, r3, #4
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d011      	beq.n	8008e00 <HAL_UART_IRQHandler+0x128>
 8008ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2204      	movs	r2, #4
 8008dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df6:	f043 0202 	orr.w	r2, r3, #2
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d017      	beq.n	8008e3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e1c:	4b5f      	ldr	r3, [pc, #380]	@ (8008f9c <HAL_UART_IRQHandler+0x2c4>)
 8008e1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e32:	f043 0208 	orr.w	r2, r3, #8
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <HAL_UART_IRQHandler+0x196>
 8008e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00c      	beq.n	8008e6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e64:	f043 0220 	orr.w	r2, r3, #32
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8259 	beq.w	800932c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d013      	beq.n	8008eae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec2:	2b40      	cmp	r3, #64	@ 0x40
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d058      	beq.n	8008f84 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 f8e3 	bl	800a09e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee2:	2b40      	cmp	r3, #64	@ 0x40
 8008ee4:	d148      	bne.n	8008f78 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1d9      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d017      	beq.n	8008f6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f42:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <HAL_UART_IRQHandler+0x2cc>)
 8008f44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fb fb59 	bl	8004604 <HAL_DMA_Abort_IT>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01f      	beq.n	8008f98 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f66:	4610      	mov	r0, r2
 8008f68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6a:	e015      	b.n	8008f98 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f76:	e00f      	b.n	8008f98 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f82:	e009      	b.n	8008f98 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f96:	e1c9      	b.n	800932c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	bf00      	nop
    return;
 8008f9a:	e1c7      	b.n	800932c <HAL_UART_IRQHandler+0x654>
 8008f9c:	10000001 	.word	0x10000001
 8008fa0:	04000120 	.word	0x04000120
 8008fa4:	0800a427 	.word	0x0800a427

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	f040 8157 	bne.w	8009260 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 8150 	beq.w	8009260 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8149 	beq.w	8009260 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe0:	2b40      	cmp	r3, #64	@ 0x40
 8008fe2:	f040 80bd 	bne.w	8009160 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8199 	beq.w	8009330 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009008:	429a      	cmp	r2, r3
 800900a:	f080 8191 	bcs.w	8009330 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 8087 	bne.w	800913a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009040:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800905a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009062:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800906e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1da      	bne.n	800902c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800909a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800909e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e1      	bne.n	8009076 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009108:	f023 0310 	bic.w	r3, r3, #16
 800910c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800911a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800911c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e4      	bne.n	80090f8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009134:	4618      	mov	r0, r3
 8009136:	f7fb fa0c 	bl	8004552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009152:	b292      	uxth	r2, r2
 8009154:	1a8a      	subs	r2, r1, r2
 8009156:	b292      	uxth	r2, r2
 8009158:	4611      	mov	r1, r2
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800915e:	e0e7      	b.n	8009330 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800916c:	b29b      	uxth	r3, r3
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80d9 	beq.w	8009334 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80d4 	beq.w	8009334 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800919a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e4      	bne.n	800918c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	623b      	str	r3, [r7, #32]
   return(result);
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091d8:	f023 0301 	bic.w	r3, r3, #1
 80091dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80091ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e1      	bne.n	80091c2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 0310 	bic.w	r3, r3, #16
 8009226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	69b9      	ldr	r1, [r7, #24]
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	617b      	str	r3, [r7, #20]
   return(result);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e4      	bne.n	8009212 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009254:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009258:	4611      	mov	r1, r2
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800925e:	e069      	b.n	8009334 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d010      	beq.n	800928e <HAL_UART_IRQHandler+0x5b6>
 800926c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009280:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800928c:	e055      	b.n	800933a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009296:	2b00      	cmp	r3, #0
 8009298:	d014      	beq.n	80092c4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d008      	beq.n	80092c4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d03e      	beq.n	8009338 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
    }
    return;
 80092c2:	e039      	b.n	8009338 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <HAL_UART_IRQHandler+0x60c>
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f8ba 	bl	800a456 <UART_EndTransmit_IT>
    return;
 80092e2:	e02a      	b.n	800933a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <HAL_UART_IRQHandler+0x630>
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009306:	e018      	b.n	800933a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800930c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d012      	beq.n	800933a <HAL_UART_IRQHandler+0x662>
 8009314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009318:	2b00      	cmp	r3, #0
 800931a:	da0e      	bge.n	800933a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009326:	e008      	b.n	800933a <HAL_UART_IRQHandler+0x662>
      return;
 8009328:	bf00      	nop
 800932a:	e006      	b.n	800933a <HAL_UART_IRQHandler+0x662>
    return;
 800932c:	bf00      	nop
 800932e:	e004      	b.n	800933a <HAL_UART_IRQHandler+0x662>
      return;
 8009330:	bf00      	nop
 8009332:	e002      	b.n	800933a <HAL_UART_IRQHandler+0x662>
      return;
 8009334:	bf00      	nop
 8009336:	e000      	b.n	800933a <HAL_UART_IRQHandler+0x662>
    return;
 8009338:	bf00      	nop
  }
}
 800933a:	37e8      	adds	r7, #232	@ 0xe8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a09      	ldr	r2, [pc, #36]	@ (800942c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d009      	beq.n	8009420 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	615a      	str	r2, [r3, #20]
  }
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	40008000 	.word	0x40008000

08009430 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a18      	ldr	r2, [pc, #96]	@ (80094a0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d027      	beq.n	8009492 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009448:	2b20      	cmp	r3, #32
 800944a:	d120      	bne.n	800948e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_UART_EnableReceiverTimeout+0x2a>
 8009456:	2302      	movs	r3, #2
 8009458:	e01c      	b.n	8009494 <HAL_UART_EnableReceiverTimeout+0x64>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2224      	movs	r2, #36	@ 0x24
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009478:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e002      	b.n	8009494 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
 8009490:	e000      	b.n	8009494 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	40008000 	.word	0x40008000

080094a4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
	...

080094c0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009534 <UART_InitCallbacksToDefault+0x74>)
 80094cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a19      	ldr	r2, [pc, #100]	@ (8009538 <UART_InitCallbacksToDefault+0x78>)
 80094d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a18      	ldr	r2, [pc, #96]	@ (800953c <UART_InitCallbacksToDefault+0x7c>)
 80094dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a17      	ldr	r2, [pc, #92]	@ (8009540 <UART_InitCallbacksToDefault+0x80>)
 80094e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a16      	ldr	r2, [pc, #88]	@ (8009544 <UART_InitCallbacksToDefault+0x84>)
 80094ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a15      	ldr	r2, [pc, #84]	@ (8009548 <UART_InitCallbacksToDefault+0x88>)
 80094f4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a14      	ldr	r2, [pc, #80]	@ (800954c <UART_InitCallbacksToDefault+0x8c>)
 80094fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a13      	ldr	r2, [pc, #76]	@ (8009550 <UART_InitCallbacksToDefault+0x90>)
 8009504:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a12      	ldr	r2, [pc, #72]	@ (8009554 <UART_InitCallbacksToDefault+0x94>)
 800950c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a11      	ldr	r2, [pc, #68]	@ (8009558 <UART_InitCallbacksToDefault+0x98>)
 8009514:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a10      	ldr	r2, [pc, #64]	@ (800955c <UART_InitCallbacksToDefault+0x9c>)
 800951c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a0f      	ldr	r2, [pc, #60]	@ (8009560 <UART_InitCallbacksToDefault+0xa0>)
 8009524:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	08009355 	.word	0x08009355
 8009538:	08009341 	.word	0x08009341
 800953c:	0800937d 	.word	0x0800937d
 8009540:	08009369 	.word	0x08009369
 8009544:	08009391 	.word	0x08009391
 8009548:	080093a5 	.word	0x080093a5
 800954c:	080093b9 	.word	0x080093b9
 8009550:	080093cd 	.word	0x080093cd
 8009554:	0800a4b1 	.word	0x0800a4b1
 8009558:	0800a4c5 	.word	0x0800a4c5
 800955c:	0800a4d9 	.word	0x0800a4d9
 8009560:	080093e1 	.word	0x080093e1

08009564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009568:	b08c      	sub	sp, #48	@ 0x30
 800956a:	af00      	add	r7, sp, #0
 800956c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	431a      	orrs	r2, r3
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	431a      	orrs	r2, r3
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	4313      	orrs	r3, r2
 800958a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4baa      	ldr	r3, [pc, #680]	@ (800983c <UART_SetConfig+0x2d8>)
 8009594:	4013      	ands	r3, r2
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800959c:	430b      	orrs	r3, r1
 800959e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a9f      	ldr	r2, [pc, #636]	@ (8009840 <UART_SetConfig+0x2dc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d004      	beq.n	80095d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095cc:	4313      	orrs	r3, r2
 80095ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80095da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e4:	430b      	orrs	r3, r1
 80095e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	f023 010f 	bic.w	r1, r3, #15
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a90      	ldr	r2, [pc, #576]	@ (8009844 <UART_SetConfig+0x2e0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d125      	bne.n	8009654 <UART_SetConfig+0xf0>
 8009608:	4b8f      	ldr	r3, [pc, #572]	@ (8009848 <UART_SetConfig+0x2e4>)
 800960a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b03      	cmp	r3, #3
 8009614:	d81a      	bhi.n	800964c <UART_SetConfig+0xe8>
 8009616:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <UART_SetConfig+0xb8>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	0800962d 	.word	0x0800962d
 8009620:	0800963d 	.word	0x0800963d
 8009624:	08009635 	.word	0x08009635
 8009628:	08009645 	.word	0x08009645
 800962c:	2301      	movs	r3, #1
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009632:	e116      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009634:	2302      	movs	r3, #2
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963a:	e112      	b.n	8009862 <UART_SetConfig+0x2fe>
 800963c:	2304      	movs	r3, #4
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009642:	e10e      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009644:	2308      	movs	r3, #8
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800964a:	e10a      	b.n	8009862 <UART_SetConfig+0x2fe>
 800964c:	2310      	movs	r3, #16
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009652:	e106      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a7c      	ldr	r2, [pc, #496]	@ (800984c <UART_SetConfig+0x2e8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d138      	bne.n	80096d0 <UART_SetConfig+0x16c>
 800965e:	4b7a      	ldr	r3, [pc, #488]	@ (8009848 <UART_SetConfig+0x2e4>)
 8009660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009664:	f003 030c 	and.w	r3, r3, #12
 8009668:	2b0c      	cmp	r3, #12
 800966a:	d82d      	bhi.n	80096c8 <UART_SetConfig+0x164>
 800966c:	a201      	add	r2, pc, #4	@ (adr r2, 8009674 <UART_SetConfig+0x110>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	080096a9 	.word	0x080096a9
 8009678:	080096c9 	.word	0x080096c9
 800967c:	080096c9 	.word	0x080096c9
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096b9 	.word	0x080096b9
 8009688:	080096c9 	.word	0x080096c9
 800968c:	080096c9 	.word	0x080096c9
 8009690:	080096c9 	.word	0x080096c9
 8009694:	080096b1 	.word	0x080096b1
 8009698:	080096c9 	.word	0x080096c9
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096c1 	.word	0x080096c1
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ae:	e0d8      	b.n	8009862 <UART_SetConfig+0x2fe>
 80096b0:	2302      	movs	r3, #2
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b6:	e0d4      	b.n	8009862 <UART_SetConfig+0x2fe>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096be:	e0d0      	b.n	8009862 <UART_SetConfig+0x2fe>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096c6:	e0cc      	b.n	8009862 <UART_SetConfig+0x2fe>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ce:	e0c8      	b.n	8009862 <UART_SetConfig+0x2fe>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a5e      	ldr	r2, [pc, #376]	@ (8009850 <UART_SetConfig+0x2ec>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d125      	bne.n	8009726 <UART_SetConfig+0x1c2>
 80096da:	4b5b      	ldr	r3, [pc, #364]	@ (8009848 <UART_SetConfig+0x2e4>)
 80096dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80096e4:	2b30      	cmp	r3, #48	@ 0x30
 80096e6:	d016      	beq.n	8009716 <UART_SetConfig+0x1b2>
 80096e8:	2b30      	cmp	r3, #48	@ 0x30
 80096ea:	d818      	bhi.n	800971e <UART_SetConfig+0x1ba>
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d00a      	beq.n	8009706 <UART_SetConfig+0x1a2>
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d814      	bhi.n	800971e <UART_SetConfig+0x1ba>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <UART_SetConfig+0x19a>
 80096f8:	2b10      	cmp	r3, #16
 80096fa:	d008      	beq.n	800970e <UART_SetConfig+0x1aa>
 80096fc:	e00f      	b.n	800971e <UART_SetConfig+0x1ba>
 80096fe:	2300      	movs	r3, #0
 8009700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009704:	e0ad      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009706:	2302      	movs	r3, #2
 8009708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970c:	e0a9      	b.n	8009862 <UART_SetConfig+0x2fe>
 800970e:	2304      	movs	r3, #4
 8009710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009714:	e0a5      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009716:	2308      	movs	r3, #8
 8009718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971c:	e0a1      	b.n	8009862 <UART_SetConfig+0x2fe>
 800971e:	2310      	movs	r3, #16
 8009720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009724:	e09d      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a4a      	ldr	r2, [pc, #296]	@ (8009854 <UART_SetConfig+0x2f0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d125      	bne.n	800977c <UART_SetConfig+0x218>
 8009730:	4b45      	ldr	r3, [pc, #276]	@ (8009848 <UART_SetConfig+0x2e4>)
 8009732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009736:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800973a:	2bc0      	cmp	r3, #192	@ 0xc0
 800973c:	d016      	beq.n	800976c <UART_SetConfig+0x208>
 800973e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009740:	d818      	bhi.n	8009774 <UART_SetConfig+0x210>
 8009742:	2b80      	cmp	r3, #128	@ 0x80
 8009744:	d00a      	beq.n	800975c <UART_SetConfig+0x1f8>
 8009746:	2b80      	cmp	r3, #128	@ 0x80
 8009748:	d814      	bhi.n	8009774 <UART_SetConfig+0x210>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <UART_SetConfig+0x1f0>
 800974e:	2b40      	cmp	r3, #64	@ 0x40
 8009750:	d008      	beq.n	8009764 <UART_SetConfig+0x200>
 8009752:	e00f      	b.n	8009774 <UART_SetConfig+0x210>
 8009754:	2300      	movs	r3, #0
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975a:	e082      	b.n	8009862 <UART_SetConfig+0x2fe>
 800975c:	2302      	movs	r3, #2
 800975e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009762:	e07e      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009764:	2304      	movs	r3, #4
 8009766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800976a:	e07a      	b.n	8009862 <UART_SetConfig+0x2fe>
 800976c:	2308      	movs	r3, #8
 800976e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009772:	e076      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009774:	2310      	movs	r3, #16
 8009776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800977a:	e072      	b.n	8009862 <UART_SetConfig+0x2fe>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a35      	ldr	r2, [pc, #212]	@ (8009858 <UART_SetConfig+0x2f4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d12a      	bne.n	80097dc <UART_SetConfig+0x278>
 8009786:	4b30      	ldr	r3, [pc, #192]	@ (8009848 <UART_SetConfig+0x2e4>)
 8009788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800978c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009794:	d01a      	beq.n	80097cc <UART_SetConfig+0x268>
 8009796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800979a:	d81b      	bhi.n	80097d4 <UART_SetConfig+0x270>
 800979c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a0:	d00c      	beq.n	80097bc <UART_SetConfig+0x258>
 80097a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a6:	d815      	bhi.n	80097d4 <UART_SetConfig+0x270>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <UART_SetConfig+0x250>
 80097ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097b0:	d008      	beq.n	80097c4 <UART_SetConfig+0x260>
 80097b2:	e00f      	b.n	80097d4 <UART_SetConfig+0x270>
 80097b4:	2300      	movs	r3, #0
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ba:	e052      	b.n	8009862 <UART_SetConfig+0x2fe>
 80097bc:	2302      	movs	r3, #2
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c2:	e04e      	b.n	8009862 <UART_SetConfig+0x2fe>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ca:	e04a      	b.n	8009862 <UART_SetConfig+0x2fe>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097d2:	e046      	b.n	8009862 <UART_SetConfig+0x2fe>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097da:	e042      	b.n	8009862 <UART_SetConfig+0x2fe>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a17      	ldr	r2, [pc, #92]	@ (8009840 <UART_SetConfig+0x2dc>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d13a      	bne.n	800985c <UART_SetConfig+0x2f8>
 80097e6:	4b18      	ldr	r3, [pc, #96]	@ (8009848 <UART_SetConfig+0x2e4>)
 80097e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097f4:	d01a      	beq.n	800982c <UART_SetConfig+0x2c8>
 80097f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097fa:	d81b      	bhi.n	8009834 <UART_SetConfig+0x2d0>
 80097fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009800:	d00c      	beq.n	800981c <UART_SetConfig+0x2b8>
 8009802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009806:	d815      	bhi.n	8009834 <UART_SetConfig+0x2d0>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <UART_SetConfig+0x2b0>
 800980c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009810:	d008      	beq.n	8009824 <UART_SetConfig+0x2c0>
 8009812:	e00f      	b.n	8009834 <UART_SetConfig+0x2d0>
 8009814:	2300      	movs	r3, #0
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800981a:	e022      	b.n	8009862 <UART_SetConfig+0x2fe>
 800981c:	2302      	movs	r3, #2
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009822:	e01e      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009824:	2304      	movs	r3, #4
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982a:	e01a      	b.n	8009862 <UART_SetConfig+0x2fe>
 800982c:	2308      	movs	r3, #8
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009832:	e016      	b.n	8009862 <UART_SetConfig+0x2fe>
 8009834:	2310      	movs	r3, #16
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983a:	e012      	b.n	8009862 <UART_SetConfig+0x2fe>
 800983c:	cfff69f3 	.word	0xcfff69f3
 8009840:	40008000 	.word	0x40008000
 8009844:	40013800 	.word	0x40013800
 8009848:	40021000 	.word	0x40021000
 800984c:	40004400 	.word	0x40004400
 8009850:	40004800 	.word	0x40004800
 8009854:	40004c00 	.word	0x40004c00
 8009858:	40005000 	.word	0x40005000
 800985c:	2310      	movs	r3, #16
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4aae      	ldr	r2, [pc, #696]	@ (8009b20 <UART_SetConfig+0x5bc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	f040 8097 	bne.w	800999c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800986e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009872:	2b08      	cmp	r3, #8
 8009874:	d823      	bhi.n	80098be <UART_SetConfig+0x35a>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <UART_SetConfig+0x318>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098bf 	.word	0x080098bf
 8009884:	080098a9 	.word	0x080098a9
 8009888:	080098bf 	.word	0x080098bf
 800988c:	080098af 	.word	0x080098af
 8009890:	080098bf 	.word	0x080098bf
 8009894:	080098bf 	.word	0x080098bf
 8009898:	080098bf 	.word	0x080098bf
 800989c:	080098b7 	.word	0x080098b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fb ffa0 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80098a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098a6:	e010      	b.n	80098ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098a8:	4b9e      	ldr	r3, [pc, #632]	@ (8009b24 <UART_SetConfig+0x5c0>)
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098ac:	e00d      	b.n	80098ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ae:	f7fb ff2b 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80098b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098b4:	e009      	b.n	80098ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098bc:	e005      	b.n	80098ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8130 	beq.w	8009b32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	4a94      	ldr	r2, [pc, #592]	@ (8009b28 <UART_SetConfig+0x5c4>)
 80098d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098dc:	461a      	mov	r2, r3
 80098de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	4613      	mov	r3, r2
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	4413      	add	r3, r2
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d305      	bcc.n	8009902 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d903      	bls.n	800990a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009908:	e113      	b.n	8009b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	2200      	movs	r2, #0
 800990e:	60bb      	str	r3, [r7, #8]
 8009910:	60fa      	str	r2, [r7, #12]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	4a84      	ldr	r2, [pc, #528]	@ (8009b28 <UART_SetConfig+0x5c4>)
 8009918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800991c:	b29b      	uxth	r3, r3
 800991e:	2200      	movs	r2, #0
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800992c:	f7f7 f9e8 	bl	8000d00 <__aeabi_uldivmod>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4610      	mov	r0, r2
 8009936:	4619      	mov	r1, r3
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	020b      	lsls	r3, r1, #8
 8009942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009946:	0202      	lsls	r2, r0, #8
 8009948:	6979      	ldr	r1, [r7, #20]
 800994a:	6849      	ldr	r1, [r1, #4]
 800994c:	0849      	lsrs	r1, r1, #1
 800994e:	2000      	movs	r0, #0
 8009950:	460c      	mov	r4, r1
 8009952:	4605      	mov	r5, r0
 8009954:	eb12 0804 	adds.w	r8, r2, r4
 8009958:	eb43 0905 	adc.w	r9, r3, r5
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	469a      	mov	sl, r3
 8009964:	4693      	mov	fp, r2
 8009966:	4652      	mov	r2, sl
 8009968:	465b      	mov	r3, fp
 800996a:	4640      	mov	r0, r8
 800996c:	4649      	mov	r1, r9
 800996e:	f7f7 f9c7 	bl	8000d00 <__aeabi_uldivmod>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	4613      	mov	r3, r2
 8009978:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009980:	d308      	bcc.n	8009994 <UART_SetConfig+0x430>
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009988:	d204      	bcs.n	8009994 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6a3a      	ldr	r2, [r7, #32]
 8009990:	60da      	str	r2, [r3, #12]
 8009992:	e0ce      	b.n	8009b32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800999a:	e0ca      	b.n	8009b32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099a4:	d166      	bne.n	8009a74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80099a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	2b08      	cmp	r3, #8
 80099ac:	d827      	bhi.n	80099fe <UART_SetConfig+0x49a>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x450>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099ef 	.word	0x080099ef
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ff 	.word	0x080099ff
 80099d0:	080099ff 	.word	0x080099ff
 80099d4:	080099f7 	.word	0x080099f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fb ff04 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80099dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099de:	e014      	b.n	8009a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099e0:	f7fb ff16 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 80099e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099e6:	e010      	b.n	8009a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e8:	4b4e      	ldr	r3, [pc, #312]	@ (8009b24 <UART_SetConfig+0x5c0>)
 80099ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099ec:	e00d      	b.n	8009a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ee:	f7fb fe8b 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80099f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099f4:	e009      	b.n	8009a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099fc:	e005      	b.n	8009a0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8090 	beq.w	8009b32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a16:	4a44      	ldr	r2, [pc, #272]	@ (8009b28 <UART_SetConfig+0x5c4>)
 8009a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a24:	005a      	lsls	r2, r3, #1
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	441a      	add	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	2b0f      	cmp	r3, #15
 8009a3c:	d916      	bls.n	8009a6c <UART_SetConfig+0x508>
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a44:	d212      	bcs.n	8009a6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	f023 030f 	bic.w	r3, r3, #15
 8009a4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	085b      	lsrs	r3, r3, #1
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	8bfb      	ldrh	r3, [r7, #30]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	8bfa      	ldrh	r2, [r7, #30]
 8009a68:	60da      	str	r2, [r3, #12]
 8009a6a:	e062      	b.n	8009b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a72:	e05e      	b.n	8009b32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d828      	bhi.n	8009ace <UART_SetConfig+0x56a>
 8009a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <UART_SetConfig+0x520>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009aa9 	.word	0x08009aa9
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab9 	.word	0x08009ab9
 8009a90:	08009acf 	.word	0x08009acf
 8009a94:	08009abf 	.word	0x08009abf
 8009a98:	08009acf 	.word	0x08009acf
 8009a9c:	08009acf 	.word	0x08009acf
 8009aa0:	08009acf 	.word	0x08009acf
 8009aa4:	08009ac7 	.word	0x08009ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aa8:	f7fb fe9c 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8009aac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aae:	e014      	b.n	8009ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ab0:	f7fb feae 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 8009ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ab6:	e010      	b.n	8009ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b24 <UART_SetConfig+0x5c0>)
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009abc:	e00d      	b.n	8009ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009abe:	f7fb fe23 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 8009ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ac4:	e009      	b.n	8009ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009acc:	e005      	b.n	8009ada <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d028      	beq.n	8009b32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	4a10      	ldr	r2, [pc, #64]	@ (8009b28 <UART_SetConfig+0x5c4>)
 8009ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aea:	461a      	mov	r2, r3
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	085b      	lsrs	r3, r3, #1
 8009af8:	441a      	add	r2, r3
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d910      	bls.n	8009b2c <UART_SetConfig+0x5c8>
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b10:	d20c      	bcs.n	8009b2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60da      	str	r2, [r3, #12]
 8009b1c:	e009      	b.n	8009b32 <UART_SetConfig+0x5ce>
 8009b1e:	bf00      	nop
 8009b20:	40008000 	.word	0x40008000
 8009b24:	00f42400 	.word	0x00f42400
 8009b28:	0800a824 	.word	0x0800a824
      }
      else
      {
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2200      	movs	r2, #0
 8009b46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b4e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3730      	adds	r7, #48	@ 0x30
 8009b56:	46bd      	mov	sp, r7
 8009b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01a      	beq.n	8009c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c5a:	d10a      	bne.n	8009c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	605a      	str	r2, [r3, #4]
  }
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b098      	sub	sp, #96	@ 0x60
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb0:	f7fa f9ee 	bl	8004090 <HAL_GetTick>
 8009cb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d12f      	bne.n	8009d24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f88e 	bl	8009df4 <UART_WaitOnFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d022      	beq.n	8009d24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e6      	bne.n	8009cde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e063      	b.n	8009dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0304 	and.w	r3, r3, #4
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d149      	bne.n	8009dc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f857 	bl	8009df4 <UART_WaitOnFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d03c      	beq.n	8009dc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	623b      	str	r3, [r7, #32]
   return(result);
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e6      	bne.n	8009d4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3308      	adds	r3, #8
 8009d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f023 0301 	bic.w	r3, r3, #1
 8009d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d9e:	61fa      	str	r2, [r7, #28]
 8009da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	69b9      	ldr	r1, [r7, #24]
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	617b      	str	r3, [r7, #20]
   return(result);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e5      	bne.n	8009d7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e012      	b.n	8009dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3758      	adds	r7, #88	@ 0x58
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	4613      	mov	r3, r2
 8009e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e04:	e04f      	b.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d04b      	beq.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e0e:	f7fa f93f 	bl	8004090 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d302      	bcc.n	8009e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e04e      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d037      	beq.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b80      	cmp	r3, #128	@ 0x80
 8009e3a:	d034      	beq.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	d031      	beq.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d110      	bne.n	8009e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2208      	movs	r2, #8
 8009e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f920 	bl	800a09e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2208      	movs	r2, #8
 8009e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e029      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e80:	d111      	bne.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 f906 	bl	800a09e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2220      	movs	r2, #32
 8009e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e00f      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69da      	ldr	r2, [r3, #28]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	bf0c      	ite	eq
 8009eb6:	2301      	moveq	r3, #1
 8009eb8:	2300      	movne	r3, #0
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d0a0      	beq.n	8009e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b096      	sub	sp, #88	@ 0x58
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	88fa      	ldrh	r2, [r7, #6]
 8009ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2222      	movs	r2, #34	@ 0x22
 8009ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d02d      	beq.n	8009f62 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f0c:	4a40      	ldr	r2, [pc, #256]	@ (800a010 <UART_Start_Receive_DMA+0x140>)
 8009f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f16:	4a3f      	ldr	r2, [pc, #252]	@ (800a014 <UART_Start_Receive_DMA+0x144>)
 8009f18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f20:	4a3d      	ldr	r2, [pc, #244]	@ (800a018 <UART_Start_Receive_DMA+0x148>)
 8009f22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3324      	adds	r3, #36	@ 0x24
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f40:	461a      	mov	r2, r3
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	f7fa fa8a 	bl	800445c <HAL_DMA_Start_IT>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2210      	movs	r2, #16
 8009f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e051      	b.n	800a006 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d018      	beq.n	8009f9c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009fbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8009fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e5      	bne.n	8009f9c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3308      	adds	r3, #8
 8009fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ff0:	623a      	str	r2, [r7, #32]
 8009ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	69f9      	ldr	r1, [r7, #28]
 8009ff6:	6a3a      	ldr	r2, [r7, #32]
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e5      	bne.n	8009fd0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3758      	adds	r7, #88	@ 0x58
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	0800a229 	.word	0x0800a229
 800a014:	0800a35d 	.word	0x0800a35d
 800a018:	0800a3a3 	.word	0x0800a3a3

0800a01c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b08f      	sub	sp, #60	@ 0x3c
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	61fb      	str	r3, [r7, #28]
   return(result);
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a044:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	60bb      	str	r3, [r7, #8]
   return(result);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a06c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a076:	61ba      	str	r2, [r7, #24]
 800a078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	613b      	str	r3, [r7, #16]
   return(result);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a092:	bf00      	nop
 800a094:	373c      	adds	r7, #60	@ 0x3c
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b095      	sub	sp, #84	@ 0x54
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e6      	bne.n	800a0a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e3      	bne.n	800a0d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a114:	2b01      	cmp	r3, #1
 800a116:	d118      	bne.n	800a14a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	60bb      	str	r3, [r7, #8]
   return(result);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f023 0310 	bic.w	r3, r3, #16
 800a12c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	6979      	ldr	r1, [r7, #20]
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	613b      	str	r3, [r7, #16]
   return(result);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e6      	bne.n	800a118 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2220      	movs	r2, #32
 800a14e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a15e:	bf00      	nop
 800a160:	3754      	adds	r7, #84	@ 0x54
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b090      	sub	sp, #64	@ 0x40
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d137      	bne.n	800a1f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	2200      	movs	r2, #0
 800a18a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3308      	adds	r3, #8
 800a194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	623b      	str	r3, [r7, #32]
   return(result);
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e5      	bne.n	800a18e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e0:	61fb      	str	r3, [r7, #28]
 800a1e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e4:	69b9      	ldr	r1, [r7, #24]
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	e841 2300 	strex	r3, r2, [r1]
 800a1ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e6      	bne.n	800a1c2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1f4:	e004      	b.n	800a200 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1fe:	4798      	blx	r3
}
 800a200:	bf00      	nop
 800a202:	3740      	adds	r7, #64	@ 0x40
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a214:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b09c      	sub	sp, #112	@ 0x70
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a234:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d171      	bne.n	800a328 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a246:	2200      	movs	r2, #0
 800a248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a25a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a25c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a260:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a26a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a26c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e6      	bne.n	800a24c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a27e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a290:	f023 0301 	bic.w	r3, r3, #1
 800a294:	667b      	str	r3, [r7, #100]	@ 0x64
 800a296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3308      	adds	r3, #8
 800a29c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a29e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a2a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e5      	bne.n	800a27e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d118      	bne.n	800a328 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	60fb      	str	r3, [r7, #12]
   return(result);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0310 	bic.w	r3, r3, #16
 800a30a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a30c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	69b9      	ldr	r1, [r7, #24]
 800a31a:	69fa      	ldr	r2, [r7, #28]
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	617b      	str	r3, [r7, #20]
   return(result);
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e6      	bne.n	800a2f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a32a:	2200      	movs	r2, #0
 800a32c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a32e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d109      	bne.n	800a34a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a33c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a33e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a342:	4611      	mov	r1, r2
 800a344:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a346:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a348:	e004      	b.n	800a354 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a34c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a350:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a352:	4798      	blx	r3
}
 800a354:	bf00      	nop
 800a356:	3770      	adds	r7, #112	@ 0x70
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a368:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a374:	2b01      	cmp	r3, #1
 800a376:	d10b      	bne.n	800a390 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a384:	0852      	lsrs	r2, r2, #1
 800a386:	b292      	uxth	r2, r2
 800a388:	4611      	mov	r1, r2
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a38e:	e004      	b.n	800a39a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	4798      	blx	r3
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ca:	2b80      	cmp	r3, #128	@ 0x80
 800a3cc:	d109      	bne.n	800a3e2 <UART_DMAError+0x40>
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b21      	cmp	r3, #33	@ 0x21
 800a3d2:	d106      	bne.n	800a3e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a3dc:	6978      	ldr	r0, [r7, #20]
 800a3de:	f7ff fe1d 	bl	800a01c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ec:	2b40      	cmp	r3, #64	@ 0x40
 800a3ee:	d109      	bne.n	800a404 <UART_DMAError+0x62>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b22      	cmp	r3, #34	@ 0x22
 800a3f4:	d106      	bne.n	800a404 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	f7ff fe4d 	bl	800a09e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a40a:	f043 0210 	orr.w	r2, r3, #16
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a41a:	6978      	ldr	r0, [r7, #20]
 800a41c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b088      	sub	sp, #32
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a472:	61fb      	str	r3, [r7, #28]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6979      	ldr	r1, [r7, #20]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	613b      	str	r3, [r7, #16]
   return(result);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e6      	bne.n	800a45e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2220      	movs	r2, #32
 800a494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a8:	bf00      	nop
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d101      	bne.n	800a502 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4fe:	2302      	movs	r3, #2
 800a500:	e027      	b.n	800a552 <HAL_UARTEx_DisableFifoMode+0x66>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2224      	movs	r2, #36	@ 0x24
 800a50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0201 	bic.w	r2, r2, #1
 800a528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a572:	2302      	movs	r3, #2
 800a574:	e02d      	b.n	800a5d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2224      	movs	r2, #36	@ 0x24
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0201 	bic.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f850 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e02d      	b.n	800a64e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2224      	movs	r2, #36	@ 0x24
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0201 	bic.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f812 	bl	800a658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a678:	e031      	b.n	800a6de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a67a:	2308      	movs	r3, #8
 800a67c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a67e:	2308      	movs	r3, #8
 800a680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	0e5b      	lsrs	r3, r3, #25
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	0f5b      	lsrs	r3, r3, #29
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	7b3a      	ldrb	r2, [r7, #12]
 800a6a6:	4911      	ldr	r1, [pc, #68]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6a8:	5c8a      	ldrb	r2, [r1, r2]
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ae:	7b3a      	ldrb	r2, [r7, #12]
 800a6b0:	490f      	ldr	r1, [pc, #60]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	7b7a      	ldrb	r2, [r7, #13]
 800a6c4:	4909      	ldr	r1, [pc, #36]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x94>)
 800a6c6:	5c8a      	ldrb	r2, [r1, r2]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6cc:	7b7a      	ldrb	r2, [r7, #13]
 800a6ce:	4908      	ldr	r1, [pc, #32]	@ (800a6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a6d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6de:	bf00      	nop
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	0800a83c 	.word	0x0800a83c
 800a6f0:	0800a844 	.word	0x0800a844

0800a6f4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	ed93 7a06 	vldr	s14, [r3, #24]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	edd3 7a07 	vldr	s15, [r3, #28]
 800a70a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	edd3 7a08 	vldr	s15, [r3, #32]
 800a714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	edd3 7a06 	vldr	s15, [r3, #24]
 800a724:	eeb1 7a67 	vneg.f32	s14, s15
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a72e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a1a      	ldr	r2, [r3, #32]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d006      	beq.n	800a758 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	330c      	adds	r3, #12
 800a74e:	220c      	movs	r2, #12
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f000 f804 	bl	800a760 <memset>
  }

}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <memset>:
 800a760:	4402      	add	r2, r0
 800a762:	4603      	mov	r3, r0
 800a764:	4293      	cmp	r3, r2
 800a766:	d100      	bne.n	800a76a <memset+0xa>
 800a768:	4770      	bx	lr
 800a76a:	f803 1b01 	strb.w	r1, [r3], #1
 800a76e:	e7f9      	b.n	800a764 <memset+0x4>

0800a770 <__libc_init_array>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4d0d      	ldr	r5, [pc, #52]	@ (800a7a8 <__libc_init_array+0x38>)
 800a774:	4c0d      	ldr	r4, [pc, #52]	@ (800a7ac <__libc_init_array+0x3c>)
 800a776:	1b64      	subs	r4, r4, r5
 800a778:	10a4      	asrs	r4, r4, #2
 800a77a:	2600      	movs	r6, #0
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	d109      	bne.n	800a794 <__libc_init_array+0x24>
 800a780:	4d0b      	ldr	r5, [pc, #44]	@ (800a7b0 <__libc_init_array+0x40>)
 800a782:	4c0c      	ldr	r4, [pc, #48]	@ (800a7b4 <__libc_init_array+0x44>)
 800a784:	f000 f826 	bl	800a7d4 <_init>
 800a788:	1b64      	subs	r4, r4, r5
 800a78a:	10a4      	asrs	r4, r4, #2
 800a78c:	2600      	movs	r6, #0
 800a78e:	42a6      	cmp	r6, r4
 800a790:	d105      	bne.n	800a79e <__libc_init_array+0x2e>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f855 3b04 	ldr.w	r3, [r5], #4
 800a798:	4798      	blx	r3
 800a79a:	3601      	adds	r6, #1
 800a79c:	e7ee      	b.n	800a77c <__libc_init_array+0xc>
 800a79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a2:	4798      	blx	r3
 800a7a4:	3601      	adds	r6, #1
 800a7a6:	e7f2      	b.n	800a78e <__libc_init_array+0x1e>
 800a7a8:	0800a854 	.word	0x0800a854
 800a7ac:	0800a854 	.word	0x0800a854
 800a7b0:	0800a854 	.word	0x0800a854
 800a7b4:	0800a858 	.word	0x0800a858

0800a7b8 <memcpy>:
 800a7b8:	440a      	add	r2, r1
 800a7ba:	4291      	cmp	r1, r2
 800a7bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7c0:	d100      	bne.n	800a7c4 <memcpy+0xc>
 800a7c2:	4770      	bx	lr
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ce:	4291      	cmp	r1, r2
 800a7d0:	d1f9      	bne.n	800a7c6 <memcpy+0xe>
 800a7d2:	bd10      	pop	{r4, pc}

0800a7d4 <_init>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_fini>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr
