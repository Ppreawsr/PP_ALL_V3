
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a92c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800ab04  0800ab04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab64  0800ab64  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab64  0800ab64  0000bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab6c  0800ab6c  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab70  0800ab70  0000bb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800ab74  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000218  0800ad8c  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  0800ad8c  0000c3a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c9a  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e93  00000000  00000000  00023ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00026d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea5  00000000  00000000  00028020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017129  00000000  00000000  00050006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feaf7  00000000  00000000  0006712f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  00165c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  0016ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aaec 	.word	0x0800aaec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800aaec 	.word	0x0800aaec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000234 	.word	0x20000234

08001140 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <modbus_3t5_Timeout+0x1c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	755a      	strb	r2, [r3, #21]

}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000234 	.word	0x20000234

08001160 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f008 fb27 	bl	80097bc <HAL_UART_GetError>
 800116e:	4603      	mov	r3, r0
 8001170:	2b20      	cmp	r3, #32
 8001172:	d101      	bne.n	8001178 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001174:	f7ff ffc4 	bl	8001100 <modbus_1t5_Timeout>

	}
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <Modbus_init+0xa0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <Modbus_init+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <Modbus_init+0xa4>)
 800119e:	210e      	movs	r1, #14
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fb55 	bl	8007850 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2110      	movs	r1, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f008 faaf 	bl	8009710 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fac6 	bl	8009748 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <Modbus_init+0xa8>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fd8d 	bl	8008ce4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <Modbus_init+0xa0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <Modbus_init+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011dc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011e0:	4413      	add	r3, r2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f007 feb5 	bl	8008f58 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Modbus_init+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d10c      	bne.n	8001218 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <Modbus_init+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f80d 	bl	8006224 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <Modbus_init+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fd58 	bl	8006cc8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000234 	.word	0x20000234
 8001224:	08001141 	.word	0x08001141
 8001228:	08001161 	.word	0x08001161

0800122c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800123c:	23ff      	movs	r3, #255	@ 0xff
 800123e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001240:	e013      	b.n	800126a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	4053      	eors	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <CRC16+0x64>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4413      	add	r3, r2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4053      	eors	r3, r2
 800125e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001260:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <CRC16+0x68>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	803a      	strh	r2, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e6      	bne.n	8001242 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29b      	uxth	r3, r3
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000100 	.word	0x20000100
 8001294:	20000000 	.word	0x20000000

08001298 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800129e:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	7ddb      	ldrb	r3, [r3, #23]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d80a      	bhi.n	80012c0 <Modbus_Protocal_Worker+0x28>
 80012aa:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <Modbus_Protocal_Worker+0x18>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012cb 	.word	0x080012cb
 80012b4:	0800145f 	.word	0x0800145f
 80012b8:	08001357 	.word	0x08001357
 80012bc:	0800139b 	.word	0x0800139b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012c0:	4b75      	ldr	r3, [pc, #468]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	75da      	strb	r2, [r3, #23]
		break;
 80012c8:	e0e1      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012ca:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012d6:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012de:	f000 f9cd 	bl	800167c <Modbus_Emission>
 80012e2:	e018      	b.n	8001316 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d00b      	beq.n	8001316 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001306:	4b64      	ldr	r3, [pc, #400]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800130e:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2203      	movs	r2, #3
 8001314:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001316:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001320:	2b20      	cmp	r3, #32
 8001322:	f040 80ad 	bne.w	8001480 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b57      	ldr	r3, [pc, #348]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001342:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800134e:	4619      	mov	r1, r3
 8001350:	f007 fe02 	bl	8008f58 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001354:	e094      	b.n	8001480 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001356:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7d1b      	ldrb	r3, [r3, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8091 	beq.w	8001484 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001362:	4b4d      	ldr	r3, [pc, #308]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	22fe      	movs	r2, #254	@ 0xfe
 8001368:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800136a:	4b4b      	ldr	r3, [pc, #300]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001374:	4b48      	ldr	r3, [pc, #288]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001388:	1a8a      	subs	r2, r1, r2
 800138a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800138c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001390:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2204      	movs	r2, #4
 8001396:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001398:	e074      	b.n	8001484 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800139a:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80013a2:	f113 0f02 	cmn.w	r3, #2
 80013a6:	d150      	bne.n	800144a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013b8:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013c0:	3b02      	subs	r3, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f7ff ff31 	bl	800122c <CRC16>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013ce:	793a      	ldrb	r2, [r7, #4]
 80013d0:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013dc:	3b02      	subs	r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d10c      	bne.n	8001402 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013e8:	797a      	ldrb	r2, [r7, #5]
 80013ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d004      	beq.n	800140c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001402:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	22ff      	movs	r2, #255	@ 0xff
 8001408:	759a      	strb	r2, [r3, #22]
				break;
 800140a:	e040      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d113      	bne.n	8001446 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800142e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001438:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800143a:	461a      	mov	r2, r3
 800143c:	f009 fb48 	bl	800aad0 <memcpy>

			//execute command
			Modbus_frame_response();
 8001440:	f000 f904 	bl	800164c <Modbus_frame_response>
 8001444:	e001      	b.n	800144a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001446:	bf00      	nop
					}
		break;


	}
}
 8001448:	e021      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7d5b      	ldrb	r3, [r3, #21]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d019      	beq.n	8001488 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	75da      	strb	r2, [r3, #23]
		break;
 800145c:	e014      	b.n	8001488 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001468:	2b20      	cmp	r3, #32
 800146a:	d10f      	bne.n	800148c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	75da      	strb	r2, [r3, #23]
		break;
 800147e:	e005      	b.n	800148c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001480:	bf00      	nop
 8001482:	e004      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001484:	bf00      	nop
 8001486:	e002      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 800148c:	bf00      	nop
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000234 	.word	0x20000234

0800149c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	7e5b      	ldrb	r3, [r3, #25]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	7e92      	ldrb	r2, [r2, #26]
 80014b2:	4413      	add	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d903      	bls.n	80014ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 f8a0 	bl	8001608 <ModbusErrorReply>
			 return;
 80014c8:	e023      	b.n	8001512 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	440b      	add	r3, r1
 80014da:	7ed2      	ldrb	r2, [r2, #27]
 80014dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	7f12      	ldrb	r2, [r2, #28]
 80014f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	f009 fae4 	bl	800aad0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <modbusWrite1Register+0x7c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000234 	.word	0x20000234

0800151c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001522:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <modbusRead1Register+0xe8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	7edb      	ldrb	r3, [r3, #27]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <modbusRead1Register+0xe8>)
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	7f12      	ldrb	r2, [r2, #28]
 8001532:	4413      	add	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001536:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <modbusRead1Register+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7e5b      	ldrb	r3, [r3, #25]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <modbusRead1Register+0xe8>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	7e92      	ldrb	r2, [r2, #26]
 8001546:	4413      	add	r3, r2
 8001548:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <modbusRead1Register+0x3a>
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	2b7d      	cmp	r3, #125	@ 0x7d
 8001554:	d903      	bls.n	800155e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001556:	2003      	movs	r0, #3
 8001558:	f000 f856 	bl	8001608 <ModbusErrorReply>
		 return;
 800155c:	e04e      	b.n	80015fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	d808      	bhi.n	800157c <modbusRead1Register+0x60>
 800156a:	88ba      	ldrh	r2, [r7, #4]
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <modbusRead1Register+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d903      	bls.n	8001584 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800157c:	2002      	movs	r0, #2
 800157e:	f000 f843 	bl	8001608 <ModbusErrorReply>
		 return;
 8001582:	e03b      	b.n	80015fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <modbusRead1Register+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2203      	movs	r2, #3
 800158a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <modbusRead1Register+0xe8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0052      	lsls	r2, r2, #1
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800159e:	2400      	movs	r4, #0
 80015a0:	e020      	b.n	80015e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <modbusRead1Register+0xe8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	4423      	add	r3, r4
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	18d1      	adds	r1, r2, r3
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <modbusRead1Register+0xe8>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	1c63      	adds	r3, r4, #1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	7849      	ldrb	r1, [r1, #1]
 80015ba:	4413      	add	r3, r2
 80015bc:	460a      	mov	r2, r1
 80015be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <modbusRead1Register+0xe8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	4423      	add	r3, r4
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	18d1      	adds	r1, r2, r3
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <modbusRead1Register+0xe8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	0063      	lsls	r3, r4, #1
 80015d6:	3303      	adds	r3, #3
 80015d8:	7809      	ldrb	r1, [r1, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	460a      	mov	r2, r1
 80015de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015e2:	3401      	adds	r4, #1
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	429c      	cmp	r4, r3
 80015e8:	dbdb      	blt.n	80015a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <modbusRead1Register+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0052      	lsls	r2, r2, #1
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20000234 	.word	0x20000234

08001608 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <ModbusErrorReply+0x40>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7e1a      	ldrb	r2, [r3, #24]
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <ModbusErrorReply+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <ModbusErrorReply+0x40>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <ModbusErrorReply+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000234 	.word	0x20000234

0800164c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <Modbus_frame_response+0x2c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	7e1b      	ldrb	r3, [r3, #24]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d004      	beq.n	8001664 <Modbus_frame_response+0x18>
 800165a:	2b06      	cmp	r3, #6
 800165c:	d105      	bne.n	800166a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800165e:	f7ff ff1d 	bl	800149c <modbusWrite1Register>
		break;
 8001662:	e006      	b.n	8001672 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001664:	f7ff ff5a 	bl	800151c <modbusRead1Register>
		break;
 8001668:	e003      	b.n	8001672 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff ffcc 	bl	8001608 <ModbusErrorReply>
		break;
 8001670:	bf00      	nop

	}
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000234 	.word	0x20000234

0800167c <Modbus_Emission>:

void Modbus_Emission()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <Modbus_Emission+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168c:	2b20      	cmp	r3, #32
 800168e:	d15d      	bne.n	800174c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <Modbus_Emission+0xe8>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <Modbus_Emission+0xe8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <Modbus_Emission+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <Modbus_Emission+0xe8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80016b8:	461a      	mov	r2, r3
 80016ba:	f009 fa09 	bl	800aad0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <Modbus_Emission+0xe8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <Modbus_Emission+0xe8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3203      	adds	r2, #3
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <Modbus_Emission+0xe8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <Modbus_Emission+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016e4:	3b02      	subs	r3, #2
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fd9f 	bl	800122c <CRC16>
 80016ee:	4603      	mov	r3, r0
 80016f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <Modbus_Emission+0xe8>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <Modbus_Emission+0xe8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001700:	7939      	ldrb	r1, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <Modbus_Emission+0xe8>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <Modbus_Emission+0xe8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001716:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001718:	7979      	ldrb	r1, [r7, #5]
 800171a:	4413      	add	r3, r2
 800171c:	460a      	mov	r2, r1
 800171e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <Modbus_Emission+0xe8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172c:	2b20      	cmp	r3, #32
 800172e:	d10d      	bne.n	800174c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <Modbus_Emission+0xe8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <Modbus_Emission+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001742:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001746:	461a      	mov	r2, r3
 8001748:	f007 fb86 	bl	8008e58 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <Modbus_Emission+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <Modbus_Emission+0xe8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	755a      	strb	r2, [r3, #21]

}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000234 	.word	0x20000234

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f002 fdb5 	bl	80042de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f99e 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 fd68 	bl	800224c <MX_GPIO_Init>
  MX_DMA_Init();
 800177c:	f000 fd18 	bl	80021b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001780:	f000 fc7c 	bl	800207c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001784:	f000 fcc6 	bl	8002114 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001788:	f000 f9e0 	bl	8001b4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800178c:	f000 fab2 	bl	8001cf4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001790:	f000 fb04 	bl	8001d9c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001794:	f000 fbc6 	bl	8001f24 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001798:	f000 fc4a 	bl	8002030 <MX_TIM16_Init>
  MX_TIM4_Init();
 800179c:	f000 fb74 	bl	8001e88 <MX_TIM4_Init>
  MX_TIM7_Init();
 80017a0:	f000 fc10 	bl	8001fc4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 8.1;
 80017a4:	4b9e      	ldr	r3, [pc, #632]	@ (8001a20 <main+0x2b8>)
 80017a6:	4a9f      	ldr	r2, [pc, #636]	@ (8001a24 <main+0x2bc>)
 80017a8:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 80017aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001a20 <main+0x2b8>)
 80017ac:	4a9e      	ldr	r2, [pc, #632]	@ (8001a28 <main+0x2c0>)
 80017ae:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 80017b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001a20 <main+0x2b8>)
 80017b2:	4a9e      	ldr	r2, [pc, #632]	@ (8001a2c <main+0x2c4>)
 80017b4:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	4899      	ldr	r0, [pc, #612]	@ (8001a20 <main+0x2b8>)
 80017ba:	f009 f927 	bl	800aa0c <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	499b      	ldr	r1, [pc, #620]	@ (8001a30 <main+0x2c8>)
 80017c2:	489c      	ldr	r0, [pc, #624]	@ (8001a34 <main+0x2cc>)
 80017c4:	f007 fbc8 	bl	8008f58 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80017c8:	489b      	ldr	r0, [pc, #620]	@ (8001a38 <main+0x2d0>)
 80017ca:	f004 fd2b 	bl	8006224 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80017ce:	4b9b      	ldr	r3, [pc, #620]	@ (8001a3c <main+0x2d4>)
 80017d0:	4a9b      	ldr	r2, [pc, #620]	@ (8001a40 <main+0x2d8>)
 80017d2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80017d4:	4b99      	ldr	r3, [pc, #612]	@ (8001a3c <main+0x2d4>)
 80017d6:	4a9b      	ldr	r2, [pc, #620]	@ (8001a44 <main+0x2dc>)
 80017d8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017da:	4b98      	ldr	r3, [pc, #608]	@ (8001a3c <main+0x2d4>)
 80017dc:	2215      	movs	r2, #21
 80017de:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80017e0:	4b96      	ldr	r3, [pc, #600]	@ (8001a3c <main+0x2d4>)
 80017e2:	22c8      	movs	r2, #200	@ 0xc8
 80017e4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80017e6:	4998      	ldr	r1, [pc, #608]	@ (8001a48 <main+0x2e0>)
 80017e8:	4894      	ldr	r0, [pc, #592]	@ (8001a3c <main+0x2d4>)
 80017ea:	f7ff fcc9 	bl	8001180 <Modbus_init>
  reed = 0;
 80017ee:	4b97      	ldr	r3, [pc, #604]	@ (8001a4c <main+0x2e4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
  gripper = 0;
 80017f4:	4b96      	ldr	r3, [pc, #600]	@ (8001a50 <main+0x2e8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
  vacuum = 0;
 80017fa:	4b96      	ldr	r3, [pc, #600]	@ (8001a54 <main+0x2ec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 458;
 8001800:	4b95      	ldr	r3, [pc, #596]	@ (8001a58 <main+0x2f0>)
 8001802:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8001806:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2261;
 8001808:	4b93      	ldr	r3, [pc, #588]	@ (8001a58 <main+0x2f0>)
 800180a:	f640 02d5 	movw	r2, #2261	@ 0x8d5
 800180e:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3255;
 8001810:	4b91      	ldr	r3, [pc, #580]	@ (8001a58 <main+0x2f0>)
 8001812:	f640 42b7 	movw	r2, #3255	@ 0xcb7
 8001816:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4058;
 8001818:	4b8f      	ldr	r3, [pc, #572]	@ (8001a58 <main+0x2f0>)
 800181a:	f640 72da 	movw	r2, #4058	@ 0xfda
 800181e:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 56;
 8001820:	4b8d      	ldr	r3, [pc, #564]	@ (8001a58 <main+0x2f0>)
 8001822:	2238      	movs	r2, #56	@ 0x38
 8001824:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001826:	488d      	ldr	r0, [pc, #564]	@ (8001a5c <main+0x2f4>)
 8001828:	f004 fc8c 	bl	8006144 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800182c:	2100      	movs	r1, #0
 800182e:	488b      	ldr	r0, [pc, #556]	@ (8001a5c <main+0x2f4>)
 8001830:	f004 fe0e 	bl	8006450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001834:	2104      	movs	r1, #4
 8001836:	4889      	ldr	r0, [pc, #548]	@ (8001a5c <main+0x2f4>)
 8001838:	f004 fe0a 	bl	8006450 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800183c:	213c      	movs	r1, #60	@ 0x3c
 800183e:	4888      	ldr	r0, [pc, #544]	@ (8001a60 <main+0x2f8>)
 8001840:	f005 fb84 	bl	8006f4c <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001844:	4887      	ldr	r0, [pc, #540]	@ (8001a64 <main+0x2fc>)
 8001846:	f004 fc7d 	bl	8006144 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 800184a:	4887      	ldr	r0, [pc, #540]	@ (8001a68 <main+0x300>)
 800184c:	f004 fcea 	bl	8006224 <HAL_TIM_Base_Start_IT>
//
//  else if (position_goal < 300)
//  {
//	  pos_err = position_goal;
//  }
  registerFrame[0x00].U16 = 22881;
 8001850:	4b7d      	ldr	r3, [pc, #500]	@ (8001a48 <main+0x2e0>)
 8001852:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001856:	801a      	strh	r2, [r3, #0]
  Modbus_Protocal_Worker();
 8001858:	f7ff fd1e 	bl	8001298 <Modbus_Protocal_Worker>

  buf[0] = 3;
 800185c:	4b83      	ldr	r3, [pc, #524]	@ (8001a6c <main+0x304>)
 800185e:	2203      	movs	r2, #3
 8001860:	701a      	strb	r2, [r3, #0]
  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8001862:	2204      	movs	r2, #4
 8001864:	497f      	ldr	r1, [pc, #508]	@ (8001a64 <main+0x2fc>)
 8001866:	4881      	ldr	r0, [pc, #516]	@ (8001a6c <main+0x304>)
 8001868:	f002 fc2e 	bl	80040c8 <updateLED>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <main+0x308>)
 8001872:	701a      	strb	r2, [r3, #0]
  piingpong = 0;
 8001874:	4b7f      	ldr	r3, [pc, #508]	@ (8001a74 <main+0x30c>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
  uint8_t result = HomeZ();
 800187a:	f002 fccb 	bl	8004214 <HomeZ>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(2000);
 8001882:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001886:	f002 fd9b 	bl	80043c0 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800188a:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <main+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
  qeifloat = 0;
 8001892:	4b79      	ldr	r3, [pc, #484]	@ (8001a78 <main+0x310>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  generate_trapezoidal_velocity_profile(time_op,16.0);
 800189a:	4b78      	ldr	r3, [pc, #480]	@ (8001a7c <main+0x314>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe1e 	bl	80004e0 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 8001a10 <main+0x2a8>
 80018ac:	ec43 2b10 	vmov	d0, r2, r3
 80018b0:	f000 ffaa 	bl	8002808 <generate_trapezoidal_velocity_profile>
  Home = 0;
 80018b4:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <main+0x318>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
  rou = 0;
 80018ba:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <main+0x31c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	801a      	strh	r2, [r3, #0]
//	  Mode = 1;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 80018c0:	f7ff fcea 	bl	8001298 <Modbus_Protocal_Worker>
	  BaseAction();
 80018c4:	f001 f9da 	bl	8002c7c <BaseAction>
	  OrderSeparate();
 80018c8:	f001 fe3a 	bl	8003540 <OrderSeparate>
	  ControlJoy();
 80018cc:	f000 fd7e 	bl	80023cc <ControlJoy>
//		  currentTime = 0;
//		  _micros = 0;
////		  end = 0;

	  static uint64_t timestampqei =0;
	  int64_t currentTimeqei = micros();
 80018d0:	f001 ff6c 	bl	80037ac <micros>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTimeqei > timestampqei)
 80018dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e0:	4969      	ldr	r1, [pc, #420]	@ (8001a88 <main+0x320>)
 80018e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018e6:	4290      	cmp	r0, r2
 80018e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ec:	d20c      	bcs.n	8001908 <main+0x1a0>
	  {
		  timestampqei = currentTimeqei + 100000;//us
 80018ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018f2:	4966      	ldr	r1, [pc, #408]	@ (8001a8c <main+0x324>)
 80018f4:	1854      	adds	r4, r2, r1
 80018f6:	f143 0500 	adc.w	r5, r3, #0
 80018fa:	4622      	mov	r2, r4
 80018fc:	462b      	mov	r3, r5
 80018fe:	4962      	ldr	r1, [pc, #392]	@ (8001a88 <main+0x320>)
 8001900:	e9c1 2300 	strd	r2, r3, [r1]
	  	  ACC_Update();
 8001904:	f002 f806 	bl	8003914 <ACC_Update>
	  }

//	  }
	  if(fin == 1 && fabs((( (setPos+160)/10.0) - qeifloat))  >= 0.9 && m_vel == 0)
 8001908:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <main+0x328>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d152      	bne.n	80019b6 <main+0x24e>
 8001910:	4b60      	ldr	r3, [pc, #384]	@ (8001a94 <main+0x32c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	33a0      	adds	r3, #160	@ 0xa0
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fdd0 	bl	80004bc <__aeabi_i2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b5d      	ldr	r3, [pc, #372]	@ (8001a98 <main+0x330>)
 8001922:	f7fe ff5f 	bl	80007e4 <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4692      	mov	sl, r2
 800192c:	469b      	mov	fp, r3
 800192e:	4b52      	ldr	r3, [pc, #328]	@ (8001a78 <main+0x310>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdd4 	bl	80004e0 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4650      	mov	r0, sl
 800193e:	4659      	mov	r1, fp
 8001940:	f7fe fc6e 	bl	8000220 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4690      	mov	r8, r2
 800194a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800194e:	a332      	add	r3, pc, #200	@ (adr r3, 8001a18 <main+0x2b0>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7ff f8a0 	bl	8000a9c <__aeabi_dcmpge>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d029      	beq.n	80019b6 <main+0x24e>
 8001962:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <main+0x334>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d125      	bne.n	80019b6 <main+0x24e>
	  {
		  generate_trapezoidal_velocity_profile(time_op,(setPos/10.0)+16.0);
 800196a:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <main+0x314>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdb6 	bl	80004e0 <__aeabi_f2d>
 8001974:	4682      	mov	sl, r0
 8001976:	468b      	mov	fp, r1
 8001978:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <main+0x32c>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd9d 	bl	80004bc <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <main+0x330>)
 8001988:	f7fe ff2c 	bl	80007e4 <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <main+0x338>)
 800199a:	f7fe fc43 	bl	8000224 <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	ec43 2b17 	vmov	d7, r2, r3
 80019a6:	eeb0 1a47 	vmov.f32	s2, s14
 80019aa:	eef0 1a67 	vmov.f32	s3, s15
 80019ae:	ec4b ab10 	vmov	d0, sl, fp
 80019b2:	f000 ff29 	bl	8002808 <generate_trapezoidal_velocity_profile>

	  }
	  xx = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80019b6:	2140      	movs	r1, #64	@ 0x40
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f003 fae6 	bl	8004f8c <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <main+0x33c>)
 80019c6:	701a      	strb	r2, [r3, #0]
//	  }
	  //TRAJECTORY


	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <main+0x2f8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <main+0x340>)
 80019d0:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2)*60.00)/8192;
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <main+0x2f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fd5f 	bl	800049c <__aeabi_ui2d>
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <main+0x344>)
 80019e4:	f7fe fdd4 	bl	8000590 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <main+0x348>)
 80019f6:	f7fe fef5 	bl	80007e4 <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8a7 	bl	8000b54 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <main+0x310>)
 8001a0a:	6013      	str	r3, [r2, #0]
  {
 8001a0c:	e758      	b.n	80018c0 <main+0x158>
 8001a0e:	bf00      	nop
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40300000 	.word	0x40300000
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	3feccccc 	.word	0x3feccccc
 8001a20:	200011e8 	.word	0x200011e8
 8001a24:	4101999a 	.word	0x4101999a
 8001a28:	3a83126f 	.word	0x3a83126f
 8001a2c:	3c23d70a 	.word	0x3c23d70a
 8001a30:	20000ae4 	.word	0x20000ae4
 8001a34:	2000082c 	.word	0x2000082c
 8001a38:	20000568 	.word	0x20000568
 8001a3c:	20000afc 	.word	0x20000afc
 8001a40:	200008f8 	.word	0x200008f8
 8001a44:	20000700 	.word	0x20000700
 8001a48:	20000fec 	.word	0x20000fec
 8001a4c:	20000fda 	.word	0x20000fda
 8001a50:	20000fd9 	.word	0x20000fd9
 8001a54:	20000fd8 	.word	0x20000fd8
 8001a58:	2000117c 	.word	0x2000117c
 8001a5c:	20000238 	.word	0x20000238
 8001a60:	20000304 	.word	0x20000304
 8001a64:	200003d0 	.word	0x200003d0
 8001a68:	20000634 	.word	0x20000634
 8001a6c:	20000208 	.word	0x20000208
 8001a70:	20001216 	.word	0x20001216
 8001a74:	20000fd6 	.word	0x20000fd6
 8001a78:	20000aec 	.word	0x20000aec
 8001a7c:	20000200 	.word	0x20000200
 8001a80:	200011de 	.word	0x200011de
 8001a84:	20001214 	.word	0x20001214
 8001a88:	20001268 	.word	0x20001268
 8001a8c:	000186a0 	.word	0x000186a0
 8001a90:	20001217 	.word	0x20001217
 8001a94:	20001186 	.word	0x20001186
 8001a98:	40240000 	.word	0x40240000
 8001a9c:	20000af6 	.word	0x20000af6
 8001aa0:	40300000 	.word	0x40300000
 8001aa4:	200011a9 	.word	0x200011a9
 8001aa8:	20000ae8 	.word	0x20000ae8
 8001aac:	404e0000 	.word	0x404e0000
 8001ab0:	40c00000 	.word	0x40c00000

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	@ 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	2238      	movs	r2, #56	@ 0x38
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f008 ffd8 	bl	800aa78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f003 faa0 	bl	800501c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae6:	2340      	movs	r3, #64	@ 0x40
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aea:	2302      	movs	r3, #2
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aee:	2302      	movs	r3, #2
 8001af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001af6:	2355      	movs	r3, #85	@ 0x55
 8001af8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fb3a 	bl	8005184 <HAL_RCC_OscConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b16:	f001 ff35 	bl	8003984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2104      	movs	r1, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fe38 	bl	80057a8 <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b3e:	f001 ff21 	bl	8003984 <Error_Handler>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3750      	adds	r7, #80	@ 0x50
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09e      	sub	sp, #120	@ 0x78
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001b6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2234      	movs	r2, #52	@ 0x34
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f008 ff70 	bl	800aa78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b98:	4b54      	ldr	r3, [pc, #336]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001b9a:	4a55      	ldr	r2, [pc, #340]	@ (8001cf0 <MX_TIM1_Init+0x1a4>)
 8001b9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001b9e:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b51      	ldr	r3, [pc, #324]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001baa:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc4:	4849      	ldr	r0, [pc, #292]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bc6:	f004 fa59 	bl	800607c <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001bd0:	f001 fed8 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bde:	4619      	mov	r1, r3
 8001be0:	4842      	ldr	r0, [pc, #264]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001be2:	f005 fccf 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bec:	f001 feca 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf0:	483e      	ldr	r0, [pc, #248]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001bf2:	f004 fbbf 	bl	8006374 <HAL_TIM_PWM_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001bfc:	f001 fec2 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4836      	ldr	r0, [pc, #216]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001c14:	f006 fd6a 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c1e:	f001 feb1 	bl	8003984 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001c22:	2301      	movs	r3, #1
 8001c24:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c2e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c32:	461a      	mov	r2, r3
 8001c34:	2101      	movs	r1, #1
 8001c36:	482d      	ldr	r0, [pc, #180]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001c38:	f006 fe82 	bl	8008940 <HAL_TIMEx_ConfigBreakInput>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001c42:	f001 fe9f 	bl	8003984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c46:	2360      	movs	r3, #96	@ 0x60
 8001c48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4820      	ldr	r0, [pc, #128]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001c6c:	f005 fb76 	bl	800735c <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001c76:	f001 fe85 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	481a      	ldr	r0, [pc, #104]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001c84:	f005 fb6a 	bl	800735c <HAL_TIM_PWM_ConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001c8e:	f001 fe79 	bl	8003984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 15;
 8001cac:	230f      	movs	r3, #15
 8001cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4807      	ldr	r0, [pc, #28]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001cd0:	f006 fda2 	bl	8008818 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001cda:	f001 fe53 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cde:	4803      	ldr	r0, [pc, #12]	@ (8001cec <MX_TIM1_Init+0x1a0>)
 8001ce0:	f001 ffc0 	bl	8003c64 <HAL_TIM_MspPostInit>

}
 8001ce4:	bf00      	nop
 8001ce6:	3778      	adds	r7, #120	@ 0x78
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000238 	.word	0x20000238
 8001cf0:	40012c00 	.word	0x40012c00

08001cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	@ 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f008 feb8 	bl	800aa78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 14;
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 14;
 8001d5a:	230e      	movs	r3, #14
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d66:	f005 f83d 	bl	8006de4 <HAL_TIM_Encoder_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d70:	f001 fe08 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_TIM2_Init+0xa4>)
 8001d82:	f006 fcb3 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d8c:	f001 fdfa 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3730      	adds	r7, #48	@ 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000304 	.word	0x20000304

08001d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	@ 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <MX_TIM3_Init+0xe8>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001de0:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001de2:	226a      	movs	r2, #106	@ 0x6a
 8001de4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df2:	4823      	ldr	r0, [pc, #140]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001df4:	f004 f942 	bl	800607c <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dfe:	f001 fdc1 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481c      	ldr	r0, [pc, #112]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001e10:	f005 fbb8 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e1a:	f001 fdb3 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e1e:	4818      	ldr	r0, [pc, #96]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001e20:	f004 faa8 	bl	8006374 <HAL_TIM_PWM_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e2a:	f001 fdab 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4810      	ldr	r0, [pc, #64]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001e3e:	f006 fc55 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e48:	f001 fd9c 	bl	8003984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4c:	2360      	movs	r3, #96	@ 0x60
 8001e4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001e64:	f005 fa7a 	bl	800735c <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e6e:	f001 fd89 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <MX_TIM3_Init+0xe4>)
 8001e74:	f001 fef6 	bl	8003c64 <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3738      	adds	r7, #56	@ 0x38
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003d0 	.word	0x200003d0
 8001e84:	40000400 	.word	0x40000400

08001e88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <MX_TIM4_Init+0x98>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001eae:	22a9      	movs	r2, #169	@ 0xa9
 8001eb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001eba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001ece:	f004 f8d5 	bl	800607c <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ed8:	f001 fd54 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001eea:	f005 fb4b 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ef4:	f001 fd46 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_TIM4_Init+0x94>)
 8001f06:	f006 fbf1 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f001 fd38 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000049c 	.word	0x2000049c
 8001f20:	40000800 	.word	0x40000800

08001f24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f44:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc0 <MX_TIM5_Init+0x9c>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f4a:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001f4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f58:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001f5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f6a:	4814      	ldr	r0, [pc, #80]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f6c:	f004 f886 	bl	800607c <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001f76:	f001 fd05 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001f88:	f005 fafc 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001f92:	f001 fcf7 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <MX_TIM5_Init+0x98>)
 8001fa4:	f006 fba2 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001fae:	f001 fce9 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000568 	.word	0x20000568
 8001fc0:	40000c00 	.word	0x40000c00

08001fc4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001fd6:	4a15      	ldr	r2, [pc, #84]	@ (800202c <MX_TIM7_Init+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001fdc:	22a9      	movs	r2, #169	@ 0xa9
 8001fde:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001fe8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <MX_TIM7_Init+0x64>)
 8001ff6:	f004 f841 	bl	800607c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002000:	f001 fcc0 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_TIM7_Init+0x64>)
 8002012:	f006 fb6b 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800201c:	f001 fcb2 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000634 	.word	0x20000634
 800202c:	40001400 	.word	0x40001400

08002030 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002038:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <MX_TIM16_Init+0x44>)
 800203c:	22a9      	movs	r2, #169	@ 0xa9
 800203e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8002046:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002048:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800204c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002054:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <MX_TIM16_Init+0x44>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_TIM16_Init+0x44>)
 8002062:	f004 f80b 	bl	800607c <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800206c:	f001 fc8a 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000700 	.word	0x20000700
 8002078:	40014400 	.word	0x40014400

0800207c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002080:	4b22      	ldr	r3, [pc, #136]	@ (800210c <MX_USART1_UART_Init+0x90>)
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <MX_USART1_UART_Init+0x94>)
 8002084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <MX_USART1_UART_Init+0x90>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <MX_USART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <MX_USART1_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <MX_USART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c4:	4811      	ldr	r0, [pc, #68]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020c6:	f006 fdad 	bl	8008c24 <HAL_UART_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020d0:	f001 fc58 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d4:	2100      	movs	r1, #0
 80020d6:	480d      	ldr	r0, [pc, #52]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020d8:	f008 fbcd 	bl	800a876 <HAL_UARTEx_SetTxFifoThreshold>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020e2:	f001 fc4f 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020ea:	f008 fc02 	bl	800a8f2 <HAL_UARTEx_SetRxFifoThreshold>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020f4:	f001 fc46 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_USART1_UART_Init+0x90>)
 80020fa:	f008 fb83 	bl	800a804 <HAL_UARTEx_DisableFifoMode>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002104:	f001 fc3e 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000082c 	.word	0x2000082c
 8002110:	40013800 	.word	0x40013800

08002114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002118:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 800211a:	4a24      	ldr	r2, [pc, #144]	@ (80021ac <MX_USART2_UART_Init+0x98>)
 800211c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800211e:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002120:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002128:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800212c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002160:	4811      	ldr	r0, [pc, #68]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002162:	f006 fd5f 	bl	8008c24 <HAL_UART_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800216c:	f001 fc0a 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002170:	2100      	movs	r1, #0
 8002172:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002174:	f008 fb7f 	bl	800a876 <HAL_UARTEx_SetTxFifoThreshold>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800217e:	f001 fc01 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002182:	2100      	movs	r1, #0
 8002184:	4808      	ldr	r0, [pc, #32]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002186:	f008 fbb4 	bl	800a8f2 <HAL_UARTEx_SetRxFifoThreshold>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002190:	f001 fbf8 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002194:	4804      	ldr	r0, [pc, #16]	@ (80021a8 <MX_USART2_UART_Init+0x94>)
 8002196:	f008 fb35 	bl	800a804 <HAL_UARTEx_DisableFifoMode>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80021a0:	f001 fbf0 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200008f8 	.word	0x200008f8
 80021ac:	40004400 	.word	0x40004400

080021b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021b6:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <MX_DMA_Init+0x98>)
 80021b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ba:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <MX_DMA_Init+0x98>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80021c2:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <MX_DMA_Init+0x98>)
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <MX_DMA_Init+0x98>)
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002248 <MX_DMA_Init+0x98>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80021da:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <MX_DMA_Init+0x98>)
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021e6:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <MX_DMA_Init+0x98>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ea:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <MX_DMA_Init+0x98>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <MX_DMA_Init+0x98>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	200b      	movs	r0, #11
 8002204:	f002 f9d9 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002208:	200b      	movs	r0, #11
 800220a:	f002 f9f0 	bl	80045ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	200c      	movs	r0, #12
 8002214:	f002 f9d1 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002218:	200c      	movs	r0, #12
 800221a:	f002 f9e8 	bl	80045ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	200d      	movs	r0, #13
 8002224:	f002 f9c9 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002228:	200d      	movs	r0, #13
 800222a:	f002 f9e0 	bl	80045ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2039      	movs	r0, #57	@ 0x39
 8002234:	f002 f9c1 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002238:	2039      	movs	r0, #57	@ 0x39
 800223a:	f002 f9d8 	bl	80045ee <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	4b57      	ldr	r3, [pc, #348]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a56      	ldr	r2, [pc, #344]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b54      	ldr	r3, [pc, #336]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227a:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <MX_GPIO_Init+0x174>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	4a50      	ldr	r2, [pc, #320]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002286:	4b4e      	ldr	r3, [pc, #312]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a4a      	ldr	r2, [pc, #296]	@ (80023c0 <MX_GPIO_Init+0x174>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <MX_GPIO_Init+0x174>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <MX_GPIO_Init+0x174>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4a44      	ldr	r2, [pc, #272]	@ (80023c0 <MX_GPIO_Init+0x174>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b6:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <MX_GPIO_Init+0x174>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f240 6111 	movw	r1, #1553	@ 0x611
 80022c8:	483e      	ldr	r0, [pc, #248]	@ (80023c4 <MX_GPIO_Init+0x178>)
 80022ca:	f002 fe77 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	483d      	ldr	r0, [pc, #244]	@ (80023c8 <MX_GPIO_Init+0x17c>)
 80022d4:	f002 fe72 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4836      	ldr	r0, [pc, #216]	@ (80023c8 <MX_GPIO_Init+0x17c>)
 80022f0:	f002 fcca 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230a:	f002 fcbd 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9;
 800230e:	f240 6311 	movw	r3, #1553	@ 0x611
 8002312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4827      	ldr	r0, [pc, #156]	@ (80023c4 <MX_GPIO_Init+0x178>)
 8002328:	f002 fcae 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4821      	ldr	r0, [pc, #132]	@ (80023c8 <MX_GPIO_Init+0x17c>)
 8002344:	f002 fca0 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800234e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f002 fc91 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002366:	2320      	movs	r3, #32
 8002368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800236a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002370:	2301      	movs	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <MX_GPIO_Init+0x178>)
 800237c:	f002 fc84 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002380:	2340      	movs	r3, #64	@ 0x40
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002388:	2301      	movs	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <MX_GPIO_Init+0x178>)
 8002394:	f002 fc78 	bl	8004c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2017      	movs	r0, #23
 800239e:	f002 f90c 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023a2:	2017      	movs	r0, #23
 80023a4:	f002 f923 	bl	80045ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2028      	movs	r0, #40	@ 0x28
 80023ae:	f002 f904 	bl	80045ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023b2:	2028      	movs	r0, #40	@ 0x28
 80023b4:	f002 f91b 	bl	80045ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	@ 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	48000400 	.word	0x48000400
 80023c8:	48000800 	.word	0x48000800

080023cc <ControlJoy>:

/* USER CODE BEGIN 4 */
void ControlJoy(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x0)
 80023d0:	4ba4      	ldr	r3, [pc, #656]	@ (8002664 <ControlJoy+0x298>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b80      	cmp	r3, #128	@ 0x80
 80023d6:	d10f      	bne.n	80023f8 <ControlJoy+0x2c>
 80023d8:	4ba3      	ldr	r3, [pc, #652]	@ (8002668 <ControlJoy+0x29c>)
 80023da:	8c1b      	ldrh	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <ControlJoy+0x2c>
	  {
		  setPos = 0;
 80023e0:	4ba2      	ldr	r3, [pc, #648]	@ (800266c <ControlJoy+0x2a0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	801a      	strh	r2, [r3, #0]
		  Home = 0;
 80023e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002670 <ControlJoy+0x2a4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	801a      	strh	r2, [r3, #0]
		  rou = 0;
 80023ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002674 <ControlJoy+0x2a8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
//		  generate_trapezoidal_velocity_profile(time_op,16.0);
		  joystickPayload[0] = 0;
 80023f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002664 <ControlJoy+0x298>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]

	  }
//set shelf
	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x1)
 80023f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002664 <ControlJoy+0x298>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b80      	cmp	r3, #128	@ 0x80
 80023fe:	f040 80e6 	bne.w	80025ce <ControlJoy+0x202>
 8002402:	4b99      	ldr	r3, [pc, #612]	@ (8002668 <ControlJoy+0x29c>)
 8002404:	8c1b      	ldrh	r3, [r3, #32]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 80e1 	bne.w	80025ce <ControlJoy+0x202>
	  {
		  if (TT == 0)
 800240c:	4b9a      	ldr	r3, [pc, #616]	@ (8002678 <ControlJoy+0x2ac>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d11d      	bne.n	8002458 <ControlJoy+0x8c>
		  {
			  shelfPos[0] = (qeifloat*10.0)-160;
 800241c:	4b97      	ldr	r3, [pc, #604]	@ (800267c <ControlJoy+0x2b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f85d 	bl	80004e0 <__aeabi_f2d>
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b95      	ldr	r3, [pc, #596]	@ (8002680 <ControlJoy+0x2b4>)
 800242c:	f7fe f8b0 	bl	8000590 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b91      	ldr	r3, [pc, #580]	@ (8002684 <ControlJoy+0x2b8>)
 800243e:	f7fd feef 	bl	8000220 <__aeabi_dsub>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fb63 	bl	8000b14 <__aeabi_d2uiz>
 800244e:	4603      	mov	r3, r0
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b8d      	ldr	r3, [pc, #564]	@ (8002688 <ControlJoy+0x2bc>)
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	e0ac      	b.n	80025b2 <ControlJoy+0x1e6>

		  }

		  else if (TT == 1)
 8002458:	4b87      	ldr	r3, [pc, #540]	@ (8002678 <ControlJoy+0x2ac>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002462:	eef4 7a47 	vcmp.f32	s15, s14
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	d11d      	bne.n	80024a8 <ControlJoy+0xdc>
		  {
			  shelfPos[1] = (qeifloat*10.0)-160;
 800246c:	4b83      	ldr	r3, [pc, #524]	@ (800267c <ControlJoy+0x2b0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f835 	bl	80004e0 <__aeabi_f2d>
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b81      	ldr	r3, [pc, #516]	@ (8002680 <ControlJoy+0x2b4>)
 800247c:	f7fe f888 	bl	8000590 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b7d      	ldr	r3, [pc, #500]	@ (8002684 <ControlJoy+0x2b8>)
 800248e:	f7fd fec7 	bl	8000220 <__aeabi_dsub>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb3b 	bl	8000b14 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b79      	ldr	r3, [pc, #484]	@ (8002688 <ControlJoy+0x2bc>)
 80024a4:	805a      	strh	r2, [r3, #2]
 80024a6:	e084      	b.n	80025b2 <ControlJoy+0x1e6>

		  }

		  else if (TT == 2)
 80024a8:	4b73      	ldr	r3, [pc, #460]	@ (8002678 <ControlJoy+0x2ac>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80024b2:	eef4 7a47 	vcmp.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d11d      	bne.n	80024f8 <ControlJoy+0x12c>
		  {
			  shelfPos[2] = (qeifloat*10.0)-160;
 80024bc:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <ControlJoy+0x2b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f80d 	bl	80004e0 <__aeabi_f2d>
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <ControlJoy+0x2b4>)
 80024cc:	f7fe f860 	bl	8000590 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <ControlJoy+0x2b8>)
 80024de:	f7fd fe9f 	bl	8000220 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb13 	bl	8000b14 <__aeabi_d2uiz>
 80024ee:	4603      	mov	r3, r0
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b65      	ldr	r3, [pc, #404]	@ (8002688 <ControlJoy+0x2bc>)
 80024f4:	809a      	strh	r2, [r3, #4]
 80024f6:	e05c      	b.n	80025b2 <ControlJoy+0x1e6>

		  }

		  else if (TT == 3)
 80024f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002678 <ControlJoy+0x2ac>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002502:	eef4 7a47 	vcmp.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d11d      	bne.n	8002548 <ControlJoy+0x17c>
		  {
			  shelfPos[3] = (qeifloat*10.0)-160;
 800250c:	4b5b      	ldr	r3, [pc, #364]	@ (800267c <ControlJoy+0x2b0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ffe5 	bl	80004e0 <__aeabi_f2d>
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b59      	ldr	r3, [pc, #356]	@ (8002680 <ControlJoy+0x2b4>)
 800251c:	f7fe f838 	bl	8000590 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <ControlJoy+0x2b8>)
 800252e:	f7fd fe77 	bl	8000220 <__aeabi_dsub>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe faeb 	bl	8000b14 <__aeabi_d2uiz>
 800253e:	4603      	mov	r3, r0
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <ControlJoy+0x2bc>)
 8002544:	80da      	strh	r2, [r3, #6]
 8002546:	e034      	b.n	80025b2 <ControlJoy+0x1e6>

		  }

		  else if (TT == 4)
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <ControlJoy+0x2ac>)
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002552:	eef4 7a47 	vcmp.f32	s15, s14
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	d11d      	bne.n	8002598 <ControlJoy+0x1cc>
		  {
			  shelfPos[4] = (qeifloat*10.0)-160;
 800255c:	4b47      	ldr	r3, [pc, #284]	@ (800267c <ControlJoy+0x2b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ffbd 	bl	80004e0 <__aeabi_f2d>
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b45      	ldr	r3, [pc, #276]	@ (8002680 <ControlJoy+0x2b4>)
 800256c:	f7fe f810 	bl	8000590 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <ControlJoy+0x2b8>)
 800257e:	f7fd fe4f 	bl	8000220 <__aeabi_dsub>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fac3 	bl	8000b14 <__aeabi_d2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <ControlJoy+0x2bc>)
 8002594:	811a      	strh	r2, [r3, #8]
 8002596:	e00c      	b.n	80025b2 <ControlJoy+0x1e6>

		  }
		  else if ( TT >=  5)
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <ControlJoy+0x2ac>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80025a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	db02      	blt.n	80025b2 <ControlJoy+0x1e6>
		  {
			  flagShelf = 1;
 80025ac:	4b37      	ldr	r3, [pc, #220]	@ (800268c <ControlJoy+0x2c0>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
		  }
		  TT += 1;
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <ControlJoy+0x2ac>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <ControlJoy+0x2ac>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]
		  joystickPayload[0] = 0;
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <ControlJoy+0x298>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e085      	b.n	80026da <ControlJoy+0x30e>
	  }
//up
	  	  else if ( joystickPayload[0] == 0x40)
 80025ce:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <ControlJoy+0x298>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	d109      	bne.n	80025ea <ControlJoy+0x21e>
		{
//		  //generate_trapezoidal_velocity_profile(time_op, ((setPos/10.0) + 0.1));
		  setPos += 1;
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <ControlJoy+0x2a0>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b23      	ldr	r3, [pc, #140]	@ (800266c <ControlJoy+0x2a0>)
 80025e0:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <ControlJoy+0x298>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e077      	b.n	80026da <ControlJoy+0x30e>
		}
	  else if ( joystickPayload[0] == 0x41)
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <ControlJoy+0x298>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b41      	cmp	r3, #65	@ 0x41
 80025f0:	d109      	bne.n	8002606 <ControlJoy+0x23a>
	  		{
		  setPos += 10;
 80025f2:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <ControlJoy+0x2a0>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	330a      	adds	r3, #10
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <ControlJoy+0x2a0>)
 80025fc:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <ControlJoy+0x298>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e069      	b.n	80026da <ControlJoy+0x30e>
	  		}
	  else if ( joystickPayload[0] == 0x42)
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <ControlJoy+0x298>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b42      	cmp	r3, #66	@ 0x42
 800260c:	d109      	bne.n	8002622 <ControlJoy+0x256>
	  		{
		  setPos += 100;
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <ControlJoy+0x2a0>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	3364      	adds	r3, #100	@ 0x64
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <ControlJoy+0x2a0>)
 8002618:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <ControlJoy+0x298>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e05b      	b.n	80026da <ControlJoy+0x30e>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <ControlJoy+0x298>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b43      	cmp	r3, #67	@ 0x43
 8002628:	d10a      	bne.n	8002640 <ControlJoy+0x274>
	  		{
		  setPos += 1000;
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <ControlJoy+0x2a0>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <ControlJoy+0x2a0>)
 8002636:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <ControlJoy+0x298>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e04c      	b.n	80026da <ControlJoy+0x30e>
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  //down
	  	  else if ( joystickPayload[0] == 0x01 && (setPos-10) >= 0)
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <ControlJoy+0x298>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d123      	bne.n	8002690 <ControlJoy+0x2c4>
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <ControlJoy+0x2a0>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d91f      	bls.n	8002690 <ControlJoy+0x2c4>
	  	  		{
	  		setPos -= 10;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <ControlJoy+0x2a0>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	3b0a      	subs	r3, #10
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <ControlJoy+0x2a0>)
 800265a:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 800265c:	4b01      	ldr	r3, [pc, #4]	@ (8002664 <ControlJoy+0x298>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e03a      	b.n	80026da <ControlJoy+0x30e>
 8002664:	20000ae4 	.word	0x20000ae4
 8002668:	20000fec 	.word	0x20000fec
 800266c:	20001186 	.word	0x20001186
 8002670:	200011de 	.word	0x200011de
 8002674:	20001214 	.word	0x20001214
 8002678:	20000af0 	.word	0x20000af0
 800267c:	20000aec 	.word	0x20000aec
 8002680:	40240000 	.word	0x40240000
 8002684:	40640000 	.word	0x40640000
 8002688:	2000117c 	.word	0x2000117c
 800268c:	20000fd4 	.word	0x20000fd4
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02 && (setPos-100) >= 0)
 8002690:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <ControlJoy+0x424>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10d      	bne.n	80026b4 <ControlJoy+0x2e8>
 8002698:	4b56      	ldr	r3, [pc, #344]	@ (80027f4 <ControlJoy+0x428>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	2b63      	cmp	r3, #99	@ 0x63
 800269e:	d909      	bls.n	80026b4 <ControlJoy+0x2e8>
	  	  		{
	  		setPos -= 100;
 80026a0:	4b54      	ldr	r3, [pc, #336]	@ (80027f4 <ControlJoy+0x428>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	3b64      	subs	r3, #100	@ 0x64
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b52      	ldr	r3, [pc, #328]	@ (80027f4 <ControlJoy+0x428>)
 80026aa:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80026ac:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <ControlJoy+0x424>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e012      	b.n	80026da <ControlJoy+0x30e>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03 && (setPos-1000) >= 0)
 80026b4:	4b4e      	ldr	r3, [pc, #312]	@ (80027f0 <ControlJoy+0x424>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d10e      	bne.n	80026da <ControlJoy+0x30e>
 80026bc:	4b4d      	ldr	r3, [pc, #308]	@ (80027f4 <ControlJoy+0x428>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c4:	d309      	bcc.n	80026da <ControlJoy+0x30e>
	  	  		{
	  		setPos -= 1000;
 80026c6:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <ControlJoy+0x428>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b48      	ldr	r3, [pc, #288]	@ (80027f4 <ControlJoy+0x428>)
 80026d2:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80026d4:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <ControlJoy+0x424>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	  	  		}

	  	  if ( joystickPayload[0] == 0x82 )
 80026da:	4b45      	ldr	r3, [pc, #276]	@ (80027f0 <ControlJoy+0x424>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b82      	cmp	r3, #130	@ 0x82
 80026e0:	d120      	bne.n	8002724 <ControlJoy+0x358>
	  	  {
	  		  if (Va == 0)
 80026e2:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <ControlJoy+0x42c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <ControlJoy+0x338>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026f0:	4842      	ldr	r0, [pc, #264]	@ (80027fc <ControlJoy+0x430>)
 80026f2:	f002 fc63 	bl	8004fbc <HAL_GPIO_WritePin>
	  			Va = 1;
 80026f6:	4b40      	ldr	r3, [pc, #256]	@ (80027f8 <ControlJoy+0x42c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
		  		joystickPayload[0] = 0 ;
 80026fc:	4b3c      	ldr	r3, [pc, #240]	@ (80027f0 <ControlJoy+0x424>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e00f      	b.n	8002724 <ControlJoy+0x358>
	  		  }
	  		  else if ( Va == 1)
 8002704:	4b3c      	ldr	r3, [pc, #240]	@ (80027f8 <ControlJoy+0x42c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10b      	bne.n	8002724 <ControlJoy+0x358>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002712:	483a      	ldr	r0, [pc, #232]	@ (80027fc <ControlJoy+0x430>)
 8002714:	f002 fc52 	bl	8004fbc <HAL_GPIO_WritePin>
	  			Va = 0;
 8002718:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <ControlJoy+0x42c>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
 800271e:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <ControlJoy+0x424>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }

	  	  if ( joystickPayload[0] == 0x81 )
 8002724:	4b32      	ldr	r3, [pc, #200]	@ (80027f0 <ControlJoy+0x424>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b81      	cmp	r3, #129	@ 0x81
 800272a:	d15e      	bne.n	80027ea <ControlJoy+0x41e>
	  	  {
	  		 if (C == 0)
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <ControlJoy+0x434>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d12b      	bne.n	800278c <ControlJoy+0x3c0>
	  		 {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800273a:	4830      	ldr	r0, [pc, #192]	@ (80027fc <ControlJoy+0x430>)
 800273c:	f002 fc3e 	bl	8004fbc <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002740:	2201      	movs	r2, #1
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	482f      	ldr	r0, [pc, #188]	@ (8002804 <ControlJoy+0x438>)
 8002746:	f002 fc39 	bl	8004fbc <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET )
 800274a:	2180      	movs	r1, #128	@ 0x80
 800274c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002750:	f002 fc1c 	bl	8004f8c <HAL_GPIO_ReadPin>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d111      	bne.n	800277e <ControlJoy+0x3b2>
 800275a:	2140      	movs	r1, #64	@ 0x40
 800275c:	4827      	ldr	r0, [pc, #156]	@ (80027fc <ControlJoy+0x430>)
 800275e:	f002 fc15 	bl	8004f8c <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <ControlJoy+0x3b2>
	  				{
	  				  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800276e:	4823      	ldr	r0, [pc, #140]	@ (80027fc <ControlJoy+0x430>)
 8002770:	f002 fc24 	bl	8004fbc <HAL_GPIO_WritePin>
	  				  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002774:	2201      	movs	r2, #1
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	4822      	ldr	r0, [pc, #136]	@ (8002804 <ControlJoy+0x438>)
 800277a:	f002 fc1f 	bl	8004fbc <HAL_GPIO_WritePin>
	  				}
	  			joystickPayload[0] = 0 ;
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <ControlJoy+0x424>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
	  			C = 1;
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <ControlJoy+0x434>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
	  			C = 0;
	  		 }
	  	  }

}
 800278a:	e02e      	b.n	80027ea <ControlJoy+0x41e>
	  		 else if ( C == 1)
 800278c:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <ControlJoy+0x434>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d12a      	bne.n	80027ea <ControlJoy+0x41e>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800279a:	4818      	ldr	r0, [pc, #96]	@ (80027fc <ControlJoy+0x430>)
 800279c:	f002 fc0e 	bl	8004fbc <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	@ 0x80
 80027a4:	4817      	ldr	r0, [pc, #92]	@ (8002804 <ControlJoy+0x438>)
 80027a6:	f002 fc09 	bl	8004fbc <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET )
 80027aa:	2140      	movs	r1, #64	@ 0x40
 80027ac:	4813      	ldr	r0, [pc, #76]	@ (80027fc <ControlJoy+0x430>)
 80027ae:	f002 fbed 	bl	8004f8c <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d112      	bne.n	80027de <ControlJoy+0x412>
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027be:	f002 fbe5 	bl	8004f8c <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <ControlJoy+0x412>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80027c8:	2201      	movs	r2, #1
 80027ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027ce:	480b      	ldr	r0, [pc, #44]	@ (80027fc <ControlJoy+0x430>)
 80027d0:	f002 fbf4 	bl	8004fbc <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 80027d4:	2201      	movs	r2, #1
 80027d6:	2180      	movs	r1, #128	@ 0x80
 80027d8:	480a      	ldr	r0, [pc, #40]	@ (8002804 <ControlJoy+0x438>)
 80027da:	f002 fbef 	bl	8004fbc <HAL_GPIO_WritePin>
	  			joystickPayload[0] = 0 ;
 80027de:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <ControlJoy+0x424>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
	  			C = 0;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <ControlJoy+0x434>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000ae4 	.word	0x20000ae4
 80027f4:	20001186 	.word	0x20001186
 80027f8:	20000af5 	.word	0x20000af5
 80027fc:	48000400 	.word	0x48000400
 8002800:	20000af4 	.word	0x20000af4
 8002804:	48000800 	.word	0x48000800

08002808 <generate_trapezoidal_velocity_profile>:
///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002812:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <generate_trapezoidal_velocity_profile+0xc0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe60 	bl	80004e0 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002828:	f7fd fcfa 	bl	8000220 <__aeabi_dsub>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f98e 	bl	8000b54 <__aeabi_d2f>
 8002838:	4603      	mov	r3, r0
 800283a:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <generate_trapezoidal_velocity_profile+0xc4>)
 800283c:	6013      	str	r3, [r2, #0]
	total_time = t2;
 800283e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002842:	f7fe f987 	bl	8000b54 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <generate_trapezoidal_velocity_profile+0xc8>)
 800284a:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 800284c:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <generate_trapezoidal_velocity_profile+0xc8>)
 800284e:	ed93 7a00 	vldr	s14, [r3]
 8002852:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <generate_trapezoidal_velocity_profile+0xcc>)
 800285c:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <generate_trapezoidal_velocity_profile+0xc8>)
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <generate_trapezoidal_velocity_profile+0xcc>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002874:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <generate_trapezoidal_velocity_profile+0xd0>)
 8002876:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <generate_trapezoidal_velocity_profile+0xc4>)
 800287c:	edd3 6a00 	vldr	s13, [r3]
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <generate_trapezoidal_velocity_profile+0xcc>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <generate_trapezoidal_velocity_profile+0xd0>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <generate_trapezoidal_velocity_profile+0xd4>)
 8002896:	edc3 7a00 	vstr	s15, [r3]

//	HAL_TIM_Base_Start_IT(&htim4);

	piingpong = 0;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <generate_trapezoidal_velocity_profile+0xd8>)
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
//	{
//		piingpong = 1;
//	}
//	else
//	{
	HAL_TIM_Base_Start_IT(&htim4);
 80028a0:	4810      	ldr	r0, [pc, #64]	@ (80028e4 <generate_trapezoidal_velocity_profile+0xdc>)
 80028a2:	f003 fcbf 	bl	8006224 <HAL_TIM_Base_Start_IT>
//		piingpong = 0;
//	}
	deb++;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <generate_trapezoidal_velocity_profile+0xe0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <generate_trapezoidal_velocity_profile+0xe0>)
 80028b0:	701a      	strb	r2, [r3, #0]
	fin = 0;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <generate_trapezoidal_velocity_profile+0xe4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
	Mode = 0;
 80028b8:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <generate_trapezoidal_velocity_profile+0xe8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	801a      	strh	r2, [r3, #0]

  }
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000aec 	.word	0x20000aec
 80028cc:	200011b4 	.word	0x200011b4
 80028d0:	200011b8 	.word	0x200011b8
 80028d4:	200011bc 	.word	0x200011bc
 80028d8:	200011c0 	.word	0x200011c0
 80028dc:	200011c4 	.word	0x200011c4
 80028e0:	20000fd6 	.word	0x20000fd6
 80028e4:	2000049c 	.word	0x2000049c
 80028e8:	2000118a 	.word	0x2000118a
 80028ec:	20001217 	.word	0x20001217
 80028f0:	200011dc 	.word	0x200011dc
 80028f4:	00000000 	.word	0x00000000

080028f8 <generate_Velocity>:

void generate_Velocity()
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
//////acc//////////////

////////////////////
		t = (time_op) * i / num_points;
 80028fe:	4ba4      	ldr	r3, [pc, #656]	@ (8002b90 <generate_Velocity+0x298>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe fa3c 	bl	8000d84 <__aeabi_ul2f>
 800290c:	ee07 0a10 	vmov	s14, r0
 8002910:	4ba0      	ldr	r3, [pc, #640]	@ (8002b94 <generate_Velocity+0x29c>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee67 6a27 	vmul.f32	s13, s14, s15
 800291a:	4b9f      	ldr	r3, [pc, #636]	@ (8002b98 <generate_Velocity+0x2a0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	4b9c      	ldr	r3, [pc, #624]	@ (8002b9c <generate_Velocity+0x2a4>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
		if (t < t_acc) {
 8002930:	4b9a      	ldr	r3, [pc, #616]	@ (8002b9c <generate_Velocity+0x2a4>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b9a      	ldr	r3, [pc, #616]	@ (8002ba0 <generate_Velocity+0x2a8>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	d510      	bpl.n	8002968 <generate_Velocity+0x70>
			velocity = (Peak * (t / t_acc));
 8002946:	4b95      	ldr	r3, [pc, #596]	@ (8002b9c <generate_Velocity+0x2a4>)
 8002948:	edd3 6a00 	vldr	s13, [r3]
 800294c:	4b94      	ldr	r3, [pc, #592]	@ (8002ba0 <generate_Velocity+0x2a8>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002956:	4b93      	ldr	r3, [pc, #588]	@ (8002ba4 <generate_Velocity+0x2ac>)
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	4b91      	ldr	r3, [pc, #580]	@ (8002ba8 <generate_Velocity+0x2b0>)
 8002962:	edc3 7a00 	vstr	s15, [r3]
 8002966:	e034      	b.n	80029d2 <generate_Velocity+0xda>
		} else if (t >= t_acc && t <+ t_acc + t_const) {
 8002968:	4b8c      	ldr	r3, [pc, #560]	@ (8002b9c <generate_Velocity+0x2a4>)
 800296a:	ed93 7a00 	vldr	s14, [r3]
 800296e:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba0 <generate_Velocity+0x2a8>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	db14      	blt.n	80029a8 <generate_Velocity+0xb0>
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <generate_Velocity+0x2a8>)
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	4b89      	ldr	r3, [pc, #548]	@ (8002bac <generate_Velocity+0x2b4>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	4b83      	ldr	r3, [pc, #524]	@ (8002b9c <generate_Velocity+0x2a4>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299c:	dd04      	ble.n	80029a8 <generate_Velocity+0xb0>
			velocity = Peak;
 800299e:	4b81      	ldr	r3, [pc, #516]	@ (8002ba4 <generate_Velocity+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a81      	ldr	r2, [pc, #516]	@ (8002ba8 <generate_Velocity+0x2b0>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e014      	b.n	80029d2 <generate_Velocity+0xda>
		} else {
			velocity = (Peak * ((time_op - t) / t_acc));
 80029a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002b94 <generate_Velocity+0x29c>)
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002b9c <generate_Velocity+0x2a4>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029b8:	4b79      	ldr	r3, [pc, #484]	@ (8002ba0 <generate_Velocity+0x2a8>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c2:	4b78      	ldr	r3, [pc, #480]	@ (8002ba4 <generate_Velocity+0x2ac>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <generate_Velocity+0x2b0>)
 80029ce:	edc3 7a00 	vstr	s15, [r3]
		}
		position += velocity/1000.0;
 80029d2:	4b77      	ldr	r3, [pc, #476]	@ (8002bb0 <generate_Velocity+0x2b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd82 	bl	80004e0 <__aeabi_f2d>
 80029dc:	4604      	mov	r4, r0
 80029de:	460d      	mov	r5, r1
 80029e0:	4b71      	ldr	r3, [pc, #452]	@ (8002ba8 <generate_Velocity+0x2b0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd7b 	bl	80004e0 <__aeabi_f2d>
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b71      	ldr	r3, [pc, #452]	@ (8002bb4 <generate_Velocity+0x2bc>)
 80029f0:	f7fd fef8 	bl	80007e4 <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fd fc12 	bl	8000224 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f8a4 	bl	8000b54 <__aeabi_d2f>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a68      	ldr	r2, [pc, #416]	@ (8002bb0 <generate_Velocity+0x2b8>)
 8002a10:	6013      	str	r3, [r2, #0]

		position_now = position;
 8002a12:	4b67      	ldr	r3, [pc, #412]	@ (8002bb0 <generate_Velocity+0x2b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a68      	ldr	r2, [pc, #416]	@ (8002bb8 <generate_Velocity+0x2c0>)
 8002a18:	6013      	str	r3, [r2, #0]

		Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 8002a1a:	4b67      	ldr	r3, [pc, #412]	@ (8002bb8 <generate_Velocity+0x2c0>)
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	4b66      	ldr	r3, [pc, #408]	@ (8002bbc <generate_Velocity+0x2c4>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	4b65      	ldr	r3, [pc, #404]	@ (8002bc0 <generate_Velocity+0x2c8>)
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002a8e:	6013      	str	r3, [r2, #0]



		BTempV = Vfeedback;
 8002a90:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc8 <generate_Velocity+0x2d0>)
 8002a96:	6013      	str	r3, [r2, #0]

		VInM = Vfeedback * 24.0/65535.0;
 8002a98:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd1f 	bl	80004e0 <__aeabi_f2d>
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <generate_Velocity+0x2d4>)
 8002aa8:	f7fd fd72 	bl	8000590 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	a334      	add	r3, pc, #208	@ (adr r3, 8002b88 <generate_Velocity+0x290>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fe93 	bl	80007e4 <__aeabi_ddiv>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe f845 	bl	8000b54 <__aeabi_d2f>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a40      	ldr	r2, [pc, #256]	@ (8002bd0 <generate_Velocity+0x2d8>)
 8002ace:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

		zStop = 0;
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <generate_Velocity+0x2dc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
		pwmM = Vfeedback * 65535.0/24.0;
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd00 	bl	80004e0 <__aeabi_f2d>
 8002ae0:	a329      	add	r3, pc, #164	@ (adr r3, 8002b88 <generate_Velocity+0x290>)
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f7fd fd53 	bl	8000590 <__aeabi_dmul>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <generate_Velocity+0x2d4>)
 8002af8:	f7fd fe74 	bl	80007e4 <__aeabi_ddiv>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fd ffde 	bl	8000ac4 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <generate_Velocity+0x2e0>)
 8002b0c:	6013      	str	r3, [r2, #0]

		if(Vfeedback >= 0)
 8002b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	db09      	blt.n	8002b32 <generate_Velocity+0x23a>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd8 <generate_Velocity+0x2e0>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b2e      	ldr	r3, [pc, #184]	@ (8002bdc <generate_Velocity+0x2e4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b28:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <generate_Velocity+0x2e4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b30:	e011      	b.n	8002b56 <generate_Velocity+0x25e>


		}

		else if (Vfeedback < 0)
 8002b32:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <generate_Velocity+0x2cc>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	d509      	bpl.n	8002b56 <generate_Velocity+0x25e>
		{

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <generate_Velocity+0x2e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002b4a:	4b23      	ldr	r3, [pc, #140]	@ (8002bd8 <generate_Velocity+0x2e0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	425a      	negs	r2, r3
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <generate_Velocity+0x2e4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

		if ( i >= time_op*1000)
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <generate_Velocity+0x298>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f910 	bl	8000d84 <__aeabi_ul2f>
 8002b64:	ee06 0a90 	vmov	s13, r0
 8002b68:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <generate_Velocity+0x29c>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002be0 <generate_Velocity+0x2e8>
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	da31      	bge.n	8002be4 <generate_Velocity+0x2ec>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 8002b80:	e063      	b.n	8002c4a <generate_Velocity+0x352>
 8002b82:	bf00      	nop
 8002b84:	f3af 8000 	nop.w
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40efffe0 	.word	0x40efffe0
 8002b90:	200011c8 	.word	0x200011c8
 8002b94:	20000200 	.word	0x20000200
 8002b98:	20000204 	.word	0x20000204
 8002b9c:	200011d0 	.word	0x200011d0
 8002ba0:	200011bc 	.word	0x200011bc
 8002ba4:	200011c4 	.word	0x200011c4
 8002ba8:	200011d4 	.word	0x200011d4
 8002bac:	200011c0 	.word	0x200011c0
 8002bb0:	200011d8 	.word	0x200011d8
 8002bb4:	408f4000 	.word	0x408f4000
 8002bb8:	200011b0 	.word	0x200011b0
 8002bbc:	20000aec 	.word	0x20000aec
 8002bc0:	200011e8 	.word	0x200011e8
 8002bc4:	200011e0 	.word	0x200011e0
 8002bc8:	2000120c 	.word	0x2000120c
 8002bcc:	40380000 	.word	0x40380000
 8002bd0:	200011e4 	.word	0x200011e4
 8002bd4:	20000af8 	.word	0x20000af8
 8002bd8:	20001210 	.word	0x20001210
 8002bdc:	20000238 	.word	0x20000238
 8002be0:	447a0000 	.word	0x447a0000
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <generate_Velocity+0x35c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Stop_IT(&htim4);
 8002bec:	4819      	ldr	r0, [pc, #100]	@ (8002c54 <generate_Velocity+0x35c>)
 8002bee:	f003 fb91 	bl	8006314 <HAL_TIM_Base_Stop_IT>
			rou += 1;
 8002bf2:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <generate_Velocity+0x360>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <generate_Velocity+0x360>)
 8002bfc:	801a      	strh	r2, [r3, #0]
			i = 0;
 8002bfe:	4917      	ldr	r1, [pc, #92]	@ (8002c5c <generate_Velocity+0x364>)
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c1 2300 	strd	r2, r3, [r1]
			buf[0] = 2;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <generate_Velocity+0x368>)
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
			L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002c12:	2204      	movs	r2, #4
 8002c14:	4913      	ldr	r1, [pc, #76]	@ (8002c64 <generate_Velocity+0x36c>)
 8002c16:	4812      	ldr	r0, [pc, #72]	@ (8002c60 <generate_Velocity+0x368>)
 8002c18:	f001 fa56 	bl	80040c8 <updateLED>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <generate_Velocity+0x370>)
 8002c22:	701a      	strb	r2, [r3, #0]
			if ( registerFrame[0x10].U16 != 0)
 8002c24:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <generate_Velocity+0x374>)
 8002c26:	8c1b      	ldrh	r3, [r3, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <generate_Velocity+0x33a>
				piingpong  = 1;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <generate_Velocity+0x378>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	801a      	strh	r2, [r3, #0]
			fin = 1;
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <generate_Velocity+0x37c>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <generate_Velocity+0x380>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <generate_Velocity+0x380>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bdb0      	pop	{r4, r5, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000049c 	.word	0x2000049c
 8002c58:	20001214 	.word	0x20001214
 8002c5c:	200011c8 	.word	0x200011c8
 8002c60:	20000208 	.word	0x20000208
 8002c64:	200003d0 	.word	0x200003d0
 8002c68:	20001216 	.word	0x20001216
 8002c6c:	20000fec 	.word	0x20000fec
 8002c70:	20000fd6 	.word	0x20000fd6
 8002c74:	20001217 	.word	0x20001217
 8002c78:	20000238 	.word	0x20000238

08002c7c <BaseAction>:
//{
//return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
//}

//
void BaseAction(void){
 8002c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c80:	b09e      	sub	sp, #120	@ 0x78
 8002c82:	af00      	add	r7, sp, #0
	static uint64_t timestamp1 = 0;
	  static uint64_t timestamp2 = 0;
	  static uint64_t timestamp3 = 0;
	  static uint64_t timestamp4 = 0;

	  position_goal = setPos/10.0;
 8002c84:	4ba4      	ldr	r3, [pc, #656]	@ (8002f18 <BaseAction+0x29c>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc17 	bl	80004bc <__aeabi_i2d>
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4ba2      	ldr	r3, [pc, #648]	@ (8002f1c <BaseAction+0x2a0>)
 8002c94:	f7fd fda6 	bl	80007e4 <__aeabi_ddiv>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd ff58 	bl	8000b54 <__aeabi_d2f>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f20 <BaseAction+0x2a4>)
 8002ca8:	601a      	str	r2, [r3, #0]
	  if (velocity < 0)
 8002caa:	4b9e      	ldr	r3, [pc, #632]	@ (8002f24 <BaseAction+0x2a8>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	d508      	bpl.n	8002ccc <BaseAction+0x50>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW] * -1;
 8002cba:	4b9b      	ldr	r3, [pc, #620]	@ (8002f28 <BaseAction+0x2ac>)
 8002cbc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cc0:	eef1 7a67 	vneg.f32	s15, s15
 8002cc4:	4b99      	ldr	r3, [pc, #612]	@ (8002f2c <BaseAction+0x2b0>)
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
 8002cca:	e00b      	b.n	8002ce4 <BaseAction+0x68>
	  }

	  else if (velocity >= 0)
 8002ccc:	4b95      	ldr	r3, [pc, #596]	@ (8002f24 <BaseAction+0x2a8>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	db03      	blt.n	8002ce4 <BaseAction+0x68>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW];
 8002cdc:	4b92      	ldr	r3, [pc, #584]	@ (8002f28 <BaseAction+0x2ac>)
 8002cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce0:	4b92      	ldr	r3, [pc, #584]	@ (8002f2c <BaseAction+0x2b0>)
 8002ce2:	601a      	str	r2, [r3, #0]
	  }

	  if (QEIdata.QEILinearAcc < 0)
 8002ce4:	4b90      	ldr	r3, [pc, #576]	@ (8002f28 <BaseAction+0x2ac>)
 8002ce6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	d508      	bpl.n	8002d06 <BaseAction+0x8a>
	  	  {
		  	  linear_accel = QEIdata.QEILinearAcc * -1;
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f28 <BaseAction+0x2ac>)
 8002cf6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cfa:	eef1 7a67 	vneg.f32	s15, s15
 8002cfe:	4b8c      	ldr	r3, [pc, #560]	@ (8002f30 <BaseAction+0x2b4>)
 8002d00:	edc3 7a00 	vstr	s15, [r3]
 8002d04:	e00b      	b.n	8002d1e <BaseAction+0xa2>
	  	  }

	  	  else if (QEIdata.QEILinearAcc >= 0)
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <BaseAction+0x2ac>)
 8002d08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	db03      	blt.n	8002d1e <BaseAction+0xa2>
	  	  {
	  		  linear_accel = QEIdata.QEILinearAcc;
 8002d16:	4b84      	ldr	r3, [pc, #528]	@ (8002f28 <BaseAction+0x2ac>)
 8002d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1a:	4b85      	ldr	r3, [pc, #532]	@ (8002f30 <BaseAction+0x2b4>)
 8002d1c:	601a      	str	r2, [r3, #0]
	  	  }


	  //linear_accel = accerelometer;
	  linear_position = qeifloat-16.0 ;
 8002d1e:	4b85      	ldr	r3, [pc, #532]	@ (8002f34 <BaseAction+0x2b8>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d2c:	4b82      	ldr	r3, [pc, #520]	@ (8002f38 <BaseAction+0x2bc>)
 8002d2e:	edc3 7a00 	vstr	s15, [r3]

	  rState1=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002d32:	2140      	movs	r1, #64	@ 0x40
 8002d34:	4881      	ldr	r0, [pc, #516]	@ (8002f3c <BaseAction+0x2c0>)
 8002d36:	f002 f929 	bl	8004f8c <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a80      	ldr	r2, [pc, #512]	@ (8002f40 <BaseAction+0x2c4>)
 8002d3e:	8013      	strh	r3, [r2, #0]
	  rState2=  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002d40:	2180      	movs	r1, #128	@ 0x80
 8002d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d46:	f002 f921 	bl	8004f8c <HAL_GPIO_ReadPin>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f44 <BaseAction+0x2c8>)
 8002d4e:	8013      	strh	r3, [r2, #0]


	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8002d50:	4b7d      	ldr	r3, [pc, #500]	@ (8002f48 <BaseAction+0x2cc>)
 8002d52:	889b      	ldrh	r3, [r3, #4]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4a7d      	ldr	r2, [pc, #500]	@ (8002f4c <BaseAction+0x2d0>)
 8002d58:	7013      	strb	r3, [r2, #0]
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8002d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <BaseAction+0x2cc>)
 8002d5c:	88db      	ldrh	r3, [r3, #6]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4a7b      	ldr	r2, [pc, #492]	@ (8002f50 <BaseAction+0x2d4>)
 8002d62:	7013      	strb	r3, [r2, #0]
	  reed = rState1 + (2 * rState2); //for 2 back 1
 8002d64:	4b76      	ldr	r3, [pc, #472]	@ (8002f40 <BaseAction+0x2c4>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <BaseAction+0x2c8>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4a76      	ldr	r2, [pc, #472]	@ (8002f54 <BaseAction+0x2d8>)
 8002d7a:	7013      	strb	r3, [r2, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8002d7c:	4b75      	ldr	r3, [pc, #468]	@ (8002f54 <BaseAction+0x2d8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	0059      	lsls	r1, r3, #1
 8002d82:	4b75      	ldr	r3, [pc, #468]	@ (8002f58 <BaseAction+0x2dc>)
 8002d84:	fb83 3201 	smull	r3, r2, r3, r1
 8002d88:	17cb      	asrs	r3, r1, #31
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	1aca      	subs	r2, r1, r3
 8002d94:	b293      	uxth	r3, r2
 8002d96:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <BaseAction+0x2cc>)
 8002d98:	8113      	strh	r3, [r2, #8]


	  registerFrame[0x11].U16 = (float)(linear_position * 10); //Position
 8002d9a:	4b67      	ldr	r3, [pc, #412]	@ (8002f38 <BaseAction+0x2bc>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dac:	ee17 3a90 	vmov	r3, s15
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <BaseAction+0x2cc>)
 8002db4:	8453      	strh	r3, [r2, #34]	@ 0x22
	  registerFrame[0x12].U16 = (float)(linear_velocity * 10); //Velocity
 8002db6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f2c <BaseAction+0x2b0>)
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc8:	ee17 3a90 	vmov	r3, s15
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4a5e      	ldr	r2, [pc, #376]	@ (8002f48 <BaseAction+0x2cc>)
 8002dd0:	8493      	strh	r3, [r2, #36]	@ 0x24
	  registerFrame[0x13].U16 = (float)(linear_accel * 10)	; //Acceleration
 8002dd2:	4b57      	ldr	r3, [pc, #348]	@ (8002f30 <BaseAction+0x2b4>)
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <BaseAction+0x2cc>)
 8002dec:	84d3      	strh	r3, [r2, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8002dee:	4b5b      	ldr	r3, [pc, #364]	@ (8002f5c <BaseAction+0x2e0>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	4a55      	ldr	r2, [pc, #340]	@ (8002f48 <BaseAction+0x2cc>)
 8002df4:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80

	  if (vacuum == 1)
 8002df8:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <BaseAction+0x2d0>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d106      	bne.n	8002e0e <BaseAction+0x192>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e06:	484d      	ldr	r0, [pc, #308]	@ (8002f3c <BaseAction+0x2c0>)
 8002e08:	f002 f8d8 	bl	8004fbc <HAL_GPIO_WritePin>
 8002e0c:	e005      	b.n	8002e1a <BaseAction+0x19e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e14:	4849      	ldr	r0, [pc, #292]	@ (8002f3c <BaseAction+0x2c0>)
 8002e16:	f002 f8d1 	bl	8004fbc <HAL_GPIO_WritePin>
	  }

	  if (gripper == 0 && reed != 1)
 8002e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f50 <BaseAction+0x2d4>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <BaseAction+0x1c6>
 8002e22:	4b4c      	ldr	r3, [pc, #304]	@ (8002f54 <BaseAction+0x2d8>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d00b      	beq.n	8002e42 <BaseAction+0x1c6>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e30:	4842      	ldr	r0, [pc, #264]	@ (8002f3c <BaseAction+0x2c0>)
 8002e32:	f002 f8c3 	bl	8004fbc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002e36:	2201      	movs	r2, #1
 8002e38:	2180      	movs	r1, #128	@ 0x80
 8002e3a:	4849      	ldr	r0, [pc, #292]	@ (8002f60 <BaseAction+0x2e4>)
 8002e3c:	f002 f8be 	bl	8004fbc <HAL_GPIO_WritePin>
 8002e40:	e012      	b.n	8002e68 <BaseAction+0x1ec>
//		  {
//	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
//	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
//		  }
	  }
	  else if (gripper == 1 && reed != 2)
 8002e42:	4b43      	ldr	r3, [pc, #268]	@ (8002f50 <BaseAction+0x2d4>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10e      	bne.n	8002e68 <BaseAction+0x1ec>
 8002e4a:	4b42      	ldr	r3, [pc, #264]	@ (8002f54 <BaseAction+0x2d8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d00a      	beq.n	8002e68 <BaseAction+0x1ec>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002e52:	2201      	movs	r2, #1
 8002e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e58:	4838      	ldr	r0, [pc, #224]	@ (8002f3c <BaseAction+0x2c0>)
 8002e5a:	f002 f8af 	bl	8004fbc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	483f      	ldr	r0, [pc, #252]	@ (8002f60 <BaseAction+0x2e4>)
 8002e64:	f002 f8aa 	bl	8004fbc <HAL_GPIO_WritePin>
//			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
//			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
//		  }

	  }
	  if((gripper == 1 && reed == 2) || (gripper == 0 && reed == 1)){
 8002e68:	4b39      	ldr	r3, [pc, #228]	@ (8002f50 <BaseAction+0x2d4>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d103      	bne.n	8002e78 <BaseAction+0x1fc>
 8002e70:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <BaseAction+0x2d8>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d007      	beq.n	8002e88 <BaseAction+0x20c>
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <BaseAction+0x2d4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10e      	bne.n	8002e9e <BaseAction+0x222>
 8002e80:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <BaseAction+0x2d8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10a      	bne.n	8002e9e <BaseAction+0x222>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e8e:	482b      	ldr	r0, [pc, #172]	@ (8002f3c <BaseAction+0x2c0>)
 8002e90:	f002 f894 	bl	8004fbc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002e94:	2201      	movs	r2, #1
 8002e96:	2180      	movs	r1, #128	@ 0x80
 8002e98:	4831      	ldr	r0, [pc, #196]	@ (8002f60 <BaseAction+0x2e4>)
 8002e9a:	f002 f88f 	bl	8004fbc <HAL_GPIO_WritePin>



	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <BaseAction+0x2cc>)
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	f645 1361 	movw	r3, #22881	@ 0x5961
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d003      	beq.n	8002eb2 <BaseAction+0x236>
		  registerFrame[0x00].U16 = 22881;
 8002eaa:	4a27      	ldr	r2, [pc, #156]	@ (8002f48 <BaseAction+0x2cc>)
 8002eac:	f645 1361 	movw	r3, #22881	@ 0x5961
 8002eb0:	8013      	strh	r3, [r2, #0]
		  //deb++;
	  }

	  /////Set shelves
	  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8002eb2:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <BaseAction+0x2cc>)
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <BaseAction+0x24a>
	  {
		  registerFrame[0x01].U16 = 0; //change to idle mode
 8002eba:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <BaseAction+0x2cc>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	8053      	strh	r3, [r2, #2]
		  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8002ec0:	4a21      	ldr	r2, [pc, #132]	@ (8002f48 <BaseAction+0x2cc>)
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	8413      	strh	r3, [r2, #32]
//		  set_position_box();
	  }
	  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <BaseAction+0x2cc>)
 8002ec8:	8c1b      	ldrh	r3, [r3, #32]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d14e      	bne.n	8002f6c <BaseAction+0x2f0>
 8002ece:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <BaseAction+0x2e8>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d14a      	bne.n	8002f6c <BaseAction+0x2f0>
	  {
		  registerFrame[0x23].U16 = shelfPos[0];
 8002ed6:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <BaseAction+0x2ec>)
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <BaseAction+0x2cc>)
 8002edc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		  registerFrame[0x24].U16 = shelfPos[1];
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <BaseAction+0x2ec>)
 8002ee2:	885a      	ldrh	r2, [r3, #2]
 8002ee4:	4b18      	ldr	r3, [pc, #96]	@ (8002f48 <BaseAction+0x2cc>)
 8002ee6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		  registerFrame[0x25].U16 = shelfPos[2];
 8002eea:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <BaseAction+0x2ec>)
 8002eec:	889a      	ldrh	r2, [r3, #4]
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <BaseAction+0x2cc>)
 8002ef0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		  registerFrame[0x26].U16 = shelfPos[3];
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <BaseAction+0x2ec>)
 8002ef6:	88da      	ldrh	r2, [r3, #6]
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <BaseAction+0x2cc>)
 8002efa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		  registerFrame[0x27].U16 = shelfPos[4];
 8002efe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <BaseAction+0x2ec>)
 8002f00:	891a      	ldrh	r2, [r3, #8]
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <BaseAction+0x2cc>)
 8002f04:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		  registerFrame[0x10].U16 = 0; //
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <BaseAction+0x2cc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	841a      	strh	r2, [r3, #32]
		  flagShelf = 0;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <BaseAction+0x2e8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e2f6      	b.n	8003504 <BaseAction+0x888>
 8002f16:	bf00      	nop
 8002f18:	20001186 	.word	0x20001186
 8002f1c:	40240000 	.word	0x40240000
 8002f20:	200011ac 	.word	0x200011ac
 8002f24:	200011d4 	.word	0x200011d4
 8002f28:	20001218 	.word	0x20001218
 8002f2c:	20000fe0 	.word	0x20000fe0
 8002f30:	20000fe4 	.word	0x20000fe4
 8002f34:	20000aec 	.word	0x20000aec
 8002f38:	20000fe8 	.word	0x20000fe8
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	20000fdc 	.word	0x20000fdc
 8002f44:	20000fde 	.word	0x20000fde
 8002f48:	20000fec 	.word	0x20000fec
 8002f4c:	20000fd8 	.word	0x20000fd8
 8002f50:	20000fd9 	.word	0x20000fd9
 8002f54:	20000fda 	.word	0x20000fda
 8002f58:	55555556 	.word	0x55555556
 8002f5c:	20001188 	.word	0x20001188
 8002f60:	48000800 	.word	0x48000800
 8002f64:	20000fd4 	.word	0x20000fd4
 8002f68:	2000117c 	.word	0x2000117c
	  }

		///////1
	  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8002f6c:	4b73      	ldr	r3, [pc, #460]	@ (800313c <BaseAction+0x4c0>)
 8002f6e:	885b      	ldrh	r3, [r3, #2]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d112      	bne.n	8002f9a <BaseAction+0x31e>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002f74:	4b71      	ldr	r3, [pc, #452]	@ (800313c <BaseAction+0x4c0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 2; //Z-home
 8002f7a:	4b70      	ldr	r3, [pc, #448]	@ (800313c <BaseAction+0x4c0>)
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	841a      	strh	r2, [r3, #32]
		  		//setPos = shelfPos[0]; // set goal to home
		  setPos = 0;
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <BaseAction+0x4c4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	801a      	strh	r2, [r3, #0]
//		  		  uint8_t result = HomeZ();
//		  		  HAL_Delay(2000);
//		  		  generate_trapezoidal_velocity_profile(time_op,setPos/10.0);
		  Home = 0;
 8002f86:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <BaseAction+0x4c8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	801a      	strh	r2, [r3, #0]
		  rou = 0;
 8002f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8003148 <BaseAction+0x4cc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	801a      	strh	r2, [r3, #0]
		  piingpong = 1;
 8002f92:	4b6e      	ldr	r3, [pc, #440]	@ (800314c <BaseAction+0x4d0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	801a      	strh	r2, [r3, #0]
 8002f98:	e2b4      	b.n	8003504 <BaseAction+0x888>
	  }
	/////point mode
	  else if((registerFrame[0x01].U16) == 8)
 8002f9a:	4b68      	ldr	r3, [pc, #416]	@ (800313c <BaseAction+0x4c0>)
 8002f9c:	885b      	ldrh	r3, [r3, #2]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10b      	bne.n	8002fba <BaseAction+0x33e>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002fa2:	4b66      	ldr	r3, [pc, #408]	@ (800313c <BaseAction+0x4c0>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 16; // Z-go point
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <BaseAction+0x4c0>)
 8002faa:	2210      	movs	r2, #16
 8002fac:	841a      	strh	r2, [r3, #32]

		  setPos = ((registerFrame[0x30].U16)); // goal = point 30->base system 4 point mode
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <BaseAction+0x4c0>)
 8002fb0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8002fb4:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <BaseAction+0x4c4>)
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e2a4      	b.n	8003504 <BaseAction+0x888>
				//generate_trapezoidal_velocity_profile(time_op,setPos);
	  }
	/////jog mode
	  //read (convert to array)
	  else if((registerFrame[0x01].U16 ==4))
 8002fba:	4b60      	ldr	r3, [pc, #384]	@ (800313c <BaseAction+0x4c0>)
 8002fbc:	885b      	ldrh	r3, [r3, #2]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d10f      	bne.n	8002fe2 <BaseAction+0x366>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800313c <BaseAction+0x4c0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	805a      	strh	r2, [r3, #2]

		  temPick = (registerFrame[0x21].U16);
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800313c <BaseAction+0x4c0>)
 8002fca:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002fce:	4b60      	ldr	r3, [pc, #384]	@ (8003150 <BaseAction+0x4d4>)
 8002fd0:	801a      	strh	r2, [r3, #0]
		  temPlace = (registerFrame[0x22].U16);
 8002fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800313c <BaseAction+0x4c0>)
 8002fd4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8003154 <BaseAction+0x4d8>)
 8002fda:	801a      	strh	r2, [r3, #0]

		  OrderSeparate();
 8002fdc:	f000 fab0 	bl	8003540 <OrderSeparate>
 8002fe0:	e290      	b.n	8003504 <BaseAction+0x888>
	  }
			//run
	  else if(rnd > 0)
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8003158 <BaseAction+0x4dc>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8247 	beq.w	800347a <BaseAction+0x7fe>
	  {
				//first round
		  if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <BaseAction+0x4c0>)
 8002fee:	8c1b      	ldrh	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d128      	bne.n	8003046 <BaseAction+0x3ca>
 8002ff4:	4b58      	ldr	r3, [pc, #352]	@ (8003158 <BaseAction+0x4dc>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d124      	bne.n	8003046 <BaseAction+0x3ca>
 8002ffc:	4b57      	ldr	r3, [pc, #348]	@ (800315c <BaseAction+0x4e0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d120      	bne.n	8003046 <BaseAction+0x3ca>
 8003004:	4b56      	ldr	r3, [pc, #344]	@ (8003160 <BaseAction+0x4e4>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11c      	bne.n	8003046 <BaseAction+0x3ca>
 800300c:	4b55      	ldr	r3, [pc, #340]	@ (8003164 <BaseAction+0x4e8>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d118      	bne.n	8003046 <BaseAction+0x3ca>
		  {
			  mode = 9; // for debug - pick
 8003014:	4a54      	ldr	r2, [pc, #336]	@ (8003168 <BaseAction+0x4ec>)
 8003016:	2309      	movs	r3, #9
 8003018:	7013      	strb	r3, [r2, #0]
			  gripper = 0;
 800301a:	4a50      	ldr	r2, [pc, #320]	@ (800315c <BaseAction+0x4e0>)
 800301c:	2300      	movs	r3, #0
 800301e:	7013      	strb	r3, [r2, #0]
			  vacuum = 0;
 8003020:	4a50      	ldr	r2, [pc, #320]	@ (8003164 <BaseAction+0x4e8>)
 8003022:	2300      	movs	r3, #0
 8003024:	7013      	strb	r3, [r2, #0]
			  (registerFrame[0x10].U16) = 4; // Z-go pick
 8003026:	4a45      	ldr	r2, [pc, #276]	@ (800313c <BaseAction+0x4c0>)
 8003028:	2304      	movs	r3, #4
 800302a:	8413      	strh	r3, [r2, #32]
			  setPos = shelfPos[pick[5-rnd]-1];
 800302c:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <BaseAction+0x4dc>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f1c3 0205 	rsb	r2, r3, #5
 8003034:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <BaseAction+0x4f0>)
 8003036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	4b4c      	ldr	r3, [pc, #304]	@ (8003170 <BaseAction+0x4f4>)
 800303e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003042:	4a3f      	ldr	r2, [pc, #252]	@ (8003140 <BaseAction+0x4c4>)
 8003044:	8013      	strh	r3, [r2, #0]
		  }
		  if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 8003046:	4b41      	ldr	r3, [pc, #260]	@ (800314c <BaseAction+0x4d0>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80fe 	beq.w	800324c <BaseAction+0x5d0>
 8003050:	4b3a      	ldr	r3, [pc, #232]	@ (800313c <BaseAction+0x4c0>)
 8003052:	8c1b      	ldrh	r3, [r3, #32]
 8003054:	2b08      	cmp	r3, #8
 8003056:	f040 80f9 	bne.w	800324c <BaseAction+0x5d0>
		  {
				///////place down
			  if(mode == 6){
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <BaseAction+0x4ec>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d10e      	bne.n	8003080 <BaseAction+0x404>
				  timestamp1 = HAL_GetTick() + 200; // delay before gripper move
 8003062:	f001 f9a1 	bl	80043a8 <HAL_GetTick>
 8003066:	4603      	mov	r3, r0
 8003068:	33c8      	adds	r3, #200	@ 0xc8
 800306a:	2200      	movs	r2, #0
 800306c:	673b      	str	r3, [r7, #112]	@ 0x70
 800306e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <BaseAction+0x4f8>)
 8003072:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003076:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 60;
 800307a:	4a3b      	ldr	r2, [pc, #236]	@ (8003168 <BaseAction+0x4ec>)
 800307c:	233c      	movs	r3, #60	@ 0x3c
 800307e:	7013      	strb	r3, [r2, #0]
			  }
			  if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 8003080:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <BaseAction+0x4e4>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d02e      	beq.n	80030e6 <BaseAction+0x46a>
 8003088:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <BaseAction+0x4dc>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02a      	beq.n	80030e6 <BaseAction+0x46a>
 8003090:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <BaseAction+0x4e8>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d126      	bne.n	80030e6 <BaseAction+0x46a>
 8003098:	4b30      	ldr	r3, [pc, #192]	@ (800315c <BaseAction+0x4e0>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d122      	bne.n	80030e6 <BaseAction+0x46a>
 80030a0:	f001 f982 	bl	80043a8 <HAL_GetTick>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2200      	movs	r2, #0
 80030a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ac:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <BaseAction+0x4f8>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80030b6:	4621      	mov	r1, r4
 80030b8:	4291      	cmp	r1, r2
 80030ba:	4629      	mov	r1, r5
 80030bc:	4199      	sbcs	r1, r3
 80030be:	d312      	bcc.n	80030e6 <BaseAction+0x46a>
				  registerFrame[0x03].U16 = 1; // gripper forward
 80030c0:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <BaseAction+0x4c0>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	80da      	strh	r2, [r3, #6]
				  timestamp2 = HAL_GetTick() + 100; //delay before release box
 80030c6:	f001 f96f 	bl	80043a8 <HAL_GetTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	3364      	adds	r3, #100	@ 0x64
 80030ce:	2200      	movs	r2, #0
 80030d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030d4:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <BaseAction+0x4fc>)
 80030d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80030da:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 61;
 80030de:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <BaseAction+0x4ec>)
 80030e0:	223d      	movs	r2, #61	@ 0x3d
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e076      	b.n	80031d4 <BaseAction+0x558>
			  }
			  else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <BaseAction+0x4e4>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d148      	bne.n	8003180 <BaseAction+0x504>
 80030ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <BaseAction+0x4e8>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d144      	bne.n	8003180 <BaseAction+0x504>
 80030f6:	f001 f957 	bl	80043a8 <HAL_GetTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2200      	movs	r2, #0
 80030fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003100:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003102:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <BaseAction+0x4fc>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800310c:	4621      	mov	r1, r4
 800310e:	4291      	cmp	r1, r2
 8003110:	4629      	mov	r1, r5
 8003112:	4199      	sbcs	r1, r3
 8003114:	d334      	bcc.n	8003180 <BaseAction+0x504>
			  {
				  registerFrame[0x02].U16 = 0; //vacuum off
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <BaseAction+0x4c0>)
 8003118:	2200      	movs	r2, #0
 800311a:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 50; // delay before retract gripper
 800311c:	f001 f944 	bl	80043a8 <HAL_GetTick>
 8003120:	4603      	mov	r3, r0
 8003122:	3332      	adds	r3, #50	@ 0x32
 8003124:	2200      	movs	r2, #0
 8003126:	653b      	str	r3, [r7, #80]	@ 0x50
 8003128:	657a      	str	r2, [r7, #84]	@ 0x54
 800312a:	4b14      	ldr	r3, [pc, #80]	@ (800317c <BaseAction+0x500>)
 800312c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003130:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 62;
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <BaseAction+0x4ec>)
 8003136:	223e      	movs	r2, #62	@ 0x3e
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e04b      	b.n	80031d4 <BaseAction+0x558>
 800313c:	20000fec 	.word	0x20000fec
 8003140:	20001186 	.word	0x20001186
 8003144:	200011de 	.word	0x200011de
 8003148:	20001214 	.word	0x20001214
 800314c:	20000fd6 	.word	0x20000fd6
 8003150:	2000118c 	.word	0x2000118c
 8003154:	2000118e 	.word	0x2000118e
 8003158:	200011a6 	.word	0x200011a6
 800315c:	20000fd9 	.word	0x20000fd9
 8003160:	20000fda 	.word	0x20000fda
 8003164:	20000fd8 	.word	0x20000fd8
 8003168:	2000118b 	.word	0x2000118b
 800316c:	20001190 	.word	0x20001190
 8003170:	2000117c 	.word	0x2000117c
 8003174:	20001270 	.word	0x20001270
 8003178:	20001278 	.word	0x20001278
 800317c:	20001280 	.word	0x20001280
			  }
			  else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 8003180:	4ba4      	ldr	r3, [pc, #656]	@ (8003414 <BaseAction+0x798>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d125      	bne.n	80031d4 <BaseAction+0x558>
 8003188:	4ba3      	ldr	r3, [pc, #652]	@ (8003418 <BaseAction+0x79c>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d121      	bne.n	80031d4 <BaseAction+0x558>
 8003190:	f001 f90a 	bl	80043a8 <HAL_GetTick>
 8003194:	4603      	mov	r3, r0
 8003196:	2200      	movs	r2, #0
 8003198:	469a      	mov	sl, r3
 800319a:	4693      	mov	fp, r2
 800319c:	4b9f      	ldr	r3, [pc, #636]	@ (800341c <BaseAction+0x7a0>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	4592      	cmp	sl, r2
 80031a4:	eb7b 0303 	sbcs.w	r3, fp, r3
 80031a8:	d314      	bcc.n	80031d4 <BaseAction+0x558>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 80031aa:	4b9d      	ldr	r3, [pc, #628]	@ (8003420 <BaseAction+0x7a4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	80da      	strh	r2, [r3, #6]
				  load = 0;
 80031b0:	4b9c      	ldr	r3, [pc, #624]	@ (8003424 <BaseAction+0x7a8>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 200; // delay before moving to pick
 80031b6:	f001 f8f7 	bl	80043a8 <HAL_GetTick>
 80031ba:	4603      	mov	r3, r0
 80031bc:	33c8      	adds	r3, #200	@ 0xc8
 80031be:	2200      	movs	r2, #0
 80031c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031c4:	4b98      	ldr	r3, [pc, #608]	@ (8003428 <BaseAction+0x7ac>)
 80031c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80031ca:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 63;
 80031ce:	4b97      	ldr	r3, [pc, #604]	@ (800342c <BaseAction+0x7b0>)
 80031d0:	223f      	movs	r2, #63	@ 0x3f
 80031d2:	701a      	strb	r2, [r3, #0]
			  }
				///////finish place -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80031d4:	4b90      	ldr	r3, [pc, #576]	@ (8003418 <BaseAction+0x79c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 8192 	bne.w	8003502 <BaseAction+0x886>
 80031de:	4b94      	ldr	r3, [pc, #592]	@ (8003430 <BaseAction+0x7b4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 818d 	bne.w	8003502 <BaseAction+0x886>
 80031e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003414 <BaseAction+0x798>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8188 	bne.w	8003502 <BaseAction+0x886>
 80031f2:	f001 f8d9 	bl	80043a8 <HAL_GetTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2200      	movs	r2, #0
 80031fa:	4698      	mov	r8, r3
 80031fc:	4691      	mov	r9, r2
 80031fe:	4b8a      	ldr	r3, [pc, #552]	@ (8003428 <BaseAction+0x7ac>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	4590      	cmp	r8, r2
 8003206:	eb79 0303 	sbcs.w	r3, r9, r3
 800320a:	f0c0 817a 	bcc.w	8003502 <BaseAction+0x886>
			  {
				  rnd--;
 800320e:	4b89      	ldr	r3, [pc, #548]	@ (8003434 <BaseAction+0x7b8>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4b87      	ldr	r3, [pc, #540]	@ (8003434 <BaseAction+0x7b8>)
 8003218:	701a      	strb	r2, [r3, #0]
				  if(rnd>0)
 800321a:	4b86      	ldr	r3, [pc, #536]	@ (8003434 <BaseAction+0x7b8>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 816f 	beq.w	8003502 <BaseAction+0x886>
				  {
					  (registerFrame[0x10].U16) = 4; // Z-go pick
 8003224:	4b7e      	ldr	r3, [pc, #504]	@ (8003420 <BaseAction+0x7a4>)
 8003226:	2204      	movs	r2, #4
 8003228:	841a      	strh	r2, [r3, #32]
					  setPos = shelfPos[pick[5-rnd]-1];
 800322a:	4b82      	ldr	r3, [pc, #520]	@ (8003434 <BaseAction+0x7b8>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	f1c3 0305 	rsb	r3, r3, #5
 8003232:	4a81      	ldr	r2, [pc, #516]	@ (8003438 <BaseAction+0x7bc>)
 8003234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003238:	3b01      	subs	r3, #1
 800323a:	4a80      	ldr	r2, [pc, #512]	@ (800343c <BaseAction+0x7c0>)
 800323c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003240:	4b7f      	ldr	r3, [pc, #508]	@ (8003440 <BaseAction+0x7c4>)
 8003242:	801a      	strh	r2, [r3, #0]
					  mode = 9;
 8003244:	4b79      	ldr	r3, [pc, #484]	@ (800342c <BaseAction+0x7b0>)
 8003246:	2209      	movs	r2, #9
 8003248:	701a      	strb	r2, [r3, #0]
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 800324a:	e15a      	b.n	8003502 <BaseAction+0x886>
				  }
			  }
		  }
		  else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 800324c:	4b7d      	ldr	r3, [pc, #500]	@ (8003444 <BaseAction+0x7c8>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8157 	beq.w	8003504 <BaseAction+0x888>
 8003256:	4b72      	ldr	r3, [pc, #456]	@ (8003420 <BaseAction+0x7a4>)
 8003258:	8c1b      	ldrh	r3, [r3, #32]
 800325a:	2b04      	cmp	r3, #4
 800325c:	f040 8152 	bne.w	8003504 <BaseAction+0x888>
		  {
				//////pick up
			  if(mode == 9){
 8003260:	4b72      	ldr	r3, [pc, #456]	@ (800342c <BaseAction+0x7b0>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d10e      	bne.n	8003286 <BaseAction+0x60a>
				  timestamp1 = HAL_GetTick() + 200; // delay before gripper go pick
 8003268:	f001 f89e 	bl	80043a8 <HAL_GetTick>
 800326c:	4603      	mov	r3, r0
 800326e:	33c8      	adds	r3, #200	@ 0xc8
 8003270:	2200      	movs	r2, #0
 8003272:	643b      	str	r3, [r7, #64]	@ 0x40
 8003274:	647a      	str	r2, [r7, #68]	@ 0x44
 8003276:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <BaseAction+0x7cc>)
 8003278:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800327c:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 90;
 8003280:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <BaseAction+0x7b0>)
 8003282:	235a      	movs	r3, #90	@ 0x5a
 8003284:	7013      	strb	r3, [r2, #0]
			  }
			  if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 8003286:	4b6a      	ldr	r3, [pc, #424]	@ (8003430 <BaseAction+0x7b4>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d12a      	bne.n	80032e4 <BaseAction+0x668>
 800328e:	4b62      	ldr	r3, [pc, #392]	@ (8003418 <BaseAction+0x79c>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d126      	bne.n	80032e4 <BaseAction+0x668>
 8003296:	4b5f      	ldr	r3, [pc, #380]	@ (8003414 <BaseAction+0x798>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d122      	bne.n	80032e4 <BaseAction+0x668>
 800329e:	f001 f883 	bl	80043a8 <HAL_GetTick>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2200      	movs	r2, #0
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032aa:	4b67      	ldr	r3, [pc, #412]	@ (8003448 <BaseAction+0x7cc>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80032b4:	4621      	mov	r1, r4
 80032b6:	4291      	cmp	r1, r2
 80032b8:	4629      	mov	r1, r5
 80032ba:	4199      	sbcs	r1, r3
 80032bc:	d312      	bcc.n	80032e4 <BaseAction+0x668>
			  {
				  registerFrame[0x03].U16 = 1; //gripper forward
 80032be:	4b58      	ldr	r3, [pc, #352]	@ (8003420 <BaseAction+0x7a4>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	80da      	strh	r2, [r3, #6]
				  timestamp2 = HAL_GetTick() + 100; // delay before vacuum on
 80032c4:	f001 f870 	bl	80043a8 <HAL_GetTick>
 80032c8:	4603      	mov	r3, r0
 80032ca:	3364      	adds	r3, #100	@ 0x64
 80032cc:	2200      	movs	r2, #0
 80032ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80032d2:	4b5e      	ldr	r3, [pc, #376]	@ (800344c <BaseAction+0x7d0>)
 80032d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80032d8:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 91;
 80032dc:	4b53      	ldr	r3, [pc, #332]	@ (800342c <BaseAction+0x7b0>)
 80032de:	225b      	movs	r2, #91	@ 0x5b
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e05b      	b.n	800339c <BaseAction+0x720>
			  }
			  else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 80032e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003418 <BaseAction+0x79c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d126      	bne.n	800333a <BaseAction+0x6be>
 80032ec:	4b49      	ldr	r3, [pc, #292]	@ (8003414 <BaseAction+0x798>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d122      	bne.n	800333a <BaseAction+0x6be>
 80032f4:	f001 f858 	bl	80043a8 <HAL_GetTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2200      	movs	r2, #0
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003300:	4b52      	ldr	r3, [pc, #328]	@ (800344c <BaseAction+0x7d0>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800330a:	4621      	mov	r1, r4
 800330c:	4291      	cmp	r1, r2
 800330e:	4629      	mov	r1, r5
 8003310:	4199      	sbcs	r1, r3
 8003312:	d312      	bcc.n	800333a <BaseAction+0x6be>
			  {
				  registerFrame[0x02].U16 = 1; //vacuum on
 8003314:	4b42      	ldr	r3, [pc, #264]	@ (8003420 <BaseAction+0x7a4>)
 8003316:	2201      	movs	r2, #1
 8003318:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 50; // delay before pulling box back
 800331a:	f001 f845 	bl	80043a8 <HAL_GetTick>
 800331e:	4603      	mov	r3, r0
 8003320:	3332      	adds	r3, #50	@ 0x32
 8003322:	2200      	movs	r2, #0
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	627a      	str	r2, [r7, #36]	@ 0x24
 8003328:	4b3c      	ldr	r3, [pc, #240]	@ (800341c <BaseAction+0x7a0>)
 800332a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800332e:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 92;
 8003332:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <BaseAction+0x7b0>)
 8003334:	225c      	movs	r2, #92	@ 0x5c
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e030      	b.n	800339c <BaseAction+0x720>

			  }
			  else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 800333a:	4b3d      	ldr	r3, [pc, #244]	@ (8003430 <BaseAction+0x7b4>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d12c      	bne.n	800339c <BaseAction+0x720>
 8003342:	4b35      	ldr	r3, [pc, #212]	@ (8003418 <BaseAction+0x79c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d128      	bne.n	800339c <BaseAction+0x720>
 800334a:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <BaseAction+0x798>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d124      	bne.n	800339c <BaseAction+0x720>
 8003352:	f001 f829 	bl	80043a8 <HAL_GetTick>
 8003356:	4603      	mov	r3, r0
 8003358:	2200      	movs	r2, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	61fa      	str	r2, [r7, #28]
 800335e:	4b2f      	ldr	r3, [pc, #188]	@ (800341c <BaseAction+0x7a0>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003368:	4621      	mov	r1, r4
 800336a:	4291      	cmp	r1, r2
 800336c:	4629      	mov	r1, r5
 800336e:	4199      	sbcs	r1, r3
 8003370:	d314      	bcc.n	800339c <BaseAction+0x720>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 8003372:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <BaseAction+0x7a4>)
 8003374:	2200      	movs	r2, #0
 8003376:	80da      	strh	r2, [r3, #6]
				  load = 1;
 8003378:	4b2a      	ldr	r3, [pc, #168]	@ (8003424 <BaseAction+0x7a8>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 200; // delay before moving again
 800337e:	f001 f813 	bl	80043a8 <HAL_GetTick>
 8003382:	4603      	mov	r3, r0
 8003384:	33c8      	adds	r3, #200	@ 0xc8
 8003386:	2200      	movs	r2, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	617a      	str	r2, [r7, #20]
 800338c:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <BaseAction+0x7ac>)
 800338e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003392:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 93;
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <BaseAction+0x7b0>)
 8003398:	225d      	movs	r2, #93	@ 0x5d
 800339a:	701a      	strb	r2, [r3, #0]
			  }
				///////finish pick -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 800339c:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <BaseAction+0x79c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 80af 	bne.w	8003504 <BaseAction+0x888>
 80033a6:	4b22      	ldr	r3, [pc, #136]	@ (8003430 <BaseAction+0x7b4>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	f040 80aa 	bne.w	8003504 <BaseAction+0x888>
 80033b0:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <BaseAction+0x798>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 80a5 	bne.w	8003504 <BaseAction+0x888>
 80033ba:	f000 fff5 	bl	80043a8 <HAL_GetTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	2200      	movs	r2, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	60fa      	str	r2, [r7, #12]
 80033c6:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <BaseAction+0x7ac>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033d0:	4621      	mov	r1, r4
 80033d2:	4291      	cmp	r1, r2
 80033d4:	4629      	mov	r1, r5
 80033d6:	4199      	sbcs	r1, r3
 80033d8:	f0c0 8094 	bcc.w	8003504 <BaseAction+0x888>
			  {
				  (registerFrame[0x10].U16) = 8; // Z-go place
 80033dc:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <BaseAction+0x7a4>)
 80033de:	2208      	movs	r2, #8
 80033e0:	841a      	strh	r2, [r3, #32]
				  if(place[5-rnd] == 5)
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <BaseAction+0x7b8>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f1c3 0305 	rsb	r3, r3, #5
 80033ea:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <BaseAction+0x7d4>)
 80033ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d12f      	bne.n	8003454 <BaseAction+0x7d8>
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 70; //bon  goal + 5mm
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <BaseAction+0x7b8>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f1c3 0305 	rsb	r3, r3, #5
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <BaseAction+0x7d4>)
 80033fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a0d      	ldr	r2, [pc, #52]	@ (800343c <BaseAction+0x7c0>)
 8003406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340a:	3346      	adds	r3, #70	@ 0x46
 800340c:	b29a      	uxth	r2, r3
 800340e:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <BaseAction+0x7c4>)
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	e02e      	b.n	8003472 <BaseAction+0x7f6>
 8003414:	20000fd8 	.word	0x20000fd8
 8003418:	20000fd9 	.word	0x20000fd9
 800341c:	20001280 	.word	0x20001280
 8003420:	20000fec 	.word	0x20000fec
 8003424:	200011a8 	.word	0x200011a8
 8003428:	20001288 	.word	0x20001288
 800342c:	2000118b 	.word	0x2000118b
 8003430:	20000fda 	.word	0x20000fda
 8003434:	200011a6 	.word	0x200011a6
 8003438:	20001190 	.word	0x20001190
 800343c:	2000117c 	.word	0x2000117c
 8003440:	20001186 	.word	0x20001186
 8003444:	20000fd6 	.word	0x20000fd6
 8003448:	20001270 	.word	0x20001270
 800344c:	20001278 	.word	0x20001278
 8003450:	2000119c 	.word	0x2000119c
				  }
				  else
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 70; // goal + 5mm
 8003454:	4b31      	ldr	r3, [pc, #196]	@ (800351c <BaseAction+0x8a0>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	f1c3 0305 	rsb	r3, r3, #5
 800345c:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <BaseAction+0x8a4>)
 800345e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003462:	3b01      	subs	r3, #1
 8003464:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <BaseAction+0x8a8>)
 8003466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800346a:	3346      	adds	r3, #70	@ 0x46
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <BaseAction+0x8ac>)
 8003470:	801a      	strh	r2, [r3, #0]
				  }
				  mode = 6;
 8003472:	4b2e      	ldr	r3, [pc, #184]	@ (800352c <BaseAction+0x8b0>)
 8003474:	2206      	movs	r2, #6
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e044      	b.n	8003504 <BaseAction+0x888>
			  }
		  }
	  }

	  //end jog
	  else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 800347a:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <BaseAction+0x8b4>)
 800347c:	8c1b      	ldrh	r3, [r3, #32]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d10a      	bne.n	8003498 <BaseAction+0x81c>
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <BaseAction+0x8a0>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <BaseAction+0x81c>
	  {
		  (registerFrame[0x10].U16 = 0); // End Jogs
 800348a:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <BaseAction+0x8b4>)
 800348c:	2200      	movs	r2, #0
 800348e:	841a      	strh	r2, [r3, #32]
		  mode = 255;
 8003490:	4b26      	ldr	r3, [pc, #152]	@ (800352c <BaseAction+0x8b0>)
 8003492:	22ff      	movs	r2, #255	@ 0xff
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e035      	b.n	8003504 <BaseAction+0x888>
	  }
		/////End point & Home
	  else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8003498:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <BaseAction+0x8b8>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d031      	beq.n	8003504 <BaseAction+0x888>
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <BaseAction+0x8b4>)
 80034a2:	8c1b      	ldrh	r3, [r3, #32]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d003      	beq.n	80034b0 <BaseAction+0x834>
 80034a8:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <BaseAction+0x8b4>)
 80034aa:	8c1b      	ldrh	r3, [r3, #32]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d129      	bne.n	8003504 <BaseAction+0x888>
	  {
		  //finish point & home mode
		  static uint64_t Timestamp = 0;
		  if(rnd2 == 0){
 80034b0:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <BaseAction+0x8bc>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d110      	bne.n	80034da <BaseAction+0x85e>
			  Timestamp = HAL_GetTick() + 1000; //delay
 80034b8:	f000 ff76 	bl	80043a8 <HAL_GetTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80034c2:	2200      	movs	r2, #0
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <BaseAction+0x8c0>)
 80034ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034ce:	e9c3 1200 	strd	r1, r2, [r3]
			  rnd2 = 1;
 80034d2:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <BaseAction+0x8bc>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e014      	b.n	8003504 <BaseAction+0x888>
		  }
		  else if(HAL_GetTick() >= Timestamp)
 80034da:	f000 ff65 	bl	80043a8 <HAL_GetTick>
 80034de:	4603      	mov	r3, r0
 80034e0:	2200      	movs	r2, #0
 80034e2:	461c      	mov	r4, r3
 80034e4:	4615      	mov	r5, r2
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <BaseAction+0x8c0>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	4294      	cmp	r4, r2
 80034ee:	eb75 0303 	sbcs.w	r3, r5, r3
 80034f2:	d307      	bcc.n	8003504 <BaseAction+0x888>
		  {
			  registerFrame[0x10].U16 = 0; // finish point & home mode
 80034f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <BaseAction+0x8b4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	841a      	strh	r2, [r3, #32]
			  rnd2 = 0;
 80034fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <BaseAction+0x8bc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e000      	b.n	8003504 <BaseAction+0x888>
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8003502:	bf00      	nop
		  }
	  }
	  if(registerFrame[0x10].U16 == 0){
 8003504:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <BaseAction+0x8b4>)
 8003506:	8c1b      	ldrh	r3, [r3, #32]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <BaseAction+0x896>
		  piingpong = 0;
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <BaseAction+0x8b8>)
 800350e:	2200      	movs	r2, #0
 8003510:	801a      	strh	r2, [r3, #0]
	  }
}
 8003512:	bf00      	nop
 8003514:	3778      	adds	r7, #120	@ 0x78
 8003516:	46bd      	mov	sp, r7
 8003518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351c:	200011a6 	.word	0x200011a6
 8003520:	2000119c 	.word	0x2000119c
 8003524:	2000117c 	.word	0x2000117c
 8003528:	20001186 	.word	0x20001186
 800352c:	2000118b 	.word	0x2000118b
 8003530:	20000fec 	.word	0x20000fec
 8003534:	20000fd6 	.word	0x20000fd6
 8003538:	200011a7 	.word	0x200011a7
 800353c:	20001290 	.word	0x20001290

08003540 <OrderSeparate>:
//}

//

void OrderSeparate(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
	//rnd = 0;
	////// Convert to string
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 8003546:	f242 7310 	movw	r3, #10000	@ 0x2710
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	e056      	b.n	80035fc <OrderSeparate+0xbc>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 800354e:	4b32      	ldr	r3, [pc, #200]	@ (8003618 <OrderSeparate+0xd8>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	429a      	cmp	r2, r3
 8003556:	d858      	bhi.n	800360a <OrderSeparate+0xca>
 8003558:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <OrderSeparate+0xd8>)
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b05      	cmp	r3, #5
 8003566:	d850      	bhi.n	800360a <OrderSeparate+0xca>
 8003568:	4b2c      	ldr	r3, [pc, #176]	@ (800361c <OrderSeparate+0xdc>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	429a      	cmp	r2, r3
 8003570:	d84b      	bhi.n	800360a <OrderSeparate+0xca>
 8003572:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <OrderSeparate+0xdc>)
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d843      	bhi.n	800360a <OrderSeparate+0xca>
		{
			//rnd = 0;
			//mode = 0;
			break;
		}
		pick[rnd] = temPick/p; // use this for pick
 8003582:	4b25      	ldr	r3, [pc, #148]	@ (8003618 <OrderSeparate+0xd8>)
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <OrderSeparate+0xe0>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <OrderSeparate+0xe4>)
 8003596:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <OrderSeparate+0xdc>)
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <OrderSeparate+0xe0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <OrderSeparate+0xe8>)
 80035ae:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 80035b2:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <OrderSeparate+0xd8>)
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035bc:	fb01 f202 	mul.w	r2, r1, r2
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <OrderSeparate+0xd8>)
 80035c6:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 80035c8:	4b14      	ldr	r3, [pc, #80]	@ (800361c <OrderSeparate+0xdc>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d2:	fb01 f202 	mul.w	r2, r1, r2
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <OrderSeparate+0xdc>)
 80035dc:	801a      	strh	r2, [r3, #0]
		rnd++;
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <OrderSeparate+0xe0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	3301      	adds	r3, #1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <OrderSeparate+0xe0>)
 80035e8:	701a      	strb	r2, [r3, #0]
		rou = 20;
 80035ea:	4b10      	ldr	r3, [pc, #64]	@ (800362c <OrderSeparate+0xec>)
 80035ec:	2214      	movs	r2, #20
 80035ee:	801a      	strh	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003630 <OrderSeparate+0xf0>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	80fb      	strh	r3, [r7, #6]
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <OrderSeparate+0xca>
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <OrderSeparate+0xd8>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1a1      	bne.n	800354e <OrderSeparate+0xe>
	}
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000118c 	.word	0x2000118c
 800361c:	2000118e 	.word	0x2000118e
 8003620:	200011a6 	.word	0x200011a6
 8003624:	20001190 	.word	0x20001190
 8003628:	2000119c 	.word	0x2000119c
 800362c:	20001214 	.word	0x20001214
 8003630:	cccccccd 	.word	0xcccccccd

08003634 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 8003640:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <serviceMotor+0x48>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
	if(dir){
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <serviceMotor+0x4c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <serviceMotor+0x4c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 800365c:	e007      	b.n	800366e <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <serviceMotor+0x4c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2200      	movs	r2, #0
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <serviceMotor+0x4c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000af8 	.word	0x20000af8
 8003680:	20000238 	.word	0x20000238

08003684 <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	return zStop;
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <getZStop+0x14>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000af8 	.word	0x20000af8

0800369c <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
    if((GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ac:	d10f      	bne.n	80036ce <HAL_GPIO_EXTI_Callback+0x32>
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_GPIO_EXTI_Callback+0x32>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036b8:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x60>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x60>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	639a      	str	r2, [r3, #56]	@ 0x38
        zStop = 1;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
//        __HAL_TIM_SET_COUNTER(&htim2, 0);
//        qeifloat = 0;
    }
    if ((GPIO_Pin == GPIO_PIN_5))
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d10c      	bne.n	80036ee <HAL_GPIO_EXTI_Callback+0x52>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036d4:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x60>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036dc:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x60>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2101      	movs	r1, #1
 80036e8:	4805      	ldr	r0, [pc, #20]	@ (8003700 <HAL_GPIO_EXTI_Callback+0x64>)
 80036ea:	f001 fc67 	bl	8004fbc <HAL_GPIO_WritePin>
    }

}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000af8 	.word	0x20000af8
 80036fc:	20000238 	.word	0x20000238
 8003700:	48000400 	.word	0x48000400

08003704 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a05      	ldr	r2, [pc, #20]	@ (8003728 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d103      	bne.n	800371e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8003716:	2104      	movs	r1, #4
 8003718:	4804      	ldr	r0, [pc, #16]	@ (800372c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800371a:	f003 f9d7 	bl	8006acc <HAL_TIM_PWM_Stop_DMA>
	}

}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40000400 	.word	0x40000400
 800372c:	200003d0 	.word	0x200003d0

08003730 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		//registerFrame[0x00].U16 = 22881; //send "Ya" // dont use interrupt cuz unstable
	}
	else if(htim == &htim4)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10f      	bne.n	800376a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		i+=1;
 800374a:	4b14      	ldr	r3, [pc, #80]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f112 0801 	adds.w	r8, r2, #1
 8003754:	f143 0900 	adc.w	r9, r3, #0
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800375a:	e9c3 8900 	strd	r8, r9, [r3]
		//piingpong = 0;
		fin = 0;
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
		generate_Velocity();
 8003764:	f7ff f8c8 	bl	80028f8 <generate_Velocity>
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 8003768:	e00e      	b.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if(htim == &htim7)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10a      	bne.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x58>
	_micros += UINT16_MAX;
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800377c:	1854      	adds	r4, r2, r1
 800377e:	f143 0500 	adc.w	r5, r3, #0
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003784:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003792:	bf00      	nop
 8003794:	20000568 	.word	0x20000568
 8003798:	2000049c 	.word	0x2000049c
 800379c:	200011c8 	.word	0x200011c8
 80037a0:	20001217 	.word	0x20001217
 80037a4:	20000634 	.word	0x20000634
 80037a8:	20001248 	.word	0x20001248

080037ac <micros>:

uint64_t micros()
{
 80037ac:	b4b0      	push	{r4, r5, r7}
 80037ae:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <micros+0x2c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	2200      	movs	r2, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	4611      	mov	r1, r2
 80037bc:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <micros+0x30>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	1884      	adds	r4, r0, r2
 80037c4:	eb41 0503 	adc.w	r5, r1, r3
 80037c8:	4622      	mov	r2, r4
 80037ca:	462b      	mov	r3, r5
}
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bcb0      	pop	{r4, r5, r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000634 	.word	0x20000634
 80037dc:	20001248 	.word	0x20001248

080037e0 <QEIEncoderPosVel_Update>:

float QEIEncoderPosVel_Update()
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 80037e6:	f7ff ffe1 	bl	80037ac <micros>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4942      	ldr	r1, [pc, #264]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 80037f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.Positions[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <QEIEncoderPosVel_Update+0x11c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	469a      	mov	sl, r3
 80037fe:	4693      	mov	fp, r2
 8003800:	4b3d      	ldr	r3, [pc, #244]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 8003802:	e9c3 ab00 	strd	sl, fp, [r3]
//QEIdata.QEIAngularVelocity[NEW]=QEIdata.QEIAngularVelocity[OLD];

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
 8003806:	4b3c      	ldr	r3, [pc, #240]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 8003808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800380c:	4b3a      	ldr	r3, [pc, #232]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 800380e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003812:	ebb0 0802 	subs.w	r8, r0, r2
 8003816:	eb61 0903 	sbc.w	r9, r1, r3
 800381a:	4642      	mov	r2, r8
 800381c:	464b      	mov	r3, r9
 800381e:	4938      	ldr	r1, [pc, #224]	@ (8003900 <QEIEncoderPosVel_Update+0x120>)
 8003820:	e9c1 2300 	strd	r2, r3, [r1]
//if(diffPosition > 2147483647)
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
diffTime = (QEIdata.TimeStamps[NEW]-QEIdata.TimeStamps[OLD]) * 0.000001;
 8003824:	4b34      	ldr	r3, [pc, #208]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 8003826:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800382a:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 800382c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003830:	1a84      	subs	r4, r0, r2
 8003832:	eb61 0503 	sbc.w	r5, r1, r3
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fc fe73 	bl	8000524 <__aeabi_ul2d>
 800383e:	a32a      	add	r3, pc, #168	@ (adr r3, 80038e8 <QEIEncoderPosVel_Update+0x108>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f7fc fea4 	bl	8000590 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd f980 	bl	8000b54 <__aeabi_d2f>
 8003854:	4603      	mov	r3, r0
 8003856:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <QEIEncoderPosVel_Update+0x124>)
 8003858:	6013      	str	r3, [r2, #0]
//calculate anglar velocity
diffVelocity = ((diffPosition / diffTime)*(60.0/8192)*100.0)*0.65;
 800385a:	4b29      	ldr	r3, [pc, #164]	@ (8003900 <QEIEncoderPosVel_Update+0x120>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd fa96 	bl	8000d94 <__aeabi_l2f>
 8003868:	ee06 0a90 	vmov	s13, r0
 800386c:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <QEIEncoderPosVel_Update+0x124>)
 800386e:	edd3 7a00 	vldr	s15, [r3]
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	ee17 0a10 	vmov	r0, s14
 800387a:	f7fc fe31 	bl	80004e0 <__aeabi_f2d>
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <QEIEncoderPosVel_Update+0x128>)
 8003884:	f7fc fe84 	bl	8000590 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <QEIEncoderPosVel_Update+0x12c>)
 8003896:	f7fc fe7b 	bl	8000590 <__aeabi_dmul>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	a313      	add	r3, pc, #76	@ (adr r3, 80038f0 <QEIEncoderPosVel_Update+0x110>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fe72 	bl	8000590 <__aeabi_dmul>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f7fd f94e 	bl	8000b54 <__aeabi_d2f>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <QEIEncoderPosVel_Update+0x130>)
 80038bc:	6013      	str	r3, [r2, #0]
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.Positions[OLD] = QEIdata.Positions[NEW];
 80038be:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	490c      	ldr	r1, [pc, #48]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 80038c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 80038ca:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 80038cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038d0:	4909      	ldr	r1, [pc, #36]	@ (80038f8 <QEIEncoderPosVel_Update+0x118>)
 80038d2:	e9c1 2306 	strd	r2, r3, [r1, #24]

return diffVelocity;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <QEIEncoderPosVel_Update+0x130>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	ee07 3a90 	vmov	s15, r3
//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 80038de:	eeb0 0a67 	vmov.f32	s0, s15
 80038e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e6:	bf00      	nop
 80038e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80038ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80038f0:	cccccccd 	.word	0xcccccccd
 80038f4:	3fe4cccc 	.word	0x3fe4cccc
 80038f8:	20001218 	.word	0x20001218
 80038fc:	20000304 	.word	0x20000304
 8003900:	20001250 	.word	0x20001250
 8003904:	20001258 	.word	0x20001258
 8003908:	3f7e0000 	.word	0x3f7e0000
 800390c:	40590000 	.word	0x40590000
 8003910:	2000125c 	.word	0x2000125c

08003914 <ACC_Update>:

void ACC_Update()
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 8003918:	f7ff ff48 	bl	80037ac <micros>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4915      	ldr	r1, [pc, #84]	@ (8003978 <ACC_Update+0x64>)
 8003922:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.QEIAngularVelocity[NEW] =  QEIEncoderPosVel_Update();
 8003926:	f7ff ff5b 	bl	80037e0 <QEIEncoderPosVel_Update>
 800392a:	eef0 7a40 	vmov.f32	s15, s0
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <ACC_Update+0x64>)
 8003930:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
//diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
diffVelocitys = QEIdata.QEIAngularVelocity[NEW] - QEIdata.QEIAngularVelocity[OLD];
 8003934:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <ACC_Update+0x64>)
 8003936:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <ACC_Update+0x64>)
 800393c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <ACC_Update+0x68>)
 8003946:	edc3 7a00 	vstr	s15, [r3]
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
//calculate anglar velocity
QEIdata.QEILinearAcc = (diffVelocitys / diffTime);
 800394a:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <ACC_Update+0x68>)
 800394c:	edd3 6a00 	vldr	s13, [r3]
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <ACC_Update+0x6c>)
 8003952:	ed93 7a00 	vldr	s14, [r3]
 8003956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <ACC_Update+0x64>)
 800395c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.QEIAngularVelocity[OLD] = QEIdata.QEIAngularVelocity[NEW];
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <ACC_Update+0x64>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <ACC_Update+0x64>)
 8003966:	6293      	str	r3, [r2, #40]	@ 0x28
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <ACC_Update+0x64>)
 800396a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800396e:	4902      	ldr	r1, [pc, #8]	@ (8003978 <ACC_Update+0x64>)
 8003970:	e9c1 2306 	strd	r2, r3, [r1, #24]

//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20001218 	.word	0x20001218
 800397c:	20001260 	.word	0x20001260
 8003980:	20001258 	.word	0x20001258

08003984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003988:	b672      	cpsid	i
}
 800398a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <Error_Handler+0x8>

08003990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <HAL_MspInit+0x44>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_MspInit+0x44>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_MspInit+0x44>)
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_MspInit+0x44>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <HAL_MspInit+0x44>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_MspInit+0x44>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80039c6:	f001 fbcd 	bl	8005164 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08e      	sub	sp, #56	@ 0x38
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a72      	ldr	r2, [pc, #456]	@ (8003bc0 <HAL_TIM_Base_MspInit+0x1e8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d139      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039fa:	4b72      	ldr	r3, [pc, #456]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	4a71      	ldr	r2, [pc, #452]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a04:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a0e:	623b      	str	r3, [r7, #32]
 8003a10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a1e:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a2a:	2340      	movs	r3, #64	@ 0x40
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a2e:	2312      	movs	r3, #18
 8003a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a32:	2302      	movs	r3, #2
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a42:	4619      	mov	r1, r3
 8003a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a48:	f001 f91e 	bl	8004c88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2018      	movs	r0, #24
 8003a52:	f000 fdb2 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a56:	2018      	movs	r0, #24
 8003a58:	f000 fdc9 	bl	80045ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2019      	movs	r0, #25
 8003a62:	f000 fdaa 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a66:	2019      	movs	r0, #25
 8003a68:	f000 fdc1 	bl	80045ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a6c:	e0a3      	b.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a55      	ldr	r2, [pc, #340]	@ (8003bc8 <HAL_TIM_Base_MspInit+0x1f0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d137      	bne.n	8003ae8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a78:	4b52      	ldr	r3, [pc, #328]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a84:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8003a90:	4b4e      	ldr	r3, [pc, #312]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003a92:	4a4f      	ldr	r2, [pc, #316]	@ (8003bd0 <HAL_TIM_Base_MspInit+0x1f8>)
 8003a94:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003a96:	4b4d      	ldr	r3, [pc, #308]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003a98:	223e      	movs	r2, #62	@ 0x3e
 8003a9a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003aa8:	4b48      	ldr	r3, [pc, #288]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ab4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ab6:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003abc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003abe:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003ac4:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003aca:	4840      	ldr	r0, [pc, #256]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003acc:	f000 fdaa 	bl	8004624 <HAL_DMA_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 8003ad6:	f7ff ff55 	bl	8003984 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a3b      	ldr	r2, [pc, #236]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bcc <HAL_TIM_Base_MspInit+0x1f4>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003ae6:	e066      	b.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a39      	ldr	r2, [pc, #228]	@ (8003bd4 <HAL_TIM_Base_MspInit+0x1fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d114      	bne.n	8003b1c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003af2:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afe:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	201e      	movs	r0, #30
 8003b10:	f000 fd53 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b14:	201e      	movs	r0, #30
 8003b16:	f000 fd6a 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003b1a:	e04c      	b.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x200>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d114      	bne.n	8003b50 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b26:	4b27      	ldr	r3, [pc, #156]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4a26      	ldr	r2, [pc, #152]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2032      	movs	r0, #50	@ 0x32
 8003b44:	f000 fd39 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b48:	2032      	movs	r0, #50	@ 0x32
 8003b4a:	f000 fd50 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003b4e:	e032      	b.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a21      	ldr	r2, [pc, #132]	@ (8003bdc <HAL_TIM_Base_MspInit+0x204>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d114      	bne.n	8003b84 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b60:	f043 0320 	orr.w	r3, r3, #32
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b66:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2100      	movs	r1, #0
 8003b76:	2037      	movs	r0, #55	@ 0x37
 8003b78:	f000 fd1f 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003b7c:	2037      	movs	r0, #55	@ 0x37
 8003b7e:	f000 fd36 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003b82:	e018      	b.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a15      	ldr	r2, [pc, #84]	@ (8003be0 <HAL_TIM_Base_MspInit+0x208>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d113      	bne.n	8003bb6 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2019      	movs	r0, #25
 8003bac:	f000 fd05 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bb0:	2019      	movs	r0, #25
 8003bb2:	f000 fd1c 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3738      	adds	r7, #56	@ 0x38
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	200007cc 	.word	0x200007cc
 8003bd0:	40020030 	.word	0x40020030
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40001400 	.word	0x40001400
 8003be0:	40014400 	.word	0x40014400

08003be4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d128      	bne.n	8003c58 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c12:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	4a0f      	ldr	r2, [pc, #60]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003c36:	2322      	movs	r3, #34	@ 0x22
 8003c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c46:	2301      	movs	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c54:	f001 f818 	bl	8004c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c58:	bf00      	nop
 8003c5a:	3728      	adds	r7, #40	@ 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	@ 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a23      	ldr	r2, [pc, #140]	@ (8003d10 <HAL_TIM_MspPostInit+0xac>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d11e      	bne.n	8003cc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	4b23      	ldr	r3, [pc, #140]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a22      	ldr	r2, [pc, #136]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003cb0:	2306      	movs	r3, #6
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cbe:	f000 ffe3 	bl	8004c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003cc2:	e021      	b.n	8003d08 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <HAL_TIM_MspPostInit+0xb4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d11c      	bne.n	8003d08 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd2:	4a10      	ldr	r2, [pc, #64]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cda:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_TIM_MspPostInit+0xb0>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d04:	f000 ffc0 	bl	8004c88 <HAL_GPIO_Init>
}
 8003d08:	bf00      	nop
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40000400 	.word	0x40000400

08003d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b0a0      	sub	sp, #128	@ 0x80
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d34:	f107 0318 	add.w	r3, r7, #24
 8003d38:	2254      	movs	r2, #84	@ 0x54
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f006 fe9b 	bl	800aa78 <memset>
  if(huart->Instance==USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a80      	ldr	r2, [pc, #512]	@ (8003f48 <HAL_UART_MspInit+0x22c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d161      	bne.n	8003e10 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d54:	f107 0318 	add.w	r3, r7, #24
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 ff41 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d64:	f7ff fe0e 	bl	8003984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d68:	4b78      	ldr	r3, [pc, #480]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	4a77      	ldr	r2, [pc, #476]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d74:	4b75      	ldr	r3, [pc, #468]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d80:	4b72      	ldr	r3, [pc, #456]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d84:	4a71      	ldr	r2, [pc, #452]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d98:	2330      	movs	r3, #48	@ 0x30
 8003d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da4:	2300      	movs	r3, #0
 8003da6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003da8:	2307      	movs	r3, #7
 8003daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003db0:	4619      	mov	r1, r3
 8003db2:	4867      	ldr	r0, [pc, #412]	@ (8003f50 <HAL_UART_MspInit+0x234>)
 8003db4:	f000 ff68 	bl	8004c88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003db8:	4b66      	ldr	r3, [pc, #408]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dba:	4a67      	ldr	r2, [pc, #412]	@ (8003f58 <HAL_UART_MspInit+0x23c>)
 8003dbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003dbe:	4b65      	ldr	r3, [pc, #404]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dc0:	2218      	movs	r2, #24
 8003dc2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc4:	4b63      	ldr	r3, [pc, #396]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dca:	4b62      	ldr	r3, [pc, #392]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dd0:	4b60      	ldr	r3, [pc, #384]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dd2:	2280      	movs	r2, #128	@ 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003de2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003de4:	2220      	movs	r2, #32
 8003de6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003de8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003dea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003df0:	4858      	ldr	r0, [pc, #352]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003df2:	f000 fc17 	bl	8004624 <HAL_DMA_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003dfc:	f7ff fdc2 	bl	8003984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a54      	ldr	r2, [pc, #336]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003e08:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_UART_MspInit+0x238>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e0e:	e097      	b.n	8003f40 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a51      	ldr	r2, [pc, #324]	@ (8003f5c <HAL_UART_MspInit+0x240>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f040 8092 	bne.w	8003f40 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e20:	2300      	movs	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fed9 	bl	8005be0 <HAL_RCCEx_PeriphCLKConfig>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8003e34:	f7ff fda6 	bl	8003984 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e38:	4b44      	ldr	r3, [pc, #272]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	4a43      	ldr	r2, [pc, #268]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e44:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e50:	4b3e      	ldr	r3, [pc, #248]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e54:	4a3d      	ldr	r2, [pc, #244]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_UART_MspInit+0x230>)
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e68:	230c      	movs	r3, #12
 8003e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e74:	2300      	movs	r3, #0
 8003e76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e78:	2307      	movs	r3, #7
 8003e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e80:	4619      	mov	r1, r3
 8003e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e86:	f000 feff 	bl	8004c88 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003e8a:	4b35      	ldr	r3, [pc, #212]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003e8c:	4a35      	ldr	r2, [pc, #212]	@ (8003f64 <HAL_UART_MspInit+0x248>)
 8003e8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003e92:	221a      	movs	r2, #26
 8003e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e96:	4b32      	ldr	r3, [pc, #200]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e9c:	4b30      	ldr	r3, [pc, #192]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003ea4:	2280      	movs	r2, #128	@ 0x80
 8003ea6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eae:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ec0:	4827      	ldr	r0, [pc, #156]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003ec2:	f000 fbaf 	bl	8004624 <HAL_DMA_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003ecc:	f7ff fd5a 	bl	8003984 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ed8:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <HAL_UART_MspInit+0x244>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003ede:	4b22      	ldr	r3, [pc, #136]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003ee0:	4a22      	ldr	r2, [pc, #136]	@ (8003f6c <HAL_UART_MspInit+0x250>)
 8003ee2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003ee4:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003ee6:	221b      	movs	r2, #27
 8003ee8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eea:	4b1f      	ldr	r3, [pc, #124]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003eec:	2210      	movs	r2, #16
 8003eee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003ef8:	2280      	movs	r2, #128	@ 0x80
 8003efa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f02:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f0e:	4b16      	ldr	r3, [pc, #88]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f14:	4814      	ldr	r0, [pc, #80]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f16:	f000 fb85 	bl	8004624 <HAL_DMA_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003f20:	f7ff fd30 	bl	8003984 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <HAL_UART_MspInit+0x24c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f30:	2200      	movs	r2, #0
 8003f32:	2100      	movs	r1, #0
 8003f34:	2026      	movs	r0, #38	@ 0x26
 8003f36:	f000 fb40 	bl	80045ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f3a:	2026      	movs	r0, #38	@ 0x26
 8003f3c:	f000 fb57 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003f40:	bf00      	nop
 8003f42:	3780      	adds	r7, #128	@ 0x80
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	48000800 	.word	0x48000800
 8003f54:	200009c4 	.word	0x200009c4
 8003f58:	4002041c 	.word	0x4002041c
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	20000a24 	.word	0x20000a24
 8003f64:	4002001c 	.word	0x4002001c
 8003f68:	20000a84 	.word	0x20000a84
 8003f6c:	40020008 	.word	0x40020008

08003f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <NMI_Handler+0x4>

08003f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <HardFault_Handler+0x4>

08003f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <MemManage_Handler+0x4>

08003f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <BusFault_Handler+0x4>

08003f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <UsageFault_Handler+0x4>

08003f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fc6:	f000 f9dd 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003fd4:	4802      	ldr	r0, [pc, #8]	@ (8003fe0 <DMA1_Channel1_IRQHandler+0x10>)
 8003fd6:	f000 fd08 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000a84 	.word	0x20000a84

08003fe4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003fe8:	4802      	ldr	r0, [pc, #8]	@ (8003ff4 <DMA1_Channel2_IRQHandler+0x10>)
 8003fea:	f000 fcfe 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000a24 	.word	0x20000a24

08003ff8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ffc:	4802      	ldr	r0, [pc, #8]	@ (8004008 <DMA1_Channel3_IRQHandler+0x10>)
 8003ffe:	f000 fcf4 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200007cc 	.word	0x200007cc

0800400c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004010:	2020      	movs	r0, #32
 8004012:	f000 ffeb 	bl	8004fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004020:	4802      	ldr	r0, [pc, #8]	@ (800402c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004022:	f003 f821 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000238 	.word	0x20000238

08004030 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004034:	4803      	ldr	r0, [pc, #12]	@ (8004044 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004036:	f003 f817 	bl	8007068 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800403a:	4803      	ldr	r0, [pc, #12]	@ (8004048 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800403c:	f003 f814 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000238 	.word	0x20000238
 8004048:	20000700 	.word	0x20000700

0800404c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004050:	4802      	ldr	r0, [pc, #8]	@ (800405c <TIM4_IRQHandler+0x10>)
 8004052:	f003 f809 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000049c 	.word	0x2000049c

08004060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004064:	4802      	ldr	r0, [pc, #8]	@ (8004070 <USART2_IRQHandler+0x10>)
 8004066:	f004 ffc3 	bl	8008ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200008f8 	.word	0x200008f8

08004074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004078:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800407c:	f000 ffb6 	bl	8004fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004080:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004084:	f000 ffb2 	bl	8004fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}

0800408c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <TIM5_IRQHandler+0x10>)
 8004092:	f002 ffe9 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000568 	.word	0x20000568

080040a0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <TIM7_DAC_IRQHandler+0x10>)
 80040a6:	f002 ffdf 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000634 	.word	0x20000634

080040b4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040b8:	4802      	ldr	r0, [pc, #8]	@ (80040c4 <DMA2_Channel2_IRQHandler+0x10>)
 80040ba:	f000 fc96 	bl	80049ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200009c4 	.word	0x200009c4

080040c8 <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b09b      	sub	sp, #108	@ 0x6c
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 80040d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004208 <updateLED+0x140>)
 80040d6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80040da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 80040e0:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <updateLED+0x144>)
 80040e2:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80040e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80040f0:	e076      	b.n	80041e0 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 80040f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d032      	beq.n	8004164 <updateLED+0x9c>
 80040fe:	2b03      	cmp	r3, #3
 8004100:	dc46      	bgt.n	8004190 <updateLED+0xc8>
 8004102:	2b01      	cmp	r3, #1
 8004104:	d002      	beq.n	800410c <updateLED+0x44>
 8004106:	2b02      	cmp	r3, #2
 8004108:	d016      	beq.n	8004138 <updateLED+0x70>
 800410a:	e041      	b.n	8004190 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 800410c:	f107 0414 	add.w	r4, r7, #20
 8004110:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 800411a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800411e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004128:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800412c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8004136:	e041      	b.n	80041bc <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 8004138:	f107 0414 	add.w	r4, r7, #20
 800413c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8004146:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800414a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800414e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004154:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004158:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800415c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800415e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8004162:	e02b      	b.n	80041bc <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8004164:	f107 0414 	add.w	r4, r7, #20
 8004168:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800416c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800416e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8004172:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004176:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800417a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800417c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8004180:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004184:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800418a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800418e:	e015      	b.n	80041bc <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8004190:	f107 0414 	add.w	r4, r7, #20
 8004194:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800419a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800419e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80041a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 80041ac:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80041b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 80041ba:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 80041bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	333c      	adds	r3, #60	@ 0x3c
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <updateLED+0x148>)
 80041cc:	4413      	add	r3, r2
 80041ce:	f107 0114 	add.w	r1, r7, #20
 80041d2:	2230      	movs	r2, #48	@ 0x30
 80041d4:	4618      	mov	r0, r3
 80041d6:	f006 fc7b 	bl	800aad0 <memcpy>
	for (int i = 0; i < 3; i++){
 80041da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041dc:	3301      	adds	r3, #1
 80041de:	667b      	str	r3, [r7, #100]	@ 0x64
 80041e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	dd85      	ble.n	80040f2 <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 80041e6:	2278      	movs	r2, #120	@ 0x78
 80041e8:	2100      	movs	r1, #0
 80041ea:	4809      	ldr	r0, [pc, #36]	@ (8004210 <updateLED+0x148>)
 80041ec:	f006 fc44 	bl	800aa78 <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 80041f0:	2384      	movs	r3, #132	@ 0x84
 80041f2:	4a07      	ldr	r2, [pc, #28]	@ (8004210 <updateLED+0x148>)
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68b8      	ldr	r0, [r7, #8]
 80041f8:	f002 fa3c 	bl	8006674 <HAL_TIM_PWM_Start_DMA>
 80041fc:	4603      	mov	r3, r0

}
 80041fe:	4618      	mov	r0, r3
 8004200:	376c      	adds	r7, #108	@ 0x6c
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	0800ab04 	.word	0x0800ab04
 800420c:	0800ab14 	.word	0x0800ab14
 8004210:	20001298 	.word	0x20001298

08004214 <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 800421a:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800421e:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 8004220:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004224:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 8004226:	f000 f8bf 	bl	80043a8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 8004232:	2100      	movs	r1, #0
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f7ff f9fd 	bl	8003634 <serviceMotor>

	while(HAL_GetTick() < Timeout){
 800423a:	e00a      	b.n	8004252 <HomeZ+0x3e>
		if(getZStop() == 1){
 800423c:	f7ff fa22 	bl	8003684 <getZStop>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HomeZ+0x3e>
			//HAL_Delay(50);
			serviceMotor(0, 0);
 8004246:	2100      	movs	r1, #0
 8004248:	2000      	movs	r0, #0
 800424a:	f7ff f9f3 	bl	8003634 <serviceMotor>
			return 0;
 800424e:	2300      	movs	r3, #0
 8004250:	e006      	b.n	8004260 <HomeZ+0x4c>
	while(HAL_GetTick() < Timeout){
 8004252:	f000 f8a9 	bl	80043a8 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4293      	cmp	r3, r2
 800425c:	d8ee      	bhi.n	800423c <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 800425e:	2301      	movs	r3, #1

}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <SystemInit+0x20>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <SystemInit+0x20>)
 8004274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800428c:	480d      	ldr	r0, [pc, #52]	@ (80042c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800428e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004290:	f7ff ffea 	bl	8004268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004294:	480c      	ldr	r0, [pc, #48]	@ (80042c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004296:	490d      	ldr	r1, [pc, #52]	@ (80042cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004298:	4a0d      	ldr	r2, [pc, #52]	@ (80042d0 <LoopForever+0xe>)
  movs r3, #0
 800429a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800429c:	e002      	b.n	80042a4 <LoopCopyDataInit>

0800429e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a2:	3304      	adds	r3, #4

080042a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a8:	d3f9      	bcc.n	800429e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042aa:	4a0a      	ldr	r2, [pc, #40]	@ (80042d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042ac:	4c0a      	ldr	r4, [pc, #40]	@ (80042d8 <LoopForever+0x16>)
  movs r3, #0
 80042ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b0:	e001      	b.n	80042b6 <LoopFillZerobss>

080042b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b4:	3204      	adds	r2, #4

080042b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b8:	d3fb      	bcc.n	80042b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042ba:	f006 fbe5 	bl	800aa88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042be:	f7fd fa53 	bl	8001768 <main>

080042c2 <LoopForever>:

LoopForever:
    b LoopForever
 80042c2:	e7fe      	b.n	80042c2 <LoopForever>
  ldr   r0, =_estack
 80042c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80042d0:	0800ab74 	.word	0x0800ab74
  ldr r2, =_sbss
 80042d4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80042d8:	200013a4 	.word	0x200013a4

080042dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC1_2_IRQHandler>

080042de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042e8:	2003      	movs	r0, #3
 80042ea:	f000 f95b 	bl	80045a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ee:	2000      	movs	r0, #0
 80042f0:	f000 f80e 	bl	8004310 <HAL_InitTick>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	71fb      	strb	r3, [r7, #7]
 80042fe:	e001      	b.n	8004304 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004300:	f7ff fb46 	bl	8003990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004304:	79fb      	ldrb	r3, [r7, #7]

}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800431c:	4b16      	ldr	r3, [pc, #88]	@ (8004378 <HAL_InitTick+0x68>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d022      	beq.n	800436a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_InitTick+0x6c>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <HAL_InitTick+0x68>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004330:	fbb1 f3f3 	udiv	r3, r1, r3
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f966 	bl	800460a <HAL_SYSTICK_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10f      	bne.n	8004364 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b0f      	cmp	r3, #15
 8004348:	d809      	bhi.n	800435e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800434a:	2200      	movs	r2, #0
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	f000 f932 	bl	80045ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004356:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <HAL_InitTick+0x70>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e007      	b.n	800436e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
 8004362:	e004      	b.n	800436e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e001      	b.n	800436e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000214 	.word	0x20000214
 800437c:	2000020c 	.word	0x2000020c
 8004380:	20000210 	.word	0x20000210

08004384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_IncTick+0x1c>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_IncTick+0x20>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4413      	add	r3, r2
 8004392:	4a03      	ldr	r2, [pc, #12]	@ (80043a0 <HAL_IncTick+0x1c>)
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	200013a0 	.word	0x200013a0
 80043a4:	20000214 	.word	0x20000214

080043a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return uwTick;
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_GetTick+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	200013a0 	.word	0x200013a0

080043c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7ff ffee 	bl	80043a8 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d004      	beq.n	80043e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80043da:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <HAL_Delay+0x40>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043e4:	bf00      	nop
 80043e6:	f7ff ffdf 	bl	80043a8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d8f7      	bhi.n	80043e6 <HAL_Delay+0x26>
  {
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000214 	.word	0x20000214

08004404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004414:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800442c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004436:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	60d3      	str	r3, [r2, #12]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <__NVIC_GetPriorityGrouping+0x18>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	f003 0307 	and.w	r3, r3, #7
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0b      	blt.n	8004492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4907      	ldr	r1, [pc, #28]	@ (80044a0 <__NVIC_EnableIRQ+0x38>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2001      	movs	r0, #1
 800448a:	fa00 f202 	lsl.w	r2, r0, r2
 800448e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	490c      	ldr	r1, [pc, #48]	@ (80044f0 <__NVIC_SetPriority+0x4c>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044cc:	e00a      	b.n	80044e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4908      	ldr	r1, [pc, #32]	@ (80044f4 <__NVIC_SetPriority+0x50>)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	3b04      	subs	r3, #4
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	440b      	add	r3, r1
 80044e2:	761a      	strb	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e100 	.word	0xe000e100
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	@ 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f1c3 0307 	rsb	r3, r3, #7
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf28      	it	cs
 8004516:	2304      	movcs	r3, #4
 8004518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3304      	adds	r3, #4
 800451e:	2b06      	cmp	r3, #6
 8004520:	d902      	bls.n	8004528 <NVIC_EncodePriority+0x30>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3b03      	subs	r3, #3
 8004526:	e000      	b.n	800452a <NVIC_EncodePriority+0x32>
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004540:	f04f 31ff 	mov.w	r1, #4294967295
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43d9      	mvns	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	4313      	orrs	r3, r2
         );
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	@ 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004570:	d301      	bcc.n	8004576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004572:	2301      	movs	r3, #1
 8004574:	e00f      	b.n	8004596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <SysTick_Config+0x40>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457e:	210f      	movs	r1, #15
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f7ff ff8e 	bl	80044a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <SysTick_Config+0x40>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <SysTick_Config+0x40>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff29 	bl	8004404 <__NVIC_SetPriorityGrouping>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b086      	sub	sp, #24
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045c8:	f7ff ff40 	bl	800444c <__NVIC_GetPriorityGrouping>
 80045cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff ff90 	bl	80044f8 <NVIC_EncodePriority>
 80045d8:	4602      	mov	r2, r0
 80045da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff5f 	bl	80044a4 <__NVIC_SetPriority>
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff33 	bl	8004468 <__NVIC_EnableIRQ>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ffa4 	bl	8004560 <SysTick_Config>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e08d      	b.n	8004752 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	4b47      	ldr	r3, [pc, #284]	@ (800475c <HAL_DMA_Init+0x138>)
 800463e:	429a      	cmp	r2, r3
 8004640:	d80f      	bhi.n	8004662 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	4b45      	ldr	r3, [pc, #276]	@ (8004760 <HAL_DMA_Init+0x13c>)
 800464a:	4413      	add	r3, r2
 800464c:	4a45      	ldr	r2, [pc, #276]	@ (8004764 <HAL_DMA_Init+0x140>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a42      	ldr	r2, [pc, #264]	@ (8004768 <HAL_DMA_Init+0x144>)
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004660:	e00e      	b.n	8004680 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	4b40      	ldr	r3, [pc, #256]	@ (800476c <HAL_DMA_Init+0x148>)
 800466a:	4413      	add	r3, r2
 800466c:	4a3d      	ldr	r2, [pc, #244]	@ (8004764 <HAL_DMA_Init+0x140>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a3c      	ldr	r2, [pc, #240]	@ (8004770 <HAL_DMA_Init+0x14c>)
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa76 	bl	8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e0:	d102      	bne.n	80046e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_DMA_Init+0x104>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d80c      	bhi.n	8004728 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa96 	bl	8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e008      	b.n	800473a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40020407 	.word	0x40020407
 8004760:	bffdfff8 	.word	0xbffdfff8
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020000 	.word	0x40020000
 800476c:	bffdfbf8 	.word	0xbffdfbf8
 8004770:	40020400 	.word	0x40020400

08004774 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Start_IT+0x20>
 8004790:	2302      	movs	r3, #2
 8004792:	e066      	b.n	8004862 <HAL_DMA_Start_IT+0xee>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d155      	bne.n	8004854 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f9bb 	bl	8004b48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 020e 	orr.w	r2, r2, #14
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e00f      	b.n	800480c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 020a 	orr.w	r2, r2, #10
 800480a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004828:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004840:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e005      	b.n	8004860 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d005      	beq.n	800488e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2204      	movs	r2, #4
 8004886:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e037      	b.n	80048fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 020e 	bic.w	r2, r2, #14
 800489c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f003 021f 	and.w	r2, r3, #31
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d00d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2204      	movs	r2, #4
 8004938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e047      	b.n	80049e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020e 	bic.w	r2, r2, #14
 800495e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800497e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800499c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    }
  }
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d026      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7a>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d021      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0204 	bic.w	r2, r2, #4
 8004a3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f003 021f 	and.w	r2, r3, #31
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d071      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a62:	e06c      	b.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02e      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d029      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 020a 	bic.w	r2, r2, #10
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d038      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ad4:	e033      	b.n	8004b3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2208      	movs	r2, #8
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02a      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d025      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
}
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	f003 021f 	and.w	r2, r3, #31
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d108      	bne.n	8004ba8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ba6:	e007      	b.n	8004bb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b16      	ldr	r3, [pc, #88]	@ (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d802      	bhi.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e001      	b.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004be0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3b08      	subs	r3, #8
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2201      	movs	r2, #1
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40020407 	.word	0x40020407
 8004c30:	40020800 	.word	0x40020800
 8004c34:	40020820 	.word	0x40020820
 8004c38:	cccccccd 	.word	0xcccccccd
 8004c3c:	40020880 	.word	0x40020880

08004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a08      	ldr	r2, [pc, #32]	@ (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	1000823f 	.word	0x1000823f
 8004c84:	40020940 	.word	0x40020940

08004c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c96:	e15a      	b.n	8004f4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 814c 	beq.w	8004f48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d005      	beq.n	8004cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d130      	bne.n	8004d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cfe:	2201      	movs	r2, #1
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 0201 	and.w	r2, r3, #1
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d017      	beq.n	8004d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d123      	bne.n	8004dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	08da      	lsrs	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3208      	adds	r2, #8
 8004d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	220f      	movs	r2, #15
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	08da      	lsrs	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3208      	adds	r2, #8
 8004db4:	6939      	ldr	r1, [r7, #16]
 8004db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0203 	and.w	r2, r3, #3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80a6 	beq.w	8004f48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f6c <HAL_GPIO_Init+0x2e4>)
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e00:	4a5a      	ldr	r2, [pc, #360]	@ (8004f6c <HAL_GPIO_Init+0x2e4>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e08:	4b58      	ldr	r3, [pc, #352]	@ (8004f6c <HAL_GPIO_Init+0x2e4>)
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e14:	4a56      	ldr	r2, [pc, #344]	@ (8004f70 <HAL_GPIO_Init+0x2e8>)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	089b      	lsrs	r3, r3, #2
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	220f      	movs	r2, #15
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e3e:	d01f      	beq.n	8004e80 <HAL_GPIO_Init+0x1f8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a4c      	ldr	r2, [pc, #304]	@ (8004f74 <HAL_GPIO_Init+0x2ec>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d019      	beq.n	8004e7c <HAL_GPIO_Init+0x1f4>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a4b      	ldr	r2, [pc, #300]	@ (8004f78 <HAL_GPIO_Init+0x2f0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <HAL_GPIO_Init+0x1f0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <HAL_GPIO_Init+0x2f4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00d      	beq.n	8004e74 <HAL_GPIO_Init+0x1ec>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a49      	ldr	r2, [pc, #292]	@ (8004f80 <HAL_GPIO_Init+0x2f8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <HAL_GPIO_Init+0x1e8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a48      	ldr	r2, [pc, #288]	@ (8004f84 <HAL_GPIO_Init+0x2fc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_GPIO_Init+0x1e4>
 8004e68:	2305      	movs	r3, #5
 8004e6a:	e00a      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e6c:	2306      	movs	r3, #6
 8004e6e:	e008      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e70:	2304      	movs	r3, #4
 8004e72:	e006      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e74:	2303      	movs	r3, #3
 8004e76:	e004      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e002      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_GPIO_Init+0x1fa>
 8004e80:	2300      	movs	r3, #0
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	f002 0203 	and.w	r2, r2, #3
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	4093      	lsls	r3, r2
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e92:	4937      	ldr	r1, [pc, #220]	@ (8004f70 <HAL_GPIO_Init+0x2e8>)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ea0:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ec4:	4a30      	ldr	r2, [pc, #192]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eca:	4b2f      	ldr	r3, [pc, #188]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eee:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ef4:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4013      	ands	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f18:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f42:	4a11      	ldr	r2, [pc, #68]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f ae9d 	bne.w	8004c98 <HAL_GPIO_Init+0x10>
  }
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40010000 	.word	0x40010000
 8004f74:	48000400 	.word	0x48000400
 8004f78:	48000800 	.word	0x48000800
 8004f7c:	48000c00 	.word	0x48000c00
 8004f80:	48001000 	.word	0x48001000
 8004f84:	48001400 	.word	0x48001400
 8004f88:	40010400 	.word	0x40010400

08004f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e001      	b.n	8004fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd8:	e002      	b.n	8004fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005002:	4a05      	ldr	r2, [pc, #20]	@ (8005018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fb46 	bl	800369c <HAL_GPIO_EXTI_Callback>
  }
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40010400 	.word	0x40010400

0800501c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d141      	bne.n	80050ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800502a:	4b4b      	ldr	r3, [pc, #300]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d131      	bne.n	800509c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005038:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503e:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005048:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005050:	4a41      	ldr	r2, [pc, #260]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005058:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2232      	movs	r2, #50	@ 0x32
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	4a3f      	ldr	r2, [pc, #252]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	0c9b      	lsrs	r3, r3, #18
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506e:	e002      	b.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005076:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005082:	d102      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f2      	bne.n	8005070 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800508a:	4b33      	ldr	r3, [pc, #204]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005096:	d158      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e057      	b.n	800514c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050ac:	e04d      	b.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b4:	d141      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b6:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c2:	d131      	bne.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c4:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ca:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050e4:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2232      	movs	r2, #50	@ 0x32
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	0c9b      	lsrs	r3, r3, #18
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fa:	e002      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800510e:	d102      	bne.n	8005116 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f2      	bne.n	80050fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005122:	d112      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e011      	b.n	800514c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005138:	e007      	b.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800513a:	4b07      	ldr	r3, [pc, #28]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005142:	4a05      	ldr	r2, [pc, #20]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005148:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40007000 	.word	0x40007000
 800515c:	2000020c 	.word	0x2000020c
 8005160:	431bde83 	.word	0x431bde83

08005164 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800516e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005172:	6093      	str	r3, [r2, #8]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40007000 	.word	0x40007000

08005184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e2fe      	b.n	8005794 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d075      	beq.n	800528e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a2:	4b97      	ldr	r3, [pc, #604]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ac:	4b94      	ldr	r3, [pc, #592]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d102      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3e>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d002      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05b      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d157      	bne.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e2d9      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d106      	bne.n	80051f8 <HAL_RCC_OscConfig+0x74>
 80051ea:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a84      	ldr	r2, [pc, #528]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b7f      	ldr	r3, [pc, #508]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7e      	ldr	r2, [pc, #504]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b7c      	ldr	r3, [pc, #496]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 800521c:	4b78      	ldr	r3, [pc, #480]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a77      	ldr	r2, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b75      	ldr	r3, [pc, #468]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a74      	ldr	r2, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7ff f8b4 	bl	80043a8 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7ff f8b0 	bl	80043a8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e29e      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xc0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7ff f8a0 	bl	80043a8 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7ff f89c 	bl	80043a8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e28a      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d075      	beq.n	8005386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a4:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_OscConfig+0x136>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d002      	beq.n	80052c0 <HAL_RCC_OscConfig+0x13c>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d11f      	bne.n	8005300 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_OscConfig+0x154>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e25d      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d8:	4b49      	ldr	r3, [pc, #292]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	4946      	ldr	r1, [pc, #280]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052ec:	4b45      	ldr	r3, [pc, #276]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff f80d 	bl	8004310 <HAL_InitTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d043      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e249      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d023      	beq.n	8005350 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005308:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7ff f848 	bl	80043a8 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7ff f844 	bl	80043a8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e232      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532e:	4b34      	ldr	r3, [pc, #208]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	061b      	lsls	r3, r3, #24
 8005348:	492d      	ldr	r1, [pc, #180]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
 800534e:	e01a      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005350:	4b2b      	ldr	r3, [pc, #172]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2a      	ldr	r2, [pc, #168]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005356:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7ff f824 	bl	80043a8 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005364:	f7ff f820 	bl	80043a8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e20e      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d041      	beq.n	8005416 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539a:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800539c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a0:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fe fffd 	bl	80043a8 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fe fff9 	bl	80043a8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e1e7      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ef      	beq.n	80053b2 <HAL_RCC_OscConfig+0x22e>
 80053d2:	e020      	b.n	8005416 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fe ffe0 	bl	80043a8 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ea:	e00d      	b.n	8005408 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fe ffdc 	bl	80043a8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d906      	bls.n	8005408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e1ca      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005408:	4b8c      	ldr	r3, [pc, #560]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ea      	bne.n	80053ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a6 	beq.w	8005570 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005428:	4b84      	ldr	r3, [pc, #528]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x2b4>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x2b6>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b7f      	ldr	r3, [pc, #508]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a7e      	ldr	r2, [pc, #504]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
 800544a:	4b7c      	ldr	r3, [pc, #496]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005456:	2301      	movs	r3, #1
 8005458:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545a:	4b79      	ldr	r3, [pc, #484]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d118      	bne.n	8005498 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005466:	4b76      	ldr	r3, [pc, #472]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a75      	ldr	r2, [pc, #468]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005472:	f7fe ff99 	bl	80043a8 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fe ff95 	bl	80043a8 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e183      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800548c:	4b6c      	ldr	r3, [pc, #432]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <HAL_RCC_OscConfig+0x32e>
 80054a0:	4b66      	ldr	r3, [pc, #408]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	4a65      	ldr	r2, [pc, #404]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b0:	e024      	b.n	80054fc <HAL_RCC_OscConfig+0x378>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d110      	bne.n	80054dc <HAL_RCC_OscConfig+0x358>
 80054ba:	4b60      	ldr	r3, [pc, #384]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c0:	4a5e      	ldr	r2, [pc, #376]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f043 0304 	orr.w	r3, r3, #4
 80054c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ca:	4b5c      	ldr	r3, [pc, #368]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d0:	4a5a      	ldr	r2, [pc, #360]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054da:	e00f      	b.n	80054fc <HAL_RCC_OscConfig+0x378>
 80054dc:	4b57      	ldr	r3, [pc, #348]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	4a56      	ldr	r2, [pc, #344]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ec:	4b53      	ldr	r3, [pc, #332]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	4a52      	ldr	r2, [pc, #328]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fe ff50 	bl	80043a8 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fe ff4c 	bl	80043a8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e138      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005522:	4b46      	ldr	r3, [pc, #280]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ed      	beq.n	800550c <HAL_RCC_OscConfig+0x388>
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005532:	f7fe ff39 	bl	80043a8 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005538:	e00a      	b.n	8005550 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fe ff35 	bl	80043a8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e121      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005550:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ed      	bne.n	800553a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b35      	ldr	r3, [pc, #212]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	4a34      	ldr	r2, [pc, #208]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d03c      	beq.n	80055f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01c      	beq.n	80055be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005584:	4b2d      	ldr	r3, [pc, #180]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	4a2c      	ldr	r2, [pc, #176]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fe ff08 	bl	80043a8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559c:	f7fe ff04 	bl	80043a8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0f2      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0ef      	beq.n	800559c <HAL_RCC_OscConfig+0x418>
 80055bc:	e01b      	b.n	80055f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055be:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fe feeb 	bl	80043a8 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d6:	f7fe fee7 	bl	80043a8 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0d5      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e8:	4b14      	ldr	r3, [pc, #80]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ef      	bne.n	80055d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80c9 	beq.w	8005792 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005600:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b0c      	cmp	r3, #12
 800560a:	f000 8083 	beq.w	8005714 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d15e      	bne.n	80056d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a08      	ldr	r2, [pc, #32]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800561c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7fe fec1 	bl	80043a8 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	e00c      	b.n	8005644 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562a:	f7fe febd 	bl	80043a8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d905      	bls.n	8005644 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0ab      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005644:	4b55      	ldr	r3, [pc, #340]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ec      	bne.n	800562a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005650:	4b52      	ldr	r3, [pc, #328]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4b52      	ldr	r3, [pc, #328]	@ (80057a0 <HAL_RCC_OscConfig+0x61c>)
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6a11      	ldr	r1, [r2, #32]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005660:	3a01      	subs	r2, #1
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	4311      	orrs	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800566a:	0212      	lsls	r2, r2, #8
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005672:	0852      	lsrs	r2, r2, #1
 8005674:	3a01      	subs	r2, #1
 8005676:	0552      	lsls	r2, r2, #21
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800567e:	0852      	lsrs	r2, r2, #1
 8005680:	3a01      	subs	r2, #1
 8005682:	0652      	lsls	r2, r2, #25
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800568a:	06d2      	lsls	r2, r2, #27
 800568c:	430a      	orrs	r2, r1
 800568e:	4943      	ldr	r1, [pc, #268]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005690:	4313      	orrs	r3, r2
 8005692:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005694:	4b41      	ldr	r3, [pc, #260]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a40      	ldr	r2, [pc, #256]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a0:	4b3e      	ldr	r3, [pc, #248]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a3d      	ldr	r2, [pc, #244]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fe fe7c 	bl	80043a8 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fe fe78 	bl	80043a8 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e066      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	4b35      	ldr	r3, [pc, #212]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x530>
 80056d2:	e05e      	b.n	8005792 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d4:	4b31      	ldr	r3, [pc, #196]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fe fe62 	bl	80043a8 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fe fe5e 	bl	80043a8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04c      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fa:	4b28      	ldr	r3, [pc, #160]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005706:	4b25      	ldr	r3, [pc, #148]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	4924      	ldr	r1, [pc, #144]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <HAL_RCC_OscConfig+0x620>)
 800570e:	4013      	ands	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
 8005712:	e03e      	b.n	8005792 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e039      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005720:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	429a      	cmp	r2, r3
 8005732:	d12c      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	3b01      	subs	r3, #1
 8005740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d123      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d11b      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d113      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	3b01      	subs	r3, #1
 8005774:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d109      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	3b01      	subs	r3, #1
 8005788:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	019f800c 	.word	0x019f800c
 80057a4:	feeefffc 	.word	0xfeeefffc

080057a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e11e      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b91      	ldr	r3, [pc, #580]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d910      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 020f 	bic.w	r2, r3, #15
 80057d6:	498c      	ldr	r1, [pc, #560]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b8a      	ldr	r3, [pc, #552]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e106      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d073      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d129      	bne.n	8005858 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005804:	4b81      	ldr	r3, [pc, #516]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0f4      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005814:	f000 f99e 	bl	8005b54 <RCC_GetSysClockFreqFromPLLSource>
 8005818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a10 <HAL_RCC_ClockConfig+0x268>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d93f      	bls.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005822:	4b7a      	ldr	r3, [pc, #488]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005836:	2b00      	cmp	r3, #0
 8005838:	d033      	beq.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800583e:	2b00      	cmp	r3, #0
 8005840:	d12f      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005842:	4b72      	ldr	r3, [pc, #456]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584a:	4a70      	ldr	r2, [pc, #448]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 800584c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005850:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e024      	b.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d107      	bne.n	8005870 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005860:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0c6      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005870:	4b66      	ldr	r3, [pc, #408]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0be      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005880:	f000 f8ce 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8005884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4a61      	ldr	r2, [pc, #388]	@ (8005a10 <HAL_RCC_ClockConfig+0x268>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d909      	bls.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800588e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005896:	4a5d      	ldr	r2, [pc, #372]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b5a      	ldr	r3, [pc, #360]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4957      	ldr	r1, [pc, #348]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b4:	f7fe fd78 	bl	80043a8 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fe fd74 	bl	80043a8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e095      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058fc:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a42      	ldr	r2, [pc, #264]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005906:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005914:	4b3d      	ldr	r3, [pc, #244]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800591c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 800591e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005922:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b39      	ldr	r3, [pc, #228]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4936      	ldr	r1, [pc, #216]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
 8005936:	e008      	b.n	800594a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b80      	cmp	r3, #128	@ 0x80
 800593c:	d105      	bne.n	800594a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800593e:	4b33      	ldr	r3, [pc, #204]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4a32      	ldr	r2, [pc, #200]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005944:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005948:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d21d      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005958:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 020f 	bic.w	r2, r3, #15
 8005960:	4929      	ldr	r1, [pc, #164]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005968:	f7fe fd1e 	bl	80043a8 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005970:	f7fe fd1a 	bl	80043a8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e03b      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b20      	ldr	r3, [pc, #128]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d1ed      	bne.n	8005970 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4917      	ldr	r1, [pc, #92]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059be:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	490f      	ldr	r1, [pc, #60]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059d2:	f000 f825 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	490c      	ldr	r1, [pc, #48]	@ (8005a14 <HAL_RCC_ClockConfig+0x26c>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005a18 <HAL_RCC_ClockConfig+0x270>)
 80059f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059f2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <HAL_RCC_ClockConfig+0x274>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fc8a 	bl	8004310 <HAL_InitTick>
 80059fc:	4603      	mov	r3, r0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	04c4b400 	.word	0x04c4b400
 8005a14:	0800ab24 	.word	0x0800ab24
 8005a18:	2000020c 	.word	0x2000020c
 8005a1c:	20000210 	.word	0x20000210

08005a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d102      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a32:	4b2a      	ldr	r3, [pc, #168]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e047      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d102      	bne.n	8005a4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a44:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e03e      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d136      	bne.n	8005ac4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a56:	4b20      	ldr	r3, [pc, #128]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d10c      	bne.n	8005a8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7e:	68d2      	ldr	r2, [r2, #12]
 8005a80:	0a12      	lsrs	r2, r2, #8
 8005a82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	617b      	str	r3, [r7, #20]
      break;
 8005a8c:	e00c      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a8e:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	4a10      	ldr	r2, [pc, #64]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	0a12      	lsrs	r2, r2, #8
 8005a9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
      break;
 8005aa6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	0e5b      	lsrs	r3, r3, #25
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e001      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ac8:	693b      	ldr	r3, [r7, #16]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	016e3600 	.word	0x016e3600

08005ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000020c 	.word	0x2000020c

08005afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b00:	f7ff fff0 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	4904      	ldr	r1, [pc, #16]	@ (8005b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b12:	5ccb      	ldrb	r3, [r1, r3]
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	0800ab34 	.word	0x0800ab34

08005b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b2c:	f7ff ffda 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0adb      	lsrs	r3, r3, #11
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4904      	ldr	r1, [pc, #16]	@ (8005b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	0800ab34 	.word	0x0800ab34

08005b54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b64:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d10c      	bne.n	8005b92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b78:	4a17      	ldr	r2, [pc, #92]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b82:	68d2      	ldr	r2, [r2, #12]
 8005b84:	0a12      	lsrs	r2, r2, #8
 8005b86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	617b      	str	r3, [r7, #20]
    break;
 8005b90:	e00c      	b.n	8005bac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b92:	4a12      	ldr	r2, [pc, #72]	@ (8005bdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b9c:	68d2      	ldr	r2, [r2, #12]
 8005b9e:	0a12      	lsrs	r2, r2, #8
 8005ba0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
    break;
 8005baa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	0e5b      	lsrs	r3, r3, #25
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bc6:	687b      	ldr	r3, [r7, #4]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	016e3600 	.word	0x016e3600
 8005bdc:	00f42400 	.word	0x00f42400

08005be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be8:	2300      	movs	r3, #0
 8005bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bec:	2300      	movs	r3, #0
 8005bee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8098 	beq.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c02:	4b43      	ldr	r3, [pc, #268]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0e:	4b40      	ldr	r3, [pc, #256]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	4a3f      	ldr	r2, [pc, #252]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c26:	2301      	movs	r3, #1
 8005c28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a39      	ldr	r2, [pc, #228]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c36:	f7fe fbb7 	bl	80043a8 <HAL_GetTick>
 8005c3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3c:	e009      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3e:	f7fe fbb3 	bl	80043a8 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d902      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c50:	e005      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c52:	4b30      	ldr	r3, [pc, #192]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ef      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c5e:	7cfb      	ldrb	r3, [r7, #19]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d159      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c64:	4b2a      	ldr	r3, [pc, #168]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c80:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c8c:	4b20      	ldr	r3, [pc, #128]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c92:	4a1f      	ldr	r2, [pc, #124]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fe fb73 	bl	80043a8 <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc4:	e00b      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fe fb6f 	bl	80043a8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d902      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	74fb      	strb	r3, [r7, #19]
            break;
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cde:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0ec      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cec:	7cfb      	ldrb	r3, [r7, #19]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d00:	4903      	ldr	r1, [pc, #12]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d08:	e008      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	74bb      	strb	r3, [r7, #18]
 8005d0e:	e005      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1c:	7c7b      	ldrb	r3, [r7, #17]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d105      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d22:	4ba7      	ldr	r3, [pc, #668]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	4aa6      	ldr	r2, [pc, #664]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f023 0203 	bic.w	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	499d      	ldr	r1, [pc, #628]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d5c:	4b98      	ldr	r3, [pc, #608]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	f023 020c 	bic.w	r2, r3, #12
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4995      	ldr	r1, [pc, #596]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d7e:	4b90      	ldr	r3, [pc, #576]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	498c      	ldr	r1, [pc, #560]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005da0:	4b87      	ldr	r3, [pc, #540]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	4984      	ldr	r1, [pc, #528]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	497b      	ldr	r1, [pc, #492]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005de4:	4b76      	ldr	r3, [pc, #472]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	4973      	ldr	r1, [pc, #460]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e06:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	496a      	ldr	r1, [pc, #424]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e28:	4b65      	ldr	r3, [pc, #404]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	4962      	ldr	r1, [pc, #392]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	4959      	ldr	r1, [pc, #356]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e6c:	4b54      	ldr	r3, [pc, #336]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e72:	f023 0203 	bic.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	4951      	ldr	r1, [pc, #324]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4948      	ldr	r1, [pc, #288]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eb0:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	4940      	ldr	r1, [pc, #256]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ece:	d105      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ee8:	4b35      	ldr	r3, [pc, #212]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef6:	4932      	ldr	r1, [pc, #200]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f08:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f20:	4b27      	ldr	r3, [pc, #156]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	4924      	ldr	r1, [pc, #144]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f66:	4916      	ldr	r1, [pc, #88]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f76:	d105      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a10      	ldr	r2, [pc, #64]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d019      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	4908      	ldr	r1, [pc, #32]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fae:	d109      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb0:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4a02      	ldr	r2, [pc, #8]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fba:	60d3      	str	r3, [r2, #12]
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fd0:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	4926      	ldr	r1, [pc, #152]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fee:	d105      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ff0:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a20      	ldr	r2, [pc, #128]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d015      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006008:	4b1b      	ldr	r3, [pc, #108]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006016:	4918      	ldr	r1, [pc, #96]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006026:	d105      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a12      	ldr	r2, [pc, #72]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006032:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d015      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006040:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800604e:	490a      	ldr	r1, [pc, #40]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800605e:	d105      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006060:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a04      	ldr	r2, [pc, #16]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800606c:	7cbb      	ldrb	r3, [r7, #18]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000

0800607c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e054      	b.n	8006138 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d111      	bne.n	80060be <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f002 faac 	bl	8008600 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a23      	ldr	r2, [pc, #140]	@ (8006140 <HAL_TIM_Base_Init+0xc4>)
 80060b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f001 fdf5 	bl	8007cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	080039d9 	.word	0x080039d9

08006144 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04c      	b.n	80061f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a26      	ldr	r2, [pc, #152]	@ (8006204 <HAL_TIM_Base_Start+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d022      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006176:	d01d      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a22      	ldr	r2, [pc, #136]	@ (8006208 <HAL_TIM_Base_Start+0xc4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d018      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a21      	ldr	r2, [pc, #132]	@ (800620c <HAL_TIM_Base_Start+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d013      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1f      	ldr	r2, [pc, #124]	@ (8006210 <HAL_TIM_Base_Start+0xcc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00e      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1e      	ldr	r2, [pc, #120]	@ (8006214 <HAL_TIM_Base_Start+0xd0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <HAL_TIM_Base_Start+0xd4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIM_Base_Start+0x70>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <HAL_TIM_Base_Start+0xd8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d115      	bne.n	80061e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	4b19      	ldr	r3, [pc, #100]	@ (8006220 <HAL_TIM_Base_Start+0xdc>)
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b06      	cmp	r3, #6
 80061c4:	d015      	beq.n	80061f2 <HAL_TIM_Base_Start+0xae>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061cc:	d011      	beq.n	80061f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	e008      	b.n	80061f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e000      	b.n	80061f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40014000 	.word	0x40014000
 800621c:	40015000 	.word	0x40015000
 8006220:	00010007 	.word	0x00010007

08006224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e054      	b.n	80062e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a26      	ldr	r2, [pc, #152]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006266:	d01d      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <HAL_TIM_Base_Start_IT+0xd8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <HAL_TIM_Base_Start_IT+0xdc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <HAL_TIM_Base_Start_IT+0xe0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1c      	ldr	r2, [pc, #112]	@ (8006308 <HAL_TIM_Base_Start_IT+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x80>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1b      	ldr	r2, [pc, #108]	@ (800630c <HAL_TIM_Base_Start_IT+0xe8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d115      	bne.n	80062d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	4b19      	ldr	r3, [pc, #100]	@ (8006310 <HAL_TIM_Base_Start_IT+0xec>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d015      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0xbe>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062bc:	d011      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ce:	e008      	b.n	80062e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e000      	b.n	80062e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40013400 	.word	0x40013400
 8006308:	40014000 	.word	0x40014000
 800630c:	40015000 	.word	0x40015000
 8006310:	00010007 	.word	0x00010007

08006314 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10f      	bne.n	800635c <HAL_TIM_Base_Stop_IT+0x48>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <HAL_TIM_Base_Stop_IT+0x48>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0201 	bic.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e054      	b.n	8006430 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d111      	bne.n	80063b6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f002 f930 	bl	8008600 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a23      	ldr	r2, [pc, #140]	@ (8006438 <HAL_TIM_PWM_Init+0xc4>)
 80063ac:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f001 fc79 	bl	8007cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	0800643d 	.word	0x0800643d

0800643c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start+0x24>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e03c      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d109      	bne.n	800648e <HAL_TIM_PWM_Start+0x3e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e02f      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d109      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x58>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e022      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d109      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x72>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	e015      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d109      	bne.n	80064dc <HAL_TIM_PWM_Start+0x8c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e008      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e0a6      	b.n	8006644 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Start+0xb6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006504:	e023      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Start+0xc6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006514:	e01b      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d104      	bne.n	8006526 <HAL_TIM_PWM_Start+0xd6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006524:	e013      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start+0xe6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006534:	e00b      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b10      	cmp	r3, #16
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0xf6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006544:	e003      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f002 f82c 	bl	80085b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a3a      	ldr	r2, [pc, #232]	@ (800664c <HAL_TIM_PWM_Start+0x1fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d018      	beq.n	8006598 <HAL_TIM_PWM_Start+0x148>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a39      	ldr	r2, [pc, #228]	@ (8006650 <HAL_TIM_PWM_Start+0x200>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <HAL_TIM_PWM_Start+0x148>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a37      	ldr	r2, [pc, #220]	@ (8006654 <HAL_TIM_PWM_Start+0x204>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00e      	beq.n	8006598 <HAL_TIM_PWM_Start+0x148>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a36      	ldr	r2, [pc, #216]	@ (8006658 <HAL_TIM_PWM_Start+0x208>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <HAL_TIM_PWM_Start+0x148>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a34      	ldr	r2, [pc, #208]	@ (800665c <HAL_TIM_PWM_Start+0x20c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIM_PWM_Start+0x148>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a33      	ldr	r2, [pc, #204]	@ (8006660 <HAL_TIM_PWM_Start+0x210>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <HAL_TIM_PWM_Start+0x14c>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <HAL_TIM_PWM_Start+0x14e>
 800659c:	2300      	movs	r3, #0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a25      	ldr	r2, [pc, #148]	@ (800664c <HAL_TIM_PWM_Start+0x1fc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d01d      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <HAL_TIM_PWM_Start+0x214>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d018      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a24      	ldr	r2, [pc, #144]	@ (8006668 <HAL_TIM_PWM_Start+0x218>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a23      	ldr	r2, [pc, #140]	@ (800666c <HAL_TIM_PWM_Start+0x21c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a19      	ldr	r2, [pc, #100]	@ (8006650 <HAL_TIM_PWM_Start+0x200>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_TIM_PWM_Start+0x204>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_TIM_PWM_Start+0x1b2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a18      	ldr	r2, [pc, #96]	@ (8006660 <HAL_TIM_PWM_Start+0x210>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d115      	bne.n	800662e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <HAL_TIM_PWM_Start+0x220>)
 800660a:	4013      	ands	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b06      	cmp	r3, #6
 8006612:	d015      	beq.n	8006640 <HAL_TIM_PWM_Start+0x1f0>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661a:	d011      	beq.n	8006640 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	e008      	b.n	8006640 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e000      	b.n	8006642 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40013400 	.word	0x40013400
 8006654:	40014000 	.word	0x40014000
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800
 8006660:	40015000 	.word	0x40015000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	00010007 	.word	0x00010007

08006674 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e03c      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0xa6>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d109      	bne.n	80066ba <HAL_TIM_PWM_Start_DMA+0x46>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	e02f      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0xa6>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d109      	bne.n	80066d4 <HAL_TIM_PWM_Start_DMA+0x60>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e022      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0xa6>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b0c      	cmp	r3, #12
 80066d8:	d109      	bne.n	80066ee <HAL_TIM_PWM_Start_DMA+0x7a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	bf0c      	ite	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	2300      	movne	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e015      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0xa6>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d109      	bne.n	8006708 <HAL_TIM_PWM_Start_DMA+0x94>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e008      	b.n	800671a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
 8006720:	e1b5      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_TIM_PWM_Start_DMA+0xc8>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e03c      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x142>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b04      	cmp	r3, #4
 8006740:	d109      	bne.n	8006756 <HAL_TIM_PWM_Start_DMA+0xe2>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b01      	cmp	r3, #1
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	e02f      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d109      	bne.n	8006770 <HAL_TIM_PWM_Start_DMA+0xfc>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e022      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d109      	bne.n	800678a <HAL_TIM_PWM_Start_DMA+0x116>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e015      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x142>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b10      	cmp	r3, #16
 800678e:	d109      	bne.n	80067a4 <HAL_TIM_PWM_Start_DMA+0x130>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e008      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x142>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d034      	beq.n	8006824 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_TIM_PWM_Start_DMA+0x152>
 80067c0:	887b      	ldrh	r3, [r7, #2]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e161      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_TIM_PWM_Start_DMA+0x166>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067d8:	e026      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start_DMA+0x176>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067e8:	e01e      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_PWM_Start_DMA+0x186>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067f8:	e016      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	d104      	bne.n	800680a <HAL_TIM_PWM_Start_DMA+0x196>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006808:	e00e      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b10      	cmp	r3, #16
 800680e:	d104      	bne.n	800681a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006818:	e006      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006822:	e001      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e132      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b0c      	cmp	r3, #12
 800682c:	f200 80ae 	bhi.w	800698c <HAL_TIM_PWM_Start_DMA+0x318>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	0800686d 	.word	0x0800686d
 800683c:	0800698d 	.word	0x0800698d
 8006840:	0800698d 	.word	0x0800698d
 8006844:	0800698d 	.word	0x0800698d
 8006848:	080068b5 	.word	0x080068b5
 800684c:	0800698d 	.word	0x0800698d
 8006850:	0800698d 	.word	0x0800698d
 8006854:	0800698d 	.word	0x0800698d
 8006858:	080068fd 	.word	0x080068fd
 800685c:	0800698d 	.word	0x0800698d
 8006860:	0800698d 	.word	0x0800698d
 8006864:	0800698d 	.word	0x0800698d
 8006868:	08006945 	.word	0x08006945
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	4a89      	ldr	r2, [pc, #548]	@ (8006a98 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006872:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	4a88      	ldr	r2, [pc, #544]	@ (8006a9c <HAL_TIM_PWM_Start_DMA+0x428>)
 800687a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	4a87      	ldr	r2, [pc, #540]	@ (8006aa0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006882:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3334      	adds	r3, #52	@ 0x34
 8006890:	461a      	mov	r2, r3
 8006892:	887b      	ldrh	r3, [r7, #2]
 8006894:	f7fd ff6e 	bl	8004774 <HAL_DMA_Start_IT>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e0f5      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b0:	60da      	str	r2, [r3, #12]
      break;
 80068b2:	e06e      	b.n	8006992 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	4a77      	ldr	r2, [pc, #476]	@ (8006a98 <HAL_TIM_PWM_Start_DMA+0x424>)
 80068ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	4a76      	ldr	r2, [pc, #472]	@ (8006a9c <HAL_TIM_PWM_Start_DMA+0x428>)
 80068c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c8:	4a75      	ldr	r2, [pc, #468]	@ (8006aa0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80068ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3338      	adds	r3, #56	@ 0x38
 80068d8:	461a      	mov	r2, r3
 80068da:	887b      	ldrh	r3, [r7, #2]
 80068dc:	f7fd ff4a 	bl	8004774 <HAL_DMA_Start_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e0d1      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068f8:	60da      	str	r2, [r3, #12]
      break;
 80068fa:	e04a      	b.n	8006992 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	4a65      	ldr	r2, [pc, #404]	@ (8006a98 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a64      	ldr	r2, [pc, #400]	@ (8006a9c <HAL_TIM_PWM_Start_DMA+0x428>)
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a63      	ldr	r2, [pc, #396]	@ (8006aa0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006912:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	333c      	adds	r3, #60	@ 0x3c
 8006920:	461a      	mov	r2, r3
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	f7fd ff26 	bl	8004774 <HAL_DMA_Start_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0ad      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006940:	60da      	str	r2, [r3, #12]
      break;
 8006942:	e026      	b.n	8006992 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	4a53      	ldr	r2, [pc, #332]	@ (8006a98 <HAL_TIM_PWM_Start_DMA+0x424>)
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	4a52      	ldr	r2, [pc, #328]	@ (8006a9c <HAL_TIM_PWM_Start_DMA+0x428>)
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006958:	4a51      	ldr	r2, [pc, #324]	@ (8006aa0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800695a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3340      	adds	r3, #64	@ 0x40
 8006968:	461a      	mov	r2, r3
 800696a:	887b      	ldrh	r3, [r7, #2]
 800696c:	f7fd ff02 	bl	8004774 <HAL_DMA_Start_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e089      	b.n	8006a8e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006988:	60da      	str	r2, [r3, #12]
      break;
 800698a:	e002      	b.n	8006992 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	75fb      	strb	r3, [r7, #23]
      break;
 8006990:	bf00      	nop
  }

  if (status == HAL_OK)
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d179      	bne.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fe07 	bl	80085b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <HAL_TIM_PWM_Start_DMA+0x430>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa8 <HAL_TIM_PWM_Start_DMA+0x434>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3b      	ldr	r2, [pc, #236]	@ (8006aac <HAL_TIM_PWM_Start_DMA+0x438>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a39      	ldr	r2, [pc, #228]	@ (8006ab0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a38      	ldr	r2, [pc, #224]	@ (8006ab4 <HAL_TIM_PWM_Start_DMA+0x440>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <HAL_TIM_PWM_Start_DMA+0x444>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_PWM_Start_DMA+0x372>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_TIM_PWM_Start_DMA+0x374>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a28      	ldr	r2, [pc, #160]	@ (8006aa4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0e:	d01d      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a29      	ldr	r2, [pc, #164]	@ (8006abc <HAL_TIM_PWM_Start_DMA+0x448>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a28      	ldr	r2, [pc, #160]	@ (8006ac0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <HAL_TIM_PWM_Start_DMA+0x450>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_TIM_PWM_Start_DMA+0x438>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab8 <HAL_TIM_PWM_Start_DMA+0x444>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d115      	bne.n	8006a78 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <HAL_TIM_PWM_Start_DMA+0x454>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d015      	beq.n	8006a8a <HAL_TIM_PWM_Start_DMA+0x416>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d011      	beq.n	8006a8a <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	e008      	b.n	8006a8a <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e000      	b.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	08007ba7 	.word	0x08007ba7
 8006a9c:	08007c53 	.word	0x08007c53
 8006aa0:	08007b11 	.word	0x08007b11
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800
 8006ab8:	40015000 	.word	0x40015000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	00010007 	.word	0x00010007

08006acc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d855      	bhi.n	8006b8c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006b8d 	.word	0x08006b8d
 8006af0:	08006b8d 	.word	0x08006b8d
 8006af4:	08006b8d 	.word	0x08006b8d
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b8d 	.word	0x08006b8d
 8006b00:	08006b8d 	.word	0x08006b8d
 8006b04:	08006b8d 	.word	0x08006b8d
 8006b08:	08006b55 	.word	0x08006b55
 8006b0c:	08006b8d 	.word	0x08006b8d
 8006b10:	08006b8d 	.word	0x08006b8d
 8006b14:	08006b8d 	.word	0x08006b8d
 8006b18:	08006b71 	.word	0x08006b71
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fd fef3 	bl	800491c <HAL_DMA_Abort_IT>
      break;
 8006b36:	e02c      	b.n	8006b92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fd fee5 	bl	800491c <HAL_DMA_Abort_IT>
      break;
 8006b52:	e01e      	b.n	8006b92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd fed7 	bl	800491c <HAL_DMA_Abort_IT>
      break;
 8006b6e:	e010      	b.n	8006b92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fd fec9 	bl	800491c <HAL_DMA_Abort_IT>
      break;
 8006b8a:	e002      	b.n	8006b92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 8086 	bne.w	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 fd06 	bl	80085b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a40      	ldr	r2, [pc, #256]	@ (8006cb0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8006cb4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a3c      	ldr	r2, [pc, #240]	@ (8006cbc <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8006cc0 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a39      	ldr	r2, [pc, #228]	@ (8006cc4 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d101      	bne.n	8006be8 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d017      	beq.n	8006c1e <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <HAL_TIM_PWM_Stop_DMA+0x152>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_PWM_Stop_DMA+0x152>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10f      	bne.n	8006c4e <HAL_TIM_PWM_Stop_DMA+0x182>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_PWM_Stop_DMA+0x182>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Stop_DMA+0x192>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c5c:	e023      	b.n	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c6c:	e01b      	b.n	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40015000 	.word	0x40015000

08006cc8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ce0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ce8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cf0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d108      	bne.n	8006d0a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d105      	bne.n	8006d0a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cfe:	7b7b      	ldrb	r3, [r7, #13]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d102      	bne.n	8006d0a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d04:	7b3b      	ldrb	r3, [r7, #12]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d001      	beq.n	8006d0e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e059      	b.n	8006dc2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0202 	orr.w	r2, r2, #2
 8006d3c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0204 	orr.w	r2, r2, #4
 8006d4c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fc2c 	bl	80085b4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	2104      	movs	r1, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fc25 	bl	80085b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a17      	ldr	r2, [pc, #92]	@ (8006dcc <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a14      	ldr	r2, [pc, #80]	@ (8006dd4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a12      	ldr	r2, [pc, #72]	@ (8006dd8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0f      	ldr	r2, [pc, #60]	@ (8006de0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800
 8006de0:	40015000 	.word	0x40015000

08006de4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0a2      	b.n	8006f3e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d111      	bne.n	8006e28 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fbf7 	bl	8008600 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f48 <HAL_TIM_Encoder_Init+0x164>)
 8006e1e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006e3e:	f023 0307 	bic.w	r3, r3, #7
 8006e42:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f000 ff36 	bl	8007cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	021b      	lsls	r3, r3, #8
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e9a:	f023 030c 	bic.w	r3, r3, #12
 8006e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	011a      	lsls	r2, r3, #4
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006ed8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006ee0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	4313      	orrs	r3, r2
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	08003be5 	.word	0x08003be5

08006f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d110      	bne.n	8006f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d102      	bne.n	8006f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e069      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f9c:	e031      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d110      	bne.n	8006fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d102      	bne.n	8006fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006faa:	7b3b      	ldrb	r3, [r7, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e055      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fc4:	e01d      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d108      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d105      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd2:	7b7b      	ldrb	r3, [r7, #13]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd8:	7b3b      	ldrb	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e03e      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_TIM_Encoder_Start+0xc4>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d008      	beq.n	8007020 <HAL_TIM_Encoder_Start+0xd4>
 800700e:	e00f      	b.n	8007030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2201      	movs	r2, #1
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f001 facb 	bl	80085b4 <TIM_CCxChannelCmd>
      break;
 800701e:	e016      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2201      	movs	r2, #1
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fac3 	bl	80085b4 <TIM_CCxChannelCmd>
      break;
 800702e:	e00e      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fabb 	bl	80085b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	2104      	movs	r1, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fab4 	bl	80085b4 <TIM_CCxChannelCmd>
      break;
 800704c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d026      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d021      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0202 	mvn.w	r2, #2
 800709c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
 80070bc:	e009      	b.n	80070d2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d026      	beq.n	8007130 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d021      	beq.n	8007130 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0204 	mvn.w	r2, #4
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	e009      	b.n	800712a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d026      	beq.n	8007188 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d021      	beq.n	8007188 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0208 	mvn.w	r2, #8
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2204      	movs	r2, #4
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
 800716c:	e009      	b.n	8007182 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	d026      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d021      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0210 	mvn.w	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2208      	movs	r2, #8
 80071aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
 80071c4:	e009      	b.n	80071da <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0201 	mvn.w	r2, #1
 80071fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00e      	beq.n	800723a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f06f 0220 	mvn.w	r2, #32
 80072a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800731e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00e      	beq.n	8007352 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007376:	2302      	movs	r3, #2
 8007378:	e0ff      	b.n	800757a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b14      	cmp	r3, #20
 8007386:	f200 80f0 	bhi.w	800756a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800738a:	a201      	add	r2, pc, #4	@ (adr r2, 8007390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073e5 	.word	0x080073e5
 8007394:	0800756b 	.word	0x0800756b
 8007398:	0800756b 	.word	0x0800756b
 800739c:	0800756b 	.word	0x0800756b
 80073a0:	08007425 	.word	0x08007425
 80073a4:	0800756b 	.word	0x0800756b
 80073a8:	0800756b 	.word	0x0800756b
 80073ac:	0800756b 	.word	0x0800756b
 80073b0:	08007467 	.word	0x08007467
 80073b4:	0800756b 	.word	0x0800756b
 80073b8:	0800756b 	.word	0x0800756b
 80073bc:	0800756b 	.word	0x0800756b
 80073c0:	080074a7 	.word	0x080074a7
 80073c4:	0800756b 	.word	0x0800756b
 80073c8:	0800756b 	.word	0x0800756b
 80073cc:	0800756b 	.word	0x0800756b
 80073d0:	080074e9 	.word	0x080074e9
 80073d4:	0800756b 	.word	0x0800756b
 80073d8:	0800756b 	.word	0x0800756b
 80073dc:	0800756b 	.word	0x0800756b
 80073e0:	08007529 	.word	0x08007529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fd1c 	bl	8007e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0208 	orr.w	r2, r2, #8
 80073fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0204 	bic.w	r2, r2, #4
 800740e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6999      	ldr	r1, [r3, #24]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
      break;
 8007422:	e0a5      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fd96 	bl	8007f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800743e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800744e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6999      	ldr	r1, [r3, #24]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	021a      	lsls	r2, r3, #8
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	619a      	str	r2, [r3, #24]
      break;
 8007464:	e084      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fe09 	bl	8008084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0208 	orr.w	r2, r2, #8
 8007480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0204 	bic.w	r2, r2, #4
 8007490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69d9      	ldr	r1, [r3, #28]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	61da      	str	r2, [r3, #28]
      break;
 80074a4:	e064      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fe7b 	bl	80081a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69d9      	ldr	r1, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	021a      	lsls	r2, r3, #8
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	61da      	str	r2, [r3, #28]
      break;
 80074e6:	e043      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 feee 	bl	80082d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0208 	orr.w	r2, r2, #8
 8007502:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0204 	bic.w	r2, r2, #4
 8007512:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007526:	e023      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 ff38 	bl	80083a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007542:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007552:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007568:	e002      	b.n	8007570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      break;
 800756e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop

08007584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c>
 800759c:	2302      	movs	r3, #2
 800759e:	e0f6      	b.n	800778e <HAL_TIM_ConfigClockSource+0x20a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80075be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a6f      	ldr	r2, [pc, #444]	@ (8007798 <HAL_TIM_ConfigClockSource+0x214>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 80c1 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 80075e0:	4a6d      	ldr	r2, [pc, #436]	@ (8007798 <HAL_TIM_ConfigClockSource+0x214>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f200 80c6 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 80075e8:	4a6c      	ldr	r2, [pc, #432]	@ (800779c <HAL_TIM_ConfigClockSource+0x218>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f000 80b9 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 80075f0:	4a6a      	ldr	r2, [pc, #424]	@ (800779c <HAL_TIM_ConfigClockSource+0x218>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f200 80be 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f8:	4a69      	ldr	r2, [pc, #420]	@ (80077a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 80b1 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007600:	4a67      	ldr	r2, [pc, #412]	@ (80077a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 80b6 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007608:	4a66      	ldr	r2, [pc, #408]	@ (80077a4 <HAL_TIM_ConfigClockSource+0x220>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 80a9 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	4a64      	ldr	r2, [pc, #400]	@ (80077a4 <HAL_TIM_ConfigClockSource+0x220>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f200 80ae 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007618:	4a63      	ldr	r2, [pc, #396]	@ (80077a8 <HAL_TIM_ConfigClockSource+0x224>)
 800761a:	4293      	cmp	r3, r2
 800761c:	f000 80a1 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007620:	4a61      	ldr	r2, [pc, #388]	@ (80077a8 <HAL_TIM_ConfigClockSource+0x224>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f200 80a6 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007628:	4a60      	ldr	r2, [pc, #384]	@ (80077ac <HAL_TIM_ConfigClockSource+0x228>)
 800762a:	4293      	cmp	r3, r2
 800762c:	f000 8099 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007630:	4a5e      	ldr	r2, [pc, #376]	@ (80077ac <HAL_TIM_ConfigClockSource+0x228>)
 8007632:	4293      	cmp	r3, r2
 8007634:	f200 809e 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007638:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800763c:	f000 8091 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007640:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007644:	f200 8096 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800764c:	f000 8089 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007654:	f200 808e 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800765c:	d03e      	beq.n	80076dc <HAL_TIM_ConfigClockSource+0x158>
 800765e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007662:	f200 8087 	bhi.w	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800766a:	f000 8086 	beq.w	800777a <HAL_TIM_ConfigClockSource+0x1f6>
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007672:	d87f      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b70      	cmp	r3, #112	@ 0x70
 8007676:	d01a      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x12a>
 8007678:	2b70      	cmp	r3, #112	@ 0x70
 800767a:	d87b      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	2b60      	cmp	r3, #96	@ 0x60
 800767e:	d050      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0x19e>
 8007680:	2b60      	cmp	r3, #96	@ 0x60
 8007682:	d877      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007684:	2b50      	cmp	r3, #80	@ 0x50
 8007686:	d03c      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x17e>
 8007688:	2b50      	cmp	r3, #80	@ 0x50
 800768a:	d873      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 800768c:	2b40      	cmp	r3, #64	@ 0x40
 800768e:	d058      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x1be>
 8007690:	2b40      	cmp	r3, #64	@ 0x40
 8007692:	d86f      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 8007694:	2b30      	cmp	r3, #48	@ 0x30
 8007696:	d064      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 8007698:	2b30      	cmp	r3, #48	@ 0x30
 800769a:	d86b      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 800769c:	2b20      	cmp	r3, #32
 800769e:	d060      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d867      	bhi.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d05c      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d05a      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x1de>
 80076ac:	e062      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076be:	f000 ff59 	bl	8008574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	609a      	str	r2, [r3, #8]
      break;
 80076da:	e04f      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076ec:	f000 ff42 	bl	8008574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076fe:	609a      	str	r2, [r3, #8]
      break;
 8007700:	e03c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800770e:	461a      	mov	r2, r3
 8007710:	f000 feb4 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2150      	movs	r1, #80	@ 0x50
 800771a:	4618      	mov	r0, r3
 800771c:	f000 ff0d 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007720:	e02c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800772e:	461a      	mov	r2, r3
 8007730:	f000 fed3 	bl	80084da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2160      	movs	r1, #96	@ 0x60
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fefd 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007740:	e01c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800774e:	461a      	mov	r2, r3
 8007750:	f000 fe94 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2140      	movs	r1, #64	@ 0x40
 800775a:	4618      	mov	r0, r3
 800775c:	f000 feed 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007760:	e00c      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f000 fee4 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007772:	e003      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      break;
 8007778:	e000      	b.n	800777c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800777a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	00100070 	.word	0x00100070
 800779c:	00100060 	.word	0x00100060
 80077a0:	00100050 	.word	0x00100050
 80077a4:	00100040 	.word	0x00100040
 80077a8:	00100030 	.word	0x00100030
 80077ac:	00100020 	.word	0x00100020

080077b0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	460b      	mov	r3, r1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e14a      	b.n	8007b02 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	f040 80dd 	bne.w	8007a34 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	2b1f      	cmp	r3, #31
 800787e:	f200 80d6 	bhi.w	8007a2e <HAL_TIM_RegisterCallback+0x1de>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <HAL_TIM_RegisterCallback+0x38>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	08007909 	.word	0x08007909
 800788c:	08007911 	.word	0x08007911
 8007890:	08007919 	.word	0x08007919
 8007894:	08007921 	.word	0x08007921
 8007898:	08007929 	.word	0x08007929
 800789c:	08007931 	.word	0x08007931
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007941 	.word	0x08007941
 80078a8:	08007949 	.word	0x08007949
 80078ac:	08007951 	.word	0x08007951
 80078b0:	08007959 	.word	0x08007959
 80078b4:	08007961 	.word	0x08007961
 80078b8:	08007969 	.word	0x08007969
 80078bc:	08007971 	.word	0x08007971
 80078c0:	0800797b 	.word	0x0800797b
 80078c4:	08007985 	.word	0x08007985
 80078c8:	0800798f 	.word	0x0800798f
 80078cc:	08007999 	.word	0x08007999
 80078d0:	080079a3 	.word	0x080079a3
 80078d4:	080079ad 	.word	0x080079ad
 80078d8:	080079b7 	.word	0x080079b7
 80078dc:	080079c1 	.word	0x080079c1
 80078e0:	080079cb 	.word	0x080079cb
 80078e4:	080079d5 	.word	0x080079d5
 80078e8:	080079df 	.word	0x080079df
 80078ec:	080079e9 	.word	0x080079e9
 80078f0:	080079f3 	.word	0x080079f3
 80078f4:	080079fd 	.word	0x080079fd
 80078f8:	08007a07 	.word	0x08007a07
 80078fc:	08007a11 	.word	0x08007a11
 8007900:	08007a1b 	.word	0x08007a1b
 8007904:	08007a25 	.word	0x08007a25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800790e:	e0f7      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007916:	e0f3      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800791e:	e0ef      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007926:	e0eb      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800792e:	e0e7      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007936:	e0e3      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800793e:	e0df      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007946:	e0db      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800794e:	e0d7      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007956:	e0d3      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800795e:	e0cf      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007966:	e0cb      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800796e:	e0c7      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007978:	e0c2      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007982:	e0bd      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800798c:	e0b8      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007996:	e0b3      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80079a0:	e0ae      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80079aa:	e0a9      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80079b4:	e0a4      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80079be:	e09f      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80079c8:	e09a      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80079d2:	e095      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80079dc:	e090      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80079e6:	e08b      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80079f0:	e086      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80079fa:	e081      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007a04:	e07c      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007a0e:	e077      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007a18:	e072      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007a22:	e06d      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007a2c:	e068      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
        break;
 8007a32:	e065      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d15d      	bne.n	8007afc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	2b0d      	cmp	r3, #13
 8007a44:	d857      	bhi.n	8007af6 <HAL_TIM_RegisterCallback+0x2a6>
 8007a46:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <HAL_TIM_RegisterCallback+0x1fc>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a85 	.word	0x08007a85
 8007a50:	08007a8d 	.word	0x08007a8d
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007aa5 	.word	0x08007aa5
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007acd 	.word	0x08007acd
 8007a74:	08007ad5 	.word	0x08007ad5
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007aed 	.word	0x08007aed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007a8a:	e039      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007a92:	e035      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007a9a:	e031      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007aa2:	e02d      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007aaa:	e029      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007ab2:	e025      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007aba:	e021      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007ac2:	e01d      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007aca:	e019      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007ad2:	e015      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007ada:	e011      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007ae2:	e00d      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007aea:	e009      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007af4:	e004      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
        break;
 8007afa:	e001      	b.n	8007b00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d107      	bne.n	8007b38 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b36:	e02a      	b.n	8007b8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d107      	bne.n	8007b52 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2202      	movs	r2, #2
 8007b46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b50:	e01d      	b.n	8007b8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d107      	bne.n	8007b6c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2204      	movs	r2, #4
 8007b60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b6a:	e010      	b.n	8007b8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d107      	bne.n	8007b86 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b84:	e003      	b.n	8007b8e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	771a      	strb	r2, [r3, #28]
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d10b      	bne.n	8007bd6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d136      	bne.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd4:	e031      	b.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d10b      	bne.n	8007bf8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2202      	movs	r2, #2
 8007be4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d125      	bne.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bf6:	e020      	b.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d10b      	bne.n	8007c1a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2204      	movs	r2, #4
 8007c06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d114      	bne.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c18:	e00f      	b.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d10a      	bne.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2208      	movs	r2, #8
 8007c28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	771a      	strb	r2, [r3, #28]
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d103      	bne.n	8007c72 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	771a      	strb	r2, [r3, #28]
 8007c70:	e019      	b.n	8007ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d103      	bne.n	8007c84 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	771a      	strb	r2, [r3, #28]
 8007c82:	e010      	b.n	8007ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d103      	bne.n	8007c96 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2204      	movs	r2, #4
 8007c92:	771a      	strb	r2, [r3, #28]
 8007c94:	e007      	b.n	8007ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d102      	bne.n	8007ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2208      	movs	r2, #8
 8007ca4:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	771a      	strb	r2, [r3, #28]
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8007e04 <TIM_Base_SetConfig+0x144>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d017      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	d013      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a49      	ldr	r2, [pc, #292]	@ (8007e08 <TIM_Base_SetConfig+0x148>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00f      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a48      	ldr	r2, [pc, #288]	@ (8007e0c <TIM_Base_SetConfig+0x14c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00b      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a47      	ldr	r2, [pc, #284]	@ (8007e10 <TIM_Base_SetConfig+0x150>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d007      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a46      	ldr	r2, [pc, #280]	@ (8007e14 <TIM_Base_SetConfig+0x154>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_Base_SetConfig+0x48>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a45      	ldr	r2, [pc, #276]	@ (8007e18 <TIM_Base_SetConfig+0x158>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d108      	bne.n	8007d1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a39      	ldr	r2, [pc, #228]	@ (8007e04 <TIM_Base_SetConfig+0x144>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d023      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d28:	d01f      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a36      	ldr	r2, [pc, #216]	@ (8007e08 <TIM_Base_SetConfig+0x148>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a35      	ldr	r2, [pc, #212]	@ (8007e0c <TIM_Base_SetConfig+0x14c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a34      	ldr	r2, [pc, #208]	@ (8007e10 <TIM_Base_SetConfig+0x150>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a33      	ldr	r2, [pc, #204]	@ (8007e14 <TIM_Base_SetConfig+0x154>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a33      	ldr	r2, [pc, #204]	@ (8007e1c <TIM_Base_SetConfig+0x15c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a32      	ldr	r2, [pc, #200]	@ (8007e20 <TIM_Base_SetConfig+0x160>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a31      	ldr	r2, [pc, #196]	@ (8007e24 <TIM_Base_SetConfig+0x164>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2c      	ldr	r2, [pc, #176]	@ (8007e18 <TIM_Base_SetConfig+0x158>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a18      	ldr	r2, [pc, #96]	@ (8007e04 <TIM_Base_SetConfig+0x144>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <TIM_Base_SetConfig+0x110>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e14 <TIM_Base_SetConfig+0x154>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_Base_SetConfig+0x110>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e1c <TIM_Base_SetConfig+0x15c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_Base_SetConfig+0x110>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <TIM_Base_SetConfig+0x160>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_Base_SetConfig+0x110>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a18      	ldr	r2, [pc, #96]	@ (8007e24 <TIM_Base_SetConfig+0x164>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0x110>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a13      	ldr	r2, [pc, #76]	@ (8007e18 <TIM_Base_SetConfig+0x158>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d103      	bne.n	8007dd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d105      	bne.n	8007df6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f023 0201 	bic.w	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	611a      	str	r2, [r3, #16]
  }
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40000c00 	.word	0x40000c00
 8007e14:	40013400 	.word	0x40013400
 8007e18:	40015000 	.word	0x40015000
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f023 0201 	bic.w	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 0302 	bic.w	r3, r3, #2
 8007e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a30      	ldr	r2, [pc, #192]	@ (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d013      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x88>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8007f48 <TIM_OC1_SetConfig+0x120>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x88>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a2e      	ldr	r2, [pc, #184]	@ (8007f4c <TIM_OC1_SetConfig+0x124>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x88>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007f50 <TIM_OC1_SetConfig+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x88>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f54 <TIM_OC1_SetConfig+0x12c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x88>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8007f58 <TIM_OC1_SetConfig+0x130>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10c      	bne.n	8007eca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0308 	bic.w	r3, r3, #8
 8007eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f023 0304 	bic.w	r3, r3, #4
 8007ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <TIM_OC1_SetConfig+0xd2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f48 <TIM_OC1_SetConfig+0x120>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <TIM_OC1_SetConfig+0xd2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <TIM_OC1_SetConfig+0x124>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <TIM_OC1_SetConfig+0xd2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <TIM_OC1_SetConfig+0x128>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <TIM_OC1_SetConfig+0xd2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a19      	ldr	r2, [pc, #100]	@ (8007f54 <TIM_OC1_SetConfig+0x12c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <TIM_OC1_SetConfig+0xd2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a18      	ldr	r2, [pc, #96]	@ (8007f58 <TIM_OC1_SetConfig+0x130>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d111      	bne.n	8007f1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	621a      	str	r2, [r3, #32]
}
 8007f38:	bf00      	nop
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800
 8007f58:	40015000 	.word	0x40015000

08007f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f023 0210 	bic.w	r2, r3, #16
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0320 	bic.w	r3, r3, #32
 8007faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a2c      	ldr	r2, [pc, #176]	@ (800806c <TIM_OC2_SetConfig+0x110>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d007      	beq.n	8007fd0 <TIM_OC2_SetConfig+0x74>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8008070 <TIM_OC2_SetConfig+0x114>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_OC2_SetConfig+0x74>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a2a      	ldr	r2, [pc, #168]	@ (8008074 <TIM_OC2_SetConfig+0x118>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10d      	bne.n	8007fec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <TIM_OC2_SetConfig+0x110>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d013      	beq.n	800801c <TIM_OC2_SetConfig+0xc0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8008070 <TIM_OC2_SetConfig+0x114>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00f      	beq.n	800801c <TIM_OC2_SetConfig+0xc0>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8008078 <TIM_OC2_SetConfig+0x11c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00b      	beq.n	800801c <TIM_OC2_SetConfig+0xc0>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1d      	ldr	r2, [pc, #116]	@ (800807c <TIM_OC2_SetConfig+0x120>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d007      	beq.n	800801c <TIM_OC2_SetConfig+0xc0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1c      	ldr	r2, [pc, #112]	@ (8008080 <TIM_OC2_SetConfig+0x124>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d003      	beq.n	800801c <TIM_OC2_SetConfig+0xc0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a17      	ldr	r2, [pc, #92]	@ (8008074 <TIM_OC2_SetConfig+0x118>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d113      	bne.n	8008044 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800802a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40012c00 	.word	0x40012c00
 8008070:	40013400 	.word	0x40013400
 8008074:	40015000 	.word	0x40015000
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800

08008084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008190 <TIM_OC3_SetConfig+0x10c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_OC3_SetConfig+0x72>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008194 <TIM_OC3_SetConfig+0x110>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC3_SetConfig+0x72>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a29      	ldr	r2, [pc, #164]	@ (8008198 <TIM_OC3_SetConfig+0x114>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d10d      	bne.n	8008112 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a1e      	ldr	r2, [pc, #120]	@ (8008190 <TIM_OC3_SetConfig+0x10c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <TIM_OC3_SetConfig+0xbe>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1d      	ldr	r2, [pc, #116]	@ (8008194 <TIM_OC3_SetConfig+0x110>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00f      	beq.n	8008142 <TIM_OC3_SetConfig+0xbe>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a1d      	ldr	r2, [pc, #116]	@ (800819c <TIM_OC3_SetConfig+0x118>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_OC3_SetConfig+0xbe>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a1c      	ldr	r2, [pc, #112]	@ (80081a0 <TIM_OC3_SetConfig+0x11c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <TIM_OC3_SetConfig+0xbe>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <TIM_OC3_SetConfig+0x120>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC3_SetConfig+0xbe>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a16      	ldr	r2, [pc, #88]	@ (8008198 <TIM_OC3_SetConfig+0x114>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d113      	bne.n	800816a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	621a      	str	r2, [r3, #32]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40013400 	.word	0x40013400
 8008198:	40015000 	.word	0x40015000
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a2c      	ldr	r2, [pc, #176]	@ (80082b8 <TIM_OC4_SetConfig+0x110>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_OC4_SetConfig+0x74>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a2b      	ldr	r2, [pc, #172]	@ (80082bc <TIM_OC4_SetConfig+0x114>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_OC4_SetConfig+0x74>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a2a      	ldr	r2, [pc, #168]	@ (80082c0 <TIM_OC4_SetConfig+0x118>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d10d      	bne.n	8008238 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	031b      	lsls	r3, r3, #12
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a1f      	ldr	r2, [pc, #124]	@ (80082b8 <TIM_OC4_SetConfig+0x110>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <TIM_OC4_SetConfig+0xc0>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a1e      	ldr	r2, [pc, #120]	@ (80082bc <TIM_OC4_SetConfig+0x114>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00f      	beq.n	8008268 <TIM_OC4_SetConfig+0xc0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1e      	ldr	r2, [pc, #120]	@ (80082c4 <TIM_OC4_SetConfig+0x11c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <TIM_OC4_SetConfig+0xc0>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1d      	ldr	r2, [pc, #116]	@ (80082c8 <TIM_OC4_SetConfig+0x120>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <TIM_OC4_SetConfig+0xc0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <TIM_OC4_SetConfig+0x124>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_OC4_SetConfig+0xc0>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a17      	ldr	r2, [pc, #92]	@ (80082c0 <TIM_OC4_SetConfig+0x118>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d113      	bne.n	8008290 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800826e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008276:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	019b      	lsls	r3, r3, #6
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	019b      	lsls	r3, r3, #6
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	621a      	str	r2, [r3, #32]
}
 80082aa:	bf00      	nop
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40012c00 	.word	0x40012c00
 80082bc:	40013400 	.word	0x40013400
 80082c0:	40015000 	.word	0x40015000
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40014400 	.word	0x40014400
 80082cc:	40014800 	.word	0x40014800

080082d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a19      	ldr	r2, [pc, #100]	@ (800838c <TIM_OC5_SetConfig+0xbc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <TIM_OC5_SetConfig+0x82>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a18      	ldr	r2, [pc, #96]	@ (8008390 <TIM_OC5_SetConfig+0xc0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00f      	beq.n	8008352 <TIM_OC5_SetConfig+0x82>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a17      	ldr	r2, [pc, #92]	@ (8008394 <TIM_OC5_SetConfig+0xc4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00b      	beq.n	8008352 <TIM_OC5_SetConfig+0x82>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a16      	ldr	r2, [pc, #88]	@ (8008398 <TIM_OC5_SetConfig+0xc8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <TIM_OC5_SetConfig+0x82>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a15      	ldr	r2, [pc, #84]	@ (800839c <TIM_OC5_SetConfig+0xcc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_OC5_SetConfig+0x82>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a14      	ldr	r2, [pc, #80]	@ (80083a0 <TIM_OC5_SetConfig+0xd0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d109      	bne.n	8008366 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008358:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800
 80083a0:	40015000 	.word	0x40015000

080083a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	021b      	lsls	r3, r3, #8
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	051b      	lsls	r3, r3, #20
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008464 <TIM_OC6_SetConfig+0xc0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <TIM_OC6_SetConfig+0x84>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a19      	ldr	r2, [pc, #100]	@ (8008468 <TIM_OC6_SetConfig+0xc4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_OC6_SetConfig+0x84>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a18      	ldr	r2, [pc, #96]	@ (800846c <TIM_OC6_SetConfig+0xc8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_OC6_SetConfig+0x84>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <TIM_OC6_SetConfig+0xcc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_OC6_SetConfig+0x84>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a16      	ldr	r2, [pc, #88]	@ (8008474 <TIM_OC6_SetConfig+0xd0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC6_SetConfig+0x84>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a15      	ldr	r2, [pc, #84]	@ (8008478 <TIM_OC6_SetConfig+0xd4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d109      	bne.n	800843c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4313      	orrs	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40013400 	.word	0x40013400
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800
 8008478:	40015000 	.word	0x40015000

0800847c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 030a 	bic.w	r3, r3, #10
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f023 0210 	bic.w	r2, r3, #16
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	031b      	lsls	r3, r3, #12
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	f043 0307 	orr.w	r3, r3, #7
 8008560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800858e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	431a      	orrs	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4313      	orrs	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	609a      	str	r2, [r3, #8]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 031f 	and.w	r3, r3, #31
 80085c6:	2201      	movs	r2, #1
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1a      	ldr	r2, [r3, #32]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	401a      	ands	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f003 031f 	and.w	r3, r3, #31
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a26      	ldr	r2, [pc, #152]	@ (80086a4 <TIM_ResetCallback+0xa4>)
 800860c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a25      	ldr	r2, [pc, #148]	@ (80086a8 <TIM_ResetCallback+0xa8>)
 8008614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a24      	ldr	r2, [pc, #144]	@ (80086ac <TIM_ResetCallback+0xac>)
 800861c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a23      	ldr	r2, [pc, #140]	@ (80086b0 <TIM_ResetCallback+0xb0>)
 8008624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a22      	ldr	r2, [pc, #136]	@ (80086b4 <TIM_ResetCallback+0xb4>)
 800862c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a21      	ldr	r2, [pc, #132]	@ (80086b8 <TIM_ResetCallback+0xb8>)
 8008634:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a20      	ldr	r2, [pc, #128]	@ (80086bc <TIM_ResetCallback+0xbc>)
 800863c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1f      	ldr	r2, [pc, #124]	@ (80086c0 <TIM_ResetCallback+0xc0>)
 8008644:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <TIM_ResetCallback+0xc4>)
 800864c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a1d      	ldr	r2, [pc, #116]	@ (80086c8 <TIM_ResetCallback+0xc8>)
 8008654:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a1c      	ldr	r2, [pc, #112]	@ (80086cc <TIM_ResetCallback+0xcc>)
 800865c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1b      	ldr	r2, [pc, #108]	@ (80086d0 <TIM_ResetCallback+0xd0>)
 8008664:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a1a      	ldr	r2, [pc, #104]	@ (80086d4 <TIM_ResetCallback+0xd4>)
 800866c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <TIM_ResetCallback+0xd8>)
 8008674:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a18      	ldr	r2, [pc, #96]	@ (80086dc <TIM_ResetCallback+0xdc>)
 800867c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a17      	ldr	r2, [pc, #92]	@ (80086e0 <TIM_ResetCallback+0xe0>)
 8008684:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a16      	ldr	r2, [pc, #88]	@ (80086e4 <TIM_ResetCallback+0xe4>)
 800868c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a15      	ldr	r2, [pc, #84]	@ (80086e8 <TIM_ResetCallback+0xe8>)
 8008694:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	08003731 	.word	0x08003731
 80086a8:	080077b1 	.word	0x080077b1
 80086ac:	08007815 	.word	0x08007815
 80086b0:	08007829 	.word	0x08007829
 80086b4:	080077d9 	.word	0x080077d9
 80086b8:	080077ed 	.word	0x080077ed
 80086bc:	080077c5 	.word	0x080077c5
 80086c0:	08003705 	.word	0x08003705
 80086c4:	08007801 	.word	0x08007801
 80086c8:	0800783d 	.word	0x0800783d
 80086cc:	08008b85 	.word	0x08008b85
 80086d0:	08008b99 	.word	0x08008b99
 80086d4:	08008bad 	.word	0x08008bad
 80086d8:	08008bc1 	.word	0x08008bc1
 80086dc:	08008bd5 	.word	0x08008bd5
 80086e0:	08008be9 	.word	0x08008be9
 80086e4:	08008bfd 	.word	0x08008bfd
 80086e8:	08008c11 	.word	0x08008c11

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e074      	b.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a34      	ldr	r2, [pc, #208]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d009      	beq.n	8008742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a33      	ldr	r2, [pc, #204]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d004      	beq.n	8008742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a31      	ldr	r2, [pc, #196]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d108      	bne.n	8008754 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008748:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800875a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a21      	ldr	r2, [pc, #132]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d022      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008784:	d01d      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1f      	ldr	r2, [pc, #124]	@ (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d018      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1d      	ldr	r2, [pc, #116]	@ (800880c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d013      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1c      	ldr	r2, [pc, #112]	@ (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00e      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a15      	ldr	r2, [pc, #84]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d009      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a18      	ldr	r2, [pc, #96]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d004      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a11      	ldr	r2, [pc, #68]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d10c      	bne.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40013400 	.word	0x40013400
 8008804:	40015000 	.word	0x40015000
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800
 8008810:	40000c00 	.word	0x40000c00
 8008814:	40014000 	.word	0x40014000

08008818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008830:	2302      	movs	r3, #2
 8008832:	e078      	b.n	8008926 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008934 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d009      	beq.n	80088da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008938 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d004      	beq.n	80088da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a19      	ldr	r2, [pc, #100]	@ (800893c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d11c      	bne.n	8008914 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40012c00 	.word	0x40012c00
 8008938:	40013400 	.word	0x40013400
 800893c:	40015000 	.word	0x40015000

08008940 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008940:	b480      	push	{r7}
 8008942:	b08b      	sub	sp, #44	@ 0x2c
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_TIMEx_ConfigBreakInput+0x20>
 800895c:	2302      	movs	r3, #2
 800895e:	e10b      	b.n	8008b78 <HAL_TIMEx_ConfigBreakInput+0x238>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b80      	cmp	r3, #128	@ 0x80
 800896e:	f000 8096 	beq.w	8008a9e <HAL_TIMEx_ConfigBreakInput+0x15e>
 8008972:	2b80      	cmp	r3, #128	@ 0x80
 8008974:	f200 809c 	bhi.w	8008ab0 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008978:	2b20      	cmp	r3, #32
 800897a:	d849      	bhi.n	8008a10 <HAL_TIMEx_ConfigBreakInput+0xd0>
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8097 	beq.w	8008ab0 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008982:	3b01      	subs	r3, #1
 8008984:	2b1f      	cmp	r3, #31
 8008986:	f200 8093 	bhi.w	8008ab0 <HAL_TIMEx_ConfigBreakInput+0x170>
 800898a:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <HAL_TIMEx_ConfigBreakInput+0x50>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	08008a17 	.word	0x08008a17
 8008994:	08008a2b 	.word	0x08008a2b
 8008998:	08008ab1 	.word	0x08008ab1
 800899c:	08008a3f 	.word	0x08008a3f
 80089a0:	08008ab1 	.word	0x08008ab1
 80089a4:	08008ab1 	.word	0x08008ab1
 80089a8:	08008ab1 	.word	0x08008ab1
 80089ac:	08008a53 	.word	0x08008a53
 80089b0:	08008ab1 	.word	0x08008ab1
 80089b4:	08008ab1 	.word	0x08008ab1
 80089b8:	08008ab1 	.word	0x08008ab1
 80089bc:	08008ab1 	.word	0x08008ab1
 80089c0:	08008ab1 	.word	0x08008ab1
 80089c4:	08008ab1 	.word	0x08008ab1
 80089c8:	08008ab1 	.word	0x08008ab1
 80089cc:	08008a67 	.word	0x08008a67
 80089d0:	08008ab1 	.word	0x08008ab1
 80089d4:	08008ab1 	.word	0x08008ab1
 80089d8:	08008ab1 	.word	0x08008ab1
 80089dc:	08008ab1 	.word	0x08008ab1
 80089e0:	08008ab1 	.word	0x08008ab1
 80089e4:	08008ab1 	.word	0x08008ab1
 80089e8:	08008ab1 	.word	0x08008ab1
 80089ec:	08008ab1 	.word	0x08008ab1
 80089f0:	08008ab1 	.word	0x08008ab1
 80089f4:	08008ab1 	.word	0x08008ab1
 80089f8:	08008ab1 	.word	0x08008ab1
 80089fc:	08008ab1 	.word	0x08008ab1
 8008a00:	08008ab1 	.word	0x08008ab1
 8008a04:	08008ab1 	.word	0x08008ab1
 8008a08:	08008ab1 	.word	0x08008ab1
 8008a0c:	08008a7b 	.word	0x08008a7b
 8008a10:	2b40      	cmp	r3, #64	@ 0x40
 8008a12:	d03b      	beq.n	8008a8c <HAL_TIMEx_ConfigBreakInput+0x14c>
 8008a14:	e04c      	b.n	8008ab0 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008a16:	2301      	movs	r3, #1
 8008a18:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a22:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008a24:	2309      	movs	r3, #9
 8008a26:	617b      	str	r3, [r7, #20]
      break;
 8008a28:	e04b      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a36:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008a38:	230a      	movs	r3, #10
 8008a3a:	617b      	str	r3, [r7, #20]
      break;
 8008a3c:	e041      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008a3e:	2304      	movs	r3, #4
 8008a40:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008a42:	2302      	movs	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008a46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a4a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008a4c:	230b      	movs	r3, #11
 8008a4e:	617b      	str	r3, [r7, #20]
      break;
 8008a50:	e037      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8008a52:	2308      	movs	r3, #8
 8008a54:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008a56:	2303      	movs	r3, #3
 8008a58:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a5e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008a60:	230c      	movs	r3, #12
 8008a62:	617b      	str	r3, [r7, #20]
      break;
 8008a64:	e02d      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8008a66:	2310      	movs	r3, #16
 8008a68:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008a6a:	2304      	movs	r3, #4
 8008a6c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a72:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8008a74:	230d      	movs	r3, #13
 8008a76:	617b      	str	r3, [r7, #20]
      break;
 8008a78:	e023      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008a7e:	2305      	movs	r3, #5
 8008a80:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
      break;
 8008a8a:	e01a      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8008a8c:	2340      	movs	r3, #64	@ 0x40
 8008a8e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008a90:	2306      	movs	r3, #6
 8008a92:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
      break;
 8008a9c:	e011      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008a9e:	2380      	movs	r3, #128	@ 0x80
 8008aa0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008aa2:	2307      	movs	r3, #7
 8008aa4:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]
      break;
 8008aae:	e008      	b.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
      break;
 8008ac0:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d003      	beq.n	8008ad0 <HAL_TIMEx_ConfigBreakInput+0x190>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d025      	beq.n	8008b1a <HAL_TIMEx_ConfigBreakInput+0x1da>
 8008ace:	e049      	b.n	8008b64 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	43db      	mvns	r3, r3
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	409a      	lsls	r2, r3
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	4013      	ands	r3, r2
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	43db      	mvns	r3, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4013      	ands	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	409a      	lsls	r2, r3
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008b18:	e028      	b.n	8008b6c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b20:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	409a      	lsls	r2, r3
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	4013      	ands	r3, r2
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	43db      	mvns	r3, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4013      	ands	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	409a      	lsls	r2, r3
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4013      	ands	r3, r2
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008b62:	e003      	b.n	8008b6c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008b6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	372c      	adds	r7, #44	@ 0x2c
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e050      	b.n	8008cd8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d114      	bne.n	8008c6a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fdc5 	bl	80097d8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a21      	ldr	r2, [pc, #132]	@ (8008ce0 <HAL_UART_Init+0xbc>)
 8008c5c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2224      	movs	r2, #36	@ 0x24
 8008c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0201 	bic.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f8f2 	bl	8009e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fdf3 	bl	800987c <UART_SetConfig>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e01b      	b.n	8008cd8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f971 	bl	8009fb8 <UART_CheckIdleState>
 8008cd6:	4603      	mov	r3, r0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	08003d1d 	.word	0x08003d1d

08008ce4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	460b      	mov	r3, r1
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e09c      	b.n	8008e4a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d16c      	bne.n	8008df4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008d1a:	7afb      	ldrb	r3, [r7, #11]
 8008d1c:	2b0c      	cmp	r3, #12
 8008d1e:	d85e      	bhi.n	8008dde <HAL_UART_RegisterCallback+0xfa>
 8008d20:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <HAL_UART_RegisterCallback+0x44>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008d5d 	.word	0x08008d5d
 8008d2c:	08008d67 	.word	0x08008d67
 8008d30:	08008d71 	.word	0x08008d71
 8008d34:	08008d7b 	.word	0x08008d7b
 8008d38:	08008d85 	.word	0x08008d85
 8008d3c:	08008d8f 	.word	0x08008d8f
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008da3 	.word	0x08008da3
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008db7 	.word	0x08008db7
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008dcb 	.word	0x08008dcb
 8008d58:	08008dd5 	.word	0x08008dd5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008d64:	e070      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008d6e:	e06b      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008d78:	e066      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008d82:	e061      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008d8c:	e05c      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008d96:	e057      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008da0:	e052      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008daa:	e04d      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008db4:	e048      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008dbe:	e043      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008dc8:	e03e      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008dd2:	e039      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ddc:	e034      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
        break;
 8008df2:	e029      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d11a      	bne.n	8008e34 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008dfe:	7afb      	ldrb	r3, [r7, #11]
 8008e00:	2b0b      	cmp	r3, #11
 8008e02:	d002      	beq.n	8008e0a <HAL_UART_RegisterCallback+0x126>
 8008e04:	2b0c      	cmp	r3, #12
 8008e06:	d005      	beq.n	8008e14 <HAL_UART_RegisterCallback+0x130>
 8008e08:	e009      	b.n	8008e1e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008e12:	e019      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008e1c:	e014      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	75fb      	strb	r3, [r7, #23]
        break;
 8008e32:	e009      	b.n	8008e48 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	@ 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d167      	bne.n	8008f40 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_UART_Transmit_DMA+0x24>
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e060      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2221      	movs	r2, #33	@ 0x21
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d028      	beq.n	8008f00 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eb2:	4a26      	ldr	r2, [pc, #152]	@ (8008f4c <HAL_UART_Transmit_DMA+0xf4>)
 8008eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eba:	4a25      	ldr	r2, [pc, #148]	@ (8008f50 <HAL_UART_Transmit_DMA+0xf8>)
 8008ebc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ec2:	4a24      	ldr	r2, [pc, #144]	@ (8008f54 <HAL_UART_Transmit_DMA+0xfc>)
 8008ec4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eca:	2200      	movs	r2, #0
 8008ecc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	461a      	mov	r2, r3
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	f7fb fc47 	bl	8004774 <HAL_DMA_Start_IT>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2210      	movs	r2, #16
 8008ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e020      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2240      	movs	r2, #64	@ 0x40
 8008f06:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	613b      	str	r3, [r7, #16]
   return(result);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f28:	623a      	str	r2, [r7, #32]
 8008f2a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e000      	b.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f40:	2302      	movs	r3, #2
  }
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3728      	adds	r7, #40	@ 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800a483 	.word	0x0800a483
 8008f50:	0800a521 	.word	0x0800a521
 8008f54:	0800a6bb 	.word	0x0800a6bb

08008f58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	@ 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d137      	bne.n	8008fe0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_UART_Receive_DMA+0x24>
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e030      	b.n	8008fe2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <HAL_UART_Receive_DMA+0x94>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d01f      	beq.n	8008fd0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d018      	beq.n	8008fd0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	613b      	str	r3, [r7, #16]
   return(result);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	623b      	str	r3, [r7, #32]
 8008fbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	6a3a      	ldr	r2, [r7, #32]
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e6      	bne.n	8008f9e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f001 f906 	bl	800a1e8 <UART_Start_Receive_DMA>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	e000      	b.n	8008fe2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fe0:	2302      	movs	r3, #2
  }
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3728      	adds	r7, #40	@ 0x28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40008000 	.word	0x40008000

08008ff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009016:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800901a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800901e:	4013      	ands	r3, r2
 8009020:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d11b      	bne.n	8009064 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d015      	beq.n	8009064 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 82f3 	beq.w	8009640 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
      }
      return;
 8009062:	e2ed      	b.n	8009640 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 8129 	beq.w	80092c0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800906e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009072:	4b90      	ldr	r3, [pc, #576]	@ (80092b4 <HAL_UART_IRQHandler+0x2c4>)
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800907a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800907e:	4b8e      	ldr	r3, [pc, #568]	@ (80092b8 <HAL_UART_IRQHandler+0x2c8>)
 8009080:	4013      	ands	r3, r2
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 811c 	beq.w	80092c0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d011      	beq.n	80090b8 <HAL_UART_IRQHandler+0xc8>
 8009094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2201      	movs	r2, #1
 80090a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ae:	f043 0201 	orr.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d011      	beq.n	80090e8 <HAL_UART_IRQHandler+0xf8>
 80090c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2202      	movs	r2, #2
 80090d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090de:	f043 0204 	orr.w	r2, r3, #4
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d011      	beq.n	8009118 <HAL_UART_IRQHandler+0x128>
 80090f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2204      	movs	r2, #4
 8009106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910e:	f043 0202 	orr.w	r2, r3, #2
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d017      	beq.n	8009154 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b00      	cmp	r3, #0
 800912e:	d105      	bne.n	800913c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009130:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009134:	4b5f      	ldr	r3, [pc, #380]	@ (80092b4 <HAL_UART_IRQHandler+0x2c4>)
 8009136:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00b      	beq.n	8009154 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2208      	movs	r2, #8
 8009142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800914a:	f043 0208 	orr.w	r2, r3, #8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800915c:	2b00      	cmp	r3, #0
 800915e:	d012      	beq.n	8009186 <HAL_UART_IRQHandler+0x196>
 8009160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00c      	beq.n	8009186 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800917c:	f043 0220 	orr.w	r2, r3, #32
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8259 	beq.w	8009644 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d013      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800919e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091da:	2b40      	cmp	r3, #64	@ 0x40
 80091dc:	d005      	beq.n	80091ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d058      	beq.n	800929c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 f8e3 	bl	800a3b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091fa:	2b40      	cmp	r3, #64	@ 0x40
 80091fc:	d148      	bne.n	8009290 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800922a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800922e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1d9      	bne.n	80091fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800925a:	4a18      	ldr	r2, [pc, #96]	@ (80092bc <HAL_UART_IRQHandler+0x2cc>)
 800925c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009264:	4618      	mov	r0, r3
 8009266:	f7fb fb59 	bl	800491c <HAL_DMA_Abort_IT>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01f      	beq.n	80092b0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800927e:	4610      	mov	r0, r2
 8009280:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009282:	e015      	b.n	80092b0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928e:	e00f      	b.n	80092b0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929a:	e009      	b.n	80092b0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80092ae:	e1c9      	b.n	8009644 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b0:	bf00      	nop
    return;
 80092b2:	e1c7      	b.n	8009644 <HAL_UART_IRQHandler+0x654>
 80092b4:	10000001 	.word	0x10000001
 80092b8:	04000120 	.word	0x04000120
 80092bc:	0800a73f 	.word	0x0800a73f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	f040 8157 	bne.w	8009578 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8150 	beq.w	8009578 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8149 	beq.w	8009578 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2210      	movs	r2, #16
 80092ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f8:	2b40      	cmp	r3, #64	@ 0x40
 80092fa:	f040 80bd 	bne.w	8009478 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800930c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8199 	beq.w	8009648 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800931c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009320:	429a      	cmp	r2, r3
 8009322:	f080 8191 	bcs.w	8009648 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800932c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 8087 	bne.w	8009452 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800935c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800936e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009372:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800937a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1da      	bne.n	8009344 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800939e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e1      	bne.n	800938e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e3      	bne.n	80093ca <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800941e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009420:	f023 0310 	bic.w	r3, r3, #16
 8009424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e4      	bne.n	8009410 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944c:	4618      	mov	r0, r3
 800944e:	f7fb fa0c 	bl	800486a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800946a:	b292      	uxth	r2, r2
 800946c:	1a8a      	subs	r2, r1, r2
 800946e:	b292      	uxth	r2, r2
 8009470:	4611      	mov	r1, r2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009476:	e0e7      	b.n	8009648 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009484:	b29b      	uxth	r3, r3
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80d9 	beq.w	800964c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800949a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80d4 	beq.w	800964c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e4      	bne.n	80094a4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	623b      	str	r3, [r7, #32]
   return(result);
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094f0:	f023 0301 	bic.w	r3, r3, #1
 80094f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3308      	adds	r3, #8
 80094fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009502:	633a      	str	r2, [r7, #48]	@ 0x30
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e1      	bne.n	80094da <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	60fb      	str	r3, [r7, #12]
   return(result);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0310 	bic.w	r3, r3, #16
 800953e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	617b      	str	r3, [r7, #20]
   return(result);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e4      	bne.n	800952a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800956c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009570:	4611      	mov	r1, r2
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009576:	e069      	b.n	800964c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d010      	beq.n	80095a6 <HAL_UART_IRQHandler+0x5b6>
 8009584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009598:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095a4:	e055      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d014      	beq.n	80095dc <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d008      	beq.n	80095dc <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d03e      	beq.n	8009650 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
    }
    return;
 80095da:	e039      	b.n	8009650 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <HAL_UART_IRQHandler+0x60c>
 80095e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 f8ba 	bl	800a76e <UART_EndTransmit_IT>
    return;
 80095fa:	e02a      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <HAL_UART_IRQHandler+0x630>
 8009608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800960c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800961e:	e018      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d012      	beq.n	8009652 <HAL_UART_IRQHandler+0x662>
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009630:	2b00      	cmp	r3, #0
 8009632:	da0e      	bge.n	8009652 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800963e:	e008      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
      return;
 8009640:	bf00      	nop
 8009642:	e006      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
    return;
 8009644:	bf00      	nop
 8009646:	e004      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
      return;
 8009648:	bf00      	nop
 800964a:	e002      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
      return;
 800964c:	bf00      	nop
 800964e:	e000      	b.n	8009652 <HAL_UART_IRQHandler+0x662>
    return;
 8009650:	bf00      	nop
  }
}
 8009652:	37e8      	adds	r7, #232	@ 0xe8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a09      	ldr	r2, [pc, #36]	@ (8009744 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	615a      	str	r2, [r3, #20]
  }
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	40008000 	.word	0x40008000

08009748 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a18      	ldr	r2, [pc, #96]	@ (80097b8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d027      	beq.n	80097aa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009760:	2b20      	cmp	r3, #32
 8009762:	d120      	bne.n	80097a6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_UART_EnableReceiverTimeout+0x2a>
 800976e:	2302      	movs	r3, #2
 8009770:	e01c      	b.n	80097ac <HAL_UART_EnableReceiverTimeout+0x64>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2224      	movs	r2, #36	@ 0x24
 800977e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009790:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e002      	b.n	80097ac <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80097a6:	2302      	movs	r3, #2
 80097a8:	e000      	b.n	80097ac <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
  }
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	40008000 	.word	0x40008000

080097bc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a1a      	ldr	r2, [pc, #104]	@ (800984c <UART_InitCallbacksToDefault+0x74>)
 80097e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a19      	ldr	r2, [pc, #100]	@ (8009850 <UART_InitCallbacksToDefault+0x78>)
 80097ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a18      	ldr	r2, [pc, #96]	@ (8009854 <UART_InitCallbacksToDefault+0x7c>)
 80097f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a17      	ldr	r2, [pc, #92]	@ (8009858 <UART_InitCallbacksToDefault+0x80>)
 80097fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a16      	ldr	r2, [pc, #88]	@ (800985c <UART_InitCallbacksToDefault+0x84>)
 8009804:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a15      	ldr	r2, [pc, #84]	@ (8009860 <UART_InitCallbacksToDefault+0x88>)
 800980c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a14      	ldr	r2, [pc, #80]	@ (8009864 <UART_InitCallbacksToDefault+0x8c>)
 8009814:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a13      	ldr	r2, [pc, #76]	@ (8009868 <UART_InitCallbacksToDefault+0x90>)
 800981c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a12      	ldr	r2, [pc, #72]	@ (800986c <UART_InitCallbacksToDefault+0x94>)
 8009824:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a11      	ldr	r2, [pc, #68]	@ (8009870 <UART_InitCallbacksToDefault+0x98>)
 800982c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a10      	ldr	r2, [pc, #64]	@ (8009874 <UART_InitCallbacksToDefault+0x9c>)
 8009834:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a0f      	ldr	r2, [pc, #60]	@ (8009878 <UART_InitCallbacksToDefault+0xa0>)
 800983c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	0800966d 	.word	0x0800966d
 8009850:	08009659 	.word	0x08009659
 8009854:	08009695 	.word	0x08009695
 8009858:	08009681 	.word	0x08009681
 800985c:	080096a9 	.word	0x080096a9
 8009860:	080096bd 	.word	0x080096bd
 8009864:	080096d1 	.word	0x080096d1
 8009868:	080096e5 	.word	0x080096e5
 800986c:	0800a7c9 	.word	0x0800a7c9
 8009870:	0800a7dd 	.word	0x0800a7dd
 8009874:	0800a7f1 	.word	0x0800a7f1
 8009878:	080096f9 	.word	0x080096f9

0800987c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800987c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009880:	b08c      	sub	sp, #48	@ 0x30
 8009882:	af00      	add	r7, sp, #0
 8009884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	431a      	orrs	r2, r3
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	431a      	orrs	r2, r3
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4baa      	ldr	r3, [pc, #680]	@ (8009b54 <UART_SetConfig+0x2d8>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a9f      	ldr	r2, [pc, #636]	@ (8009b58 <UART_SetConfig+0x2dc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d004      	beq.n	80098e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e4:	4313      	orrs	r3, r2
 80098e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	f023 010f 	bic.w	r1, r3, #15
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a90      	ldr	r2, [pc, #576]	@ (8009b5c <UART_SetConfig+0x2e0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d125      	bne.n	800996c <UART_SetConfig+0xf0>
 8009920:	4b8f      	ldr	r3, [pc, #572]	@ (8009b60 <UART_SetConfig+0x2e4>)
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d81a      	bhi.n	8009964 <UART_SetConfig+0xe8>
 800992e:	a201      	add	r2, pc, #4	@ (adr r2, 8009934 <UART_SetConfig+0xb8>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009945 	.word	0x08009945
 8009938:	08009955 	.word	0x08009955
 800993c:	0800994d 	.word	0x0800994d
 8009940:	0800995d 	.word	0x0800995d
 8009944:	2301      	movs	r3, #1
 8009946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994a:	e116      	b.n	8009b7a <UART_SetConfig+0x2fe>
 800994c:	2302      	movs	r3, #2
 800994e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009952:	e112      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009954:	2304      	movs	r3, #4
 8009956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995a:	e10e      	b.n	8009b7a <UART_SetConfig+0x2fe>
 800995c:	2308      	movs	r3, #8
 800995e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009962:	e10a      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009964:	2310      	movs	r3, #16
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996a:	e106      	b.n	8009b7a <UART_SetConfig+0x2fe>
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a7c      	ldr	r2, [pc, #496]	@ (8009b64 <UART_SetConfig+0x2e8>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d138      	bne.n	80099e8 <UART_SetConfig+0x16c>
 8009976:	4b7a      	ldr	r3, [pc, #488]	@ (8009b60 <UART_SetConfig+0x2e4>)
 8009978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997c:	f003 030c 	and.w	r3, r3, #12
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d82d      	bhi.n	80099e0 <UART_SetConfig+0x164>
 8009984:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <UART_SetConfig+0x110>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	080099c1 	.word	0x080099c1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099e1 	.word	0x080099e1
 8009998:	080099e1 	.word	0x080099e1
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	080099e1 	.word	0x080099e1
 80099a4:	080099e1 	.word	0x080099e1
 80099a8:	080099e1 	.word	0x080099e1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	080099e1 	.word	0x080099e1
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099d9 	.word	0x080099d9
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c6:	e0d8      	b.n	8009b7a <UART_SetConfig+0x2fe>
 80099c8:	2302      	movs	r3, #2
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ce:	e0d4      	b.n	8009b7a <UART_SetConfig+0x2fe>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d6:	e0d0      	b.n	8009b7a <UART_SetConfig+0x2fe>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099de:	e0cc      	b.n	8009b7a <UART_SetConfig+0x2fe>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e6:	e0c8      	b.n	8009b7a <UART_SetConfig+0x2fe>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a5e      	ldr	r2, [pc, #376]	@ (8009b68 <UART_SetConfig+0x2ec>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d125      	bne.n	8009a3e <UART_SetConfig+0x1c2>
 80099f2:	4b5b      	ldr	r3, [pc, #364]	@ (8009b60 <UART_SetConfig+0x2e4>)
 80099f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099fc:	2b30      	cmp	r3, #48	@ 0x30
 80099fe:	d016      	beq.n	8009a2e <UART_SetConfig+0x1b2>
 8009a00:	2b30      	cmp	r3, #48	@ 0x30
 8009a02:	d818      	bhi.n	8009a36 <UART_SetConfig+0x1ba>
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d00a      	beq.n	8009a1e <UART_SetConfig+0x1a2>
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	d814      	bhi.n	8009a36 <UART_SetConfig+0x1ba>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <UART_SetConfig+0x19a>
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d008      	beq.n	8009a26 <UART_SetConfig+0x1aa>
 8009a14:	e00f      	b.n	8009a36 <UART_SetConfig+0x1ba>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1c:	e0ad      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a1e:	2302      	movs	r3, #2
 8009a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a24:	e0a9      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a26:	2304      	movs	r3, #4
 8009a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2c:	e0a5      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a34:	e0a1      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a36:	2310      	movs	r3, #16
 8009a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3c:	e09d      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a4a      	ldr	r2, [pc, #296]	@ (8009b6c <UART_SetConfig+0x2f0>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d125      	bne.n	8009a94 <UART_SetConfig+0x218>
 8009a48:	4b45      	ldr	r3, [pc, #276]	@ (8009b60 <UART_SetConfig+0x2e4>)
 8009a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a54:	d016      	beq.n	8009a84 <UART_SetConfig+0x208>
 8009a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a58:	d818      	bhi.n	8009a8c <UART_SetConfig+0x210>
 8009a5a:	2b80      	cmp	r3, #128	@ 0x80
 8009a5c:	d00a      	beq.n	8009a74 <UART_SetConfig+0x1f8>
 8009a5e:	2b80      	cmp	r3, #128	@ 0x80
 8009a60:	d814      	bhi.n	8009a8c <UART_SetConfig+0x210>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <UART_SetConfig+0x1f0>
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	d008      	beq.n	8009a7c <UART_SetConfig+0x200>
 8009a6a:	e00f      	b.n	8009a8c <UART_SetConfig+0x210>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a72:	e082      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a74:	2302      	movs	r3, #2
 8009a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7a:	e07e      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a82:	e07a      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a84:	2308      	movs	r3, #8
 8009a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8a:	e076      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a92:	e072      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a35      	ldr	r2, [pc, #212]	@ (8009b70 <UART_SetConfig+0x2f4>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d12a      	bne.n	8009af4 <UART_SetConfig+0x278>
 8009a9e:	4b30      	ldr	r3, [pc, #192]	@ (8009b60 <UART_SetConfig+0x2e4>)
 8009aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aac:	d01a      	beq.n	8009ae4 <UART_SetConfig+0x268>
 8009aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ab2:	d81b      	bhi.n	8009aec <UART_SetConfig+0x270>
 8009ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab8:	d00c      	beq.n	8009ad4 <UART_SetConfig+0x258>
 8009aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009abe:	d815      	bhi.n	8009aec <UART_SetConfig+0x270>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <UART_SetConfig+0x250>
 8009ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac8:	d008      	beq.n	8009adc <UART_SetConfig+0x260>
 8009aca:	e00f      	b.n	8009aec <UART_SetConfig+0x270>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e052      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e04e      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e04a      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e046      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e042      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a17      	ldr	r2, [pc, #92]	@ (8009b58 <UART_SetConfig+0x2dc>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d13a      	bne.n	8009b74 <UART_SetConfig+0x2f8>
 8009afe:	4b18      	ldr	r3, [pc, #96]	@ (8009b60 <UART_SetConfig+0x2e4>)
 8009b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b0c:	d01a      	beq.n	8009b44 <UART_SetConfig+0x2c8>
 8009b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b12:	d81b      	bhi.n	8009b4c <UART_SetConfig+0x2d0>
 8009b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b18:	d00c      	beq.n	8009b34 <UART_SetConfig+0x2b8>
 8009b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b1e:	d815      	bhi.n	8009b4c <UART_SetConfig+0x2d0>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <UART_SetConfig+0x2b0>
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b28:	d008      	beq.n	8009b3c <UART_SetConfig+0x2c0>
 8009b2a:	e00f      	b.n	8009b4c <UART_SetConfig+0x2d0>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b32:	e022      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009b34:	2302      	movs	r3, #2
 8009b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3a:	e01e      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b42:	e01a      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009b44:	2308      	movs	r3, #8
 8009b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4a:	e016      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b52:	e012      	b.n	8009b7a <UART_SetConfig+0x2fe>
 8009b54:	cfff69f3 	.word	0xcfff69f3
 8009b58:	40008000 	.word	0x40008000
 8009b5c:	40013800 	.word	0x40013800
 8009b60:	40021000 	.word	0x40021000
 8009b64:	40004400 	.word	0x40004400
 8009b68:	40004800 	.word	0x40004800
 8009b6c:	40004c00 	.word	0x40004c00
 8009b70:	40005000 	.word	0x40005000
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4aae      	ldr	r2, [pc, #696]	@ (8009e38 <UART_SetConfig+0x5bc>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	f040 8097 	bne.w	8009cb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b8a:	2b08      	cmp	r3, #8
 8009b8c:	d823      	bhi.n	8009bd6 <UART_SetConfig+0x35a>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <UART_SetConfig+0x318>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bd7 	.word	0x08009bd7
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bd7 	.word	0x08009bd7
 8009ba4:	08009bc7 	.word	0x08009bc7
 8009ba8:	08009bd7 	.word	0x08009bd7
 8009bac:	08009bd7 	.word	0x08009bd7
 8009bb0:	08009bd7 	.word	0x08009bd7
 8009bb4:	08009bcf 	.word	0x08009bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb8:	f7fb ffa0 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8009bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bbe:	e010      	b.n	8009be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8009e3c <UART_SetConfig+0x5c0>)
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bc4:	e00d      	b.n	8009be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc6:	f7fb ff2b 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8009bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bcc:	e009      	b.n	8009be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bd4:	e005      	b.n	8009be2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 8130 	beq.w	8009e4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	4a94      	ldr	r2, [pc, #592]	@ (8009e40 <UART_SetConfig+0x5c4>)
 8009bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d305      	bcc.n	8009c1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d903      	bls.n	8009c22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c20:	e113      	b.n	8009e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	2200      	movs	r2, #0
 8009c26:	60bb      	str	r3, [r7, #8]
 8009c28:	60fa      	str	r2, [r7, #12]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2e:	4a84      	ldr	r2, [pc, #528]	@ (8009e40 <UART_SetConfig+0x5c4>)
 8009c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2200      	movs	r2, #0
 8009c38:	603b      	str	r3, [r7, #0]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c44:	f7f7 f8e4 	bl	8000e10 <__aeabi_uldivmod>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	020b      	lsls	r3, r1, #8
 8009c5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c5e:	0202      	lsls	r2, r0, #8
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	6849      	ldr	r1, [r1, #4]
 8009c64:	0849      	lsrs	r1, r1, #1
 8009c66:	2000      	movs	r0, #0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	eb12 0804 	adds.w	r8, r2, r4
 8009c70:	eb43 0905 	adc.w	r9, r3, r5
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	469a      	mov	sl, r3
 8009c7c:	4693      	mov	fp, r2
 8009c7e:	4652      	mov	r2, sl
 8009c80:	465b      	mov	r3, fp
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f7 f8c3 	bl	8000e10 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4613      	mov	r3, r2
 8009c90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c98:	d308      	bcc.n	8009cac <UART_SetConfig+0x430>
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ca0:	d204      	bcs.n	8009cac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6a3a      	ldr	r2, [r7, #32]
 8009ca8:	60da      	str	r2, [r3, #12]
 8009caa:	e0ce      	b.n	8009e4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cb2:	e0ca      	b.n	8009e4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cbc:	d166      	bne.n	8009d8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cc2:	2b08      	cmp	r3, #8
 8009cc4:	d827      	bhi.n	8009d16 <UART_SetConfig+0x49a>
 8009cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <UART_SetConfig+0x450>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009cf1 	.word	0x08009cf1
 8009cd0:	08009cf9 	.word	0x08009cf9
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	08009d17 	.word	0x08009d17
 8009cdc:	08009d07 	.word	0x08009d07
 8009ce0:	08009d17 	.word	0x08009d17
 8009ce4:	08009d17 	.word	0x08009d17
 8009ce8:	08009d17 	.word	0x08009d17
 8009cec:	08009d0f 	.word	0x08009d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf0:	f7fb ff04 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8009cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cf6:	e014      	b.n	8009d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf8:	f7fb ff16 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
 8009cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cfe:	e010      	b.n	8009d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d00:	4b4e      	ldr	r3, [pc, #312]	@ (8009e3c <UART_SetConfig+0x5c0>)
 8009d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d04:	e00d      	b.n	8009d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d06:	f7fb fe8b 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8009d0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d0c:	e009      	b.n	8009d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d14:	e005      	b.n	8009d22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8090 	beq.w	8009e4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2e:	4a44      	ldr	r2, [pc, #272]	@ (8009e40 <UART_SetConfig+0x5c4>)
 8009d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d3c:	005a      	lsls	r2, r3, #1
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	441a      	add	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d916      	bls.n	8009d84 <UART_SetConfig+0x508>
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5c:	d212      	bcs.n	8009d84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f023 030f 	bic.w	r3, r3, #15
 8009d66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	8bfb      	ldrh	r3, [r7, #30]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	8bfa      	ldrh	r2, [r7, #30]
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	e062      	b.n	8009e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d8a:	e05e      	b.n	8009e4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d828      	bhi.n	8009de6 <UART_SetConfig+0x56a>
 8009d94:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <UART_SetConfig+0x520>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	08009de7 	.word	0x08009de7
 8009dac:	08009dd7 	.word	0x08009dd7
 8009db0:	08009de7 	.word	0x08009de7
 8009db4:	08009de7 	.word	0x08009de7
 8009db8:	08009de7 	.word	0x08009de7
 8009dbc:	08009ddf 	.word	0x08009ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc0:	f7fb fe9c 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8009dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dc6:	e014      	b.n	8009df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc8:	f7fb feae 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
 8009dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dce:	e010      	b.n	8009df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e3c <UART_SetConfig+0x5c0>)
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dd4:	e00d      	b.n	8009df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dd6:	f7fb fe23 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8009dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ddc:	e009      	b.n	8009df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009de4:	e005      	b.n	8009df2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009df0:	bf00      	nop
    }

    if (pclk != 0U)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d028      	beq.n	8009e4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfc:	4a10      	ldr	r2, [pc, #64]	@ (8009e40 <UART_SetConfig+0x5c4>)
 8009dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	441a      	add	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	2b0f      	cmp	r3, #15
 8009e20:	d910      	bls.n	8009e44 <UART_SetConfig+0x5c8>
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e28:	d20c      	bcs.n	8009e44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	e009      	b.n	8009e4a <UART_SetConfig+0x5ce>
 8009e36:	bf00      	nop
 8009e38:	40008000 	.word	0x40008000
 8009e3c:	00f42400 	.word	0x00f42400
 8009e40:	0800ab3c 	.word	0x0800ab3c
      }
      else
      {
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2200      	movs	r2, #0
 8009e64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3730      	adds	r7, #48	@ 0x30
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	f003 0320 	and.w	r3, r3, #32
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01a      	beq.n	8009f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f72:	d10a      	bne.n	8009f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	605a      	str	r2, [r3, #4]
  }
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b098      	sub	sp, #96	@ 0x60
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fc8:	f7fa f9ee 	bl	80043a8 <HAL_GetTick>
 8009fcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0308 	and.w	r3, r3, #8
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d12f      	bne.n	800a03c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f88e 	bl	800a10c <UART_WaitOnFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d022      	beq.n	800a03c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a00a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
 800a012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a014:	647b      	str	r3, [r7, #68]	@ 0x44
 800a016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a01a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e6      	bne.n	8009ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e063      	b.n	800a104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	2b04      	cmp	r3, #4
 800a048:	d149      	bne.n	800a0de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a052:	2200      	movs	r2, #0
 800a054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f857 	bl	800a10c <UART_WaitOnFlagUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d03c      	beq.n	800a0de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	623b      	str	r3, [r7, #32]
   return(result);
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a082:	633b      	str	r3, [r7, #48]	@ 0x30
 800a084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e6      	bne.n	800a064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0b6:	61fa      	str	r2, [r7, #28]
 800a0b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	69b9      	ldr	r1, [r7, #24]
 800a0bc:	69fa      	ldr	r2, [r7, #28]
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e5      	bne.n	800a096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e012      	b.n	800a104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3758      	adds	r7, #88	@ 0x58
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	4613      	mov	r3, r2
 800a11a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11c:	e04f      	b.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a124:	d04b      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a126:	f7fa f93f 	bl	80043a8 <HAL_GetTick>
 800a12a:	4602      	mov	r2, r0
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	429a      	cmp	r2, r3
 800a134:	d302      	bcc.n	800a13c <UART_WaitOnFlagUntilTimeout+0x30>
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e04e      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d037      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b80      	cmp	r3, #128	@ 0x80
 800a152:	d034      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b40      	cmp	r3, #64	@ 0x40
 800a158:	d031      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b08      	cmp	r3, #8
 800a166:	d110      	bne.n	800a18a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2208      	movs	r2, #8
 800a16e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 f920 	bl	800a3b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2208      	movs	r2, #8
 800a17a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e029      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a198:	d111      	bne.n	800a1be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f906 	bl	800a3b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e00f      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d0a0      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b096      	sub	sp, #88	@ 0x58
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	88fa      	ldrh	r2, [r7, #6]
 800a200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2222      	movs	r2, #34	@ 0x22
 800a210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02d      	beq.n	800a27a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a224:	4a40      	ldr	r2, [pc, #256]	@ (800a328 <UART_Start_Receive_DMA+0x140>)
 800a226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a22e:	4a3f      	ldr	r2, [pc, #252]	@ (800a32c <UART_Start_Receive_DMA+0x144>)
 800a230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a238:	4a3d      	ldr	r2, [pc, #244]	@ (800a330 <UART_Start_Receive_DMA+0x148>)
 800a23a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a242:	2200      	movs	r2, #0
 800a244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3324      	adds	r3, #36	@ 0x24
 800a252:	4619      	mov	r1, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a258:	461a      	mov	r2, r3
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	f7fa fa8a 	bl	8004774 <HAL_DMA_Start_IT>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2210      	movs	r2, #16
 800a26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2220      	movs	r2, #32
 800a272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e051      	b.n	800a31e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d018      	beq.n	800a2b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28a:	e853 3f00 	ldrex	r3, [r3]
 800a28e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a296:	657b      	str	r3, [r7, #84]	@ 0x54
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	461a      	mov	r2, r3
 800a29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2a8:	e841 2300 	strex	r3, r2, [r1]
 800a2ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1e6      	bne.n	800a282 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a2d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e5      	bne.n	800a2b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a308:	623a      	str	r2, [r7, #32]
 800a30a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	69f9      	ldr	r1, [r7, #28]
 800a30e:	6a3a      	ldr	r2, [r7, #32]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	61bb      	str	r3, [r7, #24]
   return(result);
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3758      	adds	r7, #88	@ 0x58
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	0800a541 	.word	0x0800a541
 800a32c:	0800a675 	.word	0x0800a675
 800a330:	0800a6bb 	.word	0x0800a6bb

0800a334 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b08f      	sub	sp, #60	@ 0x3c
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	61fb      	str	r3, [r7, #28]
   return(result);
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a350:	637b      	str	r3, [r7, #52]	@ 0x34
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a35c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e6      	bne.n	800a33c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a384:	633b      	str	r3, [r7, #48]	@ 0x30
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a38e:	61ba      	str	r2, [r7, #24]
 800a390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6979      	ldr	r1, [r7, #20]
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	613b      	str	r3, [r7, #16]
   return(result);
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a3aa:	bf00      	nop
 800a3ac:	373c      	adds	r7, #60	@ 0x3c
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b095      	sub	sp, #84	@ 0x54
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e6      	bne.n	800a3be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a406:	f023 0301 	bic.w	r3, r3, #1
 800a40a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a41a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e3      	bne.n	800a3f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d118      	bne.n	800a462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f023 0310 	bic.w	r3, r3, #16
 800a444:	647b      	str	r3, [r7, #68]	@ 0x44
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	613b      	str	r3, [r7, #16]
   return(result);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1e6      	bne.n	800a430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a476:	bf00      	nop
 800a478:	3754      	adds	r7, #84	@ 0x54
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b090      	sub	sp, #64	@ 0x40
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d137      	bne.n	800a50e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e5      	bne.n	800a4a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	e853 3f00 	ldrex	r3, [r3]
 800a4e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fc:	69b9      	ldr	r1, [r7, #24]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	e841 2300 	strex	r3, r2, [r1]
 800a504:	617b      	str	r3, [r7, #20]
   return(result);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e6      	bne.n	800a4da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a50c:	e004      	b.n	800a518 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a514:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a516:	4798      	blx	r3
}
 800a518:	bf00      	nop
 800a51a:	3740      	adds	r7, #64	@ 0x40
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b09c      	sub	sp, #112	@ 0x70
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d171      	bne.n	800a640 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a55c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a55e:	2200      	movs	r2, #0
 800a560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a582:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a584:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a588:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e6      	bne.n	800a564 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e5      	bne.n	800a596 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e5      	bne.n	800a5ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d118      	bne.n	800a640 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0310 	bic.w	r3, r3, #16
 800a622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	69b9      	ldr	r1, [r7, #24]
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	617b      	str	r3, [r7, #20]
   return(result);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e6      	bne.n	800a60e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a642:	2200      	movs	r2, #0
 800a644:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d109      	bne.n	800a662 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a64e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a654:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a656:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a65a:	4611      	mov	r1, r2
 800a65c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a65e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a660:	e004      	b.n	800a66c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a668:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a66a:	4798      	blx	r3
}
 800a66c:	bf00      	nop
 800a66e:	3770      	adds	r7, #112	@ 0x70
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a680:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d10b      	bne.n	800a6a8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a69c:	0852      	lsrs	r2, r2, #1
 800a69e:	b292      	uxth	r2, r2
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6a6:	e004      	b.n	800a6b2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	4798      	blx	r3
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e2:	2b80      	cmp	r3, #128	@ 0x80
 800a6e4:	d109      	bne.n	800a6fa <UART_DMAError+0x40>
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b21      	cmp	r3, #33	@ 0x21
 800a6ea:	d106      	bne.n	800a6fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a6f4:	6978      	ldr	r0, [r7, #20]
 800a6f6:	f7ff fe1d 	bl	800a334 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a704:	2b40      	cmp	r3, #64	@ 0x40
 800a706:	d109      	bne.n	800a71c <UART_DMAError+0x62>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b22      	cmp	r3, #34	@ 0x22
 800a70c:	d106      	bne.n	800a71c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2200      	movs	r2, #0
 800a712:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a716:	6978      	ldr	r0, [r7, #20]
 800a718:	f7ff fe4d 	bl	800a3b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a722:	f043 0210 	orr.w	r2, r3, #16
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a732:	6978      	ldr	r0, [r7, #20]
 800a734:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a736:	bf00      	nop
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a766:	bf00      	nop
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b088      	sub	sp, #32
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	60bb      	str	r3, [r7, #8]
   return(result);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6979      	ldr	r1, [r7, #20]
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e6      	bne.n	800a776 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7c0:	bf00      	nop
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_UARTEx_DisableFifoMode+0x16>
 800a816:	2302      	movs	r3, #2
 800a818:	e027      	b.n	800a86a <HAL_UARTEx_DisableFifoMode+0x66>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2224      	movs	r2, #36	@ 0x24
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a848:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e02d      	b.n	800a8ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2224      	movs	r2, #36	@ 0x24
 800a89a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f850 	bl	800a970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a902:	2b01      	cmp	r3, #1
 800a904:	d101      	bne.n	800a90a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a906:	2302      	movs	r3, #2
 800a908:	e02d      	b.n	800a966 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2224      	movs	r2, #36	@ 0x24
 800a916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 0201 	bic.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f812 	bl	800a970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2220      	movs	r2, #32
 800a958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d108      	bne.n	800a992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a990:	e031      	b.n	800a9f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a992:	2308      	movs	r3, #8
 800a994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a996:	2308      	movs	r3, #8
 800a998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	0e5b      	lsrs	r3, r3, #25
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	0f5b      	lsrs	r3, r3, #29
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f003 0307 	and.w	r3, r3, #7
 800a9b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	7b3a      	ldrb	r2, [r7, #12]
 800a9be:	4911      	ldr	r1, [pc, #68]	@ (800aa04 <UARTEx_SetNbDataToProcess+0x94>)
 800a9c0:	5c8a      	ldrb	r2, [r1, r2]
 800a9c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9c6:	7b3a      	ldrb	r2, [r7, #12]
 800a9c8:	490f      	ldr	r1, [pc, #60]	@ (800aa08 <UARTEx_SetNbDataToProcess+0x98>)
 800a9ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	7b7a      	ldrb	r2, [r7, #13]
 800a9dc:	4909      	ldr	r1, [pc, #36]	@ (800aa04 <UARTEx_SetNbDataToProcess+0x94>)
 800a9de:	5c8a      	ldrb	r2, [r1, r2]
 800a9e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9e4:	7b7a      	ldrb	r2, [r7, #13]
 800a9e6:	4908      	ldr	r1, [pc, #32]	@ (800aa08 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	0800ab54 	.word	0x0800ab54
 800aa08:	0800ab5c 	.word	0x0800ab5c

0800aa0c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	ed93 7a06 	vldr	s14, [r3, #24]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	edd3 7a07 	vldr	s15, [r3, #28]
 800aa22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	edd3 7a06 	vldr	s15, [r3, #24]
 800aa3c:	eeb1 7a67 	vneg.f32	s14, s15
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a1a      	ldr	r2, [r3, #32]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	330c      	adds	r3, #12
 800aa66:	220c      	movs	r2, #12
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f804 	bl	800aa78 <memset>
  }

}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <memset>:
 800aa78:	4402      	add	r2, r0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d100      	bne.n	800aa82 <memset+0xa>
 800aa80:	4770      	bx	lr
 800aa82:	f803 1b01 	strb.w	r1, [r3], #1
 800aa86:	e7f9      	b.n	800aa7c <memset+0x4>

0800aa88 <__libc_init_array>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4d0d      	ldr	r5, [pc, #52]	@ (800aac0 <__libc_init_array+0x38>)
 800aa8c:	4c0d      	ldr	r4, [pc, #52]	@ (800aac4 <__libc_init_array+0x3c>)
 800aa8e:	1b64      	subs	r4, r4, r5
 800aa90:	10a4      	asrs	r4, r4, #2
 800aa92:	2600      	movs	r6, #0
 800aa94:	42a6      	cmp	r6, r4
 800aa96:	d109      	bne.n	800aaac <__libc_init_array+0x24>
 800aa98:	4d0b      	ldr	r5, [pc, #44]	@ (800aac8 <__libc_init_array+0x40>)
 800aa9a:	4c0c      	ldr	r4, [pc, #48]	@ (800aacc <__libc_init_array+0x44>)
 800aa9c:	f000 f826 	bl	800aaec <_init>
 800aaa0:	1b64      	subs	r4, r4, r5
 800aaa2:	10a4      	asrs	r4, r4, #2
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	42a6      	cmp	r6, r4
 800aaa8:	d105      	bne.n	800aab6 <__libc_init_array+0x2e>
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab0:	4798      	blx	r3
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7ee      	b.n	800aa94 <__libc_init_array+0xc>
 800aab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaba:	4798      	blx	r3
 800aabc:	3601      	adds	r6, #1
 800aabe:	e7f2      	b.n	800aaa6 <__libc_init_array+0x1e>
 800aac0:	0800ab6c 	.word	0x0800ab6c
 800aac4:	0800ab6c 	.word	0x0800ab6c
 800aac8:	0800ab6c 	.word	0x0800ab6c
 800aacc:	0800ab70 	.word	0x0800ab70

0800aad0 <memcpy>:
 800aad0:	440a      	add	r2, r1
 800aad2:	4291      	cmp	r1, r2
 800aad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	4770      	bx	lr
 800aadc:	b510      	push	{r4, lr}
 800aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae6:	4291      	cmp	r1, r2
 800aae8:	d1f9      	bne.n	800aade <memcpy+0xe>
 800aaea:	bd10      	pop	{r4, pc}

0800aaec <_init>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	bf00      	nop
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <_fini>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	bf00      	nop
 800aafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafe:	bc08      	pop	{r3}
 800ab00:	469e      	mov	lr, r3
 800ab02:	4770      	bx	lr
