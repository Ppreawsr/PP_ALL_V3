
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800aadc  0800aadc  0000badc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab3c  0800ab3c  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab3c  0800ab3c  0000bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab44  0800ab44  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab44  0800ab44  0000bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab48  0800ab48  0000bb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800ab4c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000218  0800ad64  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  0800ad64  0000c3a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c89  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e93  00000000  00000000  00023ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00026d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea5  00000000  00000000  00028010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017117  00000000  00000000  0004fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feaf1  00000000  00000000  0006710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  00165c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  0016add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aac4 	.word	0x0800aac4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800aac4 	.word	0x0800aac4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b96a 	b.w	80010fc <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <modbus_1t5_Timeout+0x3c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000234 	.word	0x20000234

08001140 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <modbus_3t5_Timeout+0x1c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2201      	movs	r2, #1
 800114e:	755a      	strb	r2, [r3, #21]

}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000234 	.word	0x20000234

08001160 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f008 fb13 	bl	8009794 <HAL_UART_GetError>
 800116e:	4603      	mov	r3, r0
 8001170:	2b20      	cmp	r3, #32
 8001172:	d101      	bne.n	8001178 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001174:	f7ff ffc4 	bl	8001100 <modbus_1t5_Timeout>

	}
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <Modbus_init+0xa0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <Modbus_init+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <Modbus_init+0xa4>)
 800119e:	210e      	movs	r1, #14
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fb41 	bl	8007828 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2110      	movs	r1, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f008 fa9b 	bl	80096e8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fab2 	bl	8009720 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <Modbus_init+0xa8>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fd79 	bl	8008cbc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <Modbus_init+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <Modbus_init+0xa0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <Modbus_init+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80011dc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011e0:	4413      	add	r3, r2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f007 fea1 	bl	8008f30 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Modbus_init+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d10c      	bne.n	8001218 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <Modbus_init+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fff9 	bl	80061fc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <Modbus_init+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fd44 	bl	8006ca0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000234 	.word	0x20000234
 8001224:	08001141 	.word	0x08001141
 8001228:	08001161 	.word	0x08001161

0800122c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800123c:	23ff      	movs	r3, #255	@ 0xff
 800123e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001240:	e013      	b.n	800126a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	4053      	eors	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <CRC16+0x64>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4413      	add	r3, r2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4053      	eors	r3, r2
 800125e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001260:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <CRC16+0x68>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	803a      	strh	r2, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e6      	bne.n	8001242 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29b      	uxth	r3, r3
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000100 	.word	0x20000100
 8001294:	20000000 	.word	0x20000000

08001298 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800129e:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	7ddb      	ldrb	r3, [r3, #23]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d80a      	bhi.n	80012c0 <Modbus_Protocal_Worker+0x28>
 80012aa:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <Modbus_Protocal_Worker+0x18>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012cb 	.word	0x080012cb
 80012b4:	0800145f 	.word	0x0800145f
 80012b8:	08001357 	.word	0x08001357
 80012bc:	0800139b 	.word	0x0800139b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80012c0:	4b75      	ldr	r3, [pc, #468]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	75da      	strb	r2, [r3, #23]
		break;
 80012c8:	e0e1      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80012ca:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80012d6:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80012de:	f000 f9cd 	bl	800167c <Modbus_Emission>
 80012e2:	e018      	b.n	8001316 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80012ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d00b      	beq.n	8001316 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001306:	4b64      	ldr	r3, [pc, #400]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800130e:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2203      	movs	r2, #3
 8001314:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001316:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001320:	2b20      	cmp	r3, #32
 8001322:	f040 80ad 	bne.w	8001480 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b57      	ldr	r3, [pc, #348]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001342:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800134e:	4619      	mov	r1, r3
 8001350:	f007 fdee 	bl	8008f30 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001354:	e094      	b.n	8001480 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001356:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7d1b      	ldrb	r3, [r3, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8091 	beq.w	8001484 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001362:	4b4d      	ldr	r3, [pc, #308]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	22fe      	movs	r2, #254	@ 0xfe
 8001368:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800136a:	4b4b      	ldr	r3, [pc, #300]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001374:	4b48      	ldr	r3, [pc, #288]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001386:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001388:	1a8a      	subs	r2, r1, r2
 800138a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800138c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001390:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2204      	movs	r2, #4
 8001396:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001398:	e074      	b.n	8001484 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800139a:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80013a2:	f113 0f02 	cmn.w	r3, #2
 80013a6:	d150      	bne.n	800144a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80013a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80013b8:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013c0:	3b02      	subs	r3, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f7ff ff31 	bl	800122c <CRC16>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013ce:	793a      	ldrb	r2, [r7, #4]
 80013d0:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013dc:	3b02      	subs	r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d10c      	bne.n	8001402 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80013e8:	797a      	ldrb	r2, [r7, #5]
 80013ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d004      	beq.n	800140c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001402:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	22ff      	movs	r2, #255	@ 0xff
 8001408:	759a      	strb	r2, [r3, #22]
				break;
 800140a:	e040      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d113      	bne.n	8001446 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800142e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001438:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800143a:	461a      	mov	r2, r3
 800143c:	f009 fb34 	bl	800aaa8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001440:	f000 f904 	bl	800164c <Modbus_frame_response>
 8001444:	e001      	b.n	800144a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001446:	bf00      	nop
					}
		break;


	}
}
 8001448:	e021      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7d5b      	ldrb	r3, [r3, #21]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d019      	beq.n	8001488 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	75da      	strb	r2, [r3, #23]
		break;
 800145c:	e014      	b.n	8001488 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001468:	2b20      	cmp	r3, #32
 800146a:	d10f      	bne.n	800148c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <Modbus_Protocal_Worker+0x200>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	75da      	strb	r2, [r3, #23]
		break;
 800147e:	e005      	b.n	800148c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001480:	bf00      	nop
 8001482:	e004      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001484:	bf00      	nop
 8001486:	e002      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <Modbus_Protocal_Worker+0x1f6>
		break;
 800148c:	bf00      	nop
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000234 	.word	0x20000234

0800149c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	7e5b      	ldrb	r3, [r3, #25]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	7e92      	ldrb	r2, [r2, #26]
 80014b2:	4413      	add	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d903      	bls.n	80014ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 f8a0 	bl	8001608 <ModbusErrorReply>
			 return;
 80014c8:	e023      	b.n	8001512 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	440b      	add	r3, r1
 80014da:	7ed2      	ldrb	r2, [r2, #27]
 80014dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	7f12      	ldrb	r2, [r2, #28]
 80014f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <modbusWrite1Register+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	f009 fad0 	bl	800aaa8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <modbusWrite1Register+0x7c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000234 	.word	0x20000234

0800151c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001522:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <modbusRead1Register+0xe8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	7edb      	ldrb	r3, [r3, #27]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <modbusRead1Register+0xe8>)
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	7f12      	ldrb	r2, [r2, #28]
 8001532:	4413      	add	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001536:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <modbusRead1Register+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7e5b      	ldrb	r3, [r3, #25]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <modbusRead1Register+0xe8>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	7e92      	ldrb	r2, [r2, #26]
 8001546:	4413      	add	r3, r2
 8001548:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <modbusRead1Register+0x3a>
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	2b7d      	cmp	r3, #125	@ 0x7d
 8001554:	d903      	bls.n	800155e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001556:	2003      	movs	r0, #3
 8001558:	f000 f856 	bl	8001608 <ModbusErrorReply>
		 return;
 800155c:	e04e      	b.n	80015fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <modbusRead1Register+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	d808      	bhi.n	800157c <modbusRead1Register+0x60>
 800156a:	88ba      	ldrh	r2, [r7, #4]
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <modbusRead1Register+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d903      	bls.n	8001584 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800157c:	2002      	movs	r0, #2
 800157e:	f000 f843 	bl	8001608 <ModbusErrorReply>
		 return;
 8001582:	e03b      	b.n	80015fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <modbusRead1Register+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2203      	movs	r2, #3
 800158a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <modbusRead1Register+0xe8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0052      	lsls	r2, r2, #1
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800159e:	2400      	movs	r4, #0
 80015a0:	e020      	b.n	80015e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <modbusRead1Register+0xe8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	4423      	add	r3, r4
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	18d1      	adds	r1, r2, r3
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <modbusRead1Register+0xe8>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	1c63      	adds	r3, r4, #1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	7849      	ldrb	r1, [r1, #1]
 80015ba:	4413      	add	r3, r2
 80015bc:	460a      	mov	r2, r1
 80015be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <modbusRead1Register+0xe8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	4423      	add	r3, r4
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	18d1      	adds	r1, r2, r3
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <modbusRead1Register+0xe8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	0063      	lsls	r3, r4, #1
 80015d6:	3303      	adds	r3, #3
 80015d8:	7809      	ldrb	r1, [r1, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	460a      	mov	r2, r1
 80015de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80015e2:	3401      	adds	r4, #1
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	429c      	cmp	r4, r3
 80015e8:	dbdb      	blt.n	80015a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <modbusRead1Register+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0052      	lsls	r2, r2, #1
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20000234 	.word	0x20000234

08001608 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <ModbusErrorReply+0x40>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7e1a      	ldrb	r2, [r3, #24]
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <ModbusErrorReply+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <ModbusErrorReply+0x40>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <ModbusErrorReply+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000234 	.word	0x20000234

0800164c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <Modbus_frame_response+0x2c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	7e1b      	ldrb	r3, [r3, #24]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d004      	beq.n	8001664 <Modbus_frame_response+0x18>
 800165a:	2b06      	cmp	r3, #6
 800165c:	d105      	bne.n	800166a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800165e:	f7ff ff1d 	bl	800149c <modbusWrite1Register>
		break;
 8001662:	e006      	b.n	8001672 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001664:	f7ff ff5a 	bl	800151c <modbusRead1Register>
		break;
 8001668:	e003      	b.n	8001672 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff ffcc 	bl	8001608 <ModbusErrorReply>
		break;
 8001670:	bf00      	nop

	}
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000234 	.word	0x20000234

0800167c <Modbus_Emission>:

void Modbus_Emission()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <Modbus_Emission+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168c:	2b20      	cmp	r3, #32
 800168e:	d15d      	bne.n	800174c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <Modbus_Emission+0xe8>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <Modbus_Emission+0xe8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <Modbus_Emission+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80016a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <Modbus_Emission+0xe8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80016b8:	461a      	mov	r2, r3
 80016ba:	f009 f9f5 	bl	800aaa8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <Modbus_Emission+0xe8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <Modbus_Emission+0xe8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3203      	adds	r2, #3
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <Modbus_Emission+0xe8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <Modbus_Emission+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80016e4:	3b02      	subs	r3, #2
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fd9f 	bl	800122c <CRC16>
 80016ee:	4603      	mov	r3, r0
 80016f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <Modbus_Emission+0xe8>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <Modbus_Emission+0xe8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001700:	7939      	ldrb	r1, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <Modbus_Emission+0xe8>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <Modbus_Emission+0xe8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001716:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001718:	7979      	ldrb	r1, [r7, #5]
 800171a:	4413      	add	r3, r2
 800171c:	460a      	mov	r2, r1
 800171e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <Modbus_Emission+0xe8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172c:	2b20      	cmp	r3, #32
 800172e:	d10d      	bne.n	800174c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <Modbus_Emission+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <Modbus_Emission+0xe8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <Modbus_Emission+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001742:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001746:	461a      	mov	r2, r3
 8001748:	f007 fb72 	bl	8008e30 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <Modbus_Emission+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <Modbus_Emission+0xe8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	755a      	strb	r2, [r3, #21]

}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000234 	.word	0x20000234

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f002 fda1 	bl	80042b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f998 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 fd62 	bl	8002240 <MX_GPIO_Init>
  MX_DMA_Init();
 800177c:	f000 fd12 	bl	80021a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001780:	f000 fc76 	bl	8002070 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001784:	f000 fcc0 	bl	8002108 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001788:	f000 f9da 	bl	8001b40 <MX_TIM1_Init>
  MX_TIM2_Init();
 800178c:	f000 faac 	bl	8001ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001790:	f000 fafe 	bl	8001d90 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001794:	f000 fbc0 	bl	8001f18 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001798:	f000 fc44 	bl	8002024 <MX_TIM16_Init>
  MX_TIM4_Init();
 800179c:	f000 fb6e 	bl	8001e7c <MX_TIM4_Init>
  MX_TIM7_Init();
 80017a0:	f000 fc0a 	bl	8001fb8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 6.1;
 80017a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a18 <main+0x2b0>)
 80017a6:	4a9d      	ldr	r2, [pc, #628]	@ (8001a1c <main+0x2b4>)
 80017a8:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 80017aa:	4b9b      	ldr	r3, [pc, #620]	@ (8001a18 <main+0x2b0>)
 80017ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001a20 <main+0x2b8>)
 80017ae:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 80017b0:	4b99      	ldr	r3, [pc, #612]	@ (8001a18 <main+0x2b0>)
 80017b2:	4a9c      	ldr	r2, [pc, #624]	@ (8001a24 <main+0x2bc>)
 80017b4:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	4897      	ldr	r0, [pc, #604]	@ (8001a18 <main+0x2b0>)
 80017ba:	f009 f913 	bl	800a9e4 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	4999      	ldr	r1, [pc, #612]	@ (8001a28 <main+0x2c0>)
 80017c2:	489a      	ldr	r0, [pc, #616]	@ (8001a2c <main+0x2c4>)
 80017c4:	f007 fbb4 	bl	8008f30 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80017c8:	4899      	ldr	r0, [pc, #612]	@ (8001a30 <main+0x2c8>)
 80017ca:	f004 fd17 	bl	80061fc <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80017ce:	4b99      	ldr	r3, [pc, #612]	@ (8001a34 <main+0x2cc>)
 80017d0:	4a99      	ldr	r2, [pc, #612]	@ (8001a38 <main+0x2d0>)
 80017d2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80017d4:	4b97      	ldr	r3, [pc, #604]	@ (8001a34 <main+0x2cc>)
 80017d6:	4a99      	ldr	r2, [pc, #612]	@ (8001a3c <main+0x2d4>)
 80017d8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017da:	4b96      	ldr	r3, [pc, #600]	@ (8001a34 <main+0x2cc>)
 80017dc:	2215      	movs	r2, #21
 80017de:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80017e0:	4b94      	ldr	r3, [pc, #592]	@ (8001a34 <main+0x2cc>)
 80017e2:	22c8      	movs	r2, #200	@ 0xc8
 80017e4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80017e6:	4996      	ldr	r1, [pc, #600]	@ (8001a40 <main+0x2d8>)
 80017e8:	4892      	ldr	r0, [pc, #584]	@ (8001a34 <main+0x2cc>)
 80017ea:	f7ff fcc9 	bl	8001180 <Modbus_init>
  reed = 0;
 80017ee:	4b95      	ldr	r3, [pc, #596]	@ (8001a44 <main+0x2dc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
  gripper = 0;
 80017f4:	4b94      	ldr	r3, [pc, #592]	@ (8001a48 <main+0x2e0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
  vacuum = 0;
 80017fa:	4b94      	ldr	r3, [pc, #592]	@ (8001a4c <main+0x2e4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 260;
 8001800:	4b93      	ldr	r3, [pc, #588]	@ (8001a50 <main+0x2e8>)
 8001802:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001806:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 1850;
 8001808:	4b91      	ldr	r3, [pc, #580]	@ (8001a50 <main+0x2e8>)
 800180a:	f240 723a 	movw	r2, #1850	@ 0x73a
 800180e:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3062;
 8001810:	4b8f      	ldr	r3, [pc, #572]	@ (8001a50 <main+0x2e8>)
 8001812:	f640 32f6 	movw	r2, #3062	@ 0xbf6
 8001816:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4457;
 8001818:	4b8d      	ldr	r3, [pc, #564]	@ (8001a50 <main+0x2e8>)
 800181a:	f241 1269 	movw	r2, #4457	@ 0x1169
 800181e:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5661;
 8001820:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <main+0x2e8>)
 8001822:	f241 621d 	movw	r2, #5661	@ 0x161d
 8001826:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001828:	488a      	ldr	r0, [pc, #552]	@ (8001a54 <main+0x2ec>)
 800182a:	f004 fc77 	bl	800611c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800182e:	2100      	movs	r1, #0
 8001830:	4888      	ldr	r0, [pc, #544]	@ (8001a54 <main+0x2ec>)
 8001832:	f004 fdf9 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001836:	2104      	movs	r1, #4
 8001838:	4886      	ldr	r0, [pc, #536]	@ (8001a54 <main+0x2ec>)
 800183a:	f004 fdf5 	bl	8006428 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800183e:	213c      	movs	r1, #60	@ 0x3c
 8001840:	4885      	ldr	r0, [pc, #532]	@ (8001a58 <main+0x2f0>)
 8001842:	f005 fb6f 	bl	8006f24 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001846:	4885      	ldr	r0, [pc, #532]	@ (8001a5c <main+0x2f4>)
 8001848:	f004 fc68 	bl	800611c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 800184c:	4884      	ldr	r0, [pc, #528]	@ (8001a60 <main+0x2f8>)
 800184e:	f004 fcd5 	bl	80061fc <HAL_TIM_Base_Start_IT>
//
//  else if (position_goal < 300)
//  {
//	  pos_err = position_goal;
//  }
  registerFrame[0x00].U16 = 22881;
 8001852:	4b7b      	ldr	r3, [pc, #492]	@ (8001a40 <main+0x2d8>)
 8001854:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001858:	801a      	strh	r2, [r3, #0]
  Modbus_Protocal_Worker();
 800185a:	f7ff fd1d 	bl	8001298 <Modbus_Protocal_Worker>

  buf[0] = 3;
 800185e:	4b81      	ldr	r3, [pc, #516]	@ (8001a64 <main+0x2fc>)
 8001860:	2203      	movs	r2, #3
 8001862:	701a      	strb	r2, [r3, #0]
  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8001864:	2204      	movs	r2, #4
 8001866:	497d      	ldr	r1, [pc, #500]	@ (8001a5c <main+0x2f4>)
 8001868:	487e      	ldr	r0, [pc, #504]	@ (8001a64 <main+0x2fc>)
 800186a:	f002 fc19 	bl	80040a0 <updateLED>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b7d      	ldr	r3, [pc, #500]	@ (8001a68 <main+0x300>)
 8001874:	701a      	strb	r2, [r3, #0]
  piingpong = 0;
 8001876:	4b7d      	ldr	r3, [pc, #500]	@ (8001a6c <main+0x304>)
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]
  uint8_t result = HomeZ();
 800187c:	f002 fcb6 	bl	80041ec <HomeZ>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(2000);
 8001884:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001888:	f002 fd86 	bl	8004398 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800188c:	4b72      	ldr	r3, [pc, #456]	@ (8001a58 <main+0x2f0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24
  qeifloat = 0;
 8001894:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <main+0x308>)
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
  generate_trapezoidal_velocity_profile(time_op,16.0);
 800189c:	4b75      	ldr	r3, [pc, #468]	@ (8001a74 <main+0x30c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe1d 	bl	80004e0 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001a08 <main+0x2a0>
 80018ae:	ec43 2b10 	vmov	d0, r2, r3
 80018b2:	f000 ffa3 	bl	80027fc <generate_trapezoidal_velocity_profile>
  Home = 0;
 80018b6:	4b70      	ldr	r3, [pc, #448]	@ (8001a78 <main+0x310>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
  rou = 0;
 80018bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a7c <main+0x314>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
//	  Mode = 1;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 80018c2:	f7ff fce9 	bl	8001298 <Modbus_Protocal_Worker>
	  BaseAction();
 80018c6:	f001 f9d1 	bl	8002c6c <BaseAction>
	  OrderSeparate();
 80018ca:	f001 fe31 	bl	8003530 <OrderSeparate>
	  ControlJoy();
 80018ce:	f000 fd77 	bl	80023c0 <ControlJoy>
//		  currentTime = 0;
//		  _micros = 0;
////		  end = 0;

	  static uint64_t timestampqei =0;
	  int64_t currentTimeqei = micros();
 80018d2:	f001 ff63 	bl	800379c <micros>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTimeqei > timestampqei)
 80018de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e2:	4967      	ldr	r1, [pc, #412]	@ (8001a80 <main+0x318>)
 80018e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018e8:	4290      	cmp	r0, r2
 80018ea:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ee:	d20c      	bcs.n	800190a <main+0x1a2>
	  {
		  timestampqei = currentTimeqei + 100000;//us
 80018f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018f4:	4963      	ldr	r1, [pc, #396]	@ (8001a84 <main+0x31c>)
 80018f6:	1854      	adds	r4, r2, r1
 80018f8:	f143 0500 	adc.w	r5, r3, #0
 80018fc:	4622      	mov	r2, r4
 80018fe:	462b      	mov	r3, r5
 8001900:	495f      	ldr	r1, [pc, #380]	@ (8001a80 <main+0x318>)
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
	  	  ACC_Update();
 8001906:	f001 fff1 	bl	80038ec <ACC_Update>
	  }

//	  }
	  if(fin == 1 && fabs((( (setPos+160)/10.0) - qeifloat))  >= 0.8)
 800190a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a88 <main+0x320>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d14e      	bne.n	80019b0 <main+0x248>
 8001912:	4b5e      	ldr	r3, [pc, #376]	@ (8001a8c <main+0x324>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	33a0      	adds	r3, #160	@ 0xa0
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fdcf 	bl	80004bc <__aeabi_i2d>
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b5b      	ldr	r3, [pc, #364]	@ (8001a90 <main+0x328>)
 8001924:	f7fe ff5e 	bl	80007e4 <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4692      	mov	sl, r2
 800192e:	469b      	mov	fp, r3
 8001930:	4b4f      	ldr	r3, [pc, #316]	@ (8001a70 <main+0x308>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fdd3 	bl	80004e0 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4650      	mov	r0, sl
 8001940:	4659      	mov	r1, fp
 8001942:	f7fe fc6d 	bl	8000220 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4690      	mov	r8, r2
 800194c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001950:	a32f      	add	r3, pc, #188	@ (adr r3, 8001a10 <main+0x2a8>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	4640      	mov	r0, r8
 8001958:	4649      	mov	r1, r9
 800195a:	f7ff f89f 	bl	8000a9c <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d025      	beq.n	80019b0 <main+0x248>
	  {
		  generate_trapezoidal_velocity_profile(time_op,(setPos/10.0)+16.0);
 8001964:	4b43      	ldr	r3, [pc, #268]	@ (8001a74 <main+0x30c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdb9 	bl	80004e0 <__aeabi_f2d>
 800196e:	4682      	mov	sl, r0
 8001970:	468b      	mov	fp, r1
 8001972:	4b46      	ldr	r3, [pc, #280]	@ (8001a8c <main+0x324>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fda0 	bl	80004bc <__aeabi_i2d>
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <main+0x328>)
 8001982:	f7fe ff2f 	bl	80007e4 <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <main+0x32c>)
 8001994:	f7fe fc46 	bl	8000224 <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	ec43 2b17 	vmov	d7, r2, r3
 80019a0:	eeb0 1a47 	vmov.f32	s2, s14
 80019a4:	eef0 1a67 	vmov.f32	s3, s15
 80019a8:	ec4b ab10 	vmov	d0, sl, fp
 80019ac:	f000 ff26 	bl	80027fc <generate_trapezoidal_velocity_profile>

	  }
	  xx = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b6:	f003 fad5 	bl	8004f64 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <main+0x330>)
 80019c0:	701a      	strb	r2, [r3, #0]
//	  }
	  //TRAJECTORY


	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 80019c2:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <main+0x2f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <main+0x334>)
 80019ca:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2)*60.00)/8192;
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <main+0x2f0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd62 	bl	800049c <__aeabi_ui2d>
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <main+0x338>)
 80019de:	f7fe fdd7 	bl	8000590 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <main+0x33c>)
 80019f0:	f7fe fef8 	bl	80007e4 <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8aa 	bl	8000b54 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <main+0x308>)
 8001a04:	6013      	str	r3, [r2, #0]
  {
 8001a06:	e75c      	b.n	80018c2 <main+0x15a>
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40300000 	.word	0x40300000
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	3fe99999 	.word	0x3fe99999
 8001a18:	200011e8 	.word	0x200011e8
 8001a1c:	40c33333 	.word	0x40c33333
 8001a20:	3a83126f 	.word	0x3a83126f
 8001a24:	3c23d70a 	.word	0x3c23d70a
 8001a28:	20000ae4 	.word	0x20000ae4
 8001a2c:	2000082c 	.word	0x2000082c
 8001a30:	20000568 	.word	0x20000568
 8001a34:	20000af8 	.word	0x20000af8
 8001a38:	200008f8 	.word	0x200008f8
 8001a3c:	20000700 	.word	0x20000700
 8001a40:	20000fe8 	.word	0x20000fe8
 8001a44:	20000fd6 	.word	0x20000fd6
 8001a48:	20000fd5 	.word	0x20000fd5
 8001a4c:	20000fd4 	.word	0x20000fd4
 8001a50:	20001178 	.word	0x20001178
 8001a54:	20000238 	.word	0x20000238
 8001a58:	20000304 	.word	0x20000304
 8001a5c:	200003d0 	.word	0x200003d0
 8001a60:	20000634 	.word	0x20000634
 8001a64:	20000208 	.word	0x20000208
 8001a68:	20001216 	.word	0x20001216
 8001a6c:	20000fd2 	.word	0x20000fd2
 8001a70:	20000aec 	.word	0x20000aec
 8001a74:	20000200 	.word	0x20000200
 8001a78:	200011de 	.word	0x200011de
 8001a7c:	20001214 	.word	0x20001214
 8001a80:	20001268 	.word	0x20001268
 8001a84:	000186a0 	.word	0x000186a0
 8001a88:	20001217 	.word	0x20001217
 8001a8c:	20001182 	.word	0x20001182
 8001a90:	40240000 	.word	0x40240000
 8001a94:	40300000 	.word	0x40300000
 8001a98:	200011a5 	.word	0x200011a5
 8001a9c:	20000ae8 	.word	0x20000ae8
 8001aa0:	404e0000 	.word	0x404e0000
 8001aa4:	40c00000 	.word	0x40c00000

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	@ 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	2238      	movs	r2, #56	@ 0x38
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f008 ffca 	bl	800aa50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f003 fa92 	bl	8004ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ada:	2340      	movs	r3, #64	@ 0x40
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001aea:	2355      	movs	r3, #85	@ 0x55
 8001aec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fb2c 	bl	800515c <HAL_RCC_OscConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b0a:	f001 ff27 	bl	800395c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	230f      	movs	r3, #15
 8001b10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b12:	2303      	movs	r3, #3
 8001b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2104      	movs	r1, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fe2a 	bl	8005780 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b32:	f001 ff13 	bl	800395c <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3750      	adds	r7, #80	@ 0x50
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b09e      	sub	sp, #120	@ 0x78
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001b60:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2234      	movs	r2, #52	@ 0x34
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f008 ff62 	bl	800aa50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8c:	4b54      	ldr	r3, [pc, #336]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001b8e:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <MX_TIM1_Init+0x1a4>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001b92:	4b53      	ldr	r3, [pc, #332]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b51      	ldr	r3, [pc, #324]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b9e:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb8:	4849      	ldr	r0, [pc, #292]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001bba:	f004 fa4b 	bl	8006054 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001bc4:	f001 feca 	bl	800395c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4842      	ldr	r0, [pc, #264]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001bd6:	f005 fcc1 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001be0:	f001 febc 	bl	800395c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be4:	483e      	ldr	r0, [pc, #248]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001be6:	f004 fbb1 	bl	800634c <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001bf0:	f001 feb4 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c04:	4619      	mov	r1, r3
 8001c06:	4836      	ldr	r0, [pc, #216]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001c08:	f006 fd5c 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c12:	f001 fea3 	bl	800395c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001c16:	2301      	movs	r3, #1
 8001c18:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c26:	461a      	mov	r2, r3
 8001c28:	2101      	movs	r1, #1
 8001c2a:	482d      	ldr	r0, [pc, #180]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001c2c:	f006 fe74 	bl	8008918 <HAL_TIMEx_ConfigBreakInput>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001c36:	f001 fe91 	bl	800395c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3a:	2360      	movs	r3, #96	@ 0x60
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4820      	ldr	r0, [pc, #128]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001c60:	f005 fb68 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001c6a:	f001 fe77 	bl	800395c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c72:	2204      	movs	r2, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	481a      	ldr	r0, [pc, #104]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001c78:	f005 fb5c 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001c82:	f001 fe6b 	bl	800395c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 15;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001cc4:	f006 fd94 	bl	80087f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001cce:	f001 fe45 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cd2:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <MX_TIM1_Init+0x1a0>)
 8001cd4:	f001 ffb2 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8001cd8:	bf00      	nop
 8001cda:	3778      	adds	r7, #120	@ 0x78
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000238 	.word	0x20000238
 8001ce4:	40012c00 	.word	0x40012c00

08001ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	@ 0x30
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f008 feaa 	bl	800aa50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 14;
 8001d3e:	230e      	movs	r3, #14
 8001d40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 14;
 8001d4e:	230e      	movs	r3, #14
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d5a:	f005 f82f 	bl	8006dbc <HAL_TIM_Encoder_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d64:	f001 fdfa 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_TIM2_Init+0xa4>)
 8001d76:	f006 fca5 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d80:	f001 fdec 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	3730      	adds	r7, #48	@ 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000304 	.word	0x20000304

08001d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	@ 0x38
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e78 <MX_TIM3_Init+0xe8>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001dd6:	226a      	movs	r2, #106	@ 0x6a
 8001dd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de6:	4823      	ldr	r0, [pc, #140]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001de8:	f004 f934 	bl	8006054 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001df2:	f001 fdb3 	bl	800395c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e00:	4619      	mov	r1, r3
 8001e02:	481c      	ldr	r0, [pc, #112]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001e04:	f005 fbaa 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e0e:	f001 fda5 	bl	800395c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e12:	4818      	ldr	r0, [pc, #96]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001e14:	f004 fa9a 	bl	800634c <HAL_TIM_PWM_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e1e:	f001 fd9d 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4810      	ldr	r0, [pc, #64]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001e32:	f006 fc47 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e3c:	f001 fd8e 	bl	800395c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e40:	2360      	movs	r3, #96	@ 0x60
 8001e42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	2204      	movs	r2, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001e58:	f005 fa6c 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e62:	f001 fd7b 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM3_Init+0xe4>)
 8001e68:	f001 fee8 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	@ 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200003d0 	.word	0x200003d0
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <MX_TIM4_Init+0x98>)
 8001e9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001ea2:	22a9      	movs	r2, #169	@ 0xa9
 8001ea4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001eae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001ec2:	f004 f8c7 	bl	8006054 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f001 fd46 	bl	800395c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001ede:	f005 fb3d 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f001 fd38 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM4_Init+0x94>)
 8001efa:	f006 fbe3 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f001 fd2a 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000049c 	.word	0x2000049c
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f38:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <MX_TIM5_Init+0x9c>)
 8001f3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f3e:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001f42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f4c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001f50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f5e:	4814      	ldr	r0, [pc, #80]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f60:	f004 f878 	bl	8006054 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001f6a:	f001 fcf7 	bl	800395c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f7c:	f005 faee 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001f86:	f001 fce9 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4806      	ldr	r0, [pc, #24]	@ (8001fb0 <MX_TIM5_Init+0x98>)
 8001f98:	f006 fb94 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001fa2:	f001 fcdb 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000568 	.word	0x20000568
 8001fb4:	40000c00 	.word	0x40000c00

08001fb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	@ (8002020 <MX_TIM7_Init+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fd0:	22a9      	movs	r2, #169	@ 0xa9
 8001fd2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <MX_TIM7_Init+0x64>)
 8001fea:	f004 f833 	bl	8006054 <HAL_TIM_Base_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ff4:	f001 fcb2 	bl	800395c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_TIM7_Init+0x64>)
 8002006:	f006 fb5d 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002010:	f001 fca4 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000634 	.word	0x20000634
 8002020:	40001400 	.word	0x40001400

08002024 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <MX_TIM16_Init+0x44>)
 800202a:	4a10      	ldr	r2, [pc, #64]	@ (800206c <MX_TIM16_Init+0x48>)
 800202c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_TIM16_Init+0x44>)
 8002030:	22a9      	movs	r2, #169	@ 0xa9
 8002032:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_TIM16_Init+0x44>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_TIM16_Init+0x44>)
 800203c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002040:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_TIM16_Init+0x44>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <MX_TIM16_Init+0x44>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_TIM16_Init+0x44>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_TIM16_Init+0x44>)
 8002056:	f003 fffd 	bl	8006054 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002060:	f001 fc7c 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000700 	.word	0x20000700
 800206c:	40014400 	.word	0x40014400

08002070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 8002076:	4a23      	ldr	r2, [pc, #140]	@ (8002104 <MX_USART1_UART_Init+0x94>)
 8002078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207a:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b8:	4811      	ldr	r0, [pc, #68]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020ba:	f006 fd9f 	bl	8008bfc <HAL_UART_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020c4:	f001 fc4a 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c8:	2100      	movs	r1, #0
 80020ca:	480d      	ldr	r0, [pc, #52]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020cc:	f008 fbbf 	bl	800a84e <HAL_UARTEx_SetTxFifoThreshold>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020d6:	f001 fc41 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4808      	ldr	r0, [pc, #32]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020de:	f008 fbf4 	bl	800a8ca <HAL_UARTEx_SetRxFifoThreshold>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020e8:	f001 fc38 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	@ (8002100 <MX_USART1_UART_Init+0x90>)
 80020ee:	f008 fb75 	bl	800a7dc <HAL_UARTEx_DisableFifoMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f001 fc30 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000082c 	.word	0x2000082c
 8002104:	40013800 	.word	0x40013800

08002108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800210e:	4a24      	ldr	r2, [pc, #144]	@ (80021a0 <MX_USART2_UART_Init+0x98>)
 8002110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002112:	4b22      	ldr	r3, [pc, #136]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002114:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800211c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002120:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800212a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800212e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002154:	4811      	ldr	r0, [pc, #68]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002156:	f006 fd51 	bl	8008bfc <HAL_UART_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002160:	f001 fbfc 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_USART2_UART_Init+0x94>)
 8002168:	f008 fb71 	bl	800a84e <HAL_UARTEx_SetTxFifoThreshold>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002172:	f001 fbf3 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4808      	ldr	r0, [pc, #32]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800217a:	f008 fba6 	bl	800a8ca <HAL_UARTEx_SetRxFifoThreshold>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002184:	f001 fbea 	bl	800395c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002188:	4804      	ldr	r0, [pc, #16]	@ (800219c <MX_USART2_UART_Init+0x94>)
 800218a:	f008 fb27 	bl	800a7dc <HAL_UARTEx_DisableFifoMode>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002194:	f001 fbe2 	bl	800395c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200008f8 	.word	0x200008f8
 80021a0:	40004400 	.word	0x40004400

080021a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <MX_DMA_Init+0x98>)
 80021ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <MX_DMA_Init+0x98>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <MX_DMA_Init+0x98>)
 80021b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <MX_DMA_Init+0x98>)
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <MX_DMA_Init+0x98>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <MX_DMA_Init+0x98>)
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <MX_DMA_Init+0x98>)
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <MX_DMA_Init+0x98>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_DMA_Init+0x98>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	200b      	movs	r0, #11
 80021f8:	f002 f9cb 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021fc:	200b      	movs	r0, #11
 80021fe:	f002 f9e2 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	200c      	movs	r0, #12
 8002208:	f002 f9c3 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800220c:	200c      	movs	r0, #12
 800220e:	f002 f9da 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	200d      	movs	r0, #13
 8002218:	f002 f9bb 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800221c:	200d      	movs	r0, #13
 800221e:	f002 f9d2 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2039      	movs	r0, #57	@ 0x39
 8002228:	f002 f9b3 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800222c:	2039      	movs	r0, #57	@ 0x39
 800222e:	f002 f9ca 	bl	80045c6 <HAL_NVIC_EnableIRQ>

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	4b57      	ldr	r3, [pc, #348]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a56      	ldr	r2, [pc, #344]	@ (80023b4 <MX_GPIO_Init+0x174>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b54      	ldr	r3, [pc, #336]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800226e:	4b51      	ldr	r3, [pc, #324]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	4a50      	ldr	r2, [pc, #320]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002274:	f043 0320 	orr.w	r3, r3, #32
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227a:	4b4e      	ldr	r3, [pc, #312]	@ (80023b4 <MX_GPIO_Init+0x174>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b4b      	ldr	r3, [pc, #300]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a4a      	ldr	r2, [pc, #296]	@ (80023b4 <MX_GPIO_Init+0x174>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002292:	4b48      	ldr	r3, [pc, #288]	@ (80023b4 <MX_GPIO_Init+0x174>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <MX_GPIO_Init+0x174>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	4a44      	ldr	r2, [pc, #272]	@ (80023b4 <MX_GPIO_Init+0x174>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022aa:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <MX_GPIO_Init+0x174>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f240 6111 	movw	r1, #1553	@ 0x611
 80022bc:	483e      	ldr	r0, [pc, #248]	@ (80023b8 <MX_GPIO_Init+0x178>)
 80022be:	f002 fe69 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	483d      	ldr	r0, [pc, #244]	@ (80023bc <MX_GPIO_Init+0x17c>)
 80022c8:	f002 fe64 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4836      	ldr	r0, [pc, #216]	@ (80023bc <MX_GPIO_Init+0x17c>)
 80022e4:	f002 fcbc 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022fe:	f002 fcaf 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9;
 8002302:	f240 6311 	movw	r3, #1553	@ 0x611
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4827      	ldr	r0, [pc, #156]	@ (80023b8 <MX_GPIO_Init+0x178>)
 800231c:	f002 fca0 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4821      	ldr	r0, [pc, #132]	@ (80023bc <MX_GPIO_Init+0x17c>)
 8002338:	f002 fc92 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800233c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002342:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002356:	f002 fc83 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235a:	2320      	movs	r3, #32
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800235e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4812      	ldr	r0, [pc, #72]	@ (80023b8 <MX_GPIO_Init+0x178>)
 8002370:	f002 fc76 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002374:	2340      	movs	r3, #64	@ 0x40
 8002376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237c:	2301      	movs	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <MX_GPIO_Init+0x178>)
 8002388:	f002 fc6a 	bl	8004c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2017      	movs	r0, #23
 8002392:	f002 f8fe 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002396:	2017      	movs	r0, #23
 8002398:	f002 f915 	bl	80045c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2028      	movs	r0, #40	@ 0x28
 80023a2:	f002 f8f6 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023a6:	2028      	movs	r0, #40	@ 0x28
 80023a8:	f002 f90d 	bl	80045c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	@ 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	48000800 	.word	0x48000800

080023c0 <ControlJoy>:

/* USER CODE BEGIN 4 */
void ControlJoy(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x0)
 80023c4:	4ba4      	ldr	r3, [pc, #656]	@ (8002658 <ControlJoy+0x298>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b80      	cmp	r3, #128	@ 0x80
 80023ca:	d10f      	bne.n	80023ec <ControlJoy+0x2c>
 80023cc:	4ba3      	ldr	r3, [pc, #652]	@ (800265c <ControlJoy+0x29c>)
 80023ce:	8c1b      	ldrh	r3, [r3, #32]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <ControlJoy+0x2c>
	  {
		  setPos = 0;
 80023d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002660 <ControlJoy+0x2a0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
		  Home = 0;
 80023da:	4ba2      	ldr	r3, [pc, #648]	@ (8002664 <ControlJoy+0x2a4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	801a      	strh	r2, [r3, #0]
		  rou = 0;
 80023e0:	4ba1      	ldr	r3, [pc, #644]	@ (8002668 <ControlJoy+0x2a8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	801a      	strh	r2, [r3, #0]
//		  generate_trapezoidal_velocity_profile(time_op,16.0);
		  joystickPayload[0] = 0;
 80023e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002658 <ControlJoy+0x298>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]

	  }
//set shelf
	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x1)
 80023ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002658 <ControlJoy+0x298>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	f040 80e6 	bne.w	80025c2 <ControlJoy+0x202>
 80023f6:	4b99      	ldr	r3, [pc, #612]	@ (800265c <ControlJoy+0x29c>)
 80023f8:	8c1b      	ldrh	r3, [r3, #32]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	f040 80e1 	bne.w	80025c2 <ControlJoy+0x202>
	  {
		  if (TT == 0)
 8002400:	4b9a      	ldr	r3, [pc, #616]	@ (800266c <ControlJoy+0x2ac>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	eef5 7a40 	vcmp.f32	s15, #0.0
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d11d      	bne.n	800244c <ControlJoy+0x8c>
		  {
			  shelfPos[0] = (qeifloat*10.0)-160;
 8002410:	4b97      	ldr	r3, [pc, #604]	@ (8002670 <ControlJoy+0x2b0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f863 	bl	80004e0 <__aeabi_f2d>
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b95      	ldr	r3, [pc, #596]	@ (8002674 <ControlJoy+0x2b4>)
 8002420:	f7fe f8b6 	bl	8000590 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b91      	ldr	r3, [pc, #580]	@ (8002678 <ControlJoy+0x2b8>)
 8002432:	f7fd fef5 	bl	8000220 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fb69 	bl	8000b14 <__aeabi_d2uiz>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b8d      	ldr	r3, [pc, #564]	@ (800267c <ControlJoy+0x2bc>)
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e0ac      	b.n	80025a6 <ControlJoy+0x1e6>

		  }

		  else if (TT == 1)
 800244c:	4b87      	ldr	r3, [pc, #540]	@ (800266c <ControlJoy+0x2ac>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002456:	eef4 7a47 	vcmp.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d11d      	bne.n	800249c <ControlJoy+0xdc>
		  {
			  shelfPos[1] = (qeifloat*10.0)-160;
 8002460:	4b83      	ldr	r3, [pc, #524]	@ (8002670 <ControlJoy+0x2b0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f83b 	bl	80004e0 <__aeabi_f2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b81      	ldr	r3, [pc, #516]	@ (8002674 <ControlJoy+0x2b4>)
 8002470:	f7fe f88e 	bl	8000590 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b7d      	ldr	r3, [pc, #500]	@ (8002678 <ControlJoy+0x2b8>)
 8002482:	f7fd fecd 	bl	8000220 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fb41 	bl	8000b14 <__aeabi_d2uiz>
 8002492:	4603      	mov	r3, r0
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b79      	ldr	r3, [pc, #484]	@ (800267c <ControlJoy+0x2bc>)
 8002498:	805a      	strh	r2, [r3, #2]
 800249a:	e084      	b.n	80025a6 <ControlJoy+0x1e6>

		  }

		  else if (TT == 2)
 800249c:	4b73      	ldr	r3, [pc, #460]	@ (800266c <ControlJoy+0x2ac>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80024a6:	eef4 7a47 	vcmp.f32	s15, s14
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d11d      	bne.n	80024ec <ControlJoy+0x12c>
		  {
			  shelfPos[2] = (qeifloat*10.0)-160;
 80024b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <ControlJoy+0x2b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f813 	bl	80004e0 <__aeabi_f2d>
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b6d      	ldr	r3, [pc, #436]	@ (8002674 <ControlJoy+0x2b4>)
 80024c0:	f7fe f866 	bl	8000590 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b69      	ldr	r3, [pc, #420]	@ (8002678 <ControlJoy+0x2b8>)
 80024d2:	f7fd fea5 	bl	8000220 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb19 	bl	8000b14 <__aeabi_d2uiz>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b65      	ldr	r3, [pc, #404]	@ (800267c <ControlJoy+0x2bc>)
 80024e8:	809a      	strh	r2, [r3, #4]
 80024ea:	e05c      	b.n	80025a6 <ControlJoy+0x1e6>

		  }

		  else if (TT == 3)
 80024ec:	4b5f      	ldr	r3, [pc, #380]	@ (800266c <ControlJoy+0x2ac>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80024f6:	eef4 7a47 	vcmp.f32	s15, s14
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d11d      	bne.n	800253c <ControlJoy+0x17c>
		  {
			  shelfPos[3] = (qeifloat*10.0)-160;
 8002500:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <ControlJoy+0x2b0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffeb 	bl	80004e0 <__aeabi_f2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <ControlJoy+0x2b4>)
 8002510:	f7fe f83e 	bl	8000590 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	4b55      	ldr	r3, [pc, #340]	@ (8002678 <ControlJoy+0x2b8>)
 8002522:	f7fd fe7d 	bl	8000220 <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe faf1 	bl	8000b14 <__aeabi_d2uiz>
 8002532:	4603      	mov	r3, r0
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b51      	ldr	r3, [pc, #324]	@ (800267c <ControlJoy+0x2bc>)
 8002538:	80da      	strh	r2, [r3, #6]
 800253a:	e034      	b.n	80025a6 <ControlJoy+0x1e6>

		  }

		  else if (TT == 4)
 800253c:	4b4b      	ldr	r3, [pc, #300]	@ (800266c <ControlJoy+0x2ac>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002546:	eef4 7a47 	vcmp.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d11d      	bne.n	800258c <ControlJoy+0x1cc>
		  {
			  shelfPos[4] = (qeifloat*10.0)-160;
 8002550:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <ControlJoy+0x2b0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffc3 	bl	80004e0 <__aeabi_f2d>
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b45      	ldr	r3, [pc, #276]	@ (8002674 <ControlJoy+0x2b4>)
 8002560:	f7fe f816 	bl	8000590 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <ControlJoy+0x2b8>)
 8002572:	f7fd fe55 	bl	8000220 <__aeabi_dsub>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fac9 	bl	8000b14 <__aeabi_d2uiz>
 8002582:	4603      	mov	r3, r0
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b3d      	ldr	r3, [pc, #244]	@ (800267c <ControlJoy+0x2bc>)
 8002588:	811a      	strh	r2, [r3, #8]
 800258a:	e00c      	b.n	80025a6 <ControlJoy+0x1e6>

		  }
		  else if ( TT >=  5)
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <ControlJoy+0x2ac>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	db02      	blt.n	80025a6 <ControlJoy+0x1e6>
		  {
			  flagShelf = 1;
 80025a0:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <ControlJoy+0x2c0>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
		  }
		  TT += 1;
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <ControlJoy+0x2ac>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <ControlJoy+0x2ac>)
 80025b6:	edc3 7a00 	vstr	s15, [r3]
		  joystickPayload[0] = 0;
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <ControlJoy+0x298>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e085      	b.n	80026ce <ControlJoy+0x30e>
	  }
//up
	  	  else if ( joystickPayload[0] == 0x40)
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <ControlJoy+0x298>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b40      	cmp	r3, #64	@ 0x40
 80025c8:	d109      	bne.n	80025de <ControlJoy+0x21e>
		{
//		  //generate_trapezoidal_velocity_profile(time_op, ((setPos/10.0) + 0.1));
		  setPos += 1;
 80025ca:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <ControlJoy+0x2a0>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <ControlJoy+0x2a0>)
 80025d4:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <ControlJoy+0x298>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e077      	b.n	80026ce <ControlJoy+0x30e>
		}
	  else if ( joystickPayload[0] == 0x41)
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <ControlJoy+0x298>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b41      	cmp	r3, #65	@ 0x41
 80025e4:	d109      	bne.n	80025fa <ControlJoy+0x23a>
	  		{
		  setPos += 10;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <ControlJoy+0x2a0>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	330a      	adds	r3, #10
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <ControlJoy+0x2a0>)
 80025f0:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <ControlJoy+0x298>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e069      	b.n	80026ce <ControlJoy+0x30e>
	  		}
	  else if ( joystickPayload[0] == 0x42)
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <ControlJoy+0x298>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b42      	cmp	r3, #66	@ 0x42
 8002600:	d109      	bne.n	8002616 <ControlJoy+0x256>
	  		{
		  setPos += 100;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <ControlJoy+0x2a0>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	3364      	adds	r3, #100	@ 0x64
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <ControlJoy+0x2a0>)
 800260c:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <ControlJoy+0x298>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e05b      	b.n	80026ce <ControlJoy+0x30e>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <ControlJoy+0x298>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b43      	cmp	r3, #67	@ 0x43
 800261c:	d10a      	bne.n	8002634 <ControlJoy+0x274>
	  		{
		  setPos += 1000;
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <ControlJoy+0x2a0>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <ControlJoy+0x2a0>)
 800262a:	801a      	strh	r2, [r3, #0]
		  joystickPayload[0] = 0 ;
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <ControlJoy+0x298>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e04c      	b.n	80026ce <ControlJoy+0x30e>
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  //down
	  	  else if ( joystickPayload[0] == 0x01 && (setPos-10) >= 0)
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <ControlJoy+0x298>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d123      	bne.n	8002684 <ControlJoy+0x2c4>
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <ControlJoy+0x2a0>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d91f      	bls.n	8002684 <ControlJoy+0x2c4>
	  	  		{
	  		setPos -= 10;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <ControlJoy+0x2a0>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	3b0a      	subs	r3, #10
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <ControlJoy+0x2a0>)
 800264e:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 8002650:	4b01      	ldr	r3, [pc, #4]	@ (8002658 <ControlJoy+0x298>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e03a      	b.n	80026ce <ControlJoy+0x30e>
 8002658:	20000ae4 	.word	0x20000ae4
 800265c:	20000fe8 	.word	0x20000fe8
 8002660:	20001182 	.word	0x20001182
 8002664:	200011de 	.word	0x200011de
 8002668:	20001214 	.word	0x20001214
 800266c:	20000af0 	.word	0x20000af0
 8002670:	20000aec 	.word	0x20000aec
 8002674:	40240000 	.word	0x40240000
 8002678:	40640000 	.word	0x40640000
 800267c:	20001178 	.word	0x20001178
 8002680:	20000fd0 	.word	0x20000fd0
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02 && (setPos-100) >= 0)
 8002684:	4b57      	ldr	r3, [pc, #348]	@ (80027e4 <ControlJoy+0x424>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d10d      	bne.n	80026a8 <ControlJoy+0x2e8>
 800268c:	4b56      	ldr	r3, [pc, #344]	@ (80027e8 <ControlJoy+0x428>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b63      	cmp	r3, #99	@ 0x63
 8002692:	d909      	bls.n	80026a8 <ControlJoy+0x2e8>
	  	  		{
	  		setPos -= 100;
 8002694:	4b54      	ldr	r3, [pc, #336]	@ (80027e8 <ControlJoy+0x428>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	3b64      	subs	r3, #100	@ 0x64
 800269a:	b29a      	uxth	r2, r3
 800269c:	4b52      	ldr	r3, [pc, #328]	@ (80027e8 <ControlJoy+0x428>)
 800269e:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80026a0:	4b50      	ldr	r3, [pc, #320]	@ (80027e4 <ControlJoy+0x424>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e012      	b.n	80026ce <ControlJoy+0x30e>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03 && (setPos-1000) >= 0)
 80026a8:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <ControlJoy+0x424>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d10e      	bne.n	80026ce <ControlJoy+0x30e>
 80026b0:	4b4d      	ldr	r3, [pc, #308]	@ (80027e8 <ControlJoy+0x428>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026b8:	d309      	bcc.n	80026ce <ControlJoy+0x30e>
	  	  		{
	  		setPos -= 1000;
 80026ba:	4b4b      	ldr	r3, [pc, #300]	@ (80027e8 <ControlJoy+0x428>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <ControlJoy+0x428>)
 80026c6:	801a      	strh	r2, [r3, #0]
	  		joystickPayload[0] = 0 ;
 80026c8:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <ControlJoy+0x424>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
	  	  		}

	  	  if ( joystickPayload[0] == 0x82 )
 80026ce:	4b45      	ldr	r3, [pc, #276]	@ (80027e4 <ControlJoy+0x424>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b82      	cmp	r3, #130	@ 0x82
 80026d4:	d120      	bne.n	8002718 <ControlJoy+0x358>
	  	  {
	  		  if (Va == 0)
 80026d6:	4b45      	ldr	r3, [pc, #276]	@ (80027ec <ControlJoy+0x42c>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <ControlJoy+0x338>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026e4:	4842      	ldr	r0, [pc, #264]	@ (80027f0 <ControlJoy+0x430>)
 80026e6:	f002 fc55 	bl	8004f94 <HAL_GPIO_WritePin>
	  			Va = 1;
 80026ea:	4b40      	ldr	r3, [pc, #256]	@ (80027ec <ControlJoy+0x42c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
		  		joystickPayload[0] = 0 ;
 80026f0:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <ControlJoy+0x424>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e00f      	b.n	8002718 <ControlJoy+0x358>
	  		  }
	  		  else if ( Va == 1)
 80026f8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ec <ControlJoy+0x42c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10b      	bne.n	8002718 <ControlJoy+0x358>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002706:	483a      	ldr	r0, [pc, #232]	@ (80027f0 <ControlJoy+0x430>)
 8002708:	f002 fc44 	bl	8004f94 <HAL_GPIO_WritePin>
	  			Va = 0;
 800270c:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <ControlJoy+0x42c>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <ControlJoy+0x424>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }

	  	  if ( joystickPayload[0] == 0x81 )
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <ControlJoy+0x424>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b81      	cmp	r3, #129	@ 0x81
 800271e:	d15e      	bne.n	80027de <ControlJoy+0x41e>
	  	  {
	  		 if (C == 0)
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <ControlJoy+0x434>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12b      	bne.n	8002780 <ControlJoy+0x3c0>
	  		 {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800272e:	4830      	ldr	r0, [pc, #192]	@ (80027f0 <ControlJoy+0x430>)
 8002730:	f002 fc30 	bl	8004f94 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002734:	2201      	movs	r2, #1
 8002736:	2180      	movs	r1, #128	@ 0x80
 8002738:	482f      	ldr	r0, [pc, #188]	@ (80027f8 <ControlJoy+0x438>)
 800273a:	f002 fc2b 	bl	8004f94 <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET )
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002744:	f002 fc0e 	bl	8004f64 <HAL_GPIO_ReadPin>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d111      	bne.n	8002772 <ControlJoy+0x3b2>
 800274e:	2140      	movs	r1, #64	@ 0x40
 8002750:	4827      	ldr	r0, [pc, #156]	@ (80027f0 <ControlJoy+0x430>)
 8002752:	f002 fc07 	bl	8004f64 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <ControlJoy+0x3b2>
	  				{
	  				  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002762:	4823      	ldr	r0, [pc, #140]	@ (80027f0 <ControlJoy+0x430>)
 8002764:	f002 fc16 	bl	8004f94 <HAL_GPIO_WritePin>
	  				  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002768:	2201      	movs	r2, #1
 800276a:	2180      	movs	r1, #128	@ 0x80
 800276c:	4822      	ldr	r0, [pc, #136]	@ (80027f8 <ControlJoy+0x438>)
 800276e:	f002 fc11 	bl	8004f94 <HAL_GPIO_WritePin>
	  				}
	  			joystickPayload[0] = 0 ;
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <ControlJoy+0x424>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
	  			C = 1;
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <ControlJoy+0x434>)
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
	  			joystickPayload[0] = 0 ;
	  			C = 0;
	  		 }
	  	  }

}
 800277e:	e02e      	b.n	80027de <ControlJoy+0x41e>
	  		 else if ( C == 1)
 8002780:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <ControlJoy+0x434>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d12a      	bne.n	80027de <ControlJoy+0x41e>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800278e:	4818      	ldr	r0, [pc, #96]	@ (80027f0 <ControlJoy+0x430>)
 8002790:	f002 fc00 	bl	8004f94 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	@ 0x80
 8002798:	4817      	ldr	r0, [pc, #92]	@ (80027f8 <ControlJoy+0x438>)
 800279a:	f002 fbfb 	bl	8004f94 <HAL_GPIO_WritePin>
	  			if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET )
 800279e:	2140      	movs	r1, #64	@ 0x40
 80027a0:	4813      	ldr	r0, [pc, #76]	@ (80027f0 <ControlJoy+0x430>)
 80027a2:	f002 fbdf 	bl	8004f64 <HAL_GPIO_ReadPin>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d112      	bne.n	80027d2 <ControlJoy+0x412>
 80027ac:	2180      	movs	r1, #128	@ 0x80
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b2:	f002 fbd7 	bl	8004f64 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <ControlJoy+0x412>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80027bc:	2201      	movs	r2, #1
 80027be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027c2:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <ControlJoy+0x430>)
 80027c4:	f002 fbe6 	bl	8004f94 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 80027c8:	2201      	movs	r2, #1
 80027ca:	2180      	movs	r1, #128	@ 0x80
 80027cc:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <ControlJoy+0x438>)
 80027ce:	f002 fbe1 	bl	8004f94 <HAL_GPIO_WritePin>
	  			joystickPayload[0] = 0 ;
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <ControlJoy+0x424>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
	  			C = 0;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <ControlJoy+0x434>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000ae4 	.word	0x20000ae4
 80027e8:	20001182 	.word	0x20001182
 80027ec:	20000af5 	.word	0x20000af5
 80027f0:	48000400 	.word	0x48000400
 80027f4:	20000af4 	.word	0x20000af4
 80027f8:	48000800 	.word	0x48000800

080027fc <generate_trapezoidal_velocity_profile>:
///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	ed87 0b02 	vstr	d0, [r7, #8]
 8002806:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 800280a:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <generate_trapezoidal_velocity_profile+0xc0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe66 	bl	80004e0 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800281c:	f7fd fd00 	bl	8000220 <__aeabi_dsub>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f994 	bl	8000b54 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <generate_trapezoidal_velocity_profile+0xc4>)
 8002830:	6013      	str	r3, [r2, #0]
	total_time = t2;
 8002832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002836:	f7fe f98d 	bl	8000b54 <__aeabi_d2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <generate_trapezoidal_velocity_profile+0xc8>)
 800283e:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <generate_trapezoidal_velocity_profile+0xc8>)
 8002842:	ed93 7a00 	vldr	s14, [r3]
 8002846:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800284a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800284e:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <generate_trapezoidal_velocity_profile+0xcc>)
 8002850:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <generate_trapezoidal_velocity_profile+0xc8>)
 8002856:	ed93 7a00 	vldr	s14, [r3]
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <generate_trapezoidal_velocity_profile+0xcc>)
 800285c:	edd3 7a00 	vldr	s15, [r3]
 8002860:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <generate_trapezoidal_velocity_profile+0xd0>)
 800286a:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <generate_trapezoidal_velocity_profile+0xc4>)
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <generate_trapezoidal_velocity_profile+0xcc>)
 8002876:	ed93 7a00 	vldr	s14, [r3]
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <generate_trapezoidal_velocity_profile+0xd0>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <generate_trapezoidal_velocity_profile+0xd4>)
 800288a:	edc3 7a00 	vstr	s15, [r3]

//	HAL_TIM_Base_Start_IT(&htim4);

	piingpong = 0;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <generate_trapezoidal_velocity_profile+0xd8>)
 8002890:	2200      	movs	r2, #0
 8002892:	801a      	strh	r2, [r3, #0]
//	{
//		piingpong = 1;
//	}
//	else
//	{
	HAL_TIM_Base_Start_IT(&htim4);
 8002894:	4810      	ldr	r0, [pc, #64]	@ (80028d8 <generate_trapezoidal_velocity_profile+0xdc>)
 8002896:	f003 fcb1 	bl	80061fc <HAL_TIM_Base_Start_IT>
//		piingpong = 0;
//	}
	deb++;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <generate_trapezoidal_velocity_profile+0xe0>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <generate_trapezoidal_velocity_profile+0xe0>)
 80028a4:	701a      	strb	r2, [r3, #0]
	fin = 0;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <generate_trapezoidal_velocity_profile+0xe4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
	Mode = 0;
 80028ac:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <generate_trapezoidal_velocity_profile+0xe8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	801a      	strh	r2, [r3, #0]

  }
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000aec 	.word	0x20000aec
 80028c0:	200011b0 	.word	0x200011b0
 80028c4:	200011b4 	.word	0x200011b4
 80028c8:	200011b8 	.word	0x200011b8
 80028cc:	200011bc 	.word	0x200011bc
 80028d0:	200011c0 	.word	0x200011c0
 80028d4:	20000fd2 	.word	0x20000fd2
 80028d8:	2000049c 	.word	0x2000049c
 80028dc:	20001186 	.word	0x20001186
 80028e0:	20001217 	.word	0x20001217
 80028e4:	200011dc 	.word	0x200011dc

080028e8 <generate_Velocity>:

void generate_Velocity()
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
//////acc//////////////

////////////////////
		t = (time_op) * i / num_points;
 80028ee:	4ba4      	ldr	r3, [pc, #656]	@ (8002b80 <generate_Velocity+0x298>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe fa44 	bl	8000d84 <__aeabi_ul2f>
 80028fc:	ee07 0a10 	vmov	s14, r0
 8002900:	4ba0      	ldr	r3, [pc, #640]	@ (8002b84 <generate_Velocity+0x29c>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee67 6a27 	vmul.f32	s13, s14, s15
 800290a:	4b9f      	ldr	r3, [pc, #636]	@ (8002b88 <generate_Velocity+0x2a0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291a:	4b9c      	ldr	r3, [pc, #624]	@ (8002b8c <generate_Velocity+0x2a4>)
 800291c:	edc3 7a00 	vstr	s15, [r3]
		if (t < t_acc) {
 8002920:	4b9a      	ldr	r3, [pc, #616]	@ (8002b8c <generate_Velocity+0x2a4>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	4b9a      	ldr	r3, [pc, #616]	@ (8002b90 <generate_Velocity+0x2a8>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002934:	d510      	bpl.n	8002958 <generate_Velocity+0x70>
			velocity = (Peak * (t / t_acc));
 8002936:	4b95      	ldr	r3, [pc, #596]	@ (8002b8c <generate_Velocity+0x2a4>)
 8002938:	edd3 6a00 	vldr	s13, [r3]
 800293c:	4b94      	ldr	r3, [pc, #592]	@ (8002b90 <generate_Velocity+0x2a8>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b93      	ldr	r3, [pc, #588]	@ (8002b94 <generate_Velocity+0x2ac>)
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002950:	4b91      	ldr	r3, [pc, #580]	@ (8002b98 <generate_Velocity+0x2b0>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
 8002956:	e034      	b.n	80029c2 <generate_Velocity+0xda>
		} else if (t >= t_acc && t <+ t_acc + t_const) {
 8002958:	4b8c      	ldr	r3, [pc, #560]	@ (8002b8c <generate_Velocity+0x2a4>)
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	4b8c      	ldr	r3, [pc, #560]	@ (8002b90 <generate_Velocity+0x2a8>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	db14      	blt.n	8002998 <generate_Velocity+0xb0>
 800296e:	4b88      	ldr	r3, [pc, #544]	@ (8002b90 <generate_Velocity+0x2a8>)
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	4b89      	ldr	r3, [pc, #548]	@ (8002b9c <generate_Velocity+0x2b4>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297e:	4b83      	ldr	r3, [pc, #524]	@ (8002b8c <generate_Velocity+0x2a4>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	dd04      	ble.n	8002998 <generate_Velocity+0xb0>
			velocity = Peak;
 800298e:	4b81      	ldr	r3, [pc, #516]	@ (8002b94 <generate_Velocity+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a81      	ldr	r2, [pc, #516]	@ (8002b98 <generate_Velocity+0x2b0>)
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e014      	b.n	80029c2 <generate_Velocity+0xda>
		} else {
			velocity = (Peak * ((time_op - t) / t_acc));
 8002998:	4b7a      	ldr	r3, [pc, #488]	@ (8002b84 <generate_Velocity+0x29c>)
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b8c <generate_Velocity+0x2a4>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029a8:	4b79      	ldr	r3, [pc, #484]	@ (8002b90 <generate_Velocity+0x2a8>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b78      	ldr	r3, [pc, #480]	@ (8002b94 <generate_Velocity+0x2ac>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029bc:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <generate_Velocity+0x2b0>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
		}
		position += velocity/1000.0;
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <generate_Velocity+0x2b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fd8a 	bl	80004e0 <__aeabi_f2d>
 80029cc:	4604      	mov	r4, r0
 80029ce:	460d      	mov	r5, r1
 80029d0:	4b71      	ldr	r3, [pc, #452]	@ (8002b98 <generate_Velocity+0x2b0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fd83 	bl	80004e0 <__aeabi_f2d>
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	4b71      	ldr	r3, [pc, #452]	@ (8002ba4 <generate_Velocity+0x2bc>)
 80029e0:	f7fd ff00 	bl	80007e4 <__aeabi_ddiv>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fc1a 	bl	8000224 <__adddf3>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f8ac 	bl	8000b54 <__aeabi_d2f>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <generate_Velocity+0x2b8>)
 8002a00:	6013      	str	r3, [r2, #0]

		position_now = position;
 8002a02:	4b67      	ldr	r3, [pc, #412]	@ (8002ba0 <generate_Velocity+0x2b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a68      	ldr	r2, [pc, #416]	@ (8002ba8 <generate_Velocity+0x2c0>)
 8002a08:	6013      	str	r3, [r2, #0]

		Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 8002a0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <generate_Velocity+0x2c0>)
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <generate_Velocity+0x2c4>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <generate_Velocity+0x2c8>)
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 7a00 	vldr	s14, [r3]
 8002a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a62:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002a7e:	6013      	str	r3, [r2, #0]



		BTempV = Vfeedback;
 8002a80:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb8 <generate_Velocity+0x2d0>)
 8002a86:	6013      	str	r3, [r2, #0]

		VInM = Vfeedback * 24.0/65535.0;
 8002a88:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd27 	bl	80004e0 <__aeabi_f2d>
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <generate_Velocity+0x2d4>)
 8002a98:	f7fd fd7a 	bl	8000590 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	a334      	add	r3, pc, #208	@ (adr r3, 8002b78 <generate_Velocity+0x290>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fe9b 	bl	80007e4 <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f84d 	bl	8000b54 <__aeabi_d2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a40      	ldr	r2, [pc, #256]	@ (8002bc0 <generate_Velocity+0x2d8>)
 8002abe:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

		zStop = 0;
 8002ac0:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <generate_Velocity+0x2dc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
		pwmM = Vfeedback * 65535.0/24.0;
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd08 	bl	80004e0 <__aeabi_f2d>
 8002ad0:	a329      	add	r3, pc, #164	@ (adr r3, 8002b78 <generate_Velocity+0x290>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fd5b 	bl	8000590 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <generate_Velocity+0x2d4>)
 8002ae8:	f7fd fe7c 	bl	80007e4 <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fd ffe6 	bl	8000ac4 <__aeabi_d2iz>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a33      	ldr	r2, [pc, #204]	@ (8002bc8 <generate_Velocity+0x2e0>)
 8002afc:	6013      	str	r3, [r2, #0]

		if(Vfeedback >= 0)
 8002afe:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	db09      	blt.n	8002b22 <generate_Velocity+0x23a>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <generate_Velocity+0x2e0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b2e      	ldr	r3, [pc, #184]	@ (8002bcc <generate_Velocity+0x2e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002b18:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <generate_Velocity+0x2e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b20:	e011      	b.n	8002b46 <generate_Velocity+0x25e>


		}

		else if (Vfeedback < 0)
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <generate_Velocity+0x2cc>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d509      	bpl.n	8002b46 <generate_Velocity+0x25e>
		{

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002b32:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <generate_Velocity+0x2e4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002b3a:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <generate_Velocity+0x2e0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	425a      	negs	r2, r3
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <generate_Velocity+0x2e4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

		if ( i >= time_op*1000)
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <generate_Velocity+0x298>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7fe f918 	bl	8000d84 <__aeabi_ul2f>
 8002b54:	ee06 0a90 	vmov	s13, r0
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <generate_Velocity+0x29c>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002bd0 <generate_Velocity+0x2e8>
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	da31      	bge.n	8002bd4 <generate_Velocity+0x2ec>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 8002b70:	e063      	b.n	8002c3a <generate_Velocity+0x352>
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	40efffe0 	.word	0x40efffe0
 8002b80:	200011c8 	.word	0x200011c8
 8002b84:	20000200 	.word	0x20000200
 8002b88:	20000204 	.word	0x20000204
 8002b8c:	200011d0 	.word	0x200011d0
 8002b90:	200011b8 	.word	0x200011b8
 8002b94:	200011c0 	.word	0x200011c0
 8002b98:	200011d4 	.word	0x200011d4
 8002b9c:	200011bc 	.word	0x200011bc
 8002ba0:	200011d8 	.word	0x200011d8
 8002ba4:	408f4000 	.word	0x408f4000
 8002ba8:	200011ac 	.word	0x200011ac
 8002bac:	20000aec 	.word	0x20000aec
 8002bb0:	200011e8 	.word	0x200011e8
 8002bb4:	200011e0 	.word	0x200011e0
 8002bb8:	2000120c 	.word	0x2000120c
 8002bbc:	40380000 	.word	0x40380000
 8002bc0:	200011e4 	.word	0x200011e4
 8002bc4:	20000af6 	.word	0x20000af6
 8002bc8:	20001210 	.word	0x20001210
 8002bcc:	20000238 	.word	0x20000238
 8002bd0:	447a0000 	.word	0x447a0000
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <generate_Velocity+0x35c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Stop_IT(&htim4);
 8002bdc:	4819      	ldr	r0, [pc, #100]	@ (8002c44 <generate_Velocity+0x35c>)
 8002bde:	f003 fb85 	bl	80062ec <HAL_TIM_Base_Stop_IT>
			rou += 1;
 8002be2:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <generate_Velocity+0x360>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <generate_Velocity+0x360>)
 8002bec:	801a      	strh	r2, [r3, #0]
			i = 0;
 8002bee:	4917      	ldr	r1, [pc, #92]	@ (8002c4c <generate_Velocity+0x364>)
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c1 2300 	strd	r2, r3, [r1]
			buf[0] = 2;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <generate_Velocity+0x368>)
 8002bfe:	2202      	movs	r2, #2
 8002c00:	701a      	strb	r2, [r3, #0]
			L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002c02:	2204      	movs	r2, #4
 8002c04:	4913      	ldr	r1, [pc, #76]	@ (8002c54 <generate_Velocity+0x36c>)
 8002c06:	4812      	ldr	r0, [pc, #72]	@ (8002c50 <generate_Velocity+0x368>)
 8002c08:	f001 fa4a 	bl	80040a0 <updateLED>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <generate_Velocity+0x370>)
 8002c12:	701a      	strb	r2, [r3, #0]
			if ( registerFrame[0x10].U16 != 0)
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <generate_Velocity+0x374>)
 8002c16:	8c1b      	ldrh	r3, [r3, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <generate_Velocity+0x33a>
				piingpong  = 1;
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <generate_Velocity+0x378>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	801a      	strh	r2, [r3, #0]
			fin = 1;
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <generate_Velocity+0x37c>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <generate_Velocity+0x380>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c30:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <generate_Velocity+0x380>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000049c 	.word	0x2000049c
 8002c48:	20001214 	.word	0x20001214
 8002c4c:	200011c8 	.word	0x200011c8
 8002c50:	20000208 	.word	0x20000208
 8002c54:	200003d0 	.word	0x200003d0
 8002c58:	20001216 	.word	0x20001216
 8002c5c:	20000fe8 	.word	0x20000fe8
 8002c60:	20000fd2 	.word	0x20000fd2
 8002c64:	20001217 	.word	0x20001217
 8002c68:	20000238 	.word	0x20000238

08002c6c <BaseAction>:
//{
//return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
//}

//
void BaseAction(void){
 8002c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c70:	b09e      	sub	sp, #120	@ 0x78
 8002c72:	af00      	add	r7, sp, #0
	static uint64_t timestamp1 = 0;
	  static uint64_t timestamp2 = 0;
	  static uint64_t timestamp3 = 0;
	  static uint64_t timestamp4 = 0;

	  position_goal = setPos/10.0;
 8002c74:	4ba4      	ldr	r3, [pc, #656]	@ (8002f08 <BaseAction+0x29c>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc1f 	bl	80004bc <__aeabi_i2d>
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4ba2      	ldr	r3, [pc, #648]	@ (8002f0c <BaseAction+0x2a0>)
 8002c84:	f7fd fdae 	bl	80007e4 <__aeabi_ddiv>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ff60 	bl	8000b54 <__aeabi_d2f>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b9e      	ldr	r3, [pc, #632]	@ (8002f10 <BaseAction+0x2a4>)
 8002c98:	601a      	str	r2, [r3, #0]
	  if (velocity < 0)
 8002c9a:	4b9e      	ldr	r3, [pc, #632]	@ (8002f14 <BaseAction+0x2a8>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d508      	bpl.n	8002cbc <BaseAction+0x50>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW] * -1;
 8002caa:	4b9b      	ldr	r3, [pc, #620]	@ (8002f18 <BaseAction+0x2ac>)
 8002cac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cb0:	eef1 7a67 	vneg.f32	s15, s15
 8002cb4:	4b99      	ldr	r3, [pc, #612]	@ (8002f1c <BaseAction+0x2b0>)
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
 8002cba:	e00b      	b.n	8002cd4 <BaseAction+0x68>
	  }

	  else if (velocity >= 0)
 8002cbc:	4b95      	ldr	r3, [pc, #596]	@ (8002f14 <BaseAction+0x2a8>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	db03      	blt.n	8002cd4 <BaseAction+0x68>
	  {
		  linear_velocity = QEIdata.QEIAngularVelocity[NEW];
 8002ccc:	4b92      	ldr	r3, [pc, #584]	@ (8002f18 <BaseAction+0x2ac>)
 8002cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <BaseAction+0x2b0>)
 8002cd2:	601a      	str	r2, [r3, #0]
	  }

	  if (QEIdata.QEILinearAcc < 0)
 8002cd4:	4b90      	ldr	r3, [pc, #576]	@ (8002f18 <BaseAction+0x2ac>)
 8002cd6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d508      	bpl.n	8002cf6 <BaseAction+0x8a>
	  	  {
		  	  linear_accel = QEIdata.QEILinearAcc * -1;
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f18 <BaseAction+0x2ac>)
 8002ce6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cea:	eef1 7a67 	vneg.f32	s15, s15
 8002cee:	4b8c      	ldr	r3, [pc, #560]	@ (8002f20 <BaseAction+0x2b4>)
 8002cf0:	edc3 7a00 	vstr	s15, [r3]
 8002cf4:	e00b      	b.n	8002d0e <BaseAction+0xa2>
	  	  }

	  	  else if (QEIdata.QEILinearAcc >= 0)
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <BaseAction+0x2ac>)
 8002cf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	db03      	blt.n	8002d0e <BaseAction+0xa2>
	  	  {
	  		  linear_accel = QEIdata.QEILinearAcc;
 8002d06:	4b84      	ldr	r3, [pc, #528]	@ (8002f18 <BaseAction+0x2ac>)
 8002d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0a:	4b85      	ldr	r3, [pc, #532]	@ (8002f20 <BaseAction+0x2b4>)
 8002d0c:	601a      	str	r2, [r3, #0]
	  	  }


	  //linear_accel = accerelometer;
	  linear_position = qeifloat-16.0 ;
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <BaseAction+0x2b8>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d1c:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <BaseAction+0x2bc>)
 8002d1e:	edc3 7a00 	vstr	s15, [r3]

	  rState1=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002d22:	2140      	movs	r1, #64	@ 0x40
 8002d24:	4881      	ldr	r0, [pc, #516]	@ (8002f2c <BaseAction+0x2c0>)
 8002d26:	f002 f91d 	bl	8004f64 <HAL_GPIO_ReadPin>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4a80      	ldr	r2, [pc, #512]	@ (8002f30 <BaseAction+0x2c4>)
 8002d2e:	8013      	strh	r3, [r2, #0]
	  rState2=  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d36:	f002 f915 	bl	8004f64 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f34 <BaseAction+0x2c8>)
 8002d3e:	8013      	strh	r3, [r2, #0]


	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8002d40:	4b7d      	ldr	r3, [pc, #500]	@ (8002f38 <BaseAction+0x2cc>)
 8002d42:	889b      	ldrh	r3, [r3, #4]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4a7d      	ldr	r2, [pc, #500]	@ (8002f3c <BaseAction+0x2d0>)
 8002d48:	7013      	strb	r3, [r2, #0]
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f38 <BaseAction+0x2cc>)
 8002d4c:	88db      	ldrh	r3, [r3, #6]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4a7b      	ldr	r2, [pc, #492]	@ (8002f40 <BaseAction+0x2d4>)
 8002d52:	7013      	strb	r3, [r2, #0]
	  reed = rState1 + (2 * rState2); //for 2 back 1
 8002d54:	4b76      	ldr	r3, [pc, #472]	@ (8002f30 <BaseAction+0x2c4>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b76      	ldr	r3, [pc, #472]	@ (8002f34 <BaseAction+0x2c8>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4a76      	ldr	r2, [pc, #472]	@ (8002f44 <BaseAction+0x2d8>)
 8002d6a:	7013      	strb	r3, [r2, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8002d6c:	4b75      	ldr	r3, [pc, #468]	@ (8002f44 <BaseAction+0x2d8>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	0059      	lsls	r1, r3, #1
 8002d72:	4b75      	ldr	r3, [pc, #468]	@ (8002f48 <BaseAction+0x2dc>)
 8002d74:	fb83 3201 	smull	r3, r2, r3, r1
 8002d78:	17cb      	asrs	r3, r1, #31
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	1aca      	subs	r2, r1, r3
 8002d84:	b293      	uxth	r3, r2
 8002d86:	4a6c      	ldr	r2, [pc, #432]	@ (8002f38 <BaseAction+0x2cc>)
 8002d88:	8113      	strh	r3, [r2, #8]


	  registerFrame[0x11].U16 = (float)(linear_position * 10); //Position
 8002d8a:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <BaseAction+0x2bc>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 3a90 	vmov	r3, s15
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4a65      	ldr	r2, [pc, #404]	@ (8002f38 <BaseAction+0x2cc>)
 8002da4:	8453      	strh	r3, [r2, #34]	@ 0x22
	  registerFrame[0x12].U16 = (float)(linear_velocity * 10); //Velocity
 8002da6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f1c <BaseAction+0x2b0>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002f38 <BaseAction+0x2cc>)
 8002dc0:	8493      	strh	r3, [r2, #36]	@ 0x24
	  registerFrame[0x13].U16 = (float)(linear_accel * 10)	; //Acceleration
 8002dc2:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <BaseAction+0x2b4>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	ee17 3a90 	vmov	r3, s15
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4a57      	ldr	r2, [pc, #348]	@ (8002f38 <BaseAction+0x2cc>)
 8002ddc:	84d3      	strh	r3, [r2, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8002dde:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <BaseAction+0x2e0>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	4a55      	ldr	r2, [pc, #340]	@ (8002f38 <BaseAction+0x2cc>)
 8002de4:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80

	  if (vacuum == 1)
 8002de8:	4b54      	ldr	r3, [pc, #336]	@ (8002f3c <BaseAction+0x2d0>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <BaseAction+0x192>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002df6:	484d      	ldr	r0, [pc, #308]	@ (8002f2c <BaseAction+0x2c0>)
 8002df8:	f002 f8cc 	bl	8004f94 <HAL_GPIO_WritePin>
 8002dfc:	e005      	b.n	8002e0a <BaseAction+0x19e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e04:	4849      	ldr	r0, [pc, #292]	@ (8002f2c <BaseAction+0x2c0>)
 8002e06:	f002 f8c5 	bl	8004f94 <HAL_GPIO_WritePin>
	  }

	  if (gripper == 0 && reed != 1)
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f40 <BaseAction+0x2d4>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <BaseAction+0x1c6>
 8002e12:	4b4c      	ldr	r3, [pc, #304]	@ (8002f44 <BaseAction+0x2d8>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d00b      	beq.n	8002e32 <BaseAction+0x1c6>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e20:	4842      	ldr	r0, [pc, #264]	@ (8002f2c <BaseAction+0x2c0>)
 8002e22:	f002 f8b7 	bl	8004f94 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002e26:	2201      	movs	r2, #1
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	4849      	ldr	r0, [pc, #292]	@ (8002f50 <BaseAction+0x2e4>)
 8002e2c:	f002 f8b2 	bl	8004f94 <HAL_GPIO_WritePin>
 8002e30:	e012      	b.n	8002e58 <BaseAction+0x1ec>
//		  {
//	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
//	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
//		  }
	  }
	  else if (gripper == 1 && reed != 2)
 8002e32:	4b43      	ldr	r3, [pc, #268]	@ (8002f40 <BaseAction+0x2d4>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10e      	bne.n	8002e58 <BaseAction+0x1ec>
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <BaseAction+0x2d8>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d00a      	beq.n	8002e58 <BaseAction+0x1ec>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002e42:	2201      	movs	r2, #1
 8002e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e48:	4838      	ldr	r0, [pc, #224]	@ (8002f2c <BaseAction+0x2c0>)
 8002e4a:	f002 f8a3 	bl	8004f94 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	@ 0x80
 8002e52:	483f      	ldr	r0, [pc, #252]	@ (8002f50 <BaseAction+0x2e4>)
 8002e54:	f002 f89e 	bl	8004f94 <HAL_GPIO_WritePin>
//			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
//			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
//		  }

	  }
	  if((gripper == 1 && reed == 2) || (gripper == 0 && reed == 1)){
 8002e58:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <BaseAction+0x2d4>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d103      	bne.n	8002e68 <BaseAction+0x1fc>
 8002e60:	4b38      	ldr	r3, [pc, #224]	@ (8002f44 <BaseAction+0x2d8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d007      	beq.n	8002e78 <BaseAction+0x20c>
 8002e68:	4b35      	ldr	r3, [pc, #212]	@ (8002f40 <BaseAction+0x2d4>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <BaseAction+0x222>
 8002e70:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <BaseAction+0x2d8>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10a      	bne.n	8002e8e <BaseAction+0x222>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e7e:	482b      	ldr	r0, [pc, #172]	@ (8002f2c <BaseAction+0x2c0>)
 8002e80:	f002 f888 	bl	8004f94 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002e84:	2201      	movs	r2, #1
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	4831      	ldr	r0, [pc, #196]	@ (8002f50 <BaseAction+0x2e4>)
 8002e8a:	f002 f883 	bl	8004f94 <HAL_GPIO_WritePin>



	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <BaseAction+0x2cc>)
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	f645 1361 	movw	r3, #22881	@ 0x5961
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d003      	beq.n	8002ea2 <BaseAction+0x236>
		  registerFrame[0x00].U16 = 22881;
 8002e9a:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <BaseAction+0x2cc>)
 8002e9c:	f645 1361 	movw	r3, #22881	@ 0x5961
 8002ea0:	8013      	strh	r3, [r2, #0]
		  //deb++;
	  }

	  /////Set shelves
	  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <BaseAction+0x2cc>)
 8002ea4:	885b      	ldrh	r3, [r3, #2]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <BaseAction+0x24a>
	  {
		  registerFrame[0x01].U16 = 0; //change to idle mode
 8002eaa:	4a23      	ldr	r2, [pc, #140]	@ (8002f38 <BaseAction+0x2cc>)
 8002eac:	2300      	movs	r3, #0
 8002eae:	8053      	strh	r3, [r2, #2]
		  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8002eb0:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <BaseAction+0x2cc>)
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	8413      	strh	r3, [r2, #32]
//		  set_position_box();
	  }
	  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <BaseAction+0x2cc>)
 8002eb8:	8c1b      	ldrh	r3, [r3, #32]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d14e      	bne.n	8002f5c <BaseAction+0x2f0>
 8002ebe:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <BaseAction+0x2e8>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d14a      	bne.n	8002f5c <BaseAction+0x2f0>
	  {
		  registerFrame[0x23].U16 = shelfPos[0];
 8002ec6:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <BaseAction+0x2ec>)
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <BaseAction+0x2cc>)
 8002ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		  registerFrame[0x24].U16 = shelfPos[1];
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <BaseAction+0x2ec>)
 8002ed2:	885a      	ldrh	r2, [r3, #2]
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <BaseAction+0x2cc>)
 8002ed6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		  registerFrame[0x25].U16 = shelfPos[2];
 8002eda:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <BaseAction+0x2ec>)
 8002edc:	889a      	ldrh	r2, [r3, #4]
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <BaseAction+0x2cc>)
 8002ee0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		  registerFrame[0x26].U16 = shelfPos[3];
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <BaseAction+0x2ec>)
 8002ee6:	88da      	ldrh	r2, [r3, #6]
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <BaseAction+0x2cc>)
 8002eea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		  registerFrame[0x27].U16 = shelfPos[4];
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <BaseAction+0x2ec>)
 8002ef0:	891a      	ldrh	r2, [r3, #8]
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <BaseAction+0x2cc>)
 8002ef4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		  registerFrame[0x10].U16 = 0; //
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <BaseAction+0x2cc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	841a      	strh	r2, [r3, #32]
		  flagShelf = 0;
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <BaseAction+0x2e8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e2f6      	b.n	80034f4 <BaseAction+0x888>
 8002f06:	bf00      	nop
 8002f08:	20001182 	.word	0x20001182
 8002f0c:	40240000 	.word	0x40240000
 8002f10:	200011a8 	.word	0x200011a8
 8002f14:	200011d4 	.word	0x200011d4
 8002f18:	20001218 	.word	0x20001218
 8002f1c:	20000fdc 	.word	0x20000fdc
 8002f20:	20000fe0 	.word	0x20000fe0
 8002f24:	20000aec 	.word	0x20000aec
 8002f28:	20000fe4 	.word	0x20000fe4
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	20000fd8 	.word	0x20000fd8
 8002f34:	20000fda 	.word	0x20000fda
 8002f38:	20000fe8 	.word	0x20000fe8
 8002f3c:	20000fd4 	.word	0x20000fd4
 8002f40:	20000fd5 	.word	0x20000fd5
 8002f44:	20000fd6 	.word	0x20000fd6
 8002f48:	55555556 	.word	0x55555556
 8002f4c:	20001184 	.word	0x20001184
 8002f50:	48000800 	.word	0x48000800
 8002f54:	20000fd0 	.word	0x20000fd0
 8002f58:	20001178 	.word	0x20001178
	  }

		///////1
	  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8002f5c:	4b73      	ldr	r3, [pc, #460]	@ (800312c <BaseAction+0x4c0>)
 8002f5e:	885b      	ldrh	r3, [r3, #2]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d112      	bne.n	8002f8a <BaseAction+0x31e>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002f64:	4b71      	ldr	r3, [pc, #452]	@ (800312c <BaseAction+0x4c0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 2; //Z-home
 8002f6a:	4b70      	ldr	r3, [pc, #448]	@ (800312c <BaseAction+0x4c0>)
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	841a      	strh	r2, [r3, #32]
		  		//setPos = shelfPos[0]; // set goal to home
		  setPos = 0;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <BaseAction+0x4c4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
//		  		  uint8_t result = HomeZ();
//		  		  HAL_Delay(2000);
//		  		  generate_trapezoidal_velocity_profile(time_op,setPos/10.0);
		  Home = 0;
 8002f76:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <BaseAction+0x4c8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]
		  rou = 0;
 8002f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8003138 <BaseAction+0x4cc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]
		  piingpong = 1;
 8002f82:	4b6e      	ldr	r3, [pc, #440]	@ (800313c <BaseAction+0x4d0>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	e2b4      	b.n	80034f4 <BaseAction+0x888>
	  }
	/////point mode
	  else if((registerFrame[0x01].U16) == 8)
 8002f8a:	4b68      	ldr	r3, [pc, #416]	@ (800312c <BaseAction+0x4c0>)
 8002f8c:	885b      	ldrh	r3, [r3, #2]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d10b      	bne.n	8002faa <BaseAction+0x33e>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002f92:	4b66      	ldr	r3, [pc, #408]	@ (800312c <BaseAction+0x4c0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	805a      	strh	r2, [r3, #2]
		  (registerFrame[0x10].U16) = 16; // Z-go point
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <BaseAction+0x4c0>)
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	841a      	strh	r2, [r3, #32]

		  setPos = ((registerFrame[0x30].U16)); // goal = point 30->base system 4 point mode
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <BaseAction+0x4c0>)
 8002fa0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8002fa4:	4b62      	ldr	r3, [pc, #392]	@ (8003130 <BaseAction+0x4c4>)
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e2a4      	b.n	80034f4 <BaseAction+0x888>
				//generate_trapezoidal_velocity_profile(time_op,setPos);
	  }
	/////jog mode
	  //read (convert to array)
	  else if((registerFrame[0x01].U16 ==4))
 8002faa:	4b60      	ldr	r3, [pc, #384]	@ (800312c <BaseAction+0x4c0>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d10f      	bne.n	8002fd2 <BaseAction+0x366>
	  {
		  (registerFrame[0x01].U16) = 0; //reset status
 8002fb2:	4b5e      	ldr	r3, [pc, #376]	@ (800312c <BaseAction+0x4c0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	805a      	strh	r2, [r3, #2]

		  temPick = (registerFrame[0x21].U16);
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <BaseAction+0x4c0>)
 8002fba:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002fbe:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <BaseAction+0x4d4>)
 8002fc0:	801a      	strh	r2, [r3, #0]
		  temPlace = (registerFrame[0x22].U16);
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800312c <BaseAction+0x4c0>)
 8002fc4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <BaseAction+0x4d8>)
 8002fca:	801a      	strh	r2, [r3, #0]

		  OrderSeparate();
 8002fcc:	f000 fab0 	bl	8003530 <OrderSeparate>
 8002fd0:	e290      	b.n	80034f4 <BaseAction+0x888>
	  }
			//run
	  else if(rnd > 0)
 8002fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003148 <BaseAction+0x4dc>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8247 	beq.w	800346a <BaseAction+0x7fe>
	  {
				//first round
		  if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8002fdc:	4b53      	ldr	r3, [pc, #332]	@ (800312c <BaseAction+0x4c0>)
 8002fde:	8c1b      	ldrh	r3, [r3, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d128      	bne.n	8003036 <BaseAction+0x3ca>
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <BaseAction+0x4dc>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d124      	bne.n	8003036 <BaseAction+0x3ca>
 8002fec:	4b57      	ldr	r3, [pc, #348]	@ (800314c <BaseAction+0x4e0>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d120      	bne.n	8003036 <BaseAction+0x3ca>
 8002ff4:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <BaseAction+0x4e4>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11c      	bne.n	8003036 <BaseAction+0x3ca>
 8002ffc:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <BaseAction+0x4e8>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d118      	bne.n	8003036 <BaseAction+0x3ca>
		  {
			  mode = 9; // for debug - pick
 8003004:	4a54      	ldr	r2, [pc, #336]	@ (8003158 <BaseAction+0x4ec>)
 8003006:	2309      	movs	r3, #9
 8003008:	7013      	strb	r3, [r2, #0]
			  gripper = 0;
 800300a:	4a50      	ldr	r2, [pc, #320]	@ (800314c <BaseAction+0x4e0>)
 800300c:	2300      	movs	r3, #0
 800300e:	7013      	strb	r3, [r2, #0]
			  vacuum = 0;
 8003010:	4a50      	ldr	r2, [pc, #320]	@ (8003154 <BaseAction+0x4e8>)
 8003012:	2300      	movs	r3, #0
 8003014:	7013      	strb	r3, [r2, #0]
			  (registerFrame[0x10].U16) = 4; // Z-go pick
 8003016:	4a45      	ldr	r2, [pc, #276]	@ (800312c <BaseAction+0x4c0>)
 8003018:	2304      	movs	r3, #4
 800301a:	8413      	strh	r3, [r2, #32]
			  setPos = shelfPos[pick[5-rnd]-1];
 800301c:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <BaseAction+0x4dc>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f1c3 0205 	rsb	r2, r3, #5
 8003024:	4b4d      	ldr	r3, [pc, #308]	@ (800315c <BaseAction+0x4f0>)
 8003026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	4b4c      	ldr	r3, [pc, #304]	@ (8003160 <BaseAction+0x4f4>)
 800302e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003032:	4a3f      	ldr	r2, [pc, #252]	@ (8003130 <BaseAction+0x4c4>)
 8003034:	8013      	strh	r3, [r2, #0]
		  }
		  if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 8003036:	4b41      	ldr	r3, [pc, #260]	@ (800313c <BaseAction+0x4d0>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80fe 	beq.w	800323c <BaseAction+0x5d0>
 8003040:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <BaseAction+0x4c0>)
 8003042:	8c1b      	ldrh	r3, [r3, #32]
 8003044:	2b08      	cmp	r3, #8
 8003046:	f040 80f9 	bne.w	800323c <BaseAction+0x5d0>
		  {
				///////place down
			  if(mode == 6){
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <BaseAction+0x4ec>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d10e      	bne.n	8003070 <BaseAction+0x404>
				  timestamp1 = HAL_GetTick() + 200; // delay before gripper move
 8003052:	f001 f995 	bl	8004380 <HAL_GetTick>
 8003056:	4603      	mov	r3, r0
 8003058:	33c8      	adds	r3, #200	@ 0xc8
 800305a:	2200      	movs	r2, #0
 800305c:	673b      	str	r3, [r7, #112]	@ 0x70
 800305e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003060:	4b40      	ldr	r3, [pc, #256]	@ (8003164 <BaseAction+0x4f8>)
 8003062:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003066:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 60;
 800306a:	4a3b      	ldr	r2, [pc, #236]	@ (8003158 <BaseAction+0x4ec>)
 800306c:	233c      	movs	r3, #60	@ 0x3c
 800306e:	7013      	strb	r3, [r2, #0]
			  }
			  if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 8003070:	4b37      	ldr	r3, [pc, #220]	@ (8003150 <BaseAction+0x4e4>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d02e      	beq.n	80030d6 <BaseAction+0x46a>
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <BaseAction+0x4dc>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d02a      	beq.n	80030d6 <BaseAction+0x46a>
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <BaseAction+0x4e8>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d126      	bne.n	80030d6 <BaseAction+0x46a>
 8003088:	4b30      	ldr	r3, [pc, #192]	@ (800314c <BaseAction+0x4e0>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d122      	bne.n	80030d6 <BaseAction+0x46a>
 8003090:	f001 f976 	bl	8004380 <HAL_GetTick>
 8003094:	4603      	mov	r3, r0
 8003096:	2200      	movs	r2, #0
 8003098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800309a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <BaseAction+0x4f8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80030a6:	4621      	mov	r1, r4
 80030a8:	4291      	cmp	r1, r2
 80030aa:	4629      	mov	r1, r5
 80030ac:	4199      	sbcs	r1, r3
 80030ae:	d312      	bcc.n	80030d6 <BaseAction+0x46a>
				  registerFrame[0x03].U16 = 1; // gripper forward
 80030b0:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <BaseAction+0x4c0>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	80da      	strh	r2, [r3, #6]
				  timestamp2 = HAL_GetTick() + 100; //delay before release box
 80030b6:	f001 f963 	bl	8004380 <HAL_GetTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	3364      	adds	r3, #100	@ 0x64
 80030be:	2200      	movs	r2, #0
 80030c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030c4:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <BaseAction+0x4fc>)
 80030c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80030ca:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 61;
 80030ce:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <BaseAction+0x4ec>)
 80030d0:	223d      	movs	r2, #61	@ 0x3d
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e076      	b.n	80031c4 <BaseAction+0x558>
			  }
			  else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 80030d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <BaseAction+0x4e4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d148      	bne.n	8003170 <BaseAction+0x504>
 80030de:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <BaseAction+0x4e8>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d144      	bne.n	8003170 <BaseAction+0x504>
 80030e6:	f001 f94b 	bl	8004380 <HAL_GetTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2200      	movs	r2, #0
 80030ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030f0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <BaseAction+0x4fc>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80030fc:	4621      	mov	r1, r4
 80030fe:	4291      	cmp	r1, r2
 8003100:	4629      	mov	r1, r5
 8003102:	4199      	sbcs	r1, r3
 8003104:	d334      	bcc.n	8003170 <BaseAction+0x504>
			  {
				  registerFrame[0x02].U16 = 0; //vacuum off
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <BaseAction+0x4c0>)
 8003108:	2200      	movs	r2, #0
 800310a:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 50; // delay before retract gripper
 800310c:	f001 f938 	bl	8004380 <HAL_GetTick>
 8003110:	4603      	mov	r3, r0
 8003112:	3332      	adds	r3, #50	@ 0x32
 8003114:	2200      	movs	r2, #0
 8003116:	653b      	str	r3, [r7, #80]	@ 0x50
 8003118:	657a      	str	r2, [r7, #84]	@ 0x54
 800311a:	4b14      	ldr	r3, [pc, #80]	@ (800316c <BaseAction+0x500>)
 800311c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003120:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 62;
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <BaseAction+0x4ec>)
 8003126:	223e      	movs	r2, #62	@ 0x3e
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e04b      	b.n	80031c4 <BaseAction+0x558>
 800312c:	20000fe8 	.word	0x20000fe8
 8003130:	20001182 	.word	0x20001182
 8003134:	200011de 	.word	0x200011de
 8003138:	20001214 	.word	0x20001214
 800313c:	20000fd2 	.word	0x20000fd2
 8003140:	20001188 	.word	0x20001188
 8003144:	2000118a 	.word	0x2000118a
 8003148:	200011a2 	.word	0x200011a2
 800314c:	20000fd5 	.word	0x20000fd5
 8003150:	20000fd6 	.word	0x20000fd6
 8003154:	20000fd4 	.word	0x20000fd4
 8003158:	20001187 	.word	0x20001187
 800315c:	2000118c 	.word	0x2000118c
 8003160:	20001178 	.word	0x20001178
 8003164:	20001270 	.word	0x20001270
 8003168:	20001278 	.word	0x20001278
 800316c:	20001280 	.word	0x20001280
			  }
			  else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 8003170:	4ba4      	ldr	r3, [pc, #656]	@ (8003404 <BaseAction+0x798>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d125      	bne.n	80031c4 <BaseAction+0x558>
 8003178:	4ba3      	ldr	r3, [pc, #652]	@ (8003408 <BaseAction+0x79c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d121      	bne.n	80031c4 <BaseAction+0x558>
 8003180:	f001 f8fe 	bl	8004380 <HAL_GetTick>
 8003184:	4603      	mov	r3, r0
 8003186:	2200      	movs	r2, #0
 8003188:	469a      	mov	sl, r3
 800318a:	4693      	mov	fp, r2
 800318c:	4b9f      	ldr	r3, [pc, #636]	@ (800340c <BaseAction+0x7a0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	4592      	cmp	sl, r2
 8003194:	eb7b 0303 	sbcs.w	r3, fp, r3
 8003198:	d314      	bcc.n	80031c4 <BaseAction+0x558>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 800319a:	4b9d      	ldr	r3, [pc, #628]	@ (8003410 <BaseAction+0x7a4>)
 800319c:	2200      	movs	r2, #0
 800319e:	80da      	strh	r2, [r3, #6]
				  load = 0;
 80031a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003414 <BaseAction+0x7a8>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 200; // delay before moving to pick
 80031a6:	f001 f8eb 	bl	8004380 <HAL_GetTick>
 80031aa:	4603      	mov	r3, r0
 80031ac:	33c8      	adds	r3, #200	@ 0xc8
 80031ae:	2200      	movs	r2, #0
 80031b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031b4:	4b98      	ldr	r3, [pc, #608]	@ (8003418 <BaseAction+0x7ac>)
 80031b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80031ba:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 63;
 80031be:	4b97      	ldr	r3, [pc, #604]	@ (800341c <BaseAction+0x7b0>)
 80031c0:	223f      	movs	r2, #63	@ 0x3f
 80031c2:	701a      	strb	r2, [r3, #0]
			  }
				///////finish place -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80031c4:	4b90      	ldr	r3, [pc, #576]	@ (8003408 <BaseAction+0x79c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8192 	bne.w	80034f2 <BaseAction+0x886>
 80031ce:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <BaseAction+0x7b4>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 818d 	bne.w	80034f2 <BaseAction+0x886>
 80031d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003404 <BaseAction+0x798>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 8188 	bne.w	80034f2 <BaseAction+0x886>
 80031e2:	f001 f8cd 	bl	8004380 <HAL_GetTick>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2200      	movs	r2, #0
 80031ea:	4698      	mov	r8, r3
 80031ec:	4691      	mov	r9, r2
 80031ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003418 <BaseAction+0x7ac>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	4590      	cmp	r8, r2
 80031f6:	eb79 0303 	sbcs.w	r3, r9, r3
 80031fa:	f0c0 817a 	bcc.w	80034f2 <BaseAction+0x886>
			  {
				  rnd--;
 80031fe:	4b89      	ldr	r3, [pc, #548]	@ (8003424 <BaseAction+0x7b8>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b87      	ldr	r3, [pc, #540]	@ (8003424 <BaseAction+0x7b8>)
 8003208:	701a      	strb	r2, [r3, #0]
				  if(rnd>0)
 800320a:	4b86      	ldr	r3, [pc, #536]	@ (8003424 <BaseAction+0x7b8>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 816f 	beq.w	80034f2 <BaseAction+0x886>
				  {
					  (registerFrame[0x10].U16) = 4; // Z-go pick
 8003214:	4b7e      	ldr	r3, [pc, #504]	@ (8003410 <BaseAction+0x7a4>)
 8003216:	2204      	movs	r2, #4
 8003218:	841a      	strh	r2, [r3, #32]
					  setPos = shelfPos[pick[5-rnd]-1];
 800321a:	4b82      	ldr	r3, [pc, #520]	@ (8003424 <BaseAction+0x7b8>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	f1c3 0305 	rsb	r3, r3, #5
 8003222:	4a81      	ldr	r2, [pc, #516]	@ (8003428 <BaseAction+0x7bc>)
 8003224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003228:	3b01      	subs	r3, #1
 800322a:	4a80      	ldr	r2, [pc, #512]	@ (800342c <BaseAction+0x7c0>)
 800322c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003230:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <BaseAction+0x7c4>)
 8003232:	801a      	strh	r2, [r3, #0]
					  mode = 9;
 8003234:	4b79      	ldr	r3, [pc, #484]	@ (800341c <BaseAction+0x7b0>)
 8003236:	2209      	movs	r2, #9
 8003238:	701a      	strb	r2, [r3, #0]
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 800323a:	e15a      	b.n	80034f2 <BaseAction+0x886>
				  }
			  }
		  }
		  else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 800323c:	4b7d      	ldr	r3, [pc, #500]	@ (8003434 <BaseAction+0x7c8>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8157 	beq.w	80034f4 <BaseAction+0x888>
 8003246:	4b72      	ldr	r3, [pc, #456]	@ (8003410 <BaseAction+0x7a4>)
 8003248:	8c1b      	ldrh	r3, [r3, #32]
 800324a:	2b04      	cmp	r3, #4
 800324c:	f040 8152 	bne.w	80034f4 <BaseAction+0x888>
		  {
				//////pick up
			  if(mode == 9){
 8003250:	4b72      	ldr	r3, [pc, #456]	@ (800341c <BaseAction+0x7b0>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d10e      	bne.n	8003276 <BaseAction+0x60a>
				  timestamp1 = HAL_GetTick() + 200; // delay before gripper go pick
 8003258:	f001 f892 	bl	8004380 <HAL_GetTick>
 800325c:	4603      	mov	r3, r0
 800325e:	33c8      	adds	r3, #200	@ 0xc8
 8003260:	2200      	movs	r2, #0
 8003262:	643b      	str	r3, [r7, #64]	@ 0x40
 8003264:	647a      	str	r2, [r7, #68]	@ 0x44
 8003266:	4b74      	ldr	r3, [pc, #464]	@ (8003438 <BaseAction+0x7cc>)
 8003268:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800326c:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 90;
 8003270:	4a6a      	ldr	r2, [pc, #424]	@ (800341c <BaseAction+0x7b0>)
 8003272:	235a      	movs	r3, #90	@ 0x5a
 8003274:	7013      	strb	r3, [r2, #0]
			  }
			  if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 8003276:	4b6a      	ldr	r3, [pc, #424]	@ (8003420 <BaseAction+0x7b4>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d12a      	bne.n	80032d4 <BaseAction+0x668>
 800327e:	4b62      	ldr	r3, [pc, #392]	@ (8003408 <BaseAction+0x79c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d126      	bne.n	80032d4 <BaseAction+0x668>
 8003286:	4b5f      	ldr	r3, [pc, #380]	@ (8003404 <BaseAction+0x798>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d122      	bne.n	80032d4 <BaseAction+0x668>
 800328e:	f001 f877 	bl	8004380 <HAL_GetTick>
 8003292:	4603      	mov	r3, r0
 8003294:	2200      	movs	r2, #0
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003298:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800329a:	4b67      	ldr	r3, [pc, #412]	@ (8003438 <BaseAction+0x7cc>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80032a4:	4621      	mov	r1, r4
 80032a6:	4291      	cmp	r1, r2
 80032a8:	4629      	mov	r1, r5
 80032aa:	4199      	sbcs	r1, r3
 80032ac:	d312      	bcc.n	80032d4 <BaseAction+0x668>
			  {
				  registerFrame[0x03].U16 = 1; //gripper forward
 80032ae:	4b58      	ldr	r3, [pc, #352]	@ (8003410 <BaseAction+0x7a4>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	80da      	strh	r2, [r3, #6]
				  timestamp2 = HAL_GetTick() + 100; // delay before vacuum on
 80032b4:	f001 f864 	bl	8004380 <HAL_GetTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	3364      	adds	r3, #100	@ 0x64
 80032bc:	2200      	movs	r2, #0
 80032be:	633b      	str	r3, [r7, #48]	@ 0x30
 80032c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80032c2:	4b5e      	ldr	r3, [pc, #376]	@ (800343c <BaseAction+0x7d0>)
 80032c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80032c8:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 91;
 80032cc:	4b53      	ldr	r3, [pc, #332]	@ (800341c <BaseAction+0x7b0>)
 80032ce:	225b      	movs	r2, #91	@ 0x5b
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e05b      	b.n	800338c <BaseAction+0x720>
			  }
			  else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 80032d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003408 <BaseAction+0x79c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d126      	bne.n	800332a <BaseAction+0x6be>
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <BaseAction+0x798>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d122      	bne.n	800332a <BaseAction+0x6be>
 80032e4:	f001 f84c 	bl	8004380 <HAL_GetTick>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2200      	movs	r2, #0
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f0:	4b52      	ldr	r3, [pc, #328]	@ (800343c <BaseAction+0x7d0>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80032fa:	4621      	mov	r1, r4
 80032fc:	4291      	cmp	r1, r2
 80032fe:	4629      	mov	r1, r5
 8003300:	4199      	sbcs	r1, r3
 8003302:	d312      	bcc.n	800332a <BaseAction+0x6be>
			  {
				  registerFrame[0x02].U16 = 1; //vacuum on
 8003304:	4b42      	ldr	r3, [pc, #264]	@ (8003410 <BaseAction+0x7a4>)
 8003306:	2201      	movs	r2, #1
 8003308:	809a      	strh	r2, [r3, #4]
				  timestamp3 = HAL_GetTick() + 50; // delay before pulling box back
 800330a:	f001 f839 	bl	8004380 <HAL_GetTick>
 800330e:	4603      	mov	r3, r0
 8003310:	3332      	adds	r3, #50	@ 0x32
 8003312:	2200      	movs	r2, #0
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	627a      	str	r2, [r7, #36]	@ 0x24
 8003318:	4b3c      	ldr	r3, [pc, #240]	@ (800340c <BaseAction+0x7a0>)
 800331a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800331e:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 92;
 8003322:	4b3e      	ldr	r3, [pc, #248]	@ (800341c <BaseAction+0x7b0>)
 8003324:	225c      	movs	r2, #92	@ 0x5c
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e030      	b.n	800338c <BaseAction+0x720>

			  }
			  else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 800332a:	4b3d      	ldr	r3, [pc, #244]	@ (8003420 <BaseAction+0x7b4>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d12c      	bne.n	800338c <BaseAction+0x720>
 8003332:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <BaseAction+0x79c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d128      	bne.n	800338c <BaseAction+0x720>
 800333a:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <BaseAction+0x798>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d124      	bne.n	800338c <BaseAction+0x720>
 8003342:	f001 f81d 	bl	8004380 <HAL_GetTick>
 8003346:	4603      	mov	r3, r0
 8003348:	2200      	movs	r2, #0
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	61fa      	str	r2, [r7, #28]
 800334e:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <BaseAction+0x7a0>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003358:	4621      	mov	r1, r4
 800335a:	4291      	cmp	r1, r2
 800335c:	4629      	mov	r1, r5
 800335e:	4199      	sbcs	r1, r3
 8003360:	d314      	bcc.n	800338c <BaseAction+0x720>
			  {
				  registerFrame[0x03].U16 = 0; //gripper backward
 8003362:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <BaseAction+0x7a4>)
 8003364:	2200      	movs	r2, #0
 8003366:	80da      	strh	r2, [r3, #6]
				  load = 1;
 8003368:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <BaseAction+0x7a8>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
				  timestamp4 = HAL_GetTick() + 200; // delay before moving again
 800336e:	f001 f807 	bl	8004380 <HAL_GetTick>
 8003372:	4603      	mov	r3, r0
 8003374:	33c8      	adds	r3, #200	@ 0xc8
 8003376:	2200      	movs	r2, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	617a      	str	r2, [r7, #20]
 800337c:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <BaseAction+0x7ac>)
 800337e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003382:	e9c3 1200 	strd	r1, r2, [r3]
				  mode = 93;
 8003386:	4b25      	ldr	r3, [pc, #148]	@ (800341c <BaseAction+0x7b0>)
 8003388:	225d      	movs	r2, #93	@ 0x5d
 800338a:	701a      	strb	r2, [r3, #0]
			  }
				///////finish pick -> move on
			  if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 800338c:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <BaseAction+0x79c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 80af 	bne.w	80034f4 <BaseAction+0x888>
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <BaseAction+0x7b4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80aa 	bne.w	80034f4 <BaseAction+0x888>
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <BaseAction+0x798>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 80a5 	bne.w	80034f4 <BaseAction+0x888>
 80033aa:	f000 ffe9 	bl	8004380 <HAL_GetTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2200      	movs	r2, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	60fa      	str	r2, [r7, #12]
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <BaseAction+0x7ac>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c0:	4621      	mov	r1, r4
 80033c2:	4291      	cmp	r1, r2
 80033c4:	4629      	mov	r1, r5
 80033c6:	4199      	sbcs	r1, r3
 80033c8:	f0c0 8094 	bcc.w	80034f4 <BaseAction+0x888>
			  {
				  (registerFrame[0x10].U16) = 8; // Z-go place
 80033cc:	4b10      	ldr	r3, [pc, #64]	@ (8003410 <BaseAction+0x7a4>)
 80033ce:	2208      	movs	r2, #8
 80033d0:	841a      	strh	r2, [r3, #32]
				  if(place[5-rnd] == 5)
 80033d2:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <BaseAction+0x7b8>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f1c3 0305 	rsb	r3, r3, #5
 80033da:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <BaseAction+0x7d4>)
 80033dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d12f      	bne.n	8003444 <BaseAction+0x7d8>
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 70; //bon  goal + 5mm
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <BaseAction+0x7b8>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f1c3 0305 	rsb	r3, r3, #5
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <BaseAction+0x7d4>)
 80033ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a0d      	ldr	r2, [pc, #52]	@ (800342c <BaseAction+0x7c0>)
 80033f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fa:	3346      	adds	r3, #70	@ 0x46
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <BaseAction+0x7c4>)
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e02e      	b.n	8003462 <BaseAction+0x7f6>
 8003404:	20000fd4 	.word	0x20000fd4
 8003408:	20000fd5 	.word	0x20000fd5
 800340c:	20001280 	.word	0x20001280
 8003410:	20000fe8 	.word	0x20000fe8
 8003414:	200011a4 	.word	0x200011a4
 8003418:	20001288 	.word	0x20001288
 800341c:	20001187 	.word	0x20001187
 8003420:	20000fd6 	.word	0x20000fd6
 8003424:	200011a2 	.word	0x200011a2
 8003428:	2000118c 	.word	0x2000118c
 800342c:	20001178 	.word	0x20001178
 8003430:	20001182 	.word	0x20001182
 8003434:	20000fd2 	.word	0x20000fd2
 8003438:	20001270 	.word	0x20001270
 800343c:	20001278 	.word	0x20001278
 8003440:	20001198 	.word	0x20001198
				  }
				  else
				  {
					  setPos = shelfPos[place[5-rnd]-1] + 70; // goal + 5mm
 8003444:	4b31      	ldr	r3, [pc, #196]	@ (800350c <BaseAction+0x8a0>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	f1c3 0305 	rsb	r3, r3, #5
 800344c:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <BaseAction+0x8a4>)
 800344e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003452:	3b01      	subs	r3, #1
 8003454:	4a2f      	ldr	r2, [pc, #188]	@ (8003514 <BaseAction+0x8a8>)
 8003456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345a:	3346      	adds	r3, #70	@ 0x46
 800345c:	b29a      	uxth	r2, r3
 800345e:	4b2e      	ldr	r3, [pc, #184]	@ (8003518 <BaseAction+0x8ac>)
 8003460:	801a      	strh	r2, [r3, #0]
				  }
				  mode = 6;
 8003462:	4b2e      	ldr	r3, [pc, #184]	@ (800351c <BaseAction+0x8b0>)
 8003464:	2206      	movs	r2, #6
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e044      	b.n	80034f4 <BaseAction+0x888>
			  }
		  }
	  }

	  //end jog
	  else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 800346a:	4b2d      	ldr	r3, [pc, #180]	@ (8003520 <BaseAction+0x8b4>)
 800346c:	8c1b      	ldrh	r3, [r3, #32]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d10a      	bne.n	8003488 <BaseAction+0x81c>
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <BaseAction+0x8a0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <BaseAction+0x81c>
	  {
		  (registerFrame[0x10].U16 = 0); // End Jogs
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <BaseAction+0x8b4>)
 800347c:	2200      	movs	r2, #0
 800347e:	841a      	strh	r2, [r3, #32]
		  mode = 255;
 8003480:	4b26      	ldr	r3, [pc, #152]	@ (800351c <BaseAction+0x8b0>)
 8003482:	22ff      	movs	r2, #255	@ 0xff
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e035      	b.n	80034f4 <BaseAction+0x888>
	  }
		/////End point & Home
	  else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8003488:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <BaseAction+0x8b8>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d031      	beq.n	80034f4 <BaseAction+0x888>
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <BaseAction+0x8b4>)
 8003492:	8c1b      	ldrh	r3, [r3, #32]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d003      	beq.n	80034a0 <BaseAction+0x834>
 8003498:	4b21      	ldr	r3, [pc, #132]	@ (8003520 <BaseAction+0x8b4>)
 800349a:	8c1b      	ldrh	r3, [r3, #32]
 800349c:	2b10      	cmp	r3, #16
 800349e:	d129      	bne.n	80034f4 <BaseAction+0x888>
	  {
		  //finish point & home mode
		  static uint64_t Timestamp = 0;
		  if(rnd2 == 0){
 80034a0:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <BaseAction+0x8bc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <BaseAction+0x85e>
			  Timestamp = HAL_GetTick() + 1000; //delay
 80034a8:	f000 ff6a 	bl	8004380 <HAL_GetTick>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80034b2:	2200      	movs	r2, #0
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <BaseAction+0x8c0>)
 80034ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034be:	e9c3 1200 	strd	r1, r2, [r3]
			  rnd2 = 1;
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <BaseAction+0x8bc>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e014      	b.n	80034f4 <BaseAction+0x888>
		  }
		  else if(HAL_GetTick() >= Timestamp)
 80034ca:	f000 ff59 	bl	8004380 <HAL_GetTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2200      	movs	r2, #0
 80034d2:	461c      	mov	r4, r3
 80034d4:	4615      	mov	r5, r2
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <BaseAction+0x8c0>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	4294      	cmp	r4, r2
 80034de:	eb75 0303 	sbcs.w	r3, r5, r3
 80034e2:	d307      	bcc.n	80034f4 <BaseAction+0x888>
		  {
			  registerFrame[0x10].U16 = 0; // finish point & home mode
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <BaseAction+0x8b4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	841a      	strh	r2, [r3, #32]
			  rnd2 = 0;
 80034ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <BaseAction+0x8bc>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e000      	b.n	80034f4 <BaseAction+0x888>
			  if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80034f2:	bf00      	nop
		  }
	  }
	  if(registerFrame[0x10].U16 == 0){
 80034f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <BaseAction+0x8b4>)
 80034f6:	8c1b      	ldrh	r3, [r3, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <BaseAction+0x896>
		  piingpong = 0;
 80034fc:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <BaseAction+0x8b8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	801a      	strh	r2, [r3, #0]
	  }
}
 8003502:	bf00      	nop
 8003504:	3778      	adds	r7, #120	@ 0x78
 8003506:	46bd      	mov	sp, r7
 8003508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350c:	200011a2 	.word	0x200011a2
 8003510:	20001198 	.word	0x20001198
 8003514:	20001178 	.word	0x20001178
 8003518:	20001182 	.word	0x20001182
 800351c:	20001187 	.word	0x20001187
 8003520:	20000fe8 	.word	0x20000fe8
 8003524:	20000fd2 	.word	0x20000fd2
 8003528:	200011a3 	.word	0x200011a3
 800352c:	20001290 	.word	0x20001290

08003530 <OrderSeparate>:
//}

//

void OrderSeparate(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
	//rnd = 0;
	////// Convert to string
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 8003536:	f242 7310 	movw	r3, #10000	@ 0x2710
 800353a:	80fb      	strh	r3, [r7, #6]
 800353c:	e056      	b.n	80035ec <OrderSeparate+0xbc>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 800353e:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <OrderSeparate+0xd8>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	429a      	cmp	r2, r3
 8003546:	d858      	bhi.n	80035fa <OrderSeparate+0xca>
 8003548:	4b2f      	ldr	r3, [pc, #188]	@ (8003608 <OrderSeparate+0xd8>)
 800354a:	881a      	ldrh	r2, [r3, #0]
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b05      	cmp	r3, #5
 8003556:	d850      	bhi.n	80035fa <OrderSeparate+0xca>
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <OrderSeparate+0xdc>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	429a      	cmp	r2, r3
 8003560:	d84b      	bhi.n	80035fa <OrderSeparate+0xca>
 8003562:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <OrderSeparate+0xdc>)
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b05      	cmp	r3, #5
 8003570:	d843      	bhi.n	80035fa <OrderSeparate+0xca>
		{
			//rnd = 0;
			//mode = 0;
			break;
		}
		pick[rnd] = temPick/p; // use this for pick
 8003572:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <OrderSeparate+0xd8>)
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	4b26      	ldr	r3, [pc, #152]	@ (8003610 <OrderSeparate+0xe0>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <OrderSeparate+0xe4>)
 8003586:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 800358a:	4b20      	ldr	r3, [pc, #128]	@ (800360c <OrderSeparate+0xdc>)
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <OrderSeparate+0xe0>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <OrderSeparate+0xe8>)
 800359e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 80035a2:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <OrderSeparate+0xd8>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035ac:	fb01 f202 	mul.w	r2, r1, r2
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <OrderSeparate+0xd8>)
 80035b6:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 80035b8:	4b14      	ldr	r3, [pc, #80]	@ (800360c <OrderSeparate+0xdc>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	fbb3 f1f2 	udiv	r1, r3, r2
 80035c2:	fb01 f202 	mul.w	r2, r1, r2
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <OrderSeparate+0xdc>)
 80035cc:	801a      	strh	r2, [r3, #0]
		rnd++;
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <OrderSeparate+0xe0>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <OrderSeparate+0xe0>)
 80035d8:	701a      	strb	r2, [r3, #0]
		rou = 20;
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <OrderSeparate+0xec>)
 80035dc:	2214      	movs	r2, #20
 80035de:	801a      	strh	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1 && temPick != 0;p/=10)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003620 <OrderSeparate+0xf0>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	80fb      	strh	r3, [r7, #6]
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <OrderSeparate+0xca>
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <OrderSeparate+0xd8>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1a1      	bne.n	800353e <OrderSeparate+0xe>
	}
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20001188 	.word	0x20001188
 800360c:	2000118a 	.word	0x2000118a
 8003610:	200011a2 	.word	0x200011a2
 8003614:	2000118c 	.word	0x2000118c
 8003618:	20001198 	.word	0x20001198
 800361c:	20001214 	.word	0x20001214
 8003620:	cccccccd 	.word	0xcccccccd

08003624 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 8003630:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <serviceMotor+0x48>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
	if(dir){
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <serviceMotor+0x4c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <serviceMotor+0x4c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 800364c:	e007      	b.n	800365e <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800364e:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <serviceMotor+0x4c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <serviceMotor+0x4c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000af6 	.word	0x20000af6
 8003670:	20000238 	.word	0x20000238

08003674 <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	return zStop;
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <getZStop+0x14>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	20000af6 	.word	0x20000af6

0800368c <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	80fb      	strh	r3, [r7, #6]
    if((GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369c:	d10f      	bne.n	80036be <HAL_GPIO_EXTI_Callback+0x32>
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_GPIO_EXTI_Callback+0x32>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036a8:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <HAL_GPIO_EXTI_Callback+0x60>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036b0:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <HAL_GPIO_EXTI_Callback+0x60>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
        zStop = 1;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
//        __HAL_TIM_SET_COUNTER(&htim2, 0);
//        qeifloat = 0;
    }
    if ((GPIO_Pin == GPIO_PIN_5))
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d10c      	bne.n	80036de <HAL_GPIO_EXTI_Callback+0x52>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_GPIO_EXTI_Callback+0x60>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036cc:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <HAL_GPIO_EXTI_Callback+0x60>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2101      	movs	r1, #1
 80036d8:	4805      	ldr	r0, [pc, #20]	@ (80036f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80036da:	f001 fc5b 	bl	8004f94 <HAL_GPIO_WritePin>
    }

}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000af6 	.word	0x20000af6
 80036ec:	20000238 	.word	0x20000238
 80036f0:	48000400 	.word	0x48000400

080036f4 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d103      	bne.n	800370e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8003706:	2104      	movs	r1, #4
 8003708:	4804      	ldr	r0, [pc, #16]	@ (800371c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800370a:	f003 f9cb 	bl	8006aa4 <HAL_TIM_PWM_Stop_DMA>
	}

}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40000400 	.word	0x40000400
 800371c:	200003d0 	.word	0x200003d0

08003720 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		//registerFrame[0x00].U16 = 22881; //send "Ya" // dont use interrupt cuz unstable
	}
	else if(htim == &htim4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10f      	bne.n	800375a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		i+=1;
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f112 0801 	adds.w	r8, r2, #1
 8003744:	f143 0900 	adc.w	r9, r3, #0
 8003748:	4b10      	ldr	r3, [pc, #64]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800374a:	e9c3 8900 	strd	r8, r9, [r3]
		//piingpong = 0;
		fin = 0;
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
		generate_Velocity();
 8003754:	f7ff f8c8 	bl	80028e8 <generate_Velocity>
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 8003758:	e00e      	b.n	8003778 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if(htim == &htim7)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10a      	bne.n	8003778 <HAL_TIM_PeriodElapsedCallback+0x58>
	_micros += UINT16_MAX;
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800376c:	1854      	adds	r4, r2, r1
 800376e:	f143 0500 	adc.w	r5, r3, #0
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003774:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003782:	bf00      	nop
 8003784:	20000568 	.word	0x20000568
 8003788:	2000049c 	.word	0x2000049c
 800378c:	200011c8 	.word	0x200011c8
 8003790:	20001217 	.word	0x20001217
 8003794:	20000634 	.word	0x20000634
 8003798:	20001248 	.word	0x20001248

0800379c <micros>:

uint64_t micros()
{
 800379c:	b4b0      	push	{r4, r5, r7}
 800379e:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <micros+0x2c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2200      	movs	r2, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	4611      	mov	r1, r2
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <micros+0x30>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	1884      	adds	r4, r0, r2
 80037b4:	eb41 0503 	adc.w	r5, r1, r3
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
}
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bcb0      	pop	{r4, r5, r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000634 	.word	0x20000634
 80037cc:	20001248 	.word	0x20001248

080037d0 <QEIEncoderPosVel_Update>:

float QEIEncoderPosVel_Update()
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 80037d6:	f7ff ffe1 	bl	800379c <micros>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	493c      	ldr	r1, [pc, #240]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80037e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.Positions[NEW] = __HAL_TIM_GET_COUNTER(&htim2);
 80037e4:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <QEIEncoderPosVel_Update+0x104>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2200      	movs	r2, #0
 80037ec:	469a      	mov	sl, r3
 80037ee:	4693      	mov	fp, r2
 80037f0:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80037f2:	e9c3 ab00 	strd	sl, fp, [r3]
//QEIdata.QEIAngularVelocity[NEW]=QEIdata.QEIAngularVelocity[OLD];

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
 80037f6:	4b36      	ldr	r3, [pc, #216]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80037f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fc:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80037fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003802:	ebb0 0802 	subs.w	r8, r0, r2
 8003806:	eb61 0903 	sbc.w	r9, r1, r3
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	4932      	ldr	r1, [pc, #200]	@ (80038d8 <QEIEncoderPosVel_Update+0x108>)
 8003810:	e9c1 2300 	strd	r2, r3, [r1]
//if(diffPosition > 2147483647)
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
diffTime = (QEIdata.TimeStamps[NEW]-QEIdata.TimeStamps[OLD]) * 0.000001;
 8003814:	4b2e      	ldr	r3, [pc, #184]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 8003816:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800381a:	4b2d      	ldr	r3, [pc, #180]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 800381c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003820:	1a84      	subs	r4, r0, r2
 8003822:	eb61 0503 	sbc.w	r5, r1, r3
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fc fe7b 	bl	8000524 <__aeabi_ul2d>
 800382e:	a326      	add	r3, pc, #152	@ (adr r3, 80038c8 <QEIEncoderPosVel_Update+0xf8>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc feac 	bl	8000590 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f7fd f988 	bl	8000b54 <__aeabi_d2f>
 8003844:	4603      	mov	r3, r0
 8003846:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <QEIEncoderPosVel_Update+0x10c>)
 8003848:	6013      	str	r3, [r2, #0]
//calculate anglar velocity
diffVelocity = (diffPosition / diffTime)*(60.0/8192)*100.0;
 800384a:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <QEIEncoderPosVel_Update+0x108>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd fa9e 	bl	8000d94 <__aeabi_l2f>
 8003858:	ee06 0a90 	vmov	s13, r0
 800385c:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <QEIEncoderPosVel_Update+0x10c>)
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003866:	ee17 0a10 	vmov	r0, s14
 800386a:	f7fc fe39 	bl	80004e0 <__aeabi_f2d>
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <QEIEncoderPosVel_Update+0x110>)
 8003874:	f7fc fe8c 	bl	8000590 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <QEIEncoderPosVel_Update+0x114>)
 8003886:	f7fc fe83 	bl	8000590 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f95f 	bl	8000b54 <__aeabi_d2f>
 8003896:	4603      	mov	r3, r0
 8003898:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <QEIEncoderPosVel_Update+0x118>)
 800389a:	6013      	str	r3, [r2, #0]
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.Positions[OLD] = QEIdata.Positions[NEW];
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	490b      	ldr	r1, [pc, #44]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80038a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80038aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038ae:	4908      	ldr	r1, [pc, #32]	@ (80038d0 <QEIEncoderPosVel_Update+0x100>)
 80038b0:	e9c1 2306 	strd	r2, r3, [r1, #24]

return diffVelocity;
 80038b4:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <QEIEncoderPosVel_Update+0x118>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	ee07 3a90 	vmov	s15, r3
//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c4:	f3af 8000 	nop.w
 80038c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80038cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80038d0:	20001218 	.word	0x20001218
 80038d4:	20000304 	.word	0x20000304
 80038d8:	20001250 	.word	0x20001250
 80038dc:	20001258 	.word	0x20001258
 80038e0:	3f7e0000 	.word	0x3f7e0000
 80038e4:	40590000 	.word	0x40590000
 80038e8:	2000125c 	.word	0x2000125c

080038ec <ACC_Update>:

void ACC_Update()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamps[NEW] = micros();
 80038f0:	f7ff ff54 	bl	800379c <micros>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4915      	ldr	r1, [pc, #84]	@ (8003950 <ACC_Update+0x64>)
 80038fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
QEIdata.QEIAngularVelocity[NEW] =  QEIEncoderPosVel_Update();
 80038fe:	f7ff ff67 	bl	80037d0 <QEIEncoderPosVel_Update>
 8003902:	eef0 7a40 	vmov.f32	s15, s0
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <ACC_Update+0x64>)
 8003908:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//Postion 1 turn calculation
//QEIdata.QEIPostion_1turn = QEIdata.Positions[NEW] % 3072;
//calculate dx
//diffPosition = QEIdata.Positions[NEW] - QEIdata.Positions[OLD];
diffVelocitys = QEIdata.QEIAngularVelocity[NEW] - QEIdata.QEIAngularVelocity[OLD];
 800390c:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <ACC_Update+0x64>)
 800390e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <ACC_Update+0x64>)
 8003914:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391c:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <ACC_Update+0x68>)
 800391e:	edc3 7a00 	vstr	s15, [r3]
//diffPosition -=4294967295 ;
//if(diffPosition < 2147483647)
//diffPosition +=4294967295;
//calculate dt
//calculate anglar velocity
QEIdata.QEILinearAcc = (diffVelocitys / diffTime);
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <ACC_Update+0x68>)
 8003924:	edd3 6a00 	vldr	s13, [r3]
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <ACC_Update+0x6c>)
 800392a:	ed93 7a00 	vldr	s14, [r3]
 800392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <ACC_Update+0x64>)
 8003934:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//QEIdata.QEILinearAcc = (diffVelocity / diffTime)*(60.0/8192)*100.0;

//store value for next loop
QEIdata.QEIAngularVelocity[OLD] = QEIdata.QEIAngularVelocity[NEW];
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <ACC_Update+0x64>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <ACC_Update+0x64>)
 800393e:	6293      	str	r3, [r2, #40]	@ 0x28
QEIdata.TimeStamps[OLD]=QEIdata.TimeStamps[NEW];
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <ACC_Update+0x64>)
 8003942:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003946:	4902      	ldr	r1, [pc, #8]	@ (8003950 <ACC_Update+0x64>)
 8003948:	e9c1 2306 	strd	r2, r3, [r1, #24]

//QEIdata.QEIAngularVelocity[OLD]=QEIdata.QEIAngularVelocity[NEW];
}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20001218 	.word	0x20001218
 8003954:	20001260 	.word	0x20001260
 8003958:	20001258 	.word	0x20001258

0800395c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003960:	b672      	cpsid	i
}
 8003962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <Error_Handler+0x8>

08003968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <HAL_MspInit+0x44>)
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	4a0e      	ldr	r2, [pc, #56]	@ (80039ac <HAL_MspInit+0x44>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6613      	str	r3, [r2, #96]	@ 0x60
 800397a:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <HAL_MspInit+0x44>)
 800397c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_MspInit+0x44>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <HAL_MspInit+0x44>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6593      	str	r3, [r2, #88]	@ 0x58
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_MspInit+0x44>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800399e:	f001 fbcd 	bl	800513c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	@ 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a72      	ldr	r2, [pc, #456]	@ (8003b98 <HAL_TIM_Base_MspInit+0x1e8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d139      	bne.n	8003a46 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d2:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	4a71      	ldr	r2, [pc, #452]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	4b6c      	ldr	r3, [pc, #432]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	4a6b      	ldr	r2, [pc, #428]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f6:	4b69      	ldr	r3, [pc, #420]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a06:	2312      	movs	r3, #18
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a12:	2306      	movs	r3, #6
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a20:	f001 f91e 	bl	8004c60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2100      	movs	r1, #0
 8003a28:	2018      	movs	r0, #24
 8003a2a:	f000 fdb2 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a2e:	2018      	movs	r0, #24
 8003a30:	f000 fdc9 	bl	80045c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	2019      	movs	r0, #25
 8003a3a:	f000 fdaa 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a3e:	2019      	movs	r0, #25
 8003a40:	f000 fdc1 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a44:	e0a3      	b.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a55      	ldr	r2, [pc, #340]	@ (8003ba0 <HAL_TIM_Base_MspInit+0x1f0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d137      	bne.n	8003ac0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a50:	4b52      	ldr	r3, [pc, #328]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a54:	4a51      	ldr	r2, [pc, #324]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8003a68:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ba8 <HAL_TIM_Base_MspInit+0x1f8>)
 8003a6c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a70:	223e      	movs	r2, #62	@ 0x3e
 8003a72:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a76:	2210      	movs	r2, #16
 8003a78:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003a80:	4b48      	ldr	r3, [pc, #288]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a82:	2280      	movs	r2, #128	@ 0x80
 8003a84:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a8c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a94:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003a96:	4b43      	ldr	r3, [pc, #268]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003a9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003aa2:	4840      	ldr	r0, [pc, #256]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003aa4:	f000 fdaa 	bl	80045fc <HAL_DMA_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 8003aae:	f7ff ff55 	bl	800395c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003abe:	e066      	b.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a39      	ldr	r2, [pc, #228]	@ (8003bac <HAL_TIM_Base_MspInit+0x1fc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d114      	bne.n	8003af4 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	4a33      	ldr	r2, [pc, #204]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad6:	4b31      	ldr	r3, [pc, #196]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	201e      	movs	r0, #30
 8003ae8:	f000 fd53 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003aec:	201e      	movs	r0, #30
 8003aee:	f000 fd6a 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003af2:	e04c      	b.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_TIM_Base_MspInit+0x200>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d114      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003afe:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0a:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2032      	movs	r0, #50	@ 0x32
 8003b1c:	f000 fd39 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b20:	2032      	movs	r0, #50	@ 0x32
 8003b22:	f000 fd50 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003b26:	e032      	b.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	@ (8003bb4 <HAL_TIM_Base_MspInit+0x204>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d114      	bne.n	8003b5c <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b32:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b38:	f043 0320 	orr.w	r3, r3, #32
 8003b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2037      	movs	r0, #55	@ 0x37
 8003b50:	f000 fd1f 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003b54:	2037      	movs	r0, #55	@ 0x37
 8003b56:	f000 fd36 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003b5a:	e018      	b.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a15      	ldr	r2, [pc, #84]	@ (8003bb8 <HAL_TIM_Base_MspInit+0x208>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <HAL_TIM_Base_MspInit+0x1ec>)
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2019      	movs	r0, #25
 8003b84:	f000 fd05 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b88:	2019      	movs	r0, #25
 8003b8a:	f000 fd1c 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003b8e:	bf00      	nop
 8003b90:	3738      	adds	r7, #56	@ 0x38
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	200007cc 	.word	0x200007cc
 8003ba8:	40020030 	.word	0x40020030
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40001400 	.word	0x40001400
 8003bb8:	40014400 	.word	0x40014400

08003bbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bdc:	d128      	bne.n	8003c30 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003c0e:	2322      	movs	r3, #34	@ 0x22
 8003c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c12:	2302      	movs	r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c2c:	f001 f818 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a23      	ldr	r2, [pc, #140]	@ (8003ce8 <HAL_TIM_MspPostInit+0xac>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d11e      	bne.n	8003c9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003c88:	2306      	movs	r3, #6
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4619      	mov	r1, r3
 8003c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c96:	f000 ffe3 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c9a:	e021      	b.n	8003ce0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	@ (8003cf0 <HAL_TIM_MspPostInit+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003caa:	4a10      	ldr	r2, [pc, #64]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <HAL_TIM_MspPostInit+0xb0>)
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cdc:	f000 ffc0 	bl	8004c60 <HAL_GPIO_Init>
}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40000400 	.word	0x40000400

08003cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0a0      	sub	sp, #128	@ 0x80
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d0c:	f107 0318 	add.w	r3, r7, #24
 8003d10:	2254      	movs	r2, #84	@ 0x54
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f006 fe9b 	bl	800aa50 <memset>
  if(huart->Instance==USART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a80      	ldr	r2, [pc, #512]	@ (8003f20 <HAL_UART_MspInit+0x22c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d161      	bne.n	8003de8 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d2c:	f107 0318 	add.w	r3, r7, #24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 ff41 	bl	8005bb8 <HAL_RCCEx_PeriphCLKConfig>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d3c:	f7ff fe0e 	bl	800395c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d40:	4b78      	ldr	r3, [pc, #480]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	4a77      	ldr	r2, [pc, #476]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d4c:	4b75      	ldr	r3, [pc, #468]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d58:	4b72      	ldr	r3, [pc, #456]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5c:	4a71      	ldr	r2, [pc, #452]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d70:	2330      	movs	r3, #48	@ 0x30
 8003d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d74:	2302      	movs	r3, #2
 8003d76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d80:	2307      	movs	r3, #7
 8003d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4867      	ldr	r0, [pc, #412]	@ (8003f28 <HAL_UART_MspInit+0x234>)
 8003d8c:	f000 ff68 	bl	8004c60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003d90:	4b66      	ldr	r3, [pc, #408]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003d92:	4a67      	ldr	r2, [pc, #412]	@ (8003f30 <HAL_UART_MspInit+0x23c>)
 8003d94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003d96:	4b65      	ldr	r3, [pc, #404]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003d98:	2218      	movs	r2, #24
 8003d9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d9c:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da2:	4b62      	ldr	r3, [pc, #392]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da8:	4b60      	ldr	r3, [pc, #384]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dae:	4b5f      	ldr	r3, [pc, #380]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003db4:	4b5d      	ldr	r3, [pc, #372]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003dba:	4b5c      	ldr	r3, [pc, #368]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003dc8:	4858      	ldr	r0, [pc, #352]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003dca:	f000 fc17 	bl	80045fc <HAL_DMA_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003dd4:	f7ff fdc2 	bl	800395c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a54      	ldr	r2, [pc, #336]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003de0:	4a52      	ldr	r2, [pc, #328]	@ (8003f2c <HAL_UART_MspInit+0x238>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003de6:	e097      	b.n	8003f18 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a51      	ldr	r2, [pc, #324]	@ (8003f34 <HAL_UART_MspInit+0x240>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	f040 8092 	bne.w	8003f18 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003df4:	2302      	movs	r3, #2
 8003df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfc:	f107 0318 	add.w	r3, r7, #24
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fed9 	bl	8005bb8 <HAL_RCCEx_PeriphCLKConfig>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8003e0c:	f7ff fda6 	bl	800395c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e10:	4b44      	ldr	r3, [pc, #272]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	4a43      	ldr	r2, [pc, #268]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1c:	4b41      	ldr	r3, [pc, #260]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e28:	4b3e      	ldr	r3, [pc, #248]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e34:	4b3b      	ldr	r3, [pc, #236]	@ (8003f24 <HAL_UART_MspInit+0x230>)
 8003e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e40:	230c      	movs	r3, #12
 8003e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e50:	2307      	movs	r3, #7
 8003e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5e:	f000 feff 	bl	8004c60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003e62:	4b35      	ldr	r3, [pc, #212]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e64:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <HAL_UART_MspInit+0x248>)
 8003e66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003e68:	4b33      	ldr	r3, [pc, #204]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e6a:	221a      	movs	r2, #26
 8003e6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e6e:	4b32      	ldr	r3, [pc, #200]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e74:	4b30      	ldr	r3, [pc, #192]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e7c:	2280      	movs	r2, #128	@ 0x80
 8003e7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e80:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e86:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e92:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e98:	4827      	ldr	r0, [pc, #156]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003e9a:	f000 fbaf 	bl	80045fc <HAL_DMA_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003ea4:	f7ff fd5a 	bl	800395c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003eb0:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_UART_MspInit+0x244>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003eb6:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003eb8:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_UART_MspInit+0x250>)
 8003eba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003ebc:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ebe:	221b      	movs	r2, #27
 8003ec0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ece:	4b1c      	ldr	r3, [pc, #112]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ed0:	2280      	movs	r2, #128	@ 0x80
 8003ed2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eda:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ee0:	4b17      	ldr	r3, [pc, #92]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ee6:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003eec:	4814      	ldr	r0, [pc, #80]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003eee:	f000 fb85 	bl	80045fc <HAL_DMA_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003ef8:	f7ff fd30 	bl	800395c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003f00:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f02:	4a0f      	ldr	r2, [pc, #60]	@ (8003f40 <HAL_UART_MspInit+0x24c>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	2026      	movs	r0, #38	@ 0x26
 8003f0e:	f000 fb40 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f12:	2026      	movs	r0, #38	@ 0x26
 8003f14:	f000 fb57 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003f18:	bf00      	nop
 8003f1a:	3780      	adds	r7, #128	@ 0x80
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40021000 	.word	0x40021000
 8003f28:	48000800 	.word	0x48000800
 8003f2c:	200009c4 	.word	0x200009c4
 8003f30:	4002041c 	.word	0x4002041c
 8003f34:	40004400 	.word	0x40004400
 8003f38:	20000a24 	.word	0x20000a24
 8003f3c:	4002001c 	.word	0x4002001c
 8003f40:	20000a84 	.word	0x20000a84
 8003f44:	40020008 	.word	0x40020008

08003f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <NMI_Handler+0x4>

08003f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <HardFault_Handler+0x4>

08003f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <MemManage_Handler+0x4>

08003f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <BusFault_Handler+0x4>

08003f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <UsageFault_Handler+0x4>

08003f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f9e:	f000 f9dd 	bl	800435c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003fac:	4802      	ldr	r0, [pc, #8]	@ (8003fb8 <DMA1_Channel1_IRQHandler+0x10>)
 8003fae:	f000 fd08 	bl	80049c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000a84 	.word	0x20000a84

08003fbc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003fc0:	4802      	ldr	r0, [pc, #8]	@ (8003fcc <DMA1_Channel2_IRQHandler+0x10>)
 8003fc2:	f000 fcfe 	bl	80049c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000a24 	.word	0x20000a24

08003fd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003fd4:	4802      	ldr	r0, [pc, #8]	@ (8003fe0 <DMA1_Channel3_IRQHandler+0x10>)
 8003fd6:	f000 fcf4 	bl	80049c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200007cc 	.word	0x200007cc

08003fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003fe8:	2020      	movs	r0, #32
 8003fea:	f000 ffeb 	bl	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ff8:	4802      	ldr	r0, [pc, #8]	@ (8004004 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003ffa:	f003 f821 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000238 	.word	0x20000238

08004008 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800400c:	4803      	ldr	r0, [pc, #12]	@ (800401c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800400e:	f003 f817 	bl	8007040 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004012:	4803      	ldr	r0, [pc, #12]	@ (8004020 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004014:	f003 f814 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000238 	.word	0x20000238
 8004020:	20000700 	.word	0x20000700

08004024 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004028:	4802      	ldr	r0, [pc, #8]	@ (8004034 <TIM4_IRQHandler+0x10>)
 800402a:	f003 f809 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000049c 	.word	0x2000049c

08004038 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <USART2_IRQHandler+0x10>)
 800403e:	f004 ffc3 	bl	8008fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200008f8 	.word	0x200008f8

0800404c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004050:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004054:	f000 ffb6 	bl	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004058:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800405c:	f000 ffb2 	bl	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}

08004064 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004068:	4802      	ldr	r0, [pc, #8]	@ (8004074 <TIM5_IRQHandler+0x10>)
 800406a:	f002 ffe9 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000568 	.word	0x20000568

08004078 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800407c:	4802      	ldr	r0, [pc, #8]	@ (8004088 <TIM7_DAC_IRQHandler+0x10>)
 800407e:	f002 ffdf 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000634 	.word	0x20000634

0800408c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <DMA2_Channel2_IRQHandler+0x10>)
 8004092:	f000 fc96 	bl	80049c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200009c4 	.word	0x200009c4

080040a0 <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b09b      	sub	sp, #108	@ 0x6c
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 80040ac:	4b4c      	ldr	r3, [pc, #304]	@ (80041e0 <updateLED+0x140>)
 80040ae:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80040b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 80040b8:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <updateLED+0x144>)
 80040ba:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80040be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 80040c4:	2300      	movs	r3, #0
 80040c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040c8:	e076      	b.n	80041b8 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 80040ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d032      	beq.n	800413c <updateLED+0x9c>
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	dc46      	bgt.n	8004168 <updateLED+0xc8>
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d002      	beq.n	80040e4 <updateLED+0x44>
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d016      	beq.n	8004110 <updateLED+0x70>
 80040e2:	e041      	b.n	8004168 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 80040e4:	f107 0414 	add.w	r4, r7, #20
 80040e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 80040f2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80040f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004100:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004104:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800410a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800410e:	e041      	b.n	8004194 <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 8004110:	f107 0414 	add.w	r4, r7, #20
 8004114:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800411a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800411e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004122:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 800412c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004130:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800413a:	e02b      	b.n	8004194 <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 800413c:	f107 0414 	add.w	r4, r7, #20
 8004140:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800414a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800414e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8004158:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800415c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8004166:	e015      	b.n	8004194 <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8004168:	f107 0414 	add.w	r4, r7, #20
 800416c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8004176:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800417a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800417e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004184:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004188:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800418c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800418e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8004192:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 8004194:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	333c      	adds	r3, #60	@ 0x3c
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <updateLED+0x148>)
 80041a4:	4413      	add	r3, r2
 80041a6:	f107 0114 	add.w	r1, r7, #20
 80041aa:	2230      	movs	r2, #48	@ 0x30
 80041ac:	4618      	mov	r0, r3
 80041ae:	f006 fc7b 	bl	800aaa8 <memcpy>
	for (int i = 0; i < 3; i++){
 80041b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b4:	3301      	adds	r3, #1
 80041b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	dd85      	ble.n	80040ca <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 80041be:	2278      	movs	r2, #120	@ 0x78
 80041c0:	2100      	movs	r1, #0
 80041c2:	4809      	ldr	r0, [pc, #36]	@ (80041e8 <updateLED+0x148>)
 80041c4:	f006 fc44 	bl	800aa50 <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 80041c8:	2384      	movs	r3, #132	@ 0x84
 80041ca:	4a07      	ldr	r2, [pc, #28]	@ (80041e8 <updateLED+0x148>)
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68b8      	ldr	r0, [r7, #8]
 80041d0:	f002 fa3c 	bl	800664c <HAL_TIM_PWM_Start_DMA>
 80041d4:	4603      	mov	r3, r0

}
 80041d6:	4618      	mov	r0, r3
 80041d8:	376c      	adds	r7, #108	@ 0x6c
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd90      	pop	{r4, r7, pc}
 80041de:	bf00      	nop
 80041e0:	0800aadc 	.word	0x0800aadc
 80041e4:	0800aaec 	.word	0x0800aaec
 80041e8:	20001298 	.word	0x20001298

080041ec <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 80041f2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80041f6:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 80041f8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80041fc:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 80041fe:	f000 f8bf 	bl	8004380 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 800420a:	2100      	movs	r1, #0
 800420c:	68b8      	ldr	r0, [r7, #8]
 800420e:	f7ff fa09 	bl	8003624 <serviceMotor>

	while(HAL_GetTick() < Timeout){
 8004212:	e00a      	b.n	800422a <HomeZ+0x3e>
		if(getZStop() == 1){
 8004214:	f7ff fa2e 	bl	8003674 <getZStop>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HomeZ+0x3e>
			//HAL_Delay(50);
			serviceMotor(0, 0);
 800421e:	2100      	movs	r1, #0
 8004220:	2000      	movs	r0, #0
 8004222:	f7ff f9ff 	bl	8003624 <serviceMotor>
			return 0;
 8004226:	2300      	movs	r3, #0
 8004228:	e006      	b.n	8004238 <HomeZ+0x4c>
	while(HAL_GetTick() < Timeout){
 800422a:	f000 f8a9 	bl	8004380 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4293      	cmp	r3, r2
 8004234:	d8ee      	bhi.n	8004214 <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 8004236:	2301      	movs	r3, #1

}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <SystemInit+0x20>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <SystemInit+0x20>)
 800424c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004264:	480d      	ldr	r0, [pc, #52]	@ (800429c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004266:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004268:	f7ff ffea 	bl	8004240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800426c:	480c      	ldr	r0, [pc, #48]	@ (80042a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800426e:	490d      	ldr	r1, [pc, #52]	@ (80042a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <LoopForever+0xe>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004274:	e002      	b.n	800427c <LoopCopyDataInit>

08004276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427a:	3304      	adds	r3, #4

0800427c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800427c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800427e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004280:	d3f9      	bcc.n	8004276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004282:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004284:	4c0a      	ldr	r4, [pc, #40]	@ (80042b0 <LoopForever+0x16>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004288:	e001      	b.n	800428e <LoopFillZerobss>

0800428a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800428c:	3204      	adds	r2, #4

0800428e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800428e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004290:	d3fb      	bcc.n	800428a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004292:	f006 fbe5 	bl	800aa60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004296:	f7fd fa67 	bl	8001768 <main>

0800429a <LoopForever>:

LoopForever:
    b LoopForever
 800429a:	e7fe      	b.n	800429a <LoopForever>
  ldr   r0, =_estack
 800429c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042a4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80042a8:	0800ab4c 	.word	0x0800ab4c
  ldr r2, =_sbss
 80042ac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80042b0:	200013a4 	.word	0x200013a4

080042b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042b4:	e7fe      	b.n	80042b4 <ADC1_2_IRQHandler>

080042b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c0:	2003      	movs	r0, #3
 80042c2:	f000 f95b 	bl	800457c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042c6:	2000      	movs	r0, #0
 80042c8:	f000 f80e 	bl	80042e8 <HAL_InitTick>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	71fb      	strb	r3, [r7, #7]
 80042d6:	e001      	b.n	80042dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042d8:	f7ff fb46 	bl	8003968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042dc:	79fb      	ldrb	r3, [r7, #7]

}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042f4:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <HAL_InitTick+0x68>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d022      	beq.n	8004342 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042fc:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <HAL_InitTick+0x6c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_InitTick+0x68>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004308:	fbb1 f3f3 	udiv	r3, r1, r3
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f966 	bl	80045e2 <HAL_SYSTICK_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10f      	bne.n	800433c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b0f      	cmp	r3, #15
 8004320:	d809      	bhi.n	8004336 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004322:	2200      	movs	r2, #0
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	f04f 30ff 	mov.w	r0, #4294967295
 800432a:	f000 f932 	bl	8004592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800432e:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <HAL_InitTick+0x70>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e007      	b.n	8004346 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e004      	b.n	8004346 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e001      	b.n	8004346 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000214 	.word	0x20000214
 8004354:	2000020c 	.word	0x2000020c
 8004358:	20000210 	.word	0x20000210

0800435c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <HAL_IncTick+0x1c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_IncTick+0x20>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4413      	add	r3, r2
 800436a:	4a03      	ldr	r2, [pc, #12]	@ (8004378 <HAL_IncTick+0x1c>)
 800436c:	6013      	str	r3, [r2, #0]
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	200013a0 	.word	0x200013a0
 800437c:	20000214 	.word	0x20000214

08004380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return uwTick;
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <HAL_GetTick+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200013a0 	.word	0x200013a0

08004398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7ff ffee 	bl	8004380 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d004      	beq.n	80043bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_Delay+0x40>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043bc:	bf00      	nop
 80043be:	f7ff ffdf 	bl	8004380 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d8f7      	bhi.n	80043be <HAL_Delay+0x26>
  {
  }
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000214 	.word	0x20000214

080043dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <__NVIC_SetPriorityGrouping+0x44>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043f8:	4013      	ands	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800440c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800440e:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <__NVIC_SetPriorityGrouping+0x44>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	60d3      	str	r3, [r2, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004428:	4b04      	ldr	r3, [pc, #16]	@ (800443c <__NVIC_GetPriorityGrouping+0x18>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 0307 	and.w	r3, r3, #7
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	2b00      	cmp	r3, #0
 8004450:	db0b      	blt.n	800446a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f003 021f 	and.w	r2, r3, #31
 8004458:	4907      	ldr	r1, [pc, #28]	@ (8004478 <__NVIC_EnableIRQ+0x38>)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2001      	movs	r0, #1
 8004462:	fa00 f202 	lsl.w	r2, r0, r2
 8004466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000e100 	.word	0xe000e100

0800447c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448c:	2b00      	cmp	r3, #0
 800448e:	db0a      	blt.n	80044a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	490c      	ldr	r1, [pc, #48]	@ (80044c8 <__NVIC_SetPriority+0x4c>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	440b      	add	r3, r1
 80044a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a4:	e00a      	b.n	80044bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4908      	ldr	r1, [pc, #32]	@ (80044cc <__NVIC_SetPriority+0x50>)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3b04      	subs	r3, #4
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	440b      	add	r3, r1
 80044ba:	761a      	strb	r2, [r3, #24]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000e100 	.word	0xe000e100
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	@ 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f1c3 0307 	rsb	r3, r3, #7
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	bf28      	it	cs
 80044ee:	2304      	movcs	r3, #4
 80044f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d902      	bls.n	8004500 <NVIC_EncodePriority+0x30>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3b03      	subs	r3, #3
 80044fe:	e000      	b.n	8004502 <NVIC_EncodePriority+0x32>
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	401a      	ands	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	43d9      	mvns	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	4313      	orrs	r3, r2
         );
}
 800452a:	4618      	mov	r0, r3
 800452c:	3724      	adds	r7, #36	@ 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004548:	d301      	bcc.n	800454e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800454a:	2301      	movs	r3, #1
 800454c:	e00f      	b.n	800456e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454e:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <SysTick_Config+0x40>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004556:	210f      	movs	r1, #15
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f7ff ff8e 	bl	800447c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <SysTick_Config+0x40>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004566:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <SysTick_Config+0x40>)
 8004568:	2207      	movs	r2, #7
 800456a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000e010 	.word	0xe000e010

0800457c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff29 	bl	80043dc <__NVIC_SetPriorityGrouping>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045a0:	f7ff ff40 	bl	8004424 <__NVIC_GetPriorityGrouping>
 80045a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff90 	bl	80044d0 <NVIC_EncodePriority>
 80045b0:	4602      	mov	r2, r0
 80045b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff5f 	bl	800447c <__NVIC_SetPriority>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff33 	bl	8004440 <__NVIC_EnableIRQ>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ffa4 	bl	8004538 <SysTick_Config>
 80045f0:	4603      	mov	r3, r0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e08d      	b.n	800472a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <HAL_DMA_Init+0x138>)
 8004616:	429a      	cmp	r2, r3
 8004618:	d80f      	bhi.n	800463a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <HAL_DMA_Init+0x13c>)
 8004622:	4413      	add	r3, r2
 8004624:	4a45      	ldr	r2, [pc, #276]	@ (800473c <HAL_DMA_Init+0x140>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	009a      	lsls	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_DMA_Init+0x144>)
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40
 8004638:	e00e      	b.n	8004658 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	4b40      	ldr	r3, [pc, #256]	@ (8004744 <HAL_DMA_Init+0x148>)
 8004642:	4413      	add	r3, r2
 8004644:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_DMA_Init+0x140>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	009a      	lsls	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a3c      	ldr	r2, [pc, #240]	@ (8004748 <HAL_DMA_Init+0x14c>)
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800467c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa76 	bl	8004b9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046b8:	d102      	bne.n	80046c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <HAL_DMA_Init+0x104>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d80c      	bhi.n	8004700 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa96 	bl	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	e008      	b.n	8004712 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40020407 	.word	0x40020407
 8004738:	bffdfff8 	.word	0xbffdfff8
 800473c:	cccccccd 	.word	0xcccccccd
 8004740:	40020000 	.word	0x40020000
 8004744:	bffdfbf8 	.word	0xbffdfbf8
 8004748:	40020400 	.word	0x40020400

0800474c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_DMA_Start_IT+0x20>
 8004768:	2302      	movs	r3, #2
 800476a:	e066      	b.n	800483a <HAL_DMA_Start_IT+0xee>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d155      	bne.n	800482c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9bb 	bl	8004b20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 020e 	orr.w	r2, r2, #14
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e00f      	b.n	80047e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 020a 	orr.w	r2, r2, #10
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004800:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e005      	b.n	8004838 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d005      	beq.n	8004866 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e037      	b.n	80048d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020e 	bic.w	r2, r2, #14
 8004874:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004884:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	2101      	movs	r1, #1
 80048a4:	fa01 f202 	lsl.w	r2, r1, r2
 80048a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00c      	beq.n	80048d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d00d      	beq.n	8004928 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2204      	movs	r2, #4
 8004910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e047      	b.n	80049b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 020e 	bic.w	r2, r2, #14
 8004936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	2101      	movs	r1, #1
 8004966:	fa01 f202 	lsl.w	r2, r1, r2
 800496a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004974:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800498c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004996:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
    }
  }
  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2204      	movs	r2, #4
 80049e4:	409a      	lsls	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d026      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x7a>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d021      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0204 	bic.w	r2, r2, #4
 8004a14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1a:	f003 021f 	and.w	r2, r3, #31
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	2104      	movs	r1, #4
 8004a24:	fa01 f202 	lsl.w	r2, r1, r2
 8004a28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d071      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a3a:	e06c      	b.n	8004b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2202      	movs	r2, #2
 8004a46:	409a      	lsls	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02e      	beq.n	8004aae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d029      	beq.n	8004aae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 020a 	bic.w	r2, r2, #10
 8004a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d038      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004aac:	e033      	b.n	8004b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02a      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d025      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 020e 	bic.w	r2, r2, #14
 8004ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f202 	lsl.w	r2, r1, r2
 8004aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
}
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f003 021f 	and.w	r2, r3, #31
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	2101      	movs	r1, #1
 8004b58:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b7e:	e007      	b.n	8004b90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b16      	ldr	r3, [pc, #88]	@ (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d802      	bhi.n	8004bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004bb0:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e001      	b.n	8004bba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004bb6:	4b15      	ldr	r3, [pc, #84]	@ (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bb8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3b08      	subs	r3, #8
 8004bc6:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	009a      	lsls	r2, r3, #2
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004be6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2201      	movs	r2, #1
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40020407 	.word	0x40020407
 8004c08:	40020800 	.word	0x40020800
 8004c0c:	40020820 	.word	0x40020820
 8004c10:	cccccccd 	.word	0xcccccccd
 8004c14:	40020880 	.word	0x40020880

08004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2201      	movs	r2, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	1000823f 	.word	0x1000823f
 8004c5c:	40020940 	.word	0x40020940

08004c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c6e:	e15a      	b.n	8004f26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2101      	movs	r1, #1
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 814c 	beq.w	8004f20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d005      	beq.n	8004ca0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d130      	bne.n	8004d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0201 	and.w	r2, r3, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d017      	beq.n	8004d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	2203      	movs	r2, #3
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d123      	bne.n	8004d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	08da      	lsrs	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3208      	adds	r2, #8
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	220f      	movs	r2, #15
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	6939      	ldr	r1, [r7, #16]
 8004d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0203 	and.w	r2, r3, #3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80a6 	beq.w	8004f20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f44 <HAL_GPIO_Init+0x2e4>)
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f44 <HAL_GPIO_Init+0x2e4>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6613      	str	r3, [r2, #96]	@ 0x60
 8004de0:	4b58      	ldr	r3, [pc, #352]	@ (8004f44 <HAL_GPIO_Init+0x2e4>)
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dec:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	089b      	lsrs	r3, r3, #2
 8004df2:	3302      	adds	r3, #2
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	220f      	movs	r2, #15
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e16:	d01f      	beq.n	8004e58 <HAL_GPIO_Init+0x1f8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d019      	beq.n	8004e54 <HAL_GPIO_Init+0x1f4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a4b      	ldr	r2, [pc, #300]	@ (8004f50 <HAL_GPIO_Init+0x2f0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_GPIO_Init+0x1f0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f54 <HAL_GPIO_Init+0x2f4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00d      	beq.n	8004e4c <HAL_GPIO_Init+0x1ec>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a49      	ldr	r2, [pc, #292]	@ (8004f58 <HAL_GPIO_Init+0x2f8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <HAL_GPIO_Init+0x1e8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a48      	ldr	r2, [pc, #288]	@ (8004f5c <HAL_GPIO_Init+0x2fc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_GPIO_Init+0x1e4>
 8004e40:	2305      	movs	r3, #5
 8004e42:	e00a      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e44:	2306      	movs	r3, #6
 8004e46:	e008      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e006      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e004      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e002      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	f002 0203 	and.w	r2, r2, #3
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	4093      	lsls	r3, r2
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e6a:	4937      	ldr	r1, [pc, #220]	@ (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	3302      	adds	r3, #2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e78:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	43db      	mvns	r3, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e9c:	4a30      	ldr	r2, [pc, #192]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ec6:	4a26      	ldr	r2, [pc, #152]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ecc:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f1a:	4a11      	ldr	r2, [pc, #68]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	3301      	adds	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f47f ae9d 	bne.w	8004c70 <HAL_GPIO_Init+0x10>
  }
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	48000400 	.word	0x48000400
 8004f50:	48000800 	.word	0x48000800
 8004f54:	48000c00 	.word	0x48000c00
 8004f58:	48001000 	.word	0x48001000
 8004f5c:	48001400 	.word	0x48001400
 8004f60:	40010400 	.word	0x40010400

08004f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	887b      	ldrh	r3, [r7, #2]
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e001      	b.n	8004f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb0:	e002      	b.n	8004fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fce:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fda:	4a05      	ldr	r2, [pc, #20]	@ (8004ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fb52 	bl	800368c <HAL_GPIO_EXTI_Callback>
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d141      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005002:	4b4b      	ldr	r3, [pc, #300]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d131      	bne.n	8005074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005010:	4b47      	ldr	r3, [pc, #284]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005016:	4a46      	ldr	r2, [pc, #280]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005020:	4b43      	ldr	r3, [pc, #268]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005028:	4a41      	ldr	r2, [pc, #260]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800502e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005030:	4b40      	ldr	r3, [pc, #256]	@ (8005134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2232      	movs	r2, #50	@ 0x32
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	4a3f      	ldr	r2, [pc, #252]	@ (8005138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	0c9b      	lsrs	r3, r3, #18
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005046:	e002      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b01      	subs	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800504e:	4b38      	ldr	r3, [pc, #224]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505a:	d102      	bne.n	8005062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005062:	4b33      	ldr	r3, [pc, #204]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506e:	d158      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e057      	b.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005074:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005084:	e04d      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d141      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509a:	d131      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a2:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ac:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2232      	movs	r2, #50	@ 0x32
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d2:	e002      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050da:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d102      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fa:	d112      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e011      	b.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005110:	e007      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800511a:	4a05      	ldr	r2, [pc, #20]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40007000 	.word	0x40007000
 8005134:	2000020c 	.word	0x2000020c
 8005138:	431bde83 	.word	0x431bde83

0800513c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800514a:	6093      	str	r3, [r2, #8]
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40007000 	.word	0x40007000

0800515c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e2fe      	b.n	800576c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d075      	beq.n	8005266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517a:	4b97      	ldr	r3, [pc, #604]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005184:	4b94      	ldr	r3, [pc, #592]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d102      	bne.n	800519a <HAL_RCC_OscConfig+0x3e>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_OscConfig+0x44>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d10b      	bne.n	80051b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a0:	4b8d      	ldr	r3, [pc, #564]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05b      	beq.n	8005264 <HAL_RCC_OscConfig+0x108>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d157      	bne.n	8005264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2d9      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d106      	bne.n	80051d0 <HAL_RCC_OscConfig+0x74>
 80051c2:	4b85      	ldr	r3, [pc, #532]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a84      	ldr	r2, [pc, #528]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e01d      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x98>
 80051da:	4b7f      	ldr	r3, [pc, #508]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7e      	ldr	r2, [pc, #504]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4b7c      	ldr	r3, [pc, #496]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a7b      	ldr	r2, [pc, #492]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e00b      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051f4:	4b78      	ldr	r3, [pc, #480]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a77      	ldr	r2, [pc, #476]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4b75      	ldr	r3, [pc, #468]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a74      	ldr	r2, [pc, #464]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800520a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7ff f8b4 	bl	8004380 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7ff f8b0 	bl	8004380 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	@ 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e29e      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800522e:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0xc0>
 800523a:	e014      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7ff f8a0 	bl	8004380 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7ff f89c 	bl	8004380 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e28a      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005256:	4b60      	ldr	r3, [pc, #384]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0xe8>
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d075      	beq.n	800535e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005272:	4b59      	ldr	r3, [pc, #356]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800527c:	4b56      	ldr	r3, [pc, #344]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d102      	bne.n	8005292 <HAL_RCC_OscConfig+0x136>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d002      	beq.n	8005298 <HAL_RCC_OscConfig+0x13c>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d11f      	bne.n	80052d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005298:	4b4f      	ldr	r3, [pc, #316]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_OscConfig+0x154>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e25d      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b0:	4b49      	ldr	r3, [pc, #292]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	4946      	ldr	r1, [pc, #280]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c4:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <HAL_RCC_OscConfig+0x280>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f80d 	bl	80042e8 <HAL_InitTick>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d043      	beq.n	800535c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e249      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d023      	beq.n	8005328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3c      	ldr	r2, [pc, #240]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7ff f848 	bl	8004380 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f4:	f7ff f844 	bl	8004380 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e232      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005306:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	492d      	ldr	r1, [pc, #180]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
 8005326:	e01a      	b.n	800535e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800532e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7ff f824 	bl	8004380 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533c:	f7ff f820 	bl	8004380 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e20e      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534e:	4b22      	ldr	r3, [pc, #136]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x1e0>
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d041      	beq.n	80053ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01c      	beq.n	80053ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005378:	4a17      	ldr	r2, [pc, #92]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fe fffd 	bl	8004380 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fe fff9 	bl	8004380 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1e7      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800539c:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <HAL_RCC_OscConfig+0x22e>
 80053aa:	e020      	b.n	80053ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b2:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fe ffe0 	bl	8004380 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c2:	e00d      	b.n	80053e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fe ffdc 	bl	8004380 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d906      	bls.n	80053e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1ca      	b.n	800576c <HAL_RCC_OscConfig+0x610>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ea      	bne.n	80053c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80a6 	beq.w	8005548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005400:	4b84      	ldr	r3, [pc, #528]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0x2b4>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x2b6>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005416:	4b7f      	ldr	r3, [pc, #508]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	4a7e      	ldr	r2, [pc, #504]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005420:	6593      	str	r3, [r2, #88]	@ 0x58
 8005422:	4b7c      	ldr	r3, [pc, #496]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005432:	4b79      	ldr	r3, [pc, #484]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800543e:	4b76      	ldr	r3, [pc, #472]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a75      	ldr	r2, [pc, #468]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544a:	f7fe ff99 	bl	8004380 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fe ff95 	bl	8004380 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e183      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005464:	4b6c      	ldr	r3, [pc, #432]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d108      	bne.n	800548a <HAL_RCC_OscConfig+0x32e>
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	4a65      	ldr	r2, [pc, #404]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005488:	e024      	b.n	80054d4 <HAL_RCC_OscConfig+0x378>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d110      	bne.n	80054b4 <HAL_RCC_OscConfig+0x358>
 8005492:	4b60      	ldr	r3, [pc, #384]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	4a5e      	ldr	r2, [pc, #376]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b2:	e00f      	b.n	80054d4 <HAL_RCC_OscConfig+0x378>
 80054b4:	4b57      	ldr	r3, [pc, #348]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ba:	4a56      	ldr	r2, [pc, #344]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054c4:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	4a52      	ldr	r2, [pc, #328]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d016      	beq.n	800550a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fe ff50 	bl	8004380 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fe ff4c 	bl	8004380 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e138      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	4b46      	ldr	r3, [pc, #280]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ed      	beq.n	80054e4 <HAL_RCC_OscConfig+0x388>
 8005508:	e015      	b.n	8005536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550a:	f7fe ff39 	bl	8004380 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005510:	e00a      	b.n	8005528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fe ff35 	bl	8004380 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e121      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005528:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ed      	bne.n	8005512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005536:	7ffb      	ldrb	r3, [r7, #31]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553c:	4b35      	ldr	r3, [pc, #212]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	4a34      	ldr	r2, [pc, #208]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005546:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d03c      	beq.n	80055ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800555c:	4b2d      	ldr	r3, [pc, #180]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800555e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005562:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fe ff08 	bl	8004380 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005574:	f7fe ff04 	bl	8004380 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0f2      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005586:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ef      	beq.n	8005574 <HAL_RCC_OscConfig+0x418>
 8005594:	e01b      	b.n	80055ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005596:	4b1f      	ldr	r3, [pc, #124]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a6:	f7fe feeb 	bl	8004380 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ae:	f7fe fee7 	bl	8004380 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0d5      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c0:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ef      	bne.n	80055ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80c9 	beq.w	800576a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	f000 8083 	beq.w	80056ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d15e      	bne.n	80056ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fe fec1 	bl	8004380 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005600:	e00c      	b.n	800561c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fe febd 	bl	8004380 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d905      	bls.n	800561c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0ab      	b.n	800576c <HAL_RCC_OscConfig+0x610>
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800561c:	4b55      	ldr	r3, [pc, #340]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ec      	bne.n	8005602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005628:	4b52      	ldr	r3, [pc, #328]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	4b52      	ldr	r3, [pc, #328]	@ (8005778 <HAL_RCC_OscConfig+0x61c>)
 800562e:	4013      	ands	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6a11      	ldr	r1, [r2, #32]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005642:	0212      	lsls	r2, r2, #8
 8005644:	4311      	orrs	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800564a:	0852      	lsrs	r2, r2, #1
 800564c:	3a01      	subs	r2, #1
 800564e:	0552      	lsls	r2, r2, #21
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005656:	0852      	lsrs	r2, r2, #1
 8005658:	3a01      	subs	r2, #1
 800565a:	0652      	lsls	r2, r2, #25
 800565c:	4311      	orrs	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005662:	06d2      	lsls	r2, r2, #27
 8005664:	430a      	orrs	r2, r1
 8005666:	4943      	ldr	r1, [pc, #268]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 8005668:	4313      	orrs	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	4b41      	ldr	r3, [pc, #260]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a40      	ldr	r2, [pc, #256]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005676:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005678:	4b3e      	ldr	r3, [pc, #248]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a3d      	ldr	r2, [pc, #244]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800567e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fe fe7c 	bl	8004380 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fe fe78 	bl	8004380 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e066      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x530>
 80056aa:	e05e      	b.n	800576a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ac:	4b31      	ldr	r3, [pc, #196]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a30      	ldr	r2, [pc, #192]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fe fe62 	bl	8004380 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fe fe5e 	bl	8004380 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e04c      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d2:	4b28      	ldr	r3, [pc, #160]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056de:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4924      	ldr	r1, [pc, #144]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056e4:	4b25      	ldr	r3, [pc, #148]	@ (800577c <HAL_RCC_OscConfig+0x620>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	60cb      	str	r3, [r1, #12]
 80056ea:	e03e      	b.n	800576a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e039      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0203 	and.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	429a      	cmp	r2, r3
 800570a:	d12c      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d123      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d11b      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d113      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d109      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	019f800c 	.word	0x019f800c
 800577c:	feeefffc 	.word	0xfeeefffc

08005780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e11e      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005798:	4b91      	ldr	r3, [pc, #580]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d910      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b8e      	ldr	r3, [pc, #568]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 020f 	bic.w	r2, r3, #15
 80057ae:	498c      	ldr	r1, [pc, #560]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b8a      	ldr	r3, [pc, #552]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e106      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d073      	beq.n	80058bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d129      	bne.n	8005830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057dc:	4b81      	ldr	r3, [pc, #516]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0f4      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057ec:	f000 f99e 	bl	8005b2c <RCC_GetSysClockFreqFromPLLSource>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <HAL_RCC_ClockConfig+0x268>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d93f      	bls.n	800587a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057fa:	4b7a      	ldr	r3, [pc, #488]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d033      	beq.n	800587a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12f      	bne.n	800587a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581a:	4b72      	ldr	r3, [pc, #456]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005822:	4a70      	ldr	r2, [pc, #448]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e024      	b.n	800587a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d107      	bne.n	8005848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005838:	4b6a      	ldr	r3, [pc, #424]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0c6      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005848:	4b66      	ldr	r3, [pc, #408]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0be      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005858:	f000 f8ce 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 800585c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a61      	ldr	r2, [pc, #388]	@ (80059e8 <HAL_RCC_ClockConfig+0x268>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d909      	bls.n	800587a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005866:	4b5f      	ldr	r3, [pc, #380]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586e:	4a5d      	ldr	r2, [pc, #372]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800587a:	4b5a      	ldr	r3, [pc, #360]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4957      	ldr	r1, [pc, #348]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005888:	4313      	orrs	r3, r2
 800588a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fe fd78 	bl	8004380 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	e00a      	b.n	80058aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005894:	f7fe fd74 	bl	8004380 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e095      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	4b4e      	ldr	r3, [pc, #312]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 020c 	and.w	r2, r3, #12
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1eb      	bne.n	8005894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d023      	beq.n	8005910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a42      	ldr	r2, [pc, #264]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058ec:	4b3d      	ldr	r3, [pc, #244]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058f4:	4a3b      	ldr	r2, [pc, #236]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4936      	ldr	r1, [pc, #216]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
 800590e:	e008      	b.n	8005922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b80      	cmp	r3, #128	@ 0x80
 8005914:	d105      	bne.n	8005922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005916:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800591c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005922:	4b2f      	ldr	r3, [pc, #188]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d21d      	bcs.n	800596c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f023 020f 	bic.w	r2, r3, #15
 8005938:	4929      	ldr	r1, [pc, #164]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005940:	f7fe fd1e 	bl	8004380 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	e00a      	b.n	800595e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005948:	f7fe fd1a 	bl	8004380 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e03b      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d1ed      	bne.n	8005948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4917      	ldr	r1, [pc, #92]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005996:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	490f      	ldr	r1, [pc, #60]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059aa:	f000 f825 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	490c      	ldr	r1, [pc, #48]	@ (80059ec <HAL_RCC_ClockConfig+0x26c>)
 80059bc:	5ccb      	ldrb	r3, [r1, r3]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a0a      	ldr	r2, [pc, #40]	@ (80059f0 <HAL_RCC_ClockConfig+0x270>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059ca:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <HAL_RCC_ClockConfig+0x274>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fc8a 	bl	80042e8 <HAL_InitTick>
 80059d4:	4603      	mov	r3, r0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40022000 	.word	0x40022000
 80059e4:	40021000 	.word	0x40021000
 80059e8:	04c4b400 	.word	0x04c4b400
 80059ec:	0800aafc 	.word	0x0800aafc
 80059f0:	2000020c 	.word	0x2000020c
 80059f4:	20000210 	.word	0x20000210

080059f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059fe:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e047      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a10:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a1c:	4b26      	ldr	r3, [pc, #152]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e03e      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a22:	4b23      	ldr	r3, [pc, #140]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d136      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a2e:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a38:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	3301      	adds	r3, #1
 8005a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a56:	68d2      	ldr	r2, [r2, #12]
 8005a58:	0a12      	lsrs	r2, r2, #8
 8005a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]
      break;
 8005a64:	e00c      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a66:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	4a10      	ldr	r2, [pc, #64]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	0a12      	lsrs	r2, r2, #8
 8005a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
      break;
 8005a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0e5b      	lsrs	r3, r3, #25
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e001      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005aa0:	693b      	ldr	r3, [r7, #16]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	00f42400 	.word	0x00f42400
 8005ab8:	016e3600 	.word	0x016e3600

08005abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	@ (8005ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000020c 	.word	0x2000020c

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad8:	f7ff fff0 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4904      	ldr	r1, [pc, #16]	@ (8005afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	0800ab0c 	.word	0x0800ab0c

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b04:	f7ff ffda 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	@ (8005b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	0800ab0c 	.word	0x0800ab0c

08005b2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b32:	4b1e      	ldr	r3, [pc, #120]	@ (8005bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d10c      	bne.n	8005b6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b50:	4a17      	ldr	r2, [pc, #92]	@ (8005bb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	4a14      	ldr	r2, [pc, #80]	@ (8005bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b5a:	68d2      	ldr	r2, [r2, #12]
 8005b5c:	0a12      	lsrs	r2, r2, #8
 8005b5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	617b      	str	r3, [r7, #20]
    break;
 8005b68:	e00c      	b.n	8005b84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b6a:	4a12      	ldr	r2, [pc, #72]	@ (8005bb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	4a0e      	ldr	r2, [pc, #56]	@ (8005bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b74:	68d2      	ldr	r2, [r2, #12]
 8005b76:	0a12      	lsrs	r2, r2, #8
 8005b78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
    break;
 8005b82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b84:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	0e5b      	lsrs	r3, r3, #25
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b9e:	687b      	ldr	r3, [r7, #4]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	016e3600 	.word	0x016e3600
 8005bb4:	00f42400 	.word	0x00f42400

08005bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8098 	beq.w	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bda:	4b43      	ldr	r3, [pc, #268]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10d      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be6:	4b40      	ldr	r3, [pc, #256]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	4a3f      	ldr	r2, [pc, #252]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c02:	4b3a      	ldr	r3, [pc, #232]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a39      	ldr	r2, [pc, #228]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c0e:	f7fe fbb7 	bl	8004380 <HAL_GetTick>
 8005c12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c14:	e009      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fe fbb3 	bl	8004380 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d902      	bls.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	74fb      	strb	r3, [r7, #19]
        break;
 8005c28:	e005      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c2a:	4b30      	ldr	r3, [pc, #192]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d159      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01e      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d019      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c64:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c84:	4a18      	ldr	r2, [pc, #96]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fe fb73 	bl	8004380 <HAL_GetTick>
 8005c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9c:	e00b      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fe fb6f 	bl	8004380 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d902      	bls.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ec      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cca:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd8:	4903      	ldr	r1, [pc, #12]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	74bb      	strb	r3, [r7, #18]
 8005ce6:	e005      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf4:	7c7b      	ldrb	r3, [r7, #17]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	4aa6      	ldr	r2, [pc, #664]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d12:	4ba1      	ldr	r3, [pc, #644]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f023 0203 	bic.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	499d      	ldr	r1, [pc, #628]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d34:	4b98      	ldr	r3, [pc, #608]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f023 020c 	bic.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	4995      	ldr	r1, [pc, #596]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d56:	4b90      	ldr	r3, [pc, #576]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	498c      	ldr	r1, [pc, #560]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d78:	4b87      	ldr	r3, [pc, #540]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	4984      	ldr	r1, [pc, #528]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	497b      	ldr	r1, [pc, #492]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dbc:	4b76      	ldr	r3, [pc, #472]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	4973      	ldr	r1, [pc, #460]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dde:	4b6e      	ldr	r3, [pc, #440]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	496a      	ldr	r1, [pc, #424]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e00:	4b65      	ldr	r3, [pc, #404]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	4962      	ldr	r1, [pc, #392]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e22:	4b5d      	ldr	r3, [pc, #372]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	4959      	ldr	r1, [pc, #356]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e44:	4b54      	ldr	r3, [pc, #336]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e4a:	f023 0203 	bic.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	4951      	ldr	r1, [pc, #324]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e66:	4b4c      	ldr	r3, [pc, #304]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4948      	ldr	r1, [pc, #288]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d015      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e88:	4b43      	ldr	r3, [pc, #268]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	4940      	ldr	r1, [pc, #256]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a3a      	ldr	r2, [pc, #232]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d015      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ec0:	4b35      	ldr	r3, [pc, #212]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ece:	4932      	ldr	r1, [pc, #200]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ede:	d105      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ef8:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f06:	4924      	ldr	r1, [pc, #144]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f16:	d105      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d015      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f30:	4b19      	ldr	r3, [pc, #100]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	4916      	ldr	r1, [pc, #88]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f4e:	d105      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f50:	4b11      	ldr	r3, [pc, #68]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a10      	ldr	r2, [pc, #64]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d019      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f68:	4b0b      	ldr	r3, [pc, #44]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	4908      	ldr	r1, [pc, #32]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f86:	d109      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f88:	4b03      	ldr	r3, [pc, #12]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a02      	ldr	r2, [pc, #8]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f92:	60d3      	str	r3, [r2, #12]
 8005f94:	e002      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d015      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fa8:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb6:	4926      	ldr	r1, [pc, #152]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fc8:	4b21      	ldr	r3, [pc, #132]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a20      	ldr	r2, [pc, #128]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d015      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fee:	4918      	ldr	r1, [pc, #96]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffe:	d105      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006000:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a12      	ldr	r2, [pc, #72]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006018:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800601e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006026:	490a      	ldr	r1, [pc, #40]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006036:	d105      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4a04      	ldr	r2, [pc, #16]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006042:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006044:	7cbb      	ldrb	r3, [r7, #18]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000

08006054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e054      	b.n	8006110 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d111      	bne.n	8006096 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f002 faac 	bl	80085d8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a23      	ldr	r2, [pc, #140]	@ (8006118 <HAL_TIM_Base_Init+0xc4>)
 800608c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f001 fdf5 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	080039b1 	.word	0x080039b1

0800611c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	d001      	beq.n	8006134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e04c      	b.n	80061ce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a26      	ldr	r2, [pc, #152]	@ (80061dc <HAL_TIM_Base_Start+0xc0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614e:	d01d      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a22      	ldr	r2, [pc, #136]	@ (80061e0 <HAL_TIM_Base_Start+0xc4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a21      	ldr	r2, [pc, #132]	@ (80061e4 <HAL_TIM_Base_Start+0xc8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <HAL_TIM_Base_Start+0xcc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <HAL_TIM_Base_Start+0xd0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <HAL_TIM_Base_Start+0xd4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_Base_Start+0x70>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <HAL_TIM_Base_Start+0xd8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d115      	bne.n	80061b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	4b19      	ldr	r3, [pc, #100]	@ (80061f8 <HAL_TIM_Base_Start+0xdc>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d015      	beq.n	80061ca <HAL_TIM_Base_Start+0xae>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a4:	d011      	beq.n	80061ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e008      	b.n	80061ca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e000      	b.n	80061cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40015000 	.word	0x40015000
 80061f8:	00010007 	.word	0x00010007

080061fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d001      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e054      	b.n	80062be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a26      	ldr	r2, [pc, #152]	@ (80062cc <HAL_TIM_Base_Start_IT+0xd0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623e:	d01d      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a22      	ldr	r2, [pc, #136]	@ (80062d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a21      	ldr	r2, [pc, #132]	@ (80062d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1f      	ldr	r2, [pc, #124]	@ (80062d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1e      	ldr	r2, [pc, #120]	@ (80062dc <HAL_TIM_Base_Start_IT+0xe0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1c      	ldr	r2, [pc, #112]	@ (80062e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x80>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1b      	ldr	r2, [pc, #108]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d115      	bne.n	80062a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	4b19      	ldr	r3, [pc, #100]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xec>)
 8006284:	4013      	ands	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b06      	cmp	r3, #6
 800628c:	d015      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0xbe>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006294:	d011      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a6:	e008      	b.n	80062ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e000      	b.n	80062bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40015000 	.word	0x40015000
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10f      	bne.n	8006334 <HAL_TIM_Base_Stop_IT+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <HAL_TIM_Base_Stop_IT+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e054      	b.n	8006408 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d111      	bne.n	800638e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f002 f930 	bl	80085d8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a23      	ldr	r2, [pc, #140]	@ (8006410 <HAL_TIM_PWM_Init+0xc4>)
 8006384:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f001 fc79 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08006415 	.word	0x08006415

08006414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <HAL_TIM_PWM_Start+0x24>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e03c      	b.n	80064c6 <HAL_TIM_PWM_Start+0x9e>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b04      	cmp	r3, #4
 8006450:	d109      	bne.n	8006466 <HAL_TIM_PWM_Start+0x3e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e02f      	b.n	80064c6 <HAL_TIM_PWM_Start+0x9e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d109      	bne.n	8006480 <HAL_TIM_PWM_Start+0x58>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e022      	b.n	80064c6 <HAL_TIM_PWM_Start+0x9e>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d109      	bne.n	800649a <HAL_TIM_PWM_Start+0x72>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	bf14      	ite	ne
 8006492:	2301      	movne	r3, #1
 8006494:	2300      	moveq	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	e015      	b.n	80064c6 <HAL_TIM_PWM_Start+0x9e>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b10      	cmp	r3, #16
 800649e:	d109      	bne.n	80064b4 <HAL_TIM_PWM_Start+0x8c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e008      	b.n	80064c6 <HAL_TIM_PWM_Start+0x9e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e0a6      	b.n	800661c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0xb6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064dc:	e023      	b.n	8006526 <HAL_TIM_PWM_Start+0xfe>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_PWM_Start+0xc6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ec:	e01b      	b.n	8006526 <HAL_TIM_PWM_Start+0xfe>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_PWM_Start+0xd6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064fc:	e013      	b.n	8006526 <HAL_TIM_PWM_Start+0xfe>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b0c      	cmp	r3, #12
 8006502:	d104      	bne.n	800650e <HAL_TIM_PWM_Start+0xe6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800650c:	e00b      	b.n	8006526 <HAL_TIM_PWM_Start+0xfe>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b10      	cmp	r3, #16
 8006512:	d104      	bne.n	800651e <HAL_TIM_PWM_Start+0xf6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800651c:	e003      	b.n	8006526 <HAL_TIM_PWM_Start+0xfe>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2201      	movs	r2, #1
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f002 f82c 	bl	800858c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a3a      	ldr	r2, [pc, #232]	@ (8006624 <HAL_TIM_PWM_Start+0x1fc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_TIM_PWM_Start+0x148>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a39      	ldr	r2, [pc, #228]	@ (8006628 <HAL_TIM_PWM_Start+0x200>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_TIM_PWM_Start+0x148>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a37      	ldr	r2, [pc, #220]	@ (800662c <HAL_TIM_PWM_Start+0x204>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_TIM_PWM_Start+0x148>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a36      	ldr	r2, [pc, #216]	@ (8006630 <HAL_TIM_PWM_Start+0x208>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_TIM_PWM_Start+0x148>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a34      	ldr	r2, [pc, #208]	@ (8006634 <HAL_TIM_PWM_Start+0x20c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIM_PWM_Start+0x148>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a33      	ldr	r2, [pc, #204]	@ (8006638 <HAL_TIM_PWM_Start+0x210>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_TIM_PWM_Start+0x14c>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <HAL_TIM_PWM_Start+0x14e>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a25      	ldr	r2, [pc, #148]	@ (8006624 <HAL_TIM_PWM_Start+0x1fc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d022      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659c:	d01d      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a26      	ldr	r2, [pc, #152]	@ (800663c <HAL_TIM_PWM_Start+0x214>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a24      	ldr	r2, [pc, #144]	@ (8006640 <HAL_TIM_PWM_Start+0x218>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a23      	ldr	r2, [pc, #140]	@ (8006644 <HAL_TIM_PWM_Start+0x21c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a19      	ldr	r2, [pc, #100]	@ (8006628 <HAL_TIM_PWM_Start+0x200>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a18      	ldr	r2, [pc, #96]	@ (800662c <HAL_TIM_PWM_Start+0x204>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIM_PWM_Start+0x1b2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a18      	ldr	r2, [pc, #96]	@ (8006638 <HAL_TIM_PWM_Start+0x210>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d115      	bne.n	8006606 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	4b19      	ldr	r3, [pc, #100]	@ (8006648 <HAL_TIM_PWM_Start+0x220>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b06      	cmp	r3, #6
 80065ea:	d015      	beq.n	8006618 <HAL_TIM_PWM_Start+0x1f0>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f2:	d011      	beq.n	8006618 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	e008      	b.n	8006618 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e000      	b.n	800661a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40015000 	.word	0x40015000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	00010007 	.word	0x00010007

0800664c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e03c      	b.n	80066f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b04      	cmp	r3, #4
 800667c:	d109      	bne.n	8006692 <HAL_TIM_PWM_Start_DMA+0x46>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	e02f      	b.n	80066f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d109      	bne.n	80066ac <HAL_TIM_PWM_Start_DMA+0x60>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	bf0c      	ite	eq
 80066a4:	2301      	moveq	r3, #1
 80066a6:	2300      	movne	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e022      	b.n	80066f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d109      	bne.n	80066c6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	e015      	b.n	80066f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d109      	bne.n	80066e0 <HAL_TIM_PWM_Start_DMA+0x94>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e008      	b.n	80066f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
 80066f8:	e1b5      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e03c      	b.n	800678e <HAL_TIM_PWM_Start_DMA+0x142>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d109      	bne.n	800672e <HAL_TIM_PWM_Start_DMA+0xe2>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e02f      	b.n	800678e <HAL_TIM_PWM_Start_DMA+0x142>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d109      	bne.n	8006748 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e022      	b.n	800678e <HAL_TIM_PWM_Start_DMA+0x142>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b0c      	cmp	r3, #12
 800674c:	d109      	bne.n	8006762 <HAL_TIM_PWM_Start_DMA+0x116>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	e015      	b.n	800678e <HAL_TIM_PWM_Start_DMA+0x142>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b10      	cmp	r3, #16
 8006766:	d109      	bne.n	800677c <HAL_TIM_PWM_Start_DMA+0x130>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e008      	b.n	800678e <HAL_TIM_PWM_Start_DMA+0x142>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d034      	beq.n	80067fc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_TIM_PWM_Start_DMA+0x152>
 8006798:	887b      	ldrh	r3, [r7, #2]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e161      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_PWM_Start_DMA+0x166>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067b0:	e026      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Start_DMA+0x176>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067c0:	e01e      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Start_DMA+0x186>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d0:	e016      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Start_DMA+0x196>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067e0:	e00e      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f0:	e006      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067fa:	e001      	b.n	8006800 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e132      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b0c      	cmp	r3, #12
 8006804:	f200 80ae 	bhi.w	8006964 <HAL_TIM_PWM_Start_DMA+0x318>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006845 	.word	0x08006845
 8006814:	08006965 	.word	0x08006965
 8006818:	08006965 	.word	0x08006965
 800681c:	08006965 	.word	0x08006965
 8006820:	0800688d 	.word	0x0800688d
 8006824:	08006965 	.word	0x08006965
 8006828:	08006965 	.word	0x08006965
 800682c:	08006965 	.word	0x08006965
 8006830:	080068d5 	.word	0x080068d5
 8006834:	08006965 	.word	0x08006965
 8006838:	08006965 	.word	0x08006965
 800683c:	08006965 	.word	0x08006965
 8006840:	0800691d 	.word	0x0800691d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	4a89      	ldr	r2, [pc, #548]	@ (8006a70 <HAL_TIM_PWM_Start_DMA+0x424>)
 800684a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	4a88      	ldr	r2, [pc, #544]	@ (8006a74 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006858:	4a87      	ldr	r2, [pc, #540]	@ (8006a78 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800685a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3334      	adds	r3, #52	@ 0x34
 8006868:	461a      	mov	r2, r3
 800686a:	887b      	ldrh	r3, [r7, #2]
 800686c:	f7fd ff6e 	bl	800474c <HAL_DMA_Start_IT>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e0f5      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006888:	60da      	str	r2, [r3, #12]
      break;
 800688a:	e06e      	b.n	800696a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	4a77      	ldr	r2, [pc, #476]	@ (8006a70 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006892:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	4a76      	ldr	r2, [pc, #472]	@ (8006a74 <HAL_TIM_PWM_Start_DMA+0x428>)
 800689a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	4a75      	ldr	r2, [pc, #468]	@ (8006a78 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80068a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3338      	adds	r3, #56	@ 0x38
 80068b0:	461a      	mov	r2, r3
 80068b2:	887b      	ldrh	r3, [r7, #2]
 80068b4:	f7fd ff4a 	bl	800474c <HAL_DMA_Start_IT>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e0d1      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068d0:	60da      	str	r2, [r3, #12]
      break;
 80068d2:	e04a      	b.n	800696a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	4a65      	ldr	r2, [pc, #404]	@ (8006a70 <HAL_TIM_PWM_Start_DMA+0x424>)
 80068da:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	4a64      	ldr	r2, [pc, #400]	@ (8006a74 <HAL_TIM_PWM_Start_DMA+0x428>)
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	4a63      	ldr	r2, [pc, #396]	@ (8006a78 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80068ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	333c      	adds	r3, #60	@ 0x3c
 80068f8:	461a      	mov	r2, r3
 80068fa:	887b      	ldrh	r3, [r7, #2]
 80068fc:	f7fd ff26 	bl	800474c <HAL_DMA_Start_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0ad      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006918:	60da      	str	r2, [r3, #12]
      break;
 800691a:	e026      	b.n	800696a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006920:	4a53      	ldr	r2, [pc, #332]	@ (8006a70 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006922:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	4a52      	ldr	r2, [pc, #328]	@ (8006a74 <HAL_TIM_PWM_Start_DMA+0x428>)
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	4a51      	ldr	r2, [pc, #324]	@ (8006a78 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006932:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3340      	adds	r3, #64	@ 0x40
 8006940:	461a      	mov	r2, r3
 8006942:	887b      	ldrh	r3, [r7, #2]
 8006944:	f7fd ff02 	bl	800474c <HAL_DMA_Start_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e089      	b.n	8006a66 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006960:	60da      	str	r2, [r3, #12]
      break;
 8006962:	e002      	b.n	800696a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
      break;
 8006968:	bf00      	nop
  }

  if (status == HAL_OK)
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d179      	bne.n	8006a64 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2201      	movs	r2, #1
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	4618      	mov	r0, r3
 800697a:	f001 fe07 	bl	800858c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a3e      	ldr	r2, [pc, #248]	@ (8006a7c <HAL_TIM_PWM_Start_DMA+0x430>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d018      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0x36e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a80 <HAL_TIM_PWM_Start_DMA+0x434>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0x36e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3b      	ldr	r2, [pc, #236]	@ (8006a84 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00e      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0x36e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a39      	ldr	r2, [pc, #228]	@ (8006a88 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d009      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0x36e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a38      	ldr	r2, [pc, #224]	@ (8006a8c <HAL_TIM_PWM_Start_DMA+0x440>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d004      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0x36e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a36      	ldr	r2, [pc, #216]	@ (8006a90 <HAL_TIM_PWM_Start_DMA+0x444>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d101      	bne.n	80069be <HAL_TIM_PWM_Start_DMA+0x372>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_TIM_PWM_Start_DMA+0x374>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a28      	ldr	r2, [pc, #160]	@ (8006a7c <HAL_TIM_PWM_Start_DMA+0x430>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d022      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	d01d      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a29      	ldr	r2, [pc, #164]	@ (8006a94 <HAL_TIM_PWM_Start_DMA+0x448>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d018      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a28      	ldr	r2, [pc, #160]	@ (8006a98 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a26      	ldr	r2, [pc, #152]	@ (8006a9c <HAL_TIM_PWM_Start_DMA+0x450>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00e      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a80 <HAL_TIM_PWM_Start_DMA+0x434>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1b      	ldr	r2, [pc, #108]	@ (8006a84 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a90 <HAL_TIM_PWM_Start_DMA+0x444>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d115      	bne.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <HAL_TIM_PWM_Start_DMA+0x454>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b06      	cmp	r3, #6
 8006a34:	d015      	beq.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x416>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3c:	d011      	beq.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4e:	e008      	b.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e000      	b.n	8006a64 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	08007b7f 	.word	0x08007b7f
 8006a74:	08007c2b 	.word	0x08007c2b
 8006a78:	08007ae9 	.word	0x08007ae9
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40013400 	.word	0x40013400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800
 8006a90:	40015000 	.word	0x40015000
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	00010007 	.word	0x00010007

08006aa4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b0c      	cmp	r3, #12
 8006ab6:	d855      	bhi.n	8006b64 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006b65 	.word	0x08006b65
 8006ac8:	08006b65 	.word	0x08006b65
 8006acc:	08006b65 	.word	0x08006b65
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b65 	.word	0x08006b65
 8006ad8:	08006b65 	.word	0x08006b65
 8006adc:	08006b65 	.word	0x08006b65
 8006ae0:	08006b2d 	.word	0x08006b2d
 8006ae4:	08006b65 	.word	0x08006b65
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b65 	.word	0x08006b65
 8006af0:	08006b49 	.word	0x08006b49
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fd fef3 	bl	80048f4 <HAL_DMA_Abort_IT>
      break;
 8006b0e:	e02c      	b.n	8006b6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fd fee5 	bl	80048f4 <HAL_DMA_Abort_IT>
      break;
 8006b2a:	e01e      	b.n	8006b6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd fed7 	bl	80048f4 <HAL_DMA_Abort_IT>
      break;
 8006b46:	e010      	b.n	8006b6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fd fec9 	bl	80048f4 <HAL_DMA_Abort_IT>
      break;
 8006b62:	e002      	b.n	8006b6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8086 	bne.w	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fd06 	bl	800858c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a40      	ldr	r2, [pc, #256]	@ (8006c88 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c8c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3d      	ldr	r2, [pc, #244]	@ (8006c90 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8006c94 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a3a      	ldr	r2, [pc, #232]	@ (8006c98 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a39      	ldr	r2, [pc, #228]	@ (8006c9c <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d017      	beq.n	8006bf6 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a1a      	ldr	r2, [r3, #32]
 8006bcc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a1a      	ldr	r2, [r3, #32]
 8006bdc:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a1a      	ldr	r2, [r3, #32]
 8006bfc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10f      	bne.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d107      	bne.n	8006c26 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c34:	e023      	b.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c44:	e01b      	b.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c54:	e013      	b.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c64:	e00b      	b.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c74:	e003      	b.n	8006c7e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800
 8006c9c:	40015000 	.word	0x40015000

08006ca0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cc8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d108      	bne.n	8006ce2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d105      	bne.n	8006ce2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cd6:	7b7b      	ldrb	r3, [r7, #13]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d102      	bne.n	8006ce2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cdc:	7b3b      	ldrb	r3, [r7, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d001      	beq.n	8006ce6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e059      	b.n	8006d9a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0202 	orr.w	r2, r2, #2
 8006d14:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0204 	orr.w	r2, r2, #4
 8006d24:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fc2c 	bl	800858c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fc25 	bl	800858c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a15      	ldr	r2, [pc, #84]	@ (8006da8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a14      	ldr	r2, [pc, #80]	@ (8006dac <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a12      	ldr	r2, [pc, #72]	@ (8006db0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a11      	ldr	r2, [pc, #68]	@ (8006db4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a0f      	ldr	r2, [pc, #60]	@ (8006db8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800
 8006db8:	40015000 	.word	0x40015000

08006dbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0a2      	b.n	8006f16 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d111      	bne.n	8006e00 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fbf7 	bl	80085d8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a4a      	ldr	r2, [pc, #296]	@ (8006f20 <HAL_TIM_Encoder_Init+0x164>)
 8006df6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f000 ff36 	bl	8007c98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	4313      	orrs	r3, r2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e72:	f023 030c 	bic.w	r3, r3, #12
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	011a      	lsls	r2, r3, #4
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006eb0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006eb8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	08003bbd 	.word	0x08003bbd

08006f24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d110      	bne.n	8006f76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d102      	bne.n	8006f60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f5a:	7b7b      	ldrb	r3, [r7, #13]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e069      	b.n	8007038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f74:	e031      	b.n	8006fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d110      	bne.n	8006f9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d102      	bne.n	8006f88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f82:	7b3b      	ldrb	r3, [r7, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e055      	b.n	8007038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9c:	e01d      	b.n	8006fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d108      	bne.n	8006fb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d105      	bne.n	8006fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006faa:	7b7b      	ldrb	r3, [r7, #13]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb0:	7b3b      	ldrb	r3, [r7, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d001      	beq.n	8006fba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e03e      	b.n	8007038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_TIM_Encoder_Start+0xc4>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d008      	beq.n	8006ff8 <HAL_TIM_Encoder_Start+0xd4>
 8006fe6:	e00f      	b.n	8007008 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 facb 	bl	800858c <TIM_CCxChannelCmd>
      break;
 8006ff6:	e016      	b.n	8007026 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	2104      	movs	r1, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f001 fac3 	bl	800858c <TIM_CCxChannelCmd>
      break;
 8007006:	e00e      	b.n	8007026 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2201      	movs	r2, #1
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fabb 	bl	800858c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2201      	movs	r2, #1
 800701c:	2104      	movs	r1, #4
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fab4 	bl	800858c <TIM_CCxChannelCmd>
      break;
 8007024:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d026      	beq.n	80070b0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d021      	beq.n	80070b0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0202 	mvn.w	r2, #2
 8007074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	e009      	b.n	80070aa <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d026      	beq.n	8007108 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d021      	beq.n	8007108 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0204 	mvn.w	r2, #4
 80070cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
 80070ec:	e009      	b.n	8007102 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d026      	beq.n	8007160 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d021      	beq.n	8007160 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0208 	mvn.w	r2, #8
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
 8007144:	e009      	b.n	800715a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b00      	cmp	r3, #0
 8007168:	d026      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d021      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0210 	mvn.w	r2, #16
 800717c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2208      	movs	r2, #8
 8007182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
 800719c:	e009      	b.n	80071b2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0201 	mvn.w	r2, #1
 80071d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00e      	beq.n	8007212 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00e      	beq.n	800723a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0220 	mvn.w	r2, #32
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80072a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800731e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e0ff      	b.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b14      	cmp	r3, #20
 800735e:	f200 80f0 	bhi.w	8007542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007543 	.word	0x08007543
 8007370:	08007543 	.word	0x08007543
 8007374:	08007543 	.word	0x08007543
 8007378:	080073fd 	.word	0x080073fd
 800737c:	08007543 	.word	0x08007543
 8007380:	08007543 	.word	0x08007543
 8007384:	08007543 	.word	0x08007543
 8007388:	0800743f 	.word	0x0800743f
 800738c:	08007543 	.word	0x08007543
 8007390:	08007543 	.word	0x08007543
 8007394:	08007543 	.word	0x08007543
 8007398:	0800747f 	.word	0x0800747f
 800739c:	08007543 	.word	0x08007543
 80073a0:	08007543 	.word	0x08007543
 80073a4:	08007543 	.word	0x08007543
 80073a8:	080074c1 	.word	0x080074c1
 80073ac:	08007543 	.word	0x08007543
 80073b0:	08007543 	.word	0x08007543
 80073b4:	08007543 	.word	0x08007543
 80073b8:	08007501 	.word	0x08007501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fd1c 	bl	8007e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e0a5      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fd96 	bl	8007f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e084      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fe09 	bl	800805c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e064      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fe7b 	bl	8008180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e043      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 feee 	bl	80082a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0204 	bic.w	r2, r2, #4
 80074ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074fe:	e023      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 ff38 	bl	800837c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800751a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800752a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007540:	e002      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
      break;
 8007546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIM_ConfigClockSource+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e0f6      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x20a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800759a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a6f      	ldr	r2, [pc, #444]	@ (8007770 <HAL_TIM_ConfigClockSource+0x214>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	f000 80c1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075b8:	4a6d      	ldr	r2, [pc, #436]	@ (8007770 <HAL_TIM_ConfigClockSource+0x214>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f200 80c6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075c0:	4a6c      	ldr	r2, [pc, #432]	@ (8007774 <HAL_TIM_ConfigClockSource+0x218>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f000 80b9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007774 <HAL_TIM_ConfigClockSource+0x218>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f200 80be 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075d0:	4a69      	ldr	r2, [pc, #420]	@ (8007778 <HAL_TIM_ConfigClockSource+0x21c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f000 80b1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075d8:	4a67      	ldr	r2, [pc, #412]	@ (8007778 <HAL_TIM_ConfigClockSource+0x21c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f200 80b6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075e0:	4a66      	ldr	r2, [pc, #408]	@ (800777c <HAL_TIM_ConfigClockSource+0x220>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f000 80a9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075e8:	4a64      	ldr	r2, [pc, #400]	@ (800777c <HAL_TIM_ConfigClockSource+0x220>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f200 80ae 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075f0:	4a63      	ldr	r2, [pc, #396]	@ (8007780 <HAL_TIM_ConfigClockSource+0x224>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f000 80a1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075f8:	4a61      	ldr	r2, [pc, #388]	@ (8007780 <HAL_TIM_ConfigClockSource+0x224>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f200 80a6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007600:	4a60      	ldr	r2, [pc, #384]	@ (8007784 <HAL_TIM_ConfigClockSource+0x228>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f000 8099 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007608:	4a5e      	ldr	r2, [pc, #376]	@ (8007784 <HAL_TIM_ConfigClockSource+0x228>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f200 809e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007610:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007614:	f000 8091 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800761c:	f200 8096 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007624:	f000 8089 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800762c:	f200 808e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007634:	d03e      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x158>
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763a:	f200 8087 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007642:	f000 8086 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1f6>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	d87f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800764c:	2b70      	cmp	r3, #112	@ 0x70
 800764e:	d01a      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x12a>
 8007650:	2b70      	cmp	r3, #112	@ 0x70
 8007652:	d87b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007654:	2b60      	cmp	r3, #96	@ 0x60
 8007656:	d050      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x19e>
 8007658:	2b60      	cmp	r3, #96	@ 0x60
 800765a:	d877      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800765c:	2b50      	cmp	r3, #80	@ 0x50
 800765e:	d03c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x17e>
 8007660:	2b50      	cmp	r3, #80	@ 0x50
 8007662:	d873      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	2b40      	cmp	r3, #64	@ 0x40
 8007666:	d058      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x1be>
 8007668:	2b40      	cmp	r3, #64	@ 0x40
 800766a:	d86f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	2b30      	cmp	r3, #48	@ 0x30
 800766e:	d064      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007670:	2b30      	cmp	r3, #48	@ 0x30
 8007672:	d86b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d060      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d867      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d05c      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007680:	2b10      	cmp	r3, #16
 8007682:	d05a      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007684:	e062      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007696:	f000 ff59 	bl	800854c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	609a      	str	r2, [r3, #8]
      break;
 80076b2:	e04f      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076c4:	f000 ff42 	bl	800854c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076d6:	609a      	str	r2, [r3, #8]
      break;
 80076d8:	e03c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	461a      	mov	r2, r3
 80076e8:	f000 feb4 	bl	8008454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2150      	movs	r1, #80	@ 0x50
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 ff0d 	bl	8008512 <TIM_ITRx_SetConfig>
      break;
 80076f8:	e02c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	461a      	mov	r2, r3
 8007708:	f000 fed3 	bl	80084b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2160      	movs	r1, #96	@ 0x60
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fefd 	bl	8008512 <TIM_ITRx_SetConfig>
      break;
 8007718:	e01c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	461a      	mov	r2, r3
 8007728:	f000 fe94 	bl	8008454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2140      	movs	r1, #64	@ 0x40
 8007732:	4618      	mov	r0, r3
 8007734:	f000 feed 	bl	8008512 <TIM_ITRx_SetConfig>
      break;
 8007738:	e00c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f000 fee4 	bl	8008512 <TIM_ITRx_SetConfig>
      break;
 800774a:	e003      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e000      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	00100070 	.word	0x00100070
 8007774:	00100060 	.word	0x00100060
 8007778:	00100050 	.word	0x00100050
 800777c:	00100040 	.word	0x00100040
 8007780:	00100030 	.word	0x00100030
 8007784:	00100020 	.word	0x00100020

08007788 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	460b      	mov	r3, r1
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e14a      	b.n	8007ada <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 80dd 	bne.w	8007a0c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	2b1f      	cmp	r3, #31
 8007856:	f200 80d6 	bhi.w	8007a06 <HAL_TIM_RegisterCallback+0x1de>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <HAL_TIM_RegisterCallback+0x38>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078e1 	.word	0x080078e1
 8007864:	080078e9 	.word	0x080078e9
 8007868:	080078f1 	.word	0x080078f1
 800786c:	080078f9 	.word	0x080078f9
 8007870:	08007901 	.word	0x08007901
 8007874:	08007909 	.word	0x08007909
 8007878:	08007911 	.word	0x08007911
 800787c:	08007919 	.word	0x08007919
 8007880:	08007921 	.word	0x08007921
 8007884:	08007929 	.word	0x08007929
 8007888:	08007931 	.word	0x08007931
 800788c:	08007939 	.word	0x08007939
 8007890:	08007941 	.word	0x08007941
 8007894:	08007949 	.word	0x08007949
 8007898:	08007953 	.word	0x08007953
 800789c:	0800795d 	.word	0x0800795d
 80078a0:	08007967 	.word	0x08007967
 80078a4:	08007971 	.word	0x08007971
 80078a8:	0800797b 	.word	0x0800797b
 80078ac:	08007985 	.word	0x08007985
 80078b0:	0800798f 	.word	0x0800798f
 80078b4:	08007999 	.word	0x08007999
 80078b8:	080079a3 	.word	0x080079a3
 80078bc:	080079ad 	.word	0x080079ad
 80078c0:	080079b7 	.word	0x080079b7
 80078c4:	080079c1 	.word	0x080079c1
 80078c8:	080079cb 	.word	0x080079cb
 80078cc:	080079d5 	.word	0x080079d5
 80078d0:	080079df 	.word	0x080079df
 80078d4:	080079e9 	.word	0x080079e9
 80078d8:	080079f3 	.word	0x080079f3
 80078dc:	080079fd 	.word	0x080079fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80078e6:	e0f7      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80078ee:	e0f3      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80078f6:	e0ef      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80078fe:	e0eb      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007906:	e0e7      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800790e:	e0e3      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007916:	e0df      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800791e:	e0db      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007926:	e0d7      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800792e:	e0d3      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007936:	e0cf      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800793e:	e0cb      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007946:	e0c7      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007950:	e0c2      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800795a:	e0bd      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007964:	e0b8      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800796e:	e0b3      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007978:	e0ae      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007982:	e0a9      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800798c:	e0a4      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007996:	e09f      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80079a0:	e09a      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80079aa:	e095      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80079b4:	e090      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80079be:	e08b      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80079c8:	e086      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80079d2:	e081      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80079dc:	e07c      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80079e6:	e077      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80079f0:	e072      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80079fa:	e06d      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007a04:	e068      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
        break;
 8007a0a:	e065      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d15d      	bne.n	8007ad4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	2b0d      	cmp	r3, #13
 8007a1c:	d857      	bhi.n	8007ace <HAL_TIM_RegisterCallback+0x2a6>
 8007a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <HAL_TIM_RegisterCallback+0x1fc>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a6d 	.word	0x08007a6d
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a7d 	.word	0x08007a7d
 8007a38:	08007a85 	.word	0x08007a85
 8007a3c:	08007a8d 	.word	0x08007a8d
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007aa5 	.word	0x08007aa5
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007abd 	.word	0x08007abd
 8007a58:	08007ac5 	.word	0x08007ac5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007a62:	e039      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007a6a:	e035      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007a72:	e031      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007a7a:	e02d      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007a82:	e029      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007a8a:	e025      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007a92:	e021      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007a9a:	e01d      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007aa2:	e019      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007aaa:	e015      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007ab2:	e011      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007aba:	e00d      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007ac2:	e009      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007acc:	e004      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ad2:	e001      	b.n	8007ad8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop

08007ae8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d107      	bne.n	8007b10 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b0e:	e02a      	b.n	8007b66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d107      	bne.n	8007b2a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b28:	e01d      	b.n	8007b66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d107      	bne.n	8007b44 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2204      	movs	r2, #4
 8007b38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b42:	e010      	b.n	8007b66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d107      	bne.n	8007b5e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2208      	movs	r2, #8
 8007b52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b5c:	e003      	b.n	8007b66 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	771a      	strb	r2, [r3, #28]
}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d10b      	bne.n	8007bae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d136      	bne.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bac:	e031      	b.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d10b      	bne.n	8007bd0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d125      	bne.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bce:	e020      	b.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d10b      	bne.n	8007bf2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2204      	movs	r2, #4
 8007bde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d114      	bne.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf0:	e00f      	b.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d10a      	bne.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2208      	movs	r2, #8
 8007c00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d103      	bne.n	8007c12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	771a      	strb	r2, [r3, #28]
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d103      	bne.n	8007c4a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	771a      	strb	r2, [r3, #28]
 8007c48:	e019      	b.n	8007c7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d103      	bne.n	8007c5c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2202      	movs	r2, #2
 8007c58:	771a      	strb	r2, [r3, #28]
 8007c5a:	e010      	b.n	8007c7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d103      	bne.n	8007c6e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2204      	movs	r2, #4
 8007c6a:	771a      	strb	r2, [r3, #28]
 8007c6c:	e007      	b.n	8007c7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d102      	bne.n	8007c7e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	771a      	strb	r2, [r3, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a4c      	ldr	r2, [pc, #304]	@ (8007ddc <TIM_Base_SetConfig+0x144>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d017      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb6:	d013      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a49      	ldr	r2, [pc, #292]	@ (8007de0 <TIM_Base_SetConfig+0x148>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00f      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a48      	ldr	r2, [pc, #288]	@ (8007de4 <TIM_Base_SetConfig+0x14c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a47      	ldr	r2, [pc, #284]	@ (8007de8 <TIM_Base_SetConfig+0x150>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a46      	ldr	r2, [pc, #280]	@ (8007dec <TIM_Base_SetConfig+0x154>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_Base_SetConfig+0x48>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a45      	ldr	r2, [pc, #276]	@ (8007df0 <TIM_Base_SetConfig+0x158>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d108      	bne.n	8007cf2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a39      	ldr	r2, [pc, #228]	@ (8007ddc <TIM_Base_SetConfig+0x144>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d023      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d00:	d01f      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a36      	ldr	r2, [pc, #216]	@ (8007de0 <TIM_Base_SetConfig+0x148>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01b      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a35      	ldr	r2, [pc, #212]	@ (8007de4 <TIM_Base_SetConfig+0x14c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d017      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a34      	ldr	r2, [pc, #208]	@ (8007de8 <TIM_Base_SetConfig+0x150>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a33      	ldr	r2, [pc, #204]	@ (8007dec <TIM_Base_SetConfig+0x154>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a33      	ldr	r2, [pc, #204]	@ (8007df4 <TIM_Base_SetConfig+0x15c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00b      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a32      	ldr	r2, [pc, #200]	@ (8007df8 <TIM_Base_SetConfig+0x160>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a31      	ldr	r2, [pc, #196]	@ (8007dfc <TIM_Base_SetConfig+0x164>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <TIM_Base_SetConfig+0xaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8007df0 <TIM_Base_SetConfig+0x158>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d108      	bne.n	8007d54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a18      	ldr	r2, [pc, #96]	@ (8007ddc <TIM_Base_SetConfig+0x144>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <TIM_Base_SetConfig+0x110>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a1a      	ldr	r2, [pc, #104]	@ (8007dec <TIM_Base_SetConfig+0x154>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00f      	beq.n	8007da8 <TIM_Base_SetConfig+0x110>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8007df4 <TIM_Base_SetConfig+0x15c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00b      	beq.n	8007da8 <TIM_Base_SetConfig+0x110>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a19      	ldr	r2, [pc, #100]	@ (8007df8 <TIM_Base_SetConfig+0x160>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d007      	beq.n	8007da8 <TIM_Base_SetConfig+0x110>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a18      	ldr	r2, [pc, #96]	@ (8007dfc <TIM_Base_SetConfig+0x164>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d003      	beq.n	8007da8 <TIM_Base_SetConfig+0x110>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a13      	ldr	r2, [pc, #76]	@ (8007df0 <TIM_Base_SetConfig+0x158>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d103      	bne.n	8007db0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d105      	bne.n	8007dce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f023 0201 	bic.w	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40013400 	.word	0x40013400
 8007df0:	40015000 	.word	0x40015000
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400
 8007dfc:	40014800 	.word	0x40014800

08007e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f023 0201 	bic.w	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f023 0302 	bic.w	r3, r3, #2
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a30      	ldr	r2, [pc, #192]	@ (8007f1c <TIM_OC1_SetConfig+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <TIM_OC1_SetConfig+0x88>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a2f      	ldr	r2, [pc, #188]	@ (8007f20 <TIM_OC1_SetConfig+0x120>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00f      	beq.n	8007e88 <TIM_OC1_SetConfig+0x88>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f24 <TIM_OC1_SetConfig+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <TIM_OC1_SetConfig+0x88>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a2d      	ldr	r2, [pc, #180]	@ (8007f28 <TIM_OC1_SetConfig+0x128>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_OC1_SetConfig+0x88>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f2c <TIM_OC1_SetConfig+0x12c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC1_SetConfig+0x88>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a2b      	ldr	r2, [pc, #172]	@ (8007f30 <TIM_OC1_SetConfig+0x130>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10c      	bne.n	8007ea2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0308 	bic.w	r3, r3, #8
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f023 0304 	bic.w	r3, r3, #4
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <TIM_OC1_SetConfig+0x11c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <TIM_OC1_SetConfig+0xd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <TIM_OC1_SetConfig+0x120>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00f      	beq.n	8007ed2 <TIM_OC1_SetConfig+0xd2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <TIM_OC1_SetConfig+0x124>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00b      	beq.n	8007ed2 <TIM_OC1_SetConfig+0xd2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8007f28 <TIM_OC1_SetConfig+0x128>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <TIM_OC1_SetConfig+0xd2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a19      	ldr	r2, [pc, #100]	@ (8007f2c <TIM_OC1_SetConfig+0x12c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <TIM_OC1_SetConfig+0xd2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a18      	ldr	r2, [pc, #96]	@ (8007f30 <TIM_OC1_SetConfig+0x130>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d111      	bne.n	8007ef6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	621a      	str	r2, [r3, #32]
}
 8007f10:	bf00      	nop
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40013400 	.word	0x40013400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800
 8007f30:	40015000 	.word	0x40015000

08007f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	f023 0210 	bic.w	r2, r3, #16
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0320 	bic.w	r3, r3, #32
 8007f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a2c      	ldr	r2, [pc, #176]	@ (8008044 <TIM_OC2_SetConfig+0x110>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d007      	beq.n	8007fa8 <TIM_OC2_SetConfig+0x74>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8008048 <TIM_OC2_SetConfig+0x114>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_OC2_SetConfig+0x74>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800804c <TIM_OC2_SetConfig+0x118>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10d      	bne.n	8007fc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8008044 <TIM_OC2_SetConfig+0x110>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d013      	beq.n	8007ff4 <TIM_OC2_SetConfig+0xc0>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a1e      	ldr	r2, [pc, #120]	@ (8008048 <TIM_OC2_SetConfig+0x114>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00f      	beq.n	8007ff4 <TIM_OC2_SetConfig+0xc0>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008050 <TIM_OC2_SetConfig+0x11c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00b      	beq.n	8007ff4 <TIM_OC2_SetConfig+0xc0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a1d      	ldr	r2, [pc, #116]	@ (8008054 <TIM_OC2_SetConfig+0x120>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d007      	beq.n	8007ff4 <TIM_OC2_SetConfig+0xc0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8008058 <TIM_OC2_SetConfig+0x124>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC2_SetConfig+0xc0>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a17      	ldr	r2, [pc, #92]	@ (800804c <TIM_OC2_SetConfig+0x118>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d113      	bne.n	800801c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40015000 	.word	0x40015000
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400
 8008058:	40014800 	.word	0x40014800

0800805c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800808a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008168 <TIM_OC3_SetConfig+0x10c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d007      	beq.n	80080ce <TIM_OC3_SetConfig+0x72>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2a      	ldr	r2, [pc, #168]	@ (800816c <TIM_OC3_SetConfig+0x110>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d003      	beq.n	80080ce <TIM_OC3_SetConfig+0x72>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a29      	ldr	r2, [pc, #164]	@ (8008170 <TIM_OC3_SetConfig+0x114>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d10d      	bne.n	80080ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008168 <TIM_OC3_SetConfig+0x10c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d013      	beq.n	800811a <TIM_OC3_SetConfig+0xbe>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <TIM_OC3_SetConfig+0x110>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00f      	beq.n	800811a <TIM_OC3_SetConfig+0xbe>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008174 <TIM_OC3_SetConfig+0x118>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00b      	beq.n	800811a <TIM_OC3_SetConfig+0xbe>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1c      	ldr	r2, [pc, #112]	@ (8008178 <TIM_OC3_SetConfig+0x11c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <TIM_OC3_SetConfig+0xbe>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a1b      	ldr	r2, [pc, #108]	@ (800817c <TIM_OC3_SetConfig+0x120>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d003      	beq.n	800811a <TIM_OC3_SetConfig+0xbe>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a16      	ldr	r2, [pc, #88]	@ (8008170 <TIM_OC3_SetConfig+0x114>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d113      	bne.n	8008142 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	621a      	str	r2, [r3, #32]
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	40012c00 	.word	0x40012c00
 800816c:	40013400 	.word	0x40013400
 8008170:	40015000 	.word	0x40015000
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800

08008180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	031b      	lsls	r3, r3, #12
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a2c      	ldr	r2, [pc, #176]	@ (8008290 <TIM_OC4_SetConfig+0x110>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <TIM_OC4_SetConfig+0x74>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008294 <TIM_OC4_SetConfig+0x114>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_OC4_SetConfig+0x74>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008298 <TIM_OC4_SetConfig+0x118>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d10d      	bne.n	8008210 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800820e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a1f      	ldr	r2, [pc, #124]	@ (8008290 <TIM_OC4_SetConfig+0x110>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <TIM_OC4_SetConfig+0xc0>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a1e      	ldr	r2, [pc, #120]	@ (8008294 <TIM_OC4_SetConfig+0x114>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00f      	beq.n	8008240 <TIM_OC4_SetConfig+0xc0>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a1e      	ldr	r2, [pc, #120]	@ (800829c <TIM_OC4_SetConfig+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_OC4_SetConfig+0xc0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a1d      	ldr	r2, [pc, #116]	@ (80082a0 <TIM_OC4_SetConfig+0x120>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_OC4_SetConfig+0xc0>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a1c      	ldr	r2, [pc, #112]	@ (80082a4 <TIM_OC4_SetConfig+0x124>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_OC4_SetConfig+0xc0>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a17      	ldr	r2, [pc, #92]	@ (8008298 <TIM_OC4_SetConfig+0x118>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d113      	bne.n	8008268 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008246:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800824e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	019b      	lsls	r3, r3, #6
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40012c00 	.word	0x40012c00
 8008294:	40013400 	.word	0x40013400
 8008298:	40015000 	.word	0x40015000
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800

080082a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <TIM_OC5_SetConfig+0xbc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <TIM_OC5_SetConfig+0x82>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a18      	ldr	r2, [pc, #96]	@ (8008368 <TIM_OC5_SetConfig+0xc0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00f      	beq.n	800832a <TIM_OC5_SetConfig+0x82>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a17      	ldr	r2, [pc, #92]	@ (800836c <TIM_OC5_SetConfig+0xc4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00b      	beq.n	800832a <TIM_OC5_SetConfig+0x82>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a16      	ldr	r2, [pc, #88]	@ (8008370 <TIM_OC5_SetConfig+0xc8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d007      	beq.n	800832a <TIM_OC5_SetConfig+0x82>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a15      	ldr	r2, [pc, #84]	@ (8008374 <TIM_OC5_SetConfig+0xcc>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <TIM_OC5_SetConfig+0x82>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a14      	ldr	r2, [pc, #80]	@ (8008378 <TIM_OC5_SetConfig+0xd0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d109      	bne.n	800833e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800
 8008378:	40015000 	.word	0x40015000

0800837c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	051b      	lsls	r3, r3, #20
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <TIM_OC6_SetConfig+0xc0>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d013      	beq.n	8008400 <TIM_OC6_SetConfig+0x84>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a19      	ldr	r2, [pc, #100]	@ (8008440 <TIM_OC6_SetConfig+0xc4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00f      	beq.n	8008400 <TIM_OC6_SetConfig+0x84>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a18      	ldr	r2, [pc, #96]	@ (8008444 <TIM_OC6_SetConfig+0xc8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00b      	beq.n	8008400 <TIM_OC6_SetConfig+0x84>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <TIM_OC6_SetConfig+0xcc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d007      	beq.n	8008400 <TIM_OC6_SetConfig+0x84>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a16      	ldr	r2, [pc, #88]	@ (800844c <TIM_OC6_SetConfig+0xd0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_OC6_SetConfig+0x84>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a15      	ldr	r2, [pc, #84]	@ (8008450 <TIM_OC6_SetConfig+0xd4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d109      	bne.n	8008414 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	029b      	lsls	r3, r3, #10
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	621a      	str	r2, [r3, #32]
}
 800842e:	bf00      	nop
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	40012c00 	.word	0x40012c00
 8008440:	40013400 	.word	0x40013400
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400
 800844c:	40014800 	.word	0x40014800
 8008450:	40015000 	.word	0x40015000

08008454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800847e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 030a 	bic.w	r3, r3, #10
 8008490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b087      	sub	sp, #28
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f023 0210 	bic.w	r2, r3, #16
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	f043 0307 	orr.w	r3, r3, #7
 8008538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	021a      	lsls	r2, r3, #8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	431a      	orrs	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	2201      	movs	r2, #1
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	401a      	ands	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 031f 	and.w	r3, r3, #31
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	fa01 f303 	lsl.w	r3, r1, r3
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a26      	ldr	r2, [pc, #152]	@ (800867c <TIM_ResetCallback+0xa4>)
 80085e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a25      	ldr	r2, [pc, #148]	@ (8008680 <TIM_ResetCallback+0xa8>)
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a24      	ldr	r2, [pc, #144]	@ (8008684 <TIM_ResetCallback+0xac>)
 80085f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a23      	ldr	r2, [pc, #140]	@ (8008688 <TIM_ResetCallback+0xb0>)
 80085fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a22      	ldr	r2, [pc, #136]	@ (800868c <TIM_ResetCallback+0xb4>)
 8008604:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a21      	ldr	r2, [pc, #132]	@ (8008690 <TIM_ResetCallback+0xb8>)
 800860c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a20      	ldr	r2, [pc, #128]	@ (8008694 <TIM_ResetCallback+0xbc>)
 8008614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a1f      	ldr	r2, [pc, #124]	@ (8008698 <TIM_ResetCallback+0xc0>)
 800861c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1e      	ldr	r2, [pc, #120]	@ (800869c <TIM_ResetCallback+0xc4>)
 8008624:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1d      	ldr	r2, [pc, #116]	@ (80086a0 <TIM_ResetCallback+0xc8>)
 800862c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1c      	ldr	r2, [pc, #112]	@ (80086a4 <TIM_ResetCallback+0xcc>)
 8008634:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a1b      	ldr	r2, [pc, #108]	@ (80086a8 <TIM_ResetCallback+0xd0>)
 800863c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1a      	ldr	r2, [pc, #104]	@ (80086ac <TIM_ResetCallback+0xd4>)
 8008644:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a19      	ldr	r2, [pc, #100]	@ (80086b0 <TIM_ResetCallback+0xd8>)
 800864c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a18      	ldr	r2, [pc, #96]	@ (80086b4 <TIM_ResetCallback+0xdc>)
 8008654:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a17      	ldr	r2, [pc, #92]	@ (80086b8 <TIM_ResetCallback+0xe0>)
 800865c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a16      	ldr	r2, [pc, #88]	@ (80086bc <TIM_ResetCallback+0xe4>)
 8008664:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a15      	ldr	r2, [pc, #84]	@ (80086c0 <TIM_ResetCallback+0xe8>)
 800866c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	08003721 	.word	0x08003721
 8008680:	08007789 	.word	0x08007789
 8008684:	080077ed 	.word	0x080077ed
 8008688:	08007801 	.word	0x08007801
 800868c:	080077b1 	.word	0x080077b1
 8008690:	080077c5 	.word	0x080077c5
 8008694:	0800779d 	.word	0x0800779d
 8008698:	080036f5 	.word	0x080036f5
 800869c:	080077d9 	.word	0x080077d9
 80086a0:	08007815 	.word	0x08007815
 80086a4:	08008b5d 	.word	0x08008b5d
 80086a8:	08008b71 	.word	0x08008b71
 80086ac:	08008b85 	.word	0x08008b85
 80086b0:	08008b99 	.word	0x08008b99
 80086b4:	08008bad 	.word	0x08008bad
 80086b8:	08008bc1 	.word	0x08008bc1
 80086bc:	08008bd5 	.word	0x08008bd5
 80086c0:	08008be9 	.word	0x08008be9

080086c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086d8:	2302      	movs	r3, #2
 80086da:	e074      	b.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a34      	ldr	r2, [pc, #208]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d009      	beq.n	800871a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a33      	ldr	r2, [pc, #204]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a31      	ldr	r2, [pc, #196]	@ (80087dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d108      	bne.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a21      	ldr	r2, [pc, #132]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d022      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875c:	d01d      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1f      	ldr	r2, [pc, #124]	@ (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d018      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1d      	ldr	r2, [pc, #116]	@ (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a1c      	ldr	r2, [pc, #112]	@ (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a15      	ldr	r2, [pc, #84]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a18      	ldr	r2, [pc, #96]	@ (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a11      	ldr	r2, [pc, #68]	@ (80087dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d10c      	bne.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40013400 	.word	0x40013400
 80087dc:	40015000 	.word	0x40015000
 80087e0:	40000400 	.word	0x40000400
 80087e4:	40000800 	.word	0x40000800
 80087e8:	40000c00 	.word	0x40000c00
 80087ec:	40014000 	.word	0x40014000

080087f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008808:	2302      	movs	r3, #2
 800880a:	e078      	b.n	80088fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	041b      	lsls	r3, r3, #16
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1c      	ldr	r2, [pc, #112]	@ (800890c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d009      	beq.n	80088b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008910 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d004      	beq.n	80088b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a19      	ldr	r2, [pc, #100]	@ (8008914 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d11c      	bne.n	80088ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088bc:	051b      	lsls	r3, r3, #20
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00
 8008910:	40013400 	.word	0x40013400
 8008914:	40015000 	.word	0x40015000

08008918 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008918:	b480      	push	{r7}
 800891a:	b08b      	sub	sp, #44	@ 0x2c
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008934:	2302      	movs	r3, #2
 8008936:	e10b      	b.n	8008b50 <HAL_TIMEx_ConfigBreakInput+0x238>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b80      	cmp	r3, #128	@ 0x80
 8008946:	f000 8096 	beq.w	8008a76 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800894a:	2b80      	cmp	r3, #128	@ 0x80
 800894c:	f200 809c 	bhi.w	8008a88 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008950:	2b20      	cmp	r3, #32
 8008952:	d849      	bhi.n	80089e8 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 8097 	beq.w	8008a88 <HAL_TIMEx_ConfigBreakInput+0x170>
 800895a:	3b01      	subs	r3, #1
 800895c:	2b1f      	cmp	r3, #31
 800895e:	f200 8093 	bhi.w	8008a88 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_TIMEx_ConfigBreakInput+0x50>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089ef 	.word	0x080089ef
 800896c:	08008a03 	.word	0x08008a03
 8008970:	08008a89 	.word	0x08008a89
 8008974:	08008a17 	.word	0x08008a17
 8008978:	08008a89 	.word	0x08008a89
 800897c:	08008a89 	.word	0x08008a89
 8008980:	08008a89 	.word	0x08008a89
 8008984:	08008a2b 	.word	0x08008a2b
 8008988:	08008a89 	.word	0x08008a89
 800898c:	08008a89 	.word	0x08008a89
 8008990:	08008a89 	.word	0x08008a89
 8008994:	08008a89 	.word	0x08008a89
 8008998:	08008a89 	.word	0x08008a89
 800899c:	08008a89 	.word	0x08008a89
 80089a0:	08008a89 	.word	0x08008a89
 80089a4:	08008a3f 	.word	0x08008a3f
 80089a8:	08008a89 	.word	0x08008a89
 80089ac:	08008a89 	.word	0x08008a89
 80089b0:	08008a89 	.word	0x08008a89
 80089b4:	08008a89 	.word	0x08008a89
 80089b8:	08008a89 	.word	0x08008a89
 80089bc:	08008a89 	.word	0x08008a89
 80089c0:	08008a89 	.word	0x08008a89
 80089c4:	08008a89 	.word	0x08008a89
 80089c8:	08008a89 	.word	0x08008a89
 80089cc:	08008a89 	.word	0x08008a89
 80089d0:	08008a89 	.word	0x08008a89
 80089d4:	08008a89 	.word	0x08008a89
 80089d8:	08008a89 	.word	0x08008a89
 80089dc:	08008a89 	.word	0x08008a89
 80089e0:	08008a89 	.word	0x08008a89
 80089e4:	08008a53 	.word	0x08008a53
 80089e8:	2b40      	cmp	r3, #64	@ 0x40
 80089ea:	d03b      	beq.n	8008a64 <HAL_TIMEx_ConfigBreakInput+0x14c>
 80089ec:	e04c      	b.n	8008a88 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80089f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089fa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80089fc:	2309      	movs	r3, #9
 80089fe:	617b      	str	r3, [r7, #20]
      break;
 8008a00:	e04b      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008a02:	2302      	movs	r3, #2
 8008a04:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008a06:	2301      	movs	r3, #1
 8008a08:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008a10:	230a      	movs	r3, #10
 8008a12:	617b      	str	r3, [r7, #20]
      break;
 8008a14:	e041      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008a16:	2304      	movs	r3, #4
 8008a18:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a22:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008a24:	230b      	movs	r3, #11
 8008a26:	617b      	str	r3, [r7, #20]
      break;
 8008a28:	e037      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a36:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008a38:	230c      	movs	r3, #12
 8008a3a:	617b      	str	r3, [r7, #20]
      break;
 8008a3c:	e02d      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8008a3e:	2310      	movs	r3, #16
 8008a40:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008a42:	2304      	movs	r3, #4
 8008a44:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a4a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8008a4c:	230d      	movs	r3, #13
 8008a4e:	617b      	str	r3, [r7, #20]
      break;
 8008a50:	e023      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8008a52:	2320      	movs	r3, #32
 8008a54:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008a56:	2305      	movs	r3, #5
 8008a58:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]
      break;
 8008a62:	e01a      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8008a64:	2340      	movs	r3, #64	@ 0x40
 8008a66:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008a68:	2306      	movs	r3, #6
 8008a6a:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
      break;
 8008a74:	e011      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008a76:	2380      	movs	r3, #128	@ 0x80
 8008a78:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008a7a:	2307      	movs	r3, #7
 8008a7c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
      break;
 8008a86:	e008      	b.n	8008a9a <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
      break;
 8008a98:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d003      	beq.n	8008aa8 <HAL_TIMEx_ConfigBreakInput+0x190>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d025      	beq.n	8008af2 <HAL_TIMEx_ConfigBreakInput+0x1da>
 8008aa6:	e049      	b.n	8008b3c <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aae:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	409a      	lsls	r2, r3
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	409a      	lsls	r2, r3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008af0:	e028      	b.n	8008b44 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af8:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	43db      	mvns	r3, r3
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4013      	ands	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	409a      	lsls	r2, r3
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008b3a:	e003      	b.n	8008b44 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008b42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	372c      	adds	r7, #44	@ 0x2c
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e050      	b.n	8008cb0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d114      	bne.n	8008c42 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fdc5 	bl	80097b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d103      	bne.n	8008c38 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a21      	ldr	r2, [pc, #132]	@ (8008cb8 <HAL_UART_Init+0xbc>)
 8008c34:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2224      	movs	r2, #36	@ 0x24
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f8f2 	bl	8009e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fdf3 	bl	8009854 <UART_SetConfig>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e01b      	b.n	8008cb0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 f971 	bl	8009f90 <UART_CheckIdleState>
 8008cae:	4603      	mov	r3, r0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	08003cf5 	.word	0x08003cf5

08008cbc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e09c      	b.n	8008e22 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d16c      	bne.n	8008dcc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	2b0c      	cmp	r3, #12
 8008cf6:	d85e      	bhi.n	8008db6 <HAL_UART_RegisterCallback+0xfa>
 8008cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <HAL_UART_RegisterCallback+0x44>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d35 	.word	0x08008d35
 8008d04:	08008d3f 	.word	0x08008d3f
 8008d08:	08008d49 	.word	0x08008d49
 8008d0c:	08008d53 	.word	0x08008d53
 8008d10:	08008d5d 	.word	0x08008d5d
 8008d14:	08008d67 	.word	0x08008d67
 8008d18:	08008d71 	.word	0x08008d71
 8008d1c:	08008d7b 	.word	0x08008d7b
 8008d20:	08008d85 	.word	0x08008d85
 8008d24:	08008d8f 	.word	0x08008d8f
 8008d28:	08008d99 	.word	0x08008d99
 8008d2c:	08008da3 	.word	0x08008da3
 8008d30:	08008dad 	.word	0x08008dad
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008d3c:	e070      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008d46:	e06b      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008d50:	e066      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008d5a:	e061      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008d64:	e05c      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008d6e:	e057      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008d78:	e052      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008d82:	e04d      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008d8c:	e048      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008d96:	e043      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008da0:	e03e      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008daa:	e039      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008db4:	e034      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
        break;
 8008dca:	e029      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11a      	bne.n	8008e0c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b0b      	cmp	r3, #11
 8008dda:	d002      	beq.n	8008de2 <HAL_UART_RegisterCallback+0x126>
 8008ddc:	2b0c      	cmp	r3, #12
 8008dde:	d005      	beq.n	8008dec <HAL_UART_RegisterCallback+0x130>
 8008de0:	e009      	b.n	8008df6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008dea:	e019      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008df4:	e014      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
        break;
 8008e0a:	e009      	b.n	8008e20 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop

08008e30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	@ 0x28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d167      	bne.n	8008f18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <HAL_UART_Transmit_DMA+0x24>
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e060      	b.n	8008f1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	88fa      	ldrh	r2, [r7, #6]
 8008e62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	88fa      	ldrh	r2, [r7, #6]
 8008e6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2221      	movs	r2, #33	@ 0x21
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d028      	beq.n	8008ed8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e8a:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <HAL_UART_Transmit_DMA+0xf4>)
 8008e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e92:	4a25      	ldr	r2, [pc, #148]	@ (8008f28 <HAL_UART_Transmit_DMA+0xf8>)
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e9a:	4a24      	ldr	r2, [pc, #144]	@ (8008f2c <HAL_UART_Transmit_DMA+0xfc>)
 8008e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3328      	adds	r3, #40	@ 0x28
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	f7fb fc47 	bl	800474c <HAL_DMA_Start_IT>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2210      	movs	r2, #16
 8008ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e020      	b.n	8008f1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2240      	movs	r2, #64	@ 0x40
 8008ede:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f00:	623a      	str	r2, [r7, #32]
 8008f02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	69f9      	ldr	r1, [r7, #28]
 8008f06:	6a3a      	ldr	r2, [r7, #32]
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e5      	bne.n	8008ee0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e000      	b.n	8008f1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f18:	2302      	movs	r3, #2
  }
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3728      	adds	r7, #40	@ 0x28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	0800a45b 	.word	0x0800a45b
 8008f28:	0800a4f9 	.word	0x0800a4f9
 8008f2c:	0800a693 	.word	0x0800a693

08008f30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	@ 0x28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d137      	bne.n	8008fb8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_UART_Receive_DMA+0x24>
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e030      	b.n	8008fba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a18      	ldr	r2, [pc, #96]	@ (8008fc4 <HAL_UART_Receive_DMA+0x94>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d01f      	beq.n	8008fa8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d018      	beq.n	8008fa8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	623b      	str	r3, [r7, #32]
 8008f96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	461a      	mov	r2, r3
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f001 f906 	bl	800a1c0 <UART_Start_Receive_DMA>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	e000      	b.n	8008fba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fb8:	2302      	movs	r3, #2
  }
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3728      	adds	r7, #40	@ 0x28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	40008000 	.word	0x40008000

08008fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b0ba      	sub	sp, #232	@ 0xe8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ff2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11b      	bne.n	800903c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b00      	cmp	r3, #0
 800900e:	d015      	beq.n	800903c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800901c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d009      	beq.n	800903c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 82f3 	beq.w	8009618 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
      }
      return;
 800903a:	e2ed      	b.n	8009618 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800903c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8129 	beq.w	8009298 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009046:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800904a:	4b90      	ldr	r3, [pc, #576]	@ (800928c <HAL_UART_IRQHandler+0x2c4>)
 800904c:	4013      	ands	r3, r2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009052:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009056:	4b8e      	ldr	r3, [pc, #568]	@ (8009290 <HAL_UART_IRQHandler+0x2c8>)
 8009058:	4013      	ands	r3, r2
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 811c 	beq.w	8009298 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d011      	beq.n	8009090 <HAL_UART_IRQHandler+0xc8>
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2201      	movs	r2, #1
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009086:	f043 0201 	orr.w	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d011      	beq.n	80090c0 <HAL_UART_IRQHandler+0xf8>
 800909c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2202      	movs	r2, #2
 80090ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b6:	f043 0204 	orr.w	r2, r3, #4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d011      	beq.n	80090f0 <HAL_UART_IRQHandler+0x128>
 80090cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2204      	movs	r2, #4
 80090de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e6:	f043 0202 	orr.w	r2, r3, #2
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d017      	beq.n	800912c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009108:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800910c:	4b5f      	ldr	r3, [pc, #380]	@ (800928c <HAL_UART_IRQHandler+0x2c4>)
 800910e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2208      	movs	r2, #8
 800911a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009122:	f043 0208 	orr.w	r2, r3, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800912c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009134:	2b00      	cmp	r3, #0
 8009136:	d012      	beq.n	800915e <HAL_UART_IRQHandler+0x196>
 8009138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800913c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00c      	beq.n	800915e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800914c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009154:	f043 0220 	orr.w	r2, r3, #32
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8259 	beq.w	800961c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d013      	beq.n	800919e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b2:	2b40      	cmp	r3, #64	@ 0x40
 80091b4:	d005      	beq.n	80091c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d058      	beq.n	8009274 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f8e3 	bl	800a38e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d2:	2b40      	cmp	r3, #64	@ 0x40
 80091d4:	d148      	bne.n	8009268 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3308      	adds	r3, #8
 80091dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3308      	adds	r3, #8
 80091fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800920e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800921a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1d9      	bne.n	80091d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009228:	2b00      	cmp	r3, #0
 800922a:	d017      	beq.n	800925c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009232:	4a18      	ldr	r2, [pc, #96]	@ (8009294 <HAL_UART_IRQHandler+0x2cc>)
 8009234:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923c:	4618      	mov	r0, r3
 800923e:	f7fb fb59 	bl	80048f4 <HAL_DMA_Abort_IT>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01f      	beq.n	8009288 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009256:	4610      	mov	r0, r2
 8009258:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800925a:	e015      	b.n	8009288 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009266:	e00f      	b.n	8009288 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009272:	e009      	b.n	8009288 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009286:	e1c9      	b.n	800961c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	bf00      	nop
    return;
 800928a:	e1c7      	b.n	800961c <HAL_UART_IRQHandler+0x654>
 800928c:	10000001 	.word	0x10000001
 8009290:	04000120 	.word	0x04000120
 8009294:	0800a717 	.word	0x0800a717

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800929c:	2b01      	cmp	r3, #1
 800929e:	f040 8157 	bne.w	8009550 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8150 	beq.w	8009550 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8149 	beq.w	8009550 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2210      	movs	r2, #16
 80092c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	f040 80bd 	bne.w	8009450 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8199 	beq.w	8009620 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092f8:	429a      	cmp	r2, r3
 80092fa:	f080 8191 	bcs.w	8009620 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	f040 8087 	bne.w	800942a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800934a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800935e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1da      	bne.n	800931c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800938a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800938e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800939c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e1      	bne.n	8009366 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e3      	bne.n	80093a2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800940c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e4      	bne.n	80093e8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009424:	4618      	mov	r0, r3
 8009426:	f7fb fa0c 	bl	8004842 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009442:	b292      	uxth	r2, r2
 8009444:	1a8a      	subs	r2, r1, r2
 8009446:	b292      	uxth	r2, r2
 8009448:	4611      	mov	r1, r2
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800944e:	e0e7      	b.n	8009620 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800945c:	b29b      	uxth	r3, r3
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80d9 	beq.w	8009624 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 80d4 	beq.w	8009624 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800949e:	647b      	str	r3, [r7, #68]	@ 0x44
 80094a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e4      	bne.n	800947c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	623b      	str	r3, [r7, #32]
   return(result);
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3308      	adds	r3, #8
 80094d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094da:	633a      	str	r2, [r7, #48]	@ 0x30
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e1      	bne.n	80094b2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0310 	bic.w	r3, r3, #16
 8009516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	69b9      	ldr	r1, [r7, #24]
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	617b      	str	r3, [r7, #20]
   return(result);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009544:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009548:	4611      	mov	r1, r2
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800954e:	e069      	b.n	8009624 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d010      	beq.n	800957e <HAL_UART_IRQHandler+0x5b6>
 800955c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009570:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800957c:	e055      	b.n	800962a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800957e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009586:	2b00      	cmp	r3, #0
 8009588:	d014      	beq.n	80095b4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800958a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009592:	2b00      	cmp	r3, #0
 8009594:	d105      	bne.n	80095a2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800959a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d008      	beq.n	80095b4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d03e      	beq.n	8009628 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
    }
    return;
 80095b2:	e039      	b.n	8009628 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <HAL_UART_IRQHandler+0x60c>
 80095c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f8ba 	bl	800a746 <UART_EndTransmit_IT>
    return;
 80095d2:	e02a      	b.n	800962a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <HAL_UART_IRQHandler+0x630>
 80095e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095f6:	e018      	b.n	800962a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d012      	beq.n	800962a <HAL_UART_IRQHandler+0x662>
 8009604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009608:	2b00      	cmp	r3, #0
 800960a:	da0e      	bge.n	800962a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009616:	e008      	b.n	800962a <HAL_UART_IRQHandler+0x662>
      return;
 8009618:	bf00      	nop
 800961a:	e006      	b.n	800962a <HAL_UART_IRQHandler+0x662>
    return;
 800961c:	bf00      	nop
 800961e:	e004      	b.n	800962a <HAL_UART_IRQHandler+0x662>
      return;
 8009620:	bf00      	nop
 8009622:	e002      	b.n	800962a <HAL_UART_IRQHandler+0x662>
      return;
 8009624:	bf00      	nop
 8009626:	e000      	b.n	800962a <HAL_UART_IRQHandler+0x662>
    return;
 8009628:	bf00      	nop
  }
}
 800962a:	37e8      	adds	r7, #232	@ 0xe8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a09      	ldr	r2, [pc, #36]	@ (800971c <HAL_UART_ReceiverTimeout_Config+0x34>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	615a      	str	r2, [r3, #20]
  }
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	40008000 	.word	0x40008000

08009720 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a18      	ldr	r2, [pc, #96]	@ (8009790 <HAL_UART_EnableReceiverTimeout+0x70>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d027      	beq.n	8009782 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009738:	2b20      	cmp	r3, #32
 800973a:	d120      	bne.n	800977e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UART_EnableReceiverTimeout+0x2a>
 8009746:	2302      	movs	r3, #2
 8009748:	e01c      	b.n	8009784 <HAL_UART_EnableReceiverTimeout+0x64>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2224      	movs	r2, #36	@ 0x24
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009768:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2220      	movs	r2, #32
 800976e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	e002      	b.n	8009784 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800977e:	2302      	movs	r3, #2
 8009780:	e000      	b.n	8009784 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40008000 	.word	0x40008000

08009794 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009824 <UART_InitCallbacksToDefault+0x74>)
 80097bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <UART_InitCallbacksToDefault+0x78>)
 80097c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a18      	ldr	r2, [pc, #96]	@ (800982c <UART_InitCallbacksToDefault+0x7c>)
 80097cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a17      	ldr	r2, [pc, #92]	@ (8009830 <UART_InitCallbacksToDefault+0x80>)
 80097d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a16      	ldr	r2, [pc, #88]	@ (8009834 <UART_InitCallbacksToDefault+0x84>)
 80097dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a15      	ldr	r2, [pc, #84]	@ (8009838 <UART_InitCallbacksToDefault+0x88>)
 80097e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a14      	ldr	r2, [pc, #80]	@ (800983c <UART_InitCallbacksToDefault+0x8c>)
 80097ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a13      	ldr	r2, [pc, #76]	@ (8009840 <UART_InitCallbacksToDefault+0x90>)
 80097f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a12      	ldr	r2, [pc, #72]	@ (8009844 <UART_InitCallbacksToDefault+0x94>)
 80097fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a11      	ldr	r2, [pc, #68]	@ (8009848 <UART_InitCallbacksToDefault+0x98>)
 8009804:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a10      	ldr	r2, [pc, #64]	@ (800984c <UART_InitCallbacksToDefault+0x9c>)
 800980c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a0f      	ldr	r2, [pc, #60]	@ (8009850 <UART_InitCallbacksToDefault+0xa0>)
 8009814:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	08009645 	.word	0x08009645
 8009828:	08009631 	.word	0x08009631
 800982c:	0800966d 	.word	0x0800966d
 8009830:	08009659 	.word	0x08009659
 8009834:	08009681 	.word	0x08009681
 8009838:	08009695 	.word	0x08009695
 800983c:	080096a9 	.word	0x080096a9
 8009840:	080096bd 	.word	0x080096bd
 8009844:	0800a7a1 	.word	0x0800a7a1
 8009848:	0800a7b5 	.word	0x0800a7b5
 800984c:	0800a7c9 	.word	0x0800a7c9
 8009850:	080096d1 	.word	0x080096d1

08009854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009858:	b08c      	sub	sp, #48	@ 0x30
 800985a:	af00      	add	r7, sp, #0
 800985c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	431a      	orrs	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	431a      	orrs	r2, r3
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	4313      	orrs	r3, r2
 800987a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4baa      	ldr	r3, [pc, #680]	@ (8009b2c <UART_SetConfig+0x2d8>)
 8009884:	4013      	ands	r3, r2
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800988c:	430b      	orrs	r3, r1
 800988e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	68da      	ldr	r2, [r3, #12]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a9f      	ldr	r2, [pc, #636]	@ (8009b30 <UART_SetConfig+0x2dc>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d004      	beq.n	80098c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098bc:	4313      	orrs	r3, r2
 80098be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098d4:	430b      	orrs	r3, r1
 80098d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098de:	f023 010f 	bic.w	r1, r3, #15
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a90      	ldr	r2, [pc, #576]	@ (8009b34 <UART_SetConfig+0x2e0>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d125      	bne.n	8009944 <UART_SetConfig+0xf0>
 80098f8:	4b8f      	ldr	r3, [pc, #572]	@ (8009b38 <UART_SetConfig+0x2e4>)
 80098fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b03      	cmp	r3, #3
 8009904:	d81a      	bhi.n	800993c <UART_SetConfig+0xe8>
 8009906:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <UART_SetConfig+0xb8>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800991d 	.word	0x0800991d
 8009910:	0800992d 	.word	0x0800992d
 8009914:	08009925 	.word	0x08009925
 8009918:	08009935 	.word	0x08009935
 800991c:	2301      	movs	r3, #1
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009922:	e116      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009924:	2302      	movs	r3, #2
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992a:	e112      	b.n	8009b52 <UART_SetConfig+0x2fe>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009932:	e10e      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993a:	e10a      	b.n	8009b52 <UART_SetConfig+0x2fe>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009942:	e106      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a7c      	ldr	r2, [pc, #496]	@ (8009b3c <UART_SetConfig+0x2e8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d138      	bne.n	80099c0 <UART_SetConfig+0x16c>
 800994e:	4b7a      	ldr	r3, [pc, #488]	@ (8009b38 <UART_SetConfig+0x2e4>)
 8009950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009954:	f003 030c 	and.w	r3, r3, #12
 8009958:	2b0c      	cmp	r3, #12
 800995a:	d82d      	bhi.n	80099b8 <UART_SetConfig+0x164>
 800995c:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x110>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009999 	.word	0x08009999
 8009968:	080099b9 	.word	0x080099b9
 800996c:	080099b9 	.word	0x080099b9
 8009970:	080099b9 	.word	0x080099b9
 8009974:	080099a9 	.word	0x080099a9
 8009978:	080099b9 	.word	0x080099b9
 800997c:	080099b9 	.word	0x080099b9
 8009980:	080099b9 	.word	0x080099b9
 8009984:	080099a1 	.word	0x080099a1
 8009988:	080099b9 	.word	0x080099b9
 800998c:	080099b9 	.word	0x080099b9
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099b1 	.word	0x080099b1
 8009998:	2300      	movs	r3, #0
 800999a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999e:	e0d8      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099a0:	2302      	movs	r3, #2
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a6:	e0d4      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099a8:	2304      	movs	r3, #4
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ae:	e0d0      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099b0:	2308      	movs	r3, #8
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b6:	e0cc      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099b8:	2310      	movs	r3, #16
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099be:	e0c8      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009b40 <UART_SetConfig+0x2ec>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d125      	bne.n	8009a16 <UART_SetConfig+0x1c2>
 80099ca:	4b5b      	ldr	r3, [pc, #364]	@ (8009b38 <UART_SetConfig+0x2e4>)
 80099cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099d4:	2b30      	cmp	r3, #48	@ 0x30
 80099d6:	d016      	beq.n	8009a06 <UART_SetConfig+0x1b2>
 80099d8:	2b30      	cmp	r3, #48	@ 0x30
 80099da:	d818      	bhi.n	8009a0e <UART_SetConfig+0x1ba>
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d00a      	beq.n	80099f6 <UART_SetConfig+0x1a2>
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d814      	bhi.n	8009a0e <UART_SetConfig+0x1ba>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <UART_SetConfig+0x19a>
 80099e8:	2b10      	cmp	r3, #16
 80099ea:	d008      	beq.n	80099fe <UART_SetConfig+0x1aa>
 80099ec:	e00f      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f4:	e0ad      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099f6:	2302      	movs	r3, #2
 80099f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099fc:	e0a9      	b.n	8009b52 <UART_SetConfig+0x2fe>
 80099fe:	2304      	movs	r3, #4
 8009a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a04:	e0a5      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a06:	2308      	movs	r3, #8
 8009a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0c:	e0a1      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a0e:	2310      	movs	r3, #16
 8009a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a14:	e09d      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8009b44 <UART_SetConfig+0x2f0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d125      	bne.n	8009a6c <UART_SetConfig+0x218>
 8009a20:	4b45      	ldr	r3, [pc, #276]	@ (8009b38 <UART_SetConfig+0x2e4>)
 8009a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a2c:	d016      	beq.n	8009a5c <UART_SetConfig+0x208>
 8009a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a30:	d818      	bhi.n	8009a64 <UART_SetConfig+0x210>
 8009a32:	2b80      	cmp	r3, #128	@ 0x80
 8009a34:	d00a      	beq.n	8009a4c <UART_SetConfig+0x1f8>
 8009a36:	2b80      	cmp	r3, #128	@ 0x80
 8009a38:	d814      	bhi.n	8009a64 <UART_SetConfig+0x210>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <UART_SetConfig+0x1f0>
 8009a3e:	2b40      	cmp	r3, #64	@ 0x40
 8009a40:	d008      	beq.n	8009a54 <UART_SetConfig+0x200>
 8009a42:	e00f      	b.n	8009a64 <UART_SetConfig+0x210>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e082      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e07e      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a5a:	e07a      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a62:	e076      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	e072      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a35      	ldr	r2, [pc, #212]	@ (8009b48 <UART_SetConfig+0x2f4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d12a      	bne.n	8009acc <UART_SetConfig+0x278>
 8009a76:	4b30      	ldr	r3, [pc, #192]	@ (8009b38 <UART_SetConfig+0x2e4>)
 8009a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a84:	d01a      	beq.n	8009abc <UART_SetConfig+0x268>
 8009a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a8a:	d81b      	bhi.n	8009ac4 <UART_SetConfig+0x270>
 8009a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a90:	d00c      	beq.n	8009aac <UART_SetConfig+0x258>
 8009a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a96:	d815      	bhi.n	8009ac4 <UART_SetConfig+0x270>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <UART_SetConfig+0x250>
 8009a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa0:	d008      	beq.n	8009ab4 <UART_SetConfig+0x260>
 8009aa2:	e00f      	b.n	8009ac4 <UART_SetConfig+0x270>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aaa:	e052      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009aac:	2302      	movs	r3, #2
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e04e      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aba:	e04a      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009abc:	2308      	movs	r3, #8
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e046      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e042      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a17      	ldr	r2, [pc, #92]	@ (8009b30 <UART_SetConfig+0x2dc>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d13a      	bne.n	8009b4c <UART_SetConfig+0x2f8>
 8009ad6:	4b18      	ldr	r3, [pc, #96]	@ (8009b38 <UART_SetConfig+0x2e4>)
 8009ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009adc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ae0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ae4:	d01a      	beq.n	8009b1c <UART_SetConfig+0x2c8>
 8009ae6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aea:	d81b      	bhi.n	8009b24 <UART_SetConfig+0x2d0>
 8009aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af0:	d00c      	beq.n	8009b0c <UART_SetConfig+0x2b8>
 8009af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af6:	d815      	bhi.n	8009b24 <UART_SetConfig+0x2d0>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <UART_SetConfig+0x2b0>
 8009afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b00:	d008      	beq.n	8009b14 <UART_SetConfig+0x2c0>
 8009b02:	e00f      	b.n	8009b24 <UART_SetConfig+0x2d0>
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e022      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b12:	e01e      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1a:	e01a      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b22:	e016      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b2a:	e012      	b.n	8009b52 <UART_SetConfig+0x2fe>
 8009b2c:	cfff69f3 	.word	0xcfff69f3
 8009b30:	40008000 	.word	0x40008000
 8009b34:	40013800 	.word	0x40013800
 8009b38:	40021000 	.word	0x40021000
 8009b3c:	40004400 	.word	0x40004400
 8009b40:	40004800 	.word	0x40004800
 8009b44:	40004c00 	.word	0x40004c00
 8009b48:	40005000 	.word	0x40005000
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4aae      	ldr	r2, [pc, #696]	@ (8009e10 <UART_SetConfig+0x5bc>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	f040 8097 	bne.w	8009c8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d823      	bhi.n	8009bae <UART_SetConfig+0x35a>
 8009b66:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <UART_SetConfig+0x318>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009baf 	.word	0x08009baf
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009baf 	.word	0x08009baf
 8009b7c:	08009b9f 	.word	0x08009b9f
 8009b80:	08009baf 	.word	0x08009baf
 8009b84:	08009baf 	.word	0x08009baf
 8009b88:	08009baf 	.word	0x08009baf
 8009b8c:	08009ba7 	.word	0x08009ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b90:	f7fb ffa0 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8009b94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b96:	e010      	b.n	8009bba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b98:	4b9e      	ldr	r3, [pc, #632]	@ (8009e14 <UART_SetConfig+0x5c0>)
 8009b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b9c:	e00d      	b.n	8009bba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b9e:	f7fb ff2b 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8009ba2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ba4:	e009      	b.n	8009bba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bac:	e005      	b.n	8009bba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8130 	beq.w	8009e22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc6:	4a94      	ldr	r2, [pc, #592]	@ (8009e18 <UART_SetConfig+0x5c4>)
 8009bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d305      	bcc.n	8009bf2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d903      	bls.n	8009bfa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bf8:	e113      	b.n	8009e22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	60bb      	str	r3, [r7, #8]
 8009c00:	60fa      	str	r2, [r7, #12]
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c06:	4a84      	ldr	r2, [pc, #528]	@ (8009e18 <UART_SetConfig+0x5c4>)
 8009c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	603b      	str	r3, [r7, #0]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c1c:	f7f7 f8f8 	bl	8000e10 <__aeabi_uldivmod>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4610      	mov	r0, r2
 8009c26:	4619      	mov	r1, r3
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	020b      	lsls	r3, r1, #8
 8009c32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c36:	0202      	lsls	r2, r0, #8
 8009c38:	6979      	ldr	r1, [r7, #20]
 8009c3a:	6849      	ldr	r1, [r1, #4]
 8009c3c:	0849      	lsrs	r1, r1, #1
 8009c3e:	2000      	movs	r0, #0
 8009c40:	460c      	mov	r4, r1
 8009c42:	4605      	mov	r5, r0
 8009c44:	eb12 0804 	adds.w	r8, r2, r4
 8009c48:	eb43 0905 	adc.w	r9, r3, r5
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	469a      	mov	sl, r3
 8009c54:	4693      	mov	fp, r2
 8009c56:	4652      	mov	r2, sl
 8009c58:	465b      	mov	r3, fp
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f7 f8d7 	bl	8000e10 <__aeabi_uldivmod>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4613      	mov	r3, r2
 8009c68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c70:	d308      	bcc.n	8009c84 <UART_SetConfig+0x430>
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c78:	d204      	bcs.n	8009c84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	60da      	str	r2, [r3, #12]
 8009c82:	e0ce      	b.n	8009e22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c8a:	e0ca      	b.n	8009e22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c94:	d166      	bne.n	8009d64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009c96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d827      	bhi.n	8009cee <UART_SetConfig+0x49a>
 8009c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca4 <UART_SetConfig+0x450>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cd1 	.word	0x08009cd1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	08009cef 	.word	0x08009cef
 8009cb4:	08009cdf 	.word	0x08009cdf
 8009cb8:	08009cef 	.word	0x08009cef
 8009cbc:	08009cef 	.word	0x08009cef
 8009cc0:	08009cef 	.word	0x08009cef
 8009cc4:	08009ce7 	.word	0x08009ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cc8:	f7fb ff04 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8009ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cce:	e014      	b.n	8009cfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cd0:	f7fb ff16 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8009cd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cd6:	e010      	b.n	8009cfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8009e14 <UART_SetConfig+0x5c0>)
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cdc:	e00d      	b.n	8009cfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cde:	f7fb fe8b 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8009ce2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ce4:	e009      	b.n	8009cfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cec:	e005      	b.n	8009cfa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 8090 	beq.w	8009e22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d06:	4a44      	ldr	r2, [pc, #272]	@ (8009e18 <UART_SetConfig+0x5c4>)
 8009d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d14:	005a      	lsls	r2, r3, #1
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	441a      	add	r2, r3
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	d916      	bls.n	8009d5c <UART_SetConfig+0x508>
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d34:	d212      	bcs.n	8009d5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f023 030f 	bic.w	r3, r3, #15
 8009d3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	8bfb      	ldrh	r3, [r7, #30]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	8bfa      	ldrh	r2, [r7, #30]
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	e062      	b.n	8009e22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d62:	e05e      	b.n	8009e22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d828      	bhi.n	8009dbe <UART_SetConfig+0x56a>
 8009d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d74 <UART_SetConfig+0x520>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009da1 	.word	0x08009da1
 8009d7c:	08009da9 	.word	0x08009da9
 8009d80:	08009dbf 	.word	0x08009dbf
 8009d84:	08009daf 	.word	0x08009daf
 8009d88:	08009dbf 	.word	0x08009dbf
 8009d8c:	08009dbf 	.word	0x08009dbf
 8009d90:	08009dbf 	.word	0x08009dbf
 8009d94:	08009db7 	.word	0x08009db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d98:	f7fb fe9c 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8009d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d9e:	e014      	b.n	8009dca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da0:	f7fb feae 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8009da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009da6:	e010      	b.n	8009dca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <UART_SetConfig+0x5c0>)
 8009daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dac:	e00d      	b.n	8009dca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dae:	f7fb fe23 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8009db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009db4:	e009      	b.n	8009dca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dbc:	e005      	b.n	8009dca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d028      	beq.n	8009e22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	4a10      	ldr	r2, [pc, #64]	@ (8009e18 <UART_SetConfig+0x5c4>)
 8009dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d910      	bls.n	8009e1c <UART_SetConfig+0x5c8>
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e00:	d20c      	bcs.n	8009e1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e009      	b.n	8009e22 <UART_SetConfig+0x5ce>
 8009e0e:	bf00      	nop
 8009e10:	40008000 	.word	0x40008000
 8009e14:	00f42400 	.word	0x00f42400
 8009e18:	0800ab14 	.word	0x0800ab14
      }
      else
      {
        ret = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2200      	movs	r2, #0
 8009e36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3730      	adds	r7, #48	@ 0x30
 8009e46:	46bd      	mov	sp, r7
 8009e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00a      	beq.n	8009e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00a      	beq.n	8009e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00a      	beq.n	8009efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01a      	beq.n	8009f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f4a:	d10a      	bne.n	8009f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00a      	beq.n	8009f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	605a      	str	r2, [r3, #4]
  }
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b098      	sub	sp, #96	@ 0x60
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fa0:	f7fa f9ee 	bl	8004380 <HAL_GetTick>
 8009fa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0308 	and.w	r3, r3, #8
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d12f      	bne.n	800a014 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f88e 	bl	800a0e4 <UART_WaitOnFlagUntilTimeout>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d022      	beq.n	800a014 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e063      	b.n	800a0dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d149      	bne.n	800a0b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a022:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a02a:	2200      	movs	r2, #0
 800a02c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f857 	bl	800a0e4 <UART_WaitOnFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d03c      	beq.n	800a0b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	623b      	str	r3, [r7, #32]
   return(result);
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a05c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e6      	bne.n	800a03c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 0301 	bic.w	r3, r3, #1
 800a084:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a08e:	61fa      	str	r2, [r7, #28]
 800a090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	69b9      	ldr	r1, [r7, #24]
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	617b      	str	r3, [r7, #20]
   return(result);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e5      	bne.n	800a06e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e012      	b.n	800a0dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3758      	adds	r7, #88	@ 0x58
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f4:	e04f      	b.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d04b      	beq.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fe:	f7fa f93f 	bl	8004380 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <UART_WaitOnFlagUntilTimeout+0x30>
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e04e      	b.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	2b00      	cmp	r3, #0
 800a124:	d037      	beq.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b80      	cmp	r3, #128	@ 0x80
 800a12a:	d034      	beq.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b40      	cmp	r3, #64	@ 0x40
 800a130:	d031      	beq.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d110      	bne.n	800a162 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2208      	movs	r2, #8
 800a146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f920 	bl	800a38e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2208      	movs	r2, #8
 800a152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e029      	b.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a16c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a170:	d111      	bne.n	800a196 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a17a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f906 	bl	800a38e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e00f      	b.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	bf0c      	ite	eq
 800a1a6:	2301      	moveq	r3, #1
 800a1a8:	2300      	movne	r3, #0
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d0a0      	beq.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b096      	sub	sp, #88	@ 0x58
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2222      	movs	r2, #34	@ 0x22
 800a1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d02d      	beq.n	800a252 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fc:	4a40      	ldr	r2, [pc, #256]	@ (800a300 <UART_Start_Receive_DMA+0x140>)
 800a1fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a206:	4a3f      	ldr	r2, [pc, #252]	@ (800a304 <UART_Start_Receive_DMA+0x144>)
 800a208:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a210:	4a3d      	ldr	r2, [pc, #244]	@ (800a308 <UART_Start_Receive_DMA+0x148>)
 800a212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a21a:	2200      	movs	r2, #0
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3324      	adds	r3, #36	@ 0x24
 800a22a:	4619      	mov	r1, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a230:	461a      	mov	r2, r3
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	f7fa fa8a 	bl	800474c <HAL_DMA_Start_IT>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2210      	movs	r2, #16
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e051      	b.n	800a2f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d018      	beq.n	800a28c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a26e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a27a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a27e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e6      	bne.n	800a25a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3308      	adds	r3, #8
 800a292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2ac:	637a      	str	r2, [r7, #52]	@ 0x34
 800a2ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2b4:	e841 2300 	strex	r3, r2, [r1]
 800a2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e5      	bne.n	800a28c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	e853 3f00 	ldrex	r3, [r3]
 800a2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2e0:	623a      	str	r2, [r7, #32]
 800a2e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	6a3a      	ldr	r2, [r7, #32]
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e5      	bne.n	800a2c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3758      	adds	r7, #88	@ 0x58
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	0800a519 	.word	0x0800a519
 800a304:	0800a64d 	.word	0x0800a64d
 800a308:	0800a693 	.word	0x0800a693

0800a30c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b08f      	sub	sp, #60	@ 0x3c
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	61fb      	str	r3, [r7, #28]
   return(result);
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a328:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a334:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1e6      	bne.n	800a314 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3308      	adds	r3, #8
 800a34c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	e853 3f00 	ldrex	r3, [r3]
 800a354:	60bb      	str	r3, [r7, #8]
   return(result);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a35c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3308      	adds	r3, #8
 800a364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a366:	61ba      	str	r2, [r7, #24]
 800a368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	6979      	ldr	r1, [r7, #20]
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	613b      	str	r3, [r7, #16]
   return(result);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e5      	bne.n	800a346 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a382:	bf00      	nop
 800a384:	373c      	adds	r7, #60	@ 0x3c
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a38e:	b480      	push	{r7}
 800a390:	b095      	sub	sp, #84	@ 0x54
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e6      	bne.n	800a396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f4:	e841 2300 	strex	r3, r2, [r1]
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e3      	bne.n	800a3c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a404:	2b01      	cmp	r3, #1
 800a406:	d118      	bne.n	800a43a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	60bb      	str	r3, [r7, #8]
   return(result);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f023 0310 	bic.w	r3, r3, #16
 800a41c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a426:	61bb      	str	r3, [r7, #24]
 800a428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	613b      	str	r3, [r7, #16]
   return(result);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a44e:	bf00      	nop
 800a450:	3754      	adds	r7, #84	@ 0x54
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b090      	sub	sp, #64	@ 0x40
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d137      	bne.n	800a4e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a478:	2200      	movs	r2, #0
 800a47a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3308      	adds	r3, #8
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	623b      	str	r3, [r7, #32]
   return(result);
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a494:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3308      	adds	r3, #8
 800a49c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a49e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e5      	bne.n	800a47e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	e853 3f00 	ldrex	r3, [r3]
 800a4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	e841 2300 	strex	r3, r2, [r1]
 800a4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e6      	bne.n	800a4b2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4e4:	e004      	b.n	800a4f0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a4ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a4ee:	4798      	blx	r3
}
 800a4f0:	bf00      	nop
 800a4f2:	3740      	adds	r7, #64	@ 0x40
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a504:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b09c      	sub	sp, #112	@ 0x70
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a524:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d171      	bne.n	800a618 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a536:	2200      	movs	r2, #0
 800a538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a53c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a550:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a55a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a55c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e6      	bne.n	800a53c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	667b      	str	r3, [r7, #100]	@ 0x64
 800a586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a58e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a590:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a59c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e5      	bne.n	800a5a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d118      	bne.n	800a618 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0310 	bic.w	r3, r3, #16
 800a5fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	69b9      	ldr	r1, [r7, #24]
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	617b      	str	r3, [r7, #20]
   return(result);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a61a:	2200      	movs	r2, #0
 800a61c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a622:	2b01      	cmp	r3, #1
 800a624:	d109      	bne.n	800a63a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a628:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a62c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a62e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a632:	4611      	mov	r1, r2
 800a634:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a636:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a638:	e004      	b.n	800a644 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a63c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a640:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a642:	4798      	blx	r3
}
 800a644:	bf00      	nop
 800a646:	3770      	adds	r7, #112	@ 0x70
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a658:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a664:	2b01      	cmp	r3, #1
 800a666:	d10b      	bne.n	800a680 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a674:	0852      	lsrs	r2, r2, #1
 800a676:	b292      	uxth	r2, r2
 800a678:	4611      	mov	r1, r2
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a67e:	e004      	b.n	800a68a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	4798      	blx	r3
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b086      	sub	sp, #24
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ba:	2b80      	cmp	r3, #128	@ 0x80
 800a6bc:	d109      	bne.n	800a6d2 <UART_DMAError+0x40>
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b21      	cmp	r3, #33	@ 0x21
 800a6c2:	d106      	bne.n	800a6d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a6cc:	6978      	ldr	r0, [r7, #20]
 800a6ce:	f7ff fe1d 	bl	800a30c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6dc:	2b40      	cmp	r3, #64	@ 0x40
 800a6de:	d109      	bne.n	800a6f4 <UART_DMAError+0x62>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b22      	cmp	r3, #34	@ 0x22
 800a6e4:	d106      	bne.n	800a6f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a6ee:	6978      	ldr	r0, [r7, #20]
 800a6f0:	f7ff fe4d 	bl	800a38e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6fa:	f043 0210 	orr.w	r2, r3, #16
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a70e:	bf00      	nop
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b088      	sub	sp, #32
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a762:	61fb      	str	r3, [r7, #28]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6979      	ldr	r1, [r7, #20]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	613b      	str	r3, [r7, #16]
   return(result);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e6      	bne.n	800a74e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a798:	bf00      	nop
 800a79a:	3720      	adds	r7, #32
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d101      	bne.n	800a7f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	e027      	b.n	800a842 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2224      	movs	r2, #36	@ 0x24
 800a7fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0201 	bic.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a820:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a862:	2302      	movs	r3, #2
 800a864:	e02d      	b.n	800a8c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2224      	movs	r2, #36	@ 0x24
 800a872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f850 	bl	800a948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e02d      	b.n	800a93e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2224      	movs	r2, #36	@ 0x24
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f812 	bl	800a948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2220      	movs	r2, #32
 800a930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a954:	2b00      	cmp	r3, #0
 800a956:	d108      	bne.n	800a96a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a968:	e031      	b.n	800a9ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a96a:	2308      	movs	r3, #8
 800a96c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a96e:	2308      	movs	r3, #8
 800a970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	0e5b      	lsrs	r3, r3, #25
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0307 	and.w	r3, r3, #7
 800a980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	0f5b      	lsrs	r3, r3, #29
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	7b3a      	ldrb	r2, [r7, #12]
 800a996:	4911      	ldr	r1, [pc, #68]	@ (800a9dc <UARTEx_SetNbDataToProcess+0x94>)
 800a998:	5c8a      	ldrb	r2, [r1, r2]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a99e:	7b3a      	ldrb	r2, [r7, #12]
 800a9a0:	490f      	ldr	r1, [pc, #60]	@ (800a9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	7b7a      	ldrb	r2, [r7, #13]
 800a9b4:	4909      	ldr	r1, [pc, #36]	@ (800a9dc <UARTEx_SetNbDataToProcess+0x94>)
 800a9b6:	5c8a      	ldrb	r2, [r1, r2]
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9bc:	7b7a      	ldrb	r2, [r7, #13]
 800a9be:	4908      	ldr	r1, [pc, #32]	@ (800a9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9ce:	bf00      	nop
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	0800ab2c 	.word	0x0800ab2c
 800a9e0:	0800ab34 	.word	0x0800ab34

0800a9e4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	ed93 7a06 	vldr	s14, [r3, #24]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	edd3 7a07 	vldr	s15, [r3, #28]
 800a9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	edd3 7a06 	vldr	s15, [r3, #24]
 800aa14:	eeb1 7a67 	vneg.f32	s14, s15
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a1a      	ldr	r2, [r3, #32]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	220c      	movs	r2, #12
 800aa40:	2100      	movs	r1, #0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f804 	bl	800aa50 <memset>
  }

}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <memset>:
 800aa50:	4402      	add	r2, r0
 800aa52:	4603      	mov	r3, r0
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d100      	bne.n	800aa5a <memset+0xa>
 800aa58:	4770      	bx	lr
 800aa5a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa5e:	e7f9      	b.n	800aa54 <memset+0x4>

0800aa60 <__libc_init_array>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4d0d      	ldr	r5, [pc, #52]	@ (800aa98 <__libc_init_array+0x38>)
 800aa64:	4c0d      	ldr	r4, [pc, #52]	@ (800aa9c <__libc_init_array+0x3c>)
 800aa66:	1b64      	subs	r4, r4, r5
 800aa68:	10a4      	asrs	r4, r4, #2
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	d109      	bne.n	800aa84 <__libc_init_array+0x24>
 800aa70:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa0 <__libc_init_array+0x40>)
 800aa72:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa4 <__libc_init_array+0x44>)
 800aa74:	f000 f826 	bl	800aac4 <_init>
 800aa78:	1b64      	subs	r4, r4, r5
 800aa7a:	10a4      	asrs	r4, r4, #2
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	42a6      	cmp	r6, r4
 800aa80:	d105      	bne.n	800aa8e <__libc_init_array+0x2e>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa88:	4798      	blx	r3
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7ee      	b.n	800aa6c <__libc_init_array+0xc>
 800aa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa92:	4798      	blx	r3
 800aa94:	3601      	adds	r6, #1
 800aa96:	e7f2      	b.n	800aa7e <__libc_init_array+0x1e>
 800aa98:	0800ab44 	.word	0x0800ab44
 800aa9c:	0800ab44 	.word	0x0800ab44
 800aaa0:	0800ab44 	.word	0x0800ab44
 800aaa4:	0800ab48 	.word	0x0800ab48

0800aaa8 <memcpy>:
 800aaa8:	440a      	add	r2, r1
 800aaaa:	4291      	cmp	r1, r2
 800aaac:	f100 33ff 	add.w	r3, r0, #4294967295
 800aab0:	d100      	bne.n	800aab4 <memcpy+0xc>
 800aab2:	4770      	bx	lr
 800aab4:	b510      	push	{r4, lr}
 800aab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aabe:	4291      	cmp	r1, r2
 800aac0:	d1f9      	bne.n	800aab6 <memcpy+0xe>
 800aac2:	bd10      	pop	{r4, pc}

0800aac4 <_init>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr

0800aad0 <_fini>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr
