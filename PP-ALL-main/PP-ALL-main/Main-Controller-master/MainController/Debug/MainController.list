
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a790  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c8  0800a9c8  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9d0  0800a9d0  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d0  0800a9d0  0000b9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d4  0800a9d4  0000b9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a9d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001144  20000218  0800abf0  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  0800abf0  0000c35c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017be5  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7d  00000000  00000000  00023e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00026cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea5  00000000  00000000  00027f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e8  00000000  00000000  0004ff2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feaa9  00000000  00000000  00067016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165abf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  00165b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0016ab8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a950 	.word	0x0800a950

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800a950 	.word	0x0800a950

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_frsub>:
 8000ae4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae8:	e002      	b.n	8000af0 <__addsf3>
 8000aea:	bf00      	nop

08000aec <__aeabi_fsub>:
 8000aec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af0 <__addsf3>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	bf1f      	itttt	ne
 8000af4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af8:	ea92 0f03 	teqne	r2, r3
 8000afc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b04:	d06a      	beq.n	8000bdc <__addsf3+0xec>
 8000b06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b0e:	bfc1      	itttt	gt
 8000b10:	18d2      	addgt	r2, r2, r3
 8000b12:	4041      	eorgt	r1, r0
 8000b14:	4048      	eorgt	r0, r1
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	2b19      	cmp	r3, #25
 8000b1e:	bf88      	it	hi
 8000b20:	4770      	bxhi	lr
 8000b22:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4240      	negne	r0, r0
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4249      	negne	r1, r1
 8000b42:	ea92 0f03 	teq	r2, r3
 8000b46:	d03f      	beq.n	8000bc8 <__addsf3+0xd8>
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b50:	eb10 000c 	adds.w	r0, r0, ip
 8000b54:	f1c3 0320 	rsb	r3, r3, #32
 8000b58:	fa01 f103 	lsl.w	r1, r1, r3
 8000b5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__addsf3+0x78>
 8000b62:	4249      	negs	r1, r1
 8000b64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b68:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b6c:	d313      	bcc.n	8000b96 <__addsf3+0xa6>
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b72:	d306      	bcc.n	8000b82 <__addsf3+0x92>
 8000b74:	0840      	lsrs	r0, r0, #1
 8000b76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7a:	f102 0201 	add.w	r2, r2, #1
 8000b7e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b80:	d251      	bcs.n	8000c26 <__addsf3+0x136>
 8000b82:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	ea40 0003 	orr.w	r0, r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	0049      	lsls	r1, r1, #1
 8000b98:	eb40 0000 	adc.w	r0, r0, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba4:	d2ed      	bcs.n	8000b82 <__addsf3+0x92>
 8000ba6:	fab0 fc80 	clz	ip, r0
 8000baa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bae:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bb6:	bfaa      	itet	ge
 8000bb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bbc:	4252      	neglt	r2, r2
 8000bbe:	4318      	orrge	r0, r3
 8000bc0:	bfbc      	itt	lt
 8000bc2:	40d0      	lsrlt	r0, r2
 8000bc4:	4318      	orrlt	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	f092 0f00 	teq	r2, #0
 8000bcc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd0:	bf06      	itte	eq
 8000bd2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	3201      	addeq	r2, #1
 8000bd8:	3b01      	subne	r3, #1
 8000bda:	e7b5      	b.n	8000b48 <__addsf3+0x58>
 8000bdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be4:	bf18      	it	ne
 8000be6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bea:	d021      	beq.n	8000c30 <__addsf3+0x140>
 8000bec:	ea92 0f03 	teq	r2, r3
 8000bf0:	d004      	beq.n	8000bfc <__addsf3+0x10c>
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	4608      	moveq	r0, r1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea90 0f01 	teq	r0, r1
 8000c00:	bf1c      	itt	ne
 8000c02:	2000      	movne	r0, #0
 8000c04:	4770      	bxne	lr
 8000c06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0a:	d104      	bne.n	8000c16 <__addsf3+0x126>
 8000c0c:	0040      	lsls	r0, r0, #1
 8000c0e:	bf28      	it	cs
 8000c10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c14:	4770      	bx	lr
 8000c16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1a:	bf3c      	itt	cc
 8000c1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c20:	4770      	bxcc	lr
 8000c22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	4770      	bx	lr
 8000c30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c34:	bf16      	itet	ne
 8000c36:	4608      	movne	r0, r1
 8000c38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c3c:	4601      	movne	r1, r0
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	bf06      	itte	eq
 8000c42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c46:	ea90 0f01 	teqeq	r0, r1
 8000c4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_ui2f>:
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e004      	b.n	8000c60 <__aeabi_i2f+0x8>
 8000c56:	bf00      	nop

08000c58 <__aeabi_i2f>:
 8000c58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c5c:	bf48      	it	mi
 8000c5e:	4240      	negmi	r0, r0
 8000c60:	ea5f 0c00 	movs.w	ip, r0
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	e01c      	b.n	8000cae <__aeabi_l2f+0x2a>

08000c74 <__aeabi_ul2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e00a      	b.n	8000c98 <__aeabi_l2f+0x14>
 8000c82:	bf00      	nop

08000c84 <__aeabi_l2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__aeabi_l2f+0x14>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	ea5f 0c01 	movs.w	ip, r1
 8000c9c:	bf02      	ittt	eq
 8000c9e:	4684      	moveq	ip, r0
 8000ca0:	4601      	moveq	r1, r0
 8000ca2:	2000      	moveq	r0, #0
 8000ca4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca8:	bf08      	it	eq
 8000caa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb2:	fabc f28c 	clz	r2, ip
 8000cb6:	3a08      	subs	r2, #8
 8000cb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cbc:	db10      	blt.n	8000ce0 <__aeabi_l2f+0x5c>
 8000cbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	f020 0001 	biceq.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	f102 0220 	add.w	r2, r2, #32
 8000ce4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295
 8000d14:	f000 b96a 	b.w	8000fec <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f806 	bl	8000d30 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__udivmoddi4>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	9d08      	ldr	r5, [sp, #32]
 8000d36:	460c      	mov	r4, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14e      	bne.n	8000dda <__udivmoddi4+0xaa>
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	458c      	cmp	ip, r1
 8000d40:	4686      	mov	lr, r0
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	d962      	bls.n	8000e0e <__udivmoddi4+0xde>
 8000d48:	b14a      	cbz	r2, 8000d5e <__udivmoddi4+0x2e>
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	fa20 f303 	lsr.w	r3, r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d62:	fa1f f68c 	uxth.w	r6, ip
 8000d66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb04 f106 	mul.w	r1, r4, r6
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d90a      	bls.n	8000d94 <__udivmoddi4+0x64>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d86:	f080 8112 	bcs.w	8000fae <__udivmoddi4+0x27e>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 810f 	bls.w	8000fae <__udivmoddi4+0x27e>
 8000d90:	3c02      	subs	r4, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1a59      	subs	r1, r3, r1
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f606 	mul.w	r6, r0, r6
 8000daa:	429e      	cmp	r6, r3
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x94>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db6:	f080 80fc 	bcs.w	8000fb2 <__udivmoddi4+0x282>
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	f240 80f9 	bls.w	8000fb2 <__udivmoddi4+0x282>
 8000dc0:	4463      	add	r3, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	1b9b      	subs	r3, r3, r6
 8000dc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa6>
 8000dce:	40d3      	lsrs	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xba>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb4>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x150>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xcc>
 8000df6:	4290      	cmp	r0, r2
 8000df8:	f0c0 80f0 	bcc.w	8000fdc <__udivmoddi4+0x2ac>
 8000dfc:	1a86      	subs	r6, r0, r2
 8000dfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d0e6      	beq.n	8000dd6 <__udivmoddi4+0xa6>
 8000e08:	e9c5 6300 	strd	r6, r3, [r5]
 8000e0c:	e7e3      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x204>
 8000e14:	eba1 040c 	sub.w	r4, r1, ip
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e32:	fb07 f006 	mul.w	r0, r7, r6
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x11c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x11a>
 8000e44:	4298      	cmp	r0, r3
 8000e46:	f200 80cd 	bhi.w	8000fe4 <__udivmoddi4+0x2b4>
 8000e4a:	4626      	mov	r6, r4
 8000e4c:	1a1c      	subs	r4, r3, r0
 8000e4e:	fa1f f38e 	uxth.w	r3, lr
 8000e52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e56:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	429f      	cmp	r7, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x148>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x146>
 8000e70:	429f      	cmp	r7, r3
 8000e72:	f200 80b0 	bhi.w	8000fd6 <__udivmoddi4+0x2a6>
 8000e76:	4620      	mov	r0, r4
 8000e78:	1bdb      	subs	r3, r3, r7
 8000e7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x9c>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e90:	fa04 f301 	lsl.w	r3, r4, r1
 8000e94:	ea43 030c 	orr.w	r3, r3, ip
 8000e98:	40f4      	lsrs	r4, r6
 8000e9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000e9e:	0c38      	lsrs	r0, r7, #16
 8000ea0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea8:	fa1f fc87 	uxth.w	ip, r7
 8000eac:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb8:	45a1      	cmp	r9, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90a      	bls.n	8000ed6 <__udivmoddi4+0x1a6>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ec6:	f080 8084 	bcs.w	8000fd2 <__udivmoddi4+0x2a2>
 8000eca:	45a1      	cmp	r9, r4
 8000ecc:	f240 8081 	bls.w	8000fd2 <__udivmoddi4+0x2a2>
 8000ed0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	eba4 0409 	sub.w	r4, r4, r9
 8000eda:	fa1f f983 	uxth.w	r9, r3
 8000ede:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ee6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x1d2>
 8000ef2:	193c      	adds	r4, r7, r4
 8000ef4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef8:	d267      	bcs.n	8000fca <__udivmoddi4+0x29a>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d965      	bls.n	8000fca <__udivmoddi4+0x29a>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f06:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0a:	eba4 040c 	sub.w	r4, r4, ip
 8000f0e:	429c      	cmp	r4, r3
 8000f10:	46ce      	mov	lr, r9
 8000f12:	469c      	mov	ip, r3
 8000f14:	d351      	bcc.n	8000fba <__udivmoddi4+0x28a>
 8000f16:	d04e      	beq.n	8000fb6 <__udivmoddi4+0x286>
 8000f18:	b155      	cbz	r5, 8000f30 <__udivmoddi4+0x200>
 8000f1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000f1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	40cb      	lsrs	r3, r1
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	40cc      	lsrs	r4, r1
 8000f2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000f30:	2100      	movs	r1, #0
 8000f32:	e750      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000f34:	f1c2 0320 	rsb	r3, r2, #32
 8000f38:	fa20 f103 	lsr.w	r1, r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa24 f303 	lsr.w	r3, r4, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	430c      	orrs	r4, r1
 8000f48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f50:	fa1f f78c 	uxth.w	r7, ip
 8000f54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f58:	fb08 3110 	mls	r1, r8, r0, r3
 8000f5c:	0c23      	lsrs	r3, r4, #16
 8000f5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f62:	fb00 f107 	mul.w	r1, r0, r7
 8000f66:	4299      	cmp	r1, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x24c>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f72:	d22c      	bcs.n	8000fce <__udivmoddi4+0x29e>
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d92a      	bls.n	8000fce <__udivmoddi4+0x29e>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f84:	fb08 3311 	mls	r3, r8, r1, r3
 8000f88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f8c:	fb01 f307 	mul.w	r3, r1, r7
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x276>
 8000f94:	eb1c 0404 	adds.w	r4, ip, r4
 8000f98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f9c:	d213      	bcs.n	8000fc6 <__udivmoddi4+0x296>
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	d911      	bls.n	8000fc6 <__udivmoddi4+0x296>
 8000fa2:	3902      	subs	r1, #2
 8000fa4:	4464      	add	r4, ip
 8000fa6:	1ae4      	subs	r4, r4, r3
 8000fa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fac:	e739      	b.n	8000e22 <__udivmoddi4+0xf2>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	e6f0      	b.n	8000d94 <__udivmoddi4+0x64>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e706      	b.n	8000dc4 <__udivmoddi4+0x94>
 8000fb6:	45c8      	cmp	r8, r9
 8000fb8:	d2ae      	bcs.n	8000f18 <__udivmoddi4+0x1e8>
 8000fba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc2:	3801      	subs	r0, #1
 8000fc4:	e7a8      	b.n	8000f18 <__udivmoddi4+0x1e8>
 8000fc6:	4631      	mov	r1, r6
 8000fc8:	e7ed      	b.n	8000fa6 <__udivmoddi4+0x276>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	e799      	b.n	8000f02 <__udivmoddi4+0x1d2>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e7d4      	b.n	8000f7c <__udivmoddi4+0x24c>
 8000fd2:	46d6      	mov	lr, sl
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1a6>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e74d      	b.n	8000e78 <__udivmoddi4+0x148>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	4623      	mov	r3, r4
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e70f      	b.n	8000e04 <__udivmoddi4+0xd4>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	e730      	b.n	8000e4c <__udivmoddi4+0x11c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000234 	.word	0x20000234

08001030 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <modbus_3t5_Timeout+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	755a      	strb	r2, [r3, #21]

}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000234 	.word	0x20000234

08001050 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f008 fae1 	bl	8009620 <HAL_UART_GetError>
 800105e:	4603      	mov	r3, r0
 8001060:	2b20      	cmp	r3, #32
 8001062:	d101      	bne.n	8001068 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001064:	f7ff ffc4 	bl	8000ff0 <modbus_1t5_Timeout>

	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800107a:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <Modbus_init+0xa0>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <Modbus_init+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <Modbus_init+0xa4>)
 800108e:	210e      	movs	r1, #14
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fb0f 	bl	80076b4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2110      	movs	r1, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f008 fa69 	bl	8009574 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fa80 	bl	80095ac <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <Modbus_init+0xa8>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fd47 	bl	8008b48 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <Modbus_init+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <Modbus_init+0xa0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <Modbus_init+0xa0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80010cc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010d0:	4413      	add	r3, r2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010d8:	4619      	mov	r1, r3
 80010da:	f007 fe6f 	bl	8008dbc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <Modbus_init+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10c      	bne.n	8001108 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <Modbus_init+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 ffc7 	bl	8006088 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <Modbus_init+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fd12 	bl	8006b2c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000234 	.word	0x20000234
 8001114:	08001031 	.word	0x08001031
 8001118:	08001051 	.word	0x08001051

0800111c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001128:	23ff      	movs	r3, #255	@ 0xff
 800112a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001130:	e013      	b.n	800115a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	4053      	eors	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <CRC16+0x64>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4053      	eors	r3, r2
 800114e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <CRC16+0x68>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	803a      	strh	r2, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e6      	bne.n	8001132 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000100 	.word	0x20000100
 8001184:	20000000 	.word	0x20000000

08001188 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800118e:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7ddb      	ldrb	r3, [r3, #23]
 8001194:	3b01      	subs	r3, #1
 8001196:	2b03      	cmp	r3, #3
 8001198:	d80a      	bhi.n	80011b0 <Modbus_Protocal_Worker+0x28>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <Modbus_Protocal_Worker+0x18>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011bb 	.word	0x080011bb
 80011a4:	0800134f 	.word	0x0800134f
 80011a8:	08001247 	.word	0x08001247
 80011ac:	0800128b 	.word	0x0800128b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	75da      	strb	r2, [r3, #23]
		break;
 80011b8:	e0e1      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011ba:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80011ce:	f000 f9cd 	bl	800156c <Modbus_Emission>
 80011d2:	e018      	b.n	8001206 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80011d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80011de:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d00b      	beq.n	8001206 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2203      	movs	r2, #3
 8001204:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001206:	4b60      	ldr	r3, [pc, #384]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001210:	2b20      	cmp	r3, #32
 8001212:	f040 80ad 	bne.w	8001370 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b57      	ldr	r3, [pc, #348]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001232:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800123e:	4619      	mov	r1, r3
 8001240:	f007 fdbc 	bl	8008dbc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001244:	e094      	b.n	8001370 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001246:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8091 	beq.w	8001374 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22fe      	movs	r2, #254	@ 0xfe
 8001258:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800125a:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001276:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001278:	1a8a      	subs	r2, r1, r2
 800127a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800127c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001288:	e074      	b.n	8001374 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001292:	f113 0f02 	cmn.w	r3, #2
 8001296:	d150      	bne.n	800133a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff ff31 	bl	800111c <CRC16>
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012be:	793a      	ldrb	r2, [r7, #4]
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012cc:	3b02      	subs	r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10c      	bne.n	80012f2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80012d8:	797a      	ldrb	r2, [r7, #5]
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012e6:	3b01      	subs	r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d004      	beq.n	80012fc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ff      	movs	r2, #255	@ 0xff
 80012f8:	759a      	strb	r2, [r3, #22]
				break;
 80012fa:	e040      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d113      	bne.n	8001336 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800131e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001328:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800132a:	461a      	mov	r2, r3
 800132c:	f009 fb02 	bl	800a934 <memcpy>

			//execute command
			Modbus_frame_response();
 8001330:	f000 f904 	bl	800153c <Modbus_frame_response>
 8001334:	e001      	b.n	800133a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001336:	bf00      	nop
					}
		break;


	}
}
 8001338:	e021      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7d5b      	ldrb	r3, [r3, #21]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	75da      	strb	r2, [r3, #23]
		break;
 800134c:	e014      	b.n	8001378 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001358:	2b20      	cmp	r3, #32
 800135a:	d10f      	bne.n	800137c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	75da      	strb	r2, [r3, #23]
		break;
 800136e:	e005      	b.n	800137c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001370:	bf00      	nop
 8001372:	e004      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001374:	bf00      	nop
 8001376:	e002      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001378:	bf00      	nop
 800137a:	e000      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 800137c:	bf00      	nop
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000234 	.word	0x20000234

0800138c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <modbusWrite1Register+0x7c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	7e5b      	ldrb	r3, [r3, #25]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <modbusWrite1Register+0x7c>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	7e92      	ldrb	r2, [r2, #26]
 80013a2:	4413      	add	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d903      	bls.n	80013ba <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 f8a0 	bl	80014f8 <ModbusErrorReply>
			 return;
 80013b8:	e023      	b.n	8001402 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	440b      	add	r3, r1
 80013ca:	7ed2      	ldrb	r2, [r2, #27]
 80013cc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	440b      	add	r3, r1
 80013de:	7f12      	ldrb	r2, [r2, #28]
 80013e0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80013f0:	2208      	movs	r2, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	f009 fa9e 	bl	800a934 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000234 	.word	0x20000234

0800140c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001412:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	7edb      	ldrb	r3, [r3, #27]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	4a35      	ldr	r2, [pc, #212]	@ (80014f4 <modbusRead1Register+0xe8>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	7f12      	ldrb	r2, [r2, #28]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	4a30      	ldr	r2, [pc, #192]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	7e92      	ldrb	r2, [r2, #26]
 8001436:	4413      	add	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <modbusRead1Register+0x3a>
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b7d      	cmp	r3, #125	@ 0x7d
 8001444:	d903      	bls.n	800144e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001446:	2003      	movs	r0, #3
 8001448:	f000 f856 	bl	80014f8 <ModbusErrorReply>
		 return;
 800144c:	e04e      	b.n	80014ec <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	429a      	cmp	r2, r3
 8001458:	d808      	bhi.n	800146c <modbusRead1Register+0x60>
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	d903      	bls.n	8001474 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800146c:	2002      	movs	r0, #2
 800146e:	f000 f843 	bl	80014f8 <ModbusErrorReply>
		 return;
 8001472:	e03b      	b.n	80014ec <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800148e:	2400      	movs	r4, #0
 8001490:	e020      	b.n	80014d4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	4423      	add	r3, r4
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	18d1      	adds	r1, r2, r3
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	1c63      	adds	r3, r4, #1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	7849      	ldrb	r1, [r1, #1]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	4423      	add	r3, r4
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18d1      	adds	r1, r2, r3
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	0063      	lsls	r3, r4, #1
 80014c6:	3303      	adds	r3, #3
 80014c8:	7809      	ldrb	r1, [r1, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	460a      	mov	r2, r1
 80014ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80014d2:	3401      	adds	r4, #1
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	429c      	cmp	r4, r3
 80014d8:	dbdb      	blt.n	8001492 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000234 	.word	0x20000234

080014f8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ModbusErrorReply+0x40>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	7e1a      	ldrb	r2, [r3, #24]
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <ModbusErrorReply+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <ModbusErrorReply+0x40>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <ModbusErrorReply+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000234 	.word	0x20000234

0800153c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <Modbus_frame_response+0x2c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d004      	beq.n	8001554 <Modbus_frame_response+0x18>
 800154a:	2b06      	cmp	r3, #6
 800154c:	d105      	bne.n	800155a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800154e:	f7ff ff1d 	bl	800138c <modbusWrite1Register>
		break;
 8001552:	e006      	b.n	8001562 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001554:	f7ff ff5a 	bl	800140c <modbusRead1Register>
		break;
 8001558:	e003      	b.n	8001562 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ffcc 	bl	80014f8 <ModbusErrorReply>
		break;
 8001560:	bf00      	nop

	}
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000234 	.word	0x20000234

0800156c <Modbus_Emission>:

void Modbus_Emission()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <Modbus_Emission+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157c:	2b20      	cmp	r3, #32
 800157e:	d15d      	bne.n	800163c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <Modbus_Emission+0xe8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <Modbus_Emission+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <Modbus_Emission+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001596:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001598:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <Modbus_Emission+0xe8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <Modbus_Emission+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80015a8:	461a      	mov	r2, r3
 80015aa:	f009 f9c3 	bl	800a934 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <Modbus_Emission+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3203      	adds	r2, #3
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <Modbus_Emission+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015d4:	3b02      	subs	r3, #2
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff fd9f 	bl	800111c <CRC16>
 80015de:	4603      	mov	r3, r0
 80015e0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015ee:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80015f0:	7939      	ldrb	r1, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	460a      	mov	r2, r1
 80015f6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <Modbus_Emission+0xe8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <Modbus_Emission+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001606:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001608:	7979      	ldrb	r1, [r7, #5]
 800160a:	4413      	add	r3, r2
 800160c:	460a      	mov	r2, r1
 800160e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <Modbus_Emission+0xe8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161c:	2b20      	cmp	r3, #32
 800161e:	d10d      	bne.n	800163c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <Modbus_Emission+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <Modbus_Emission+0xe8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_Emission+0xe8>)
 8001630:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001632:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001636:	461a      	mov	r2, r3
 8001638:	f007 fb40 	bl	8008cbc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <Modbus_Emission+0xe8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <Modbus_Emission+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	755a      	strb	r2, [r3, #21]

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000234 	.word	0x20000234

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f002 fd6f 	bl	8004142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 fd06 	bl	8002074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f001 f8d0 	bl	800280c <MX_GPIO_Init>
  MX_DMA_Init();
 800166c:	f001 f880 	bl	8002770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001670:	f000 ffe4 	bl	800263c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001674:	f001 f82e 	bl	80026d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001678:	f000 fd48 	bl	800210c <MX_TIM1_Init>
  MX_TIM2_Init();
 800167c:	f000 fe1a 	bl	80022b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001680:	f000 fe6c 	bl	800235c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001684:	f000 ff2e 	bl	80024e4 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001688:	f000 ffb2 	bl	80025f0 <MX_TIM16_Init>
  MX_TIM4_Init();
 800168c:	f000 fedc 	bl	8002448 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001690:	f000 ff78 	bl	8002584 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 6.1;
 8001694:	4ba4      	ldr	r3, [pc, #656]	@ (8001928 <main+0x2d0>)
 8001696:	4aa5      	ldr	r2, [pc, #660]	@ (800192c <main+0x2d4>)
 8001698:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 800169a:	4ba3      	ldr	r3, [pc, #652]	@ (8001928 <main+0x2d0>)
 800169c:	4aa4      	ldr	r2, [pc, #656]	@ (8001930 <main+0x2d8>)
 800169e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 80016a0:	4ba1      	ldr	r3, [pc, #644]	@ (8001928 <main+0x2d0>)
 80016a2:	4aa4      	ldr	r2, [pc, #656]	@ (8001934 <main+0x2dc>)
 80016a4:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	489f      	ldr	r0, [pc, #636]	@ (8001928 <main+0x2d0>)
 80016aa:	f009 f8e1 	bl	800a870 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	49a1      	ldr	r1, [pc, #644]	@ (8001938 <main+0x2e0>)
 80016b2:	48a2      	ldr	r0, [pc, #648]	@ (800193c <main+0x2e4>)
 80016b4:	f007 fb82 	bl	8008dbc <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80016b8:	48a1      	ldr	r0, [pc, #644]	@ (8001940 <main+0x2e8>)
 80016ba:	f004 fce5 	bl	8006088 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80016be:	4ba1      	ldr	r3, [pc, #644]	@ (8001944 <main+0x2ec>)
 80016c0:	4aa1      	ldr	r2, [pc, #644]	@ (8001948 <main+0x2f0>)
 80016c2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80016c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001944 <main+0x2ec>)
 80016c6:	4aa1      	ldr	r2, [pc, #644]	@ (800194c <main+0x2f4>)
 80016c8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001944 <main+0x2ec>)
 80016cc:	2215      	movs	r2, #21
 80016ce:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80016d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001944 <main+0x2ec>)
 80016d2:	22c8      	movs	r2, #200	@ 0xc8
 80016d4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80016d6:	499e      	ldr	r1, [pc, #632]	@ (8001950 <main+0x2f8>)
 80016d8:	489a      	ldr	r0, [pc, #616]	@ (8001944 <main+0x2ec>)
 80016da:	f7ff fcc9 	bl	8001070 <Modbus_init>
  reed = 0;
 80016de:	4b9d      	ldr	r3, [pc, #628]	@ (8001954 <main+0x2fc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 16;
 80016e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001958 <main+0x300>)
 80016e6:	2210      	movs	r2, #16
 80016e8:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 80016ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001958 <main+0x300>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 80016f0:	4b99      	ldr	r3, [pc, #612]	@ (8001958 <main+0x300>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 80016f6:	4b98      	ldr	r3, [pc, #608]	@ (8001958 <main+0x300>)
 80016f8:	2204      	movs	r2, #4
 80016fa:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 80016fc:	4b96      	ldr	r3, [pc, #600]	@ (8001958 <main+0x300>)
 80016fe:	2205      	movs	r2, #5
 8001700:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001702:	4896      	ldr	r0, [pc, #600]	@ (800195c <main+0x304>)
 8001704:	f004 fc50 	bl	8005fa8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	4894      	ldr	r0, [pc, #592]	@ (800195c <main+0x304>)
 800170c:	f004 fdd2 	bl	80062b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	4892      	ldr	r0, [pc, #584]	@ (800195c <main+0x304>)
 8001714:	f004 fdce 	bl	80062b4 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001718:	213c      	movs	r1, #60	@ 0x3c
 800171a:	4891      	ldr	r0, [pc, #580]	@ (8001960 <main+0x308>)
 800171c:	f005 fb48 	bl	8006db0 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001720:	4890      	ldr	r0, [pc, #576]	@ (8001964 <main+0x30c>)
 8001722:	f004 fc41 	bl	8005fa8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001726:	4890      	ldr	r0, [pc, #576]	@ (8001968 <main+0x310>)
 8001728:	f004 fcae 	bl	8006088 <HAL_TIM_Base_Start_IT>
//  {
//	  pos_err = position_goal;
//  }


  buf[0] = 3;
 800172c:	4b8f      	ldr	r3, [pc, #572]	@ (800196c <main+0x314>)
 800172e:	2203      	movs	r2, #3
 8001730:	701a      	strb	r2, [r3, #0]
  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8001732:	2204      	movs	r2, #4
 8001734:	498b      	ldr	r1, [pc, #556]	@ (8001964 <main+0x30c>)
 8001736:	488d      	ldr	r0, [pc, #564]	@ (800196c <main+0x314>)
 8001738:	f002 fbf8 	bl	8003f2c <updateLED>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <main+0x318>)
 8001742:	701a      	strb	r2, [r3, #0]
  piingpong = 0;
 8001744:	4b8b      	ldr	r3, [pc, #556]	@ (8001974 <main+0x31c>)
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
  uint8_t result = HomeZ();
 800174a:	f002 fc95 	bl	8004078 <HomeZ>
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(2000);
 8001752:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001756:	f002 fd65 	bl	8004224 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800175a:	4b81      	ldr	r3, [pc, #516]	@ (8001960 <main+0x308>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001762:	4b85      	ldr	r3, [pc, #532]	@ (8001978 <main+0x320>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feba 	bl	80004e0 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 8001920 <main+0x2c8>
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f001 f908 	bl	800298c <generate_trapezoidal_velocity_profile>
  Home = 0;
 800177c:	4b7f      	ldr	r3, [pc, #508]	@ (800197c <main+0x324>)
 800177e:	2200      	movs	r2, #0
 8001780:	801a      	strh	r2, [r3, #0]
  rou = 0;
 8001782:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <main+0x328>)
 8001784:	2200      	movs	r2, #0
 8001786:	801a      	strh	r2, [r3, #0]
//	  Mode = 1;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8001788:	f7ff fcfe 	bl	8001188 <Modbus_Protocal_Worker>
	  BaseAction();
 800178c:	f001 fb04 	bl	8002d98 <BaseAction>
	  OrderSeparate();
 8001790:	f001 fedc 	bl	800354c <OrderSeparate>
	  piingpong =1;
 8001794:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <main+0x31c>)
 8001796:	2201      	movs	r2, #1
 8001798:	801a      	strh	r2, [r3, #0]

//	  uint8_t result = HomeZ();

	  static uint64_t timestamps =0;
	  if (rou >= 2 && end == 0)
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <main+0x328>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d90b      	bls.n	80017ba <main+0x162>
 80017a2:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <main+0x32c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d107      	bne.n	80017ba <main+0x162>
	  {
		  currentTime = micros();
 80017aa:	f002 f803 	bl	80037b4 <micros>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4975      	ldr	r1, [pc, #468]	@ (8001988 <main+0x330>)
 80017b4:	e9c1 2300 	strd	r2, r3, [r1]
 80017b8:	e015      	b.n	80017e6 <main+0x18e>
	  }
	  else if (end == 1)
 80017ba:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <main+0x32c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <main+0x18e>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 80017c2:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <main+0x310>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
		  currentTime = 0;
 80017ca:	496f      	ldr	r1, [pc, #444]	@ (8001988 <main+0x330>)
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
		  _micros = 0;
 80017d8:	496c      	ldr	r1, [pc, #432]	@ (800198c <main+0x334>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
//		  end = 0;
	  }
	  if(currentTime > timestamps && fin == 1)
 80017e6:	4b68      	ldr	r3, [pc, #416]	@ (8001988 <main+0x330>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	4968      	ldr	r1, [pc, #416]	@ (8001990 <main+0x338>)
 80017ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f2:	4290      	cmp	r0, r2
 80017f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80017f8:	d213      	bcs.n	8001822 <main+0x1ca>
 80017fa:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <main+0x33c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10f      	bne.n	8001822 <main+0x1ca>
	  {
	  timestamps =currentTime + 250000000;//us
 8001802:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <main+0x330>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	4963      	ldr	r1, [pc, #396]	@ (8001998 <main+0x340>)
 800180a:	1854      	adds	r4, r2, r1
 800180c:	f143 0500 	adc.w	r5, r3, #0
 8001810:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <main+0x338>)
 8001812:	e9c3 4500 	strd	r4, r5, [r3]
	  Mode = 1;
 8001816:	4b61      	ldr	r3, [pc, #388]	@ (800199c <main+0x344>)
 8001818:	2201      	movs	r2, #1
 800181a:	801a      	strh	r2, [r3, #0]
	  fin = 0;
 800181c:	4b5d      	ldr	r3, [pc, #372]	@ (8001994 <main+0x33c>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
//	  err_g =  (position_goal * err);
//
//	  pos_err = (position_goal - err_g)+14;
//
//
	  if (Mode == 1 && rou == 20)
 8001822:	4b5e      	ldr	r3, [pc, #376]	@ (800199c <main+0x344>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d125      	bne.n	8001876 <main+0x21e>
 800182a:	4b55      	ldr	r3, [pc, #340]	@ (8001980 <main+0x328>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b14      	cmp	r3, #20
 8001830:	d121      	bne.n	8001876 <main+0x21e>
	 	  {
	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[0]]/10.0);
 8001832:	4b51      	ldr	r3, [pc, #324]	@ (8001978 <main+0x320>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe52 	bl	80004e0 <__aeabi_f2d>
 800183c:	4680      	mov	r8, r0
 800183e:	4689      	mov	r9, r1
 8001840:	4b57      	ldr	r3, [pc, #348]	@ (80019a0 <main+0x348>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <main+0x300>)
 8001848:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe35 	bl	80004bc <__aeabi_i2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <main+0x34c>)
 8001858:	f7fe ffc4 	bl	80007e4 <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b17 	vmov	d7, r2, r3
 8001864:	eeb0 1a47 	vmov.f32	s2, s14
 8001868:	eef0 1a67 	vmov.f32	s3, s15
 800186c:	ec49 8b10 	vmov	d0, r8, r9
 8001870:	f001 f88c 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001874:	e1c2      	b.n	8001bfc <main+0x5a4>

	 	  }

	  else if (Mode == 1 && rou == 21)
 8001876:	4b49      	ldr	r3, [pc, #292]	@ (800199c <main+0x344>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d125      	bne.n	80018ca <main+0x272>
 800187e:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <main+0x328>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2b15      	cmp	r3, #21
 8001884:	d121      	bne.n	80018ca <main+0x272>
	  	 	  {
	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[0]]/10.0);
 8001886:	4b3c      	ldr	r3, [pc, #240]	@ (8001978 <main+0x320>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe28 	bl	80004e0 <__aeabi_f2d>
 8001890:	4680      	mov	r8, r0
 8001892:	4689      	mov	r9, r1
 8001894:	4b44      	ldr	r3, [pc, #272]	@ (80019a8 <main+0x350>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <main+0x300>)
 800189c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe0b 	bl	80004bc <__aeabi_i2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <main+0x34c>)
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b17 	vmov	d7, r2, r3
 80018b8:	eeb0 1a47 	vmov.f32	s2, s14
 80018bc:	eef0 1a67 	vmov.f32	s3, s15
 80018c0:	ec49 8b10 	vmov	d0, r8, r9
 80018c4:	f001 f862 	bl	800298c <generate_trapezoidal_velocity_profile>
 80018c8:	e198      	b.n	8001bfc <main+0x5a4>

	  	 	  }
	  else if (Mode == 1 && rou == 22)
 80018ca:	4b34      	ldr	r3, [pc, #208]	@ (800199c <main+0x344>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d16c      	bne.n	80019ac <main+0x354>
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <main+0x328>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b16      	cmp	r3, #22
 80018d8:	d168      	bne.n	80019ac <main+0x354>
	  	  	 	  {
	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[1]]/10.0);
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <main+0x320>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdfe 	bl	80004e0 <__aeabi_f2d>
 80018e4:	4680      	mov	r8, r0
 80018e6:	4689      	mov	r9, r1
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <main+0x348>)
 80018ea:	885b      	ldrh	r3, [r3, #2]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <main+0x300>)
 80018f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fde1 	bl	80004bc <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <main+0x34c>)
 8001900:	f7fe ff70 	bl	80007e4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b17 	vmov	d7, r2, r3
 800190c:	eeb0 1a47 	vmov.f32	s2, s14
 8001910:	eef0 1a67 	vmov.f32	s3, s15
 8001914:	ec49 8b10 	vmov	d0, r8, r9
 8001918:	f001 f838 	bl	800298c <generate_trapezoidal_velocity_profile>
 800191c:	e16e      	b.n	8001bfc <main+0x5a4>
 800191e:	bf00      	nop
 8001920:	00000000 	.word	0x00000000
 8001924:	40300000 	.word	0x40300000
 8001928:	200011e8 	.word	0x200011e8
 800192c:	40c33333 	.word	0x40c33333
 8001930:	3a83126f 	.word	0x3a83126f
 8001934:	3c23d70a 	.word	0x3c23d70a
 8001938:	20000ae4 	.word	0x20000ae4
 800193c:	2000082c 	.word	0x2000082c
 8001940:	20000568 	.word	0x20000568
 8001944:	20000af8 	.word	0x20000af8
 8001948:	200008f8 	.word	0x200008f8
 800194c:	20000700 	.word	0x20000700
 8001950:	20000fe8 	.word	0x20000fe8
 8001954:	20000fd6 	.word	0x20000fd6
 8001958:	20001178 	.word	0x20001178
 800195c:	20000238 	.word	0x20000238
 8001960:	20000304 	.word	0x20000304
 8001964:	200003d0 	.word	0x200003d0
 8001968:	20000634 	.word	0x20000634
 800196c:	20000208 	.word	0x20000208
 8001970:	20001216 	.word	0x20001216
 8001974:	20000fd2 	.word	0x20000fd2
 8001978:	20000200 	.word	0x20000200
 800197c:	200011de 	.word	0x200011de
 8001980:	20001214 	.word	0x20001214
 8001984:	20001220 	.word	0x20001220
 8001988:	20001218 	.word	0x20001218
 800198c:	20001228 	.word	0x20001228
 8001990:	20001230 	.word	0x20001230
 8001994:	20001217 	.word	0x20001217
 8001998:	0ee6b280 	.word	0x0ee6b280
 800199c:	200011dc 	.word	0x200011dc
 80019a0:	2000118c 	.word	0x2000118c
 80019a4:	40240000 	.word	0x40240000
 80019a8:	20001198 	.word	0x20001198

	  	  	 	  }
	  else if (Mode == 1 && rou == 23)
 80019ac:	4bb6      	ldr	r3, [pc, #728]	@ (8001c88 <main+0x630>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d125      	bne.n	8001a00 <main+0x3a8>
 80019b4:	4bb5      	ldr	r3, [pc, #724]	@ (8001c8c <main+0x634>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	2b17      	cmp	r3, #23
 80019ba:	d121      	bne.n	8001a00 <main+0x3a8>
	  	  	  	 	  {
	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[1]]/10.0);
 80019bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001c90 <main+0x638>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd8d 	bl	80004e0 <__aeabi_f2d>
 80019c6:	4680      	mov	r8, r0
 80019c8:	4689      	mov	r9, r1
 80019ca:	4bb2      	ldr	r3, [pc, #712]	@ (8001c94 <main+0x63c>)
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001c98 <main+0x640>)
 80019d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd70 	bl	80004bc <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4bae      	ldr	r3, [pc, #696]	@ (8001c9c <main+0x644>)
 80019e2:	f7fe feff 	bl	80007e4 <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ec43 2b17 	vmov	d7, r2, r3
 80019ee:	eeb0 1a47 	vmov.f32	s2, s14
 80019f2:	eef0 1a67 	vmov.f32	s3, s15
 80019f6:	ec49 8b10 	vmov	d0, r8, r9
 80019fa:	f000 ffc7 	bl	800298c <generate_trapezoidal_velocity_profile>
 80019fe:	e0fd      	b.n	8001bfc <main+0x5a4>

	  	  	  	 	  }
	  else if (Mode == 1 && rou == 24)
 8001a00:	4ba1      	ldr	r3, [pc, #644]	@ (8001c88 <main+0x630>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d125      	bne.n	8001a54 <main+0x3fc>
 8001a08:	4ba0      	ldr	r3, [pc, #640]	@ (8001c8c <main+0x634>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b18      	cmp	r3, #24
 8001a0e:	d121      	bne.n	8001a54 <main+0x3fc>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[2]]/10.0);
 8001a10:	4b9f      	ldr	r3, [pc, #636]	@ (8001c90 <main+0x638>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd63 	bl	80004e0 <__aeabi_f2d>
 8001a1a:	4680      	mov	r8, r0
 8001a1c:	4689      	mov	r9, r1
 8001a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ca0 <main+0x648>)
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b9c      	ldr	r3, [pc, #624]	@ (8001c98 <main+0x640>)
 8001a26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd46 	bl	80004bc <__aeabi_i2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b99      	ldr	r3, [pc, #612]	@ (8001c9c <main+0x644>)
 8001a36:	f7fe fed5 	bl	80007e4 <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	ec43 2b17 	vmov	d7, r2, r3
 8001a42:	eeb0 1a47 	vmov.f32	s2, s14
 8001a46:	eef0 1a67 	vmov.f32	s3, s15
 8001a4a:	ec49 8b10 	vmov	d0, r8, r9
 8001a4e:	f000 ff9d 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001a52:	e0d3      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 25)
 8001a54:	4b8c      	ldr	r3, [pc, #560]	@ (8001c88 <main+0x630>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d125      	bne.n	8001aa8 <main+0x450>
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	@ (8001c8c <main+0x634>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	2b19      	cmp	r3, #25
 8001a62:	d121      	bne.n	8001aa8 <main+0x450>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[2]]/10.0);
 8001a64:	4b8a      	ldr	r3, [pc, #552]	@ (8001c90 <main+0x638>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd39 	bl	80004e0 <__aeabi_f2d>
 8001a6e:	4680      	mov	r8, r0
 8001a70:	4689      	mov	r9, r1
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <main+0x63c>)
 8001a74:	889b      	ldrh	r3, [r3, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b87      	ldr	r3, [pc, #540]	@ (8001c98 <main+0x640>)
 8001a7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd1c 	bl	80004bc <__aeabi_i2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b84      	ldr	r3, [pc, #528]	@ (8001c9c <main+0x644>)
 8001a8a:	f7fe feab 	bl	80007e4 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	eeb0 1a47 	vmov.f32	s2, s14
 8001a9a:	eef0 1a67 	vmov.f32	s3, s15
 8001a9e:	ec49 8b10 	vmov	d0, r8, r9
 8001aa2:	f000 ff73 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001aa6:	e0a9      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 26)
 8001aa8:	4b77      	ldr	r3, [pc, #476]	@ (8001c88 <main+0x630>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d125      	bne.n	8001afc <main+0x4a4>
 8001ab0:	4b76      	ldr	r3, [pc, #472]	@ (8001c8c <main+0x634>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2b1a      	cmp	r3, #26
 8001ab6:	d121      	bne.n	8001afc <main+0x4a4>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[3]]/10.0);
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <main+0x638>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd0f 	bl	80004e0 <__aeabi_f2d>
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <main+0x648>)
 8001ac8:	88db      	ldrh	r3, [r3, #6]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <main+0x640>)
 8001ace:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcf2 	bl	80004bc <__aeabi_i2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <main+0x644>)
 8001ade:	f7fe fe81 	bl	80007e4 <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	ec43 2b17 	vmov	d7, r2, r3
 8001aea:	eeb0 1a47 	vmov.f32	s2, s14
 8001aee:	eef0 1a67 	vmov.f32	s3, s15
 8001af2:	ec49 8b10 	vmov	d0, r8, r9
 8001af6:	f000 ff49 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001afa:	e07f      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 27)
 8001afc:	4b62      	ldr	r3, [pc, #392]	@ (8001c88 <main+0x630>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d125      	bne.n	8001b50 <main+0x4f8>
 8001b04:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <main+0x634>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b1b      	cmp	r3, #27
 8001b0a:	d121      	bne.n	8001b50 <main+0x4f8>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[3]]/10.0);
 8001b0c:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <main+0x638>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fce5 	bl	80004e0 <__aeabi_f2d>
 8001b16:	4680      	mov	r8, r0
 8001b18:	4689      	mov	r9, r1
 8001b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c94 <main+0x63c>)
 8001b1c:	88db      	ldrh	r3, [r3, #6]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <main+0x640>)
 8001b22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcc8 	bl	80004bc <__aeabi_i2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <main+0x644>)
 8001b32:	f7fe fe57 	bl	80007e4 <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ec43 2b17 	vmov	d7, r2, r3
 8001b3e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b42:	eef0 1a67 	vmov.f32	s3, s15
 8001b46:	ec49 8b10 	vmov	d0, r8, r9
 8001b4a:	f000 ff1f 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001b4e:	e055      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 28)
 8001b50:	4b4d      	ldr	r3, [pc, #308]	@ (8001c88 <main+0x630>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d125      	bne.n	8001ba4 <main+0x54c>
 8001b58:	4b4c      	ldr	r3, [pc, #304]	@ (8001c8c <main+0x634>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b1c      	cmp	r3, #28
 8001b5e:	d121      	bne.n	8001ba4 <main+0x54c>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[4]]/10.0);
 8001b60:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <main+0x638>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcbb 	bl	80004e0 <__aeabi_f2d>
 8001b6a:	4680      	mov	r8, r0
 8001b6c:	4689      	mov	r9, r1
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca0 <main+0x648>)
 8001b70:	891b      	ldrh	r3, [r3, #8]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <main+0x640>)
 8001b76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc9e 	bl	80004bc <__aeabi_i2d>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b45      	ldr	r3, [pc, #276]	@ (8001c9c <main+0x644>)
 8001b86:	f7fe fe2d 	bl	80007e4 <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
 8001b92:	eeb0 1a47 	vmov.f32	s2, s14
 8001b96:	eef0 1a67 	vmov.f32	s3, s15
 8001b9a:	ec49 8b10 	vmov	d0, r8, r9
 8001b9e:	f000 fef5 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001ba2:	e02b      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 29)
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <main+0x630>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d127      	bne.n	8001bfc <main+0x5a4>
 8001bac:	4b37      	ldr	r3, [pc, #220]	@ (8001c8c <main+0x634>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	2b1d      	cmp	r3, #29
 8001bb2:	d123      	bne.n	8001bfc <main+0x5a4>
	  	  	  	  	  	  	 	  {
	  	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op,shelfPos[place[4]]/10.0);
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <main+0x638>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc91 	bl	80004e0 <__aeabi_f2d>
 8001bbe:	4680      	mov	r8, r0
 8001bc0:	4689      	mov	r9, r1
 8001bc2:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <main+0x63c>)
 8001bc4:	891b      	ldrh	r3, [r3, #8]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <main+0x640>)
 8001bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc74 	bl	80004bc <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <main+0x644>)
 8001bda:	f7fe fe03 	bl	80007e4 <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ec43 2b17 	vmov	d7, r2, r3
 8001be6:	eeb0 1a47 	vmov.f32	s2, s14
 8001bea:	eef0 1a67 	vmov.f32	s3, s15
 8001bee:	ec49 8b10 	vmov	d0, r8, r9
 8001bf2:	f000 fecb 	bl	800298c <generate_trapezoidal_velocity_profile>
	  	  	  	  	  	  	 		  end = 1;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <main+0x64c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]

	  	  	  	  	  	  	 	  }

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x0)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <main+0x650>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b80      	cmp	r3, #128	@ 0x80
 8001c02:	d113      	bne.n	8001c2c <main+0x5d4>
 8001c04:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <main+0x654>)
 8001c06:	8c1b      	ldrh	r3, [r3, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <main+0x5d4>
	  {
		  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <main+0x638>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc65 	bl	80004e0 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001c80 <main+0x628>
 8001c1e:	ec43 2b10 	vmov	d0, r2, r3
 8001c22:	f000 feb3 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <main+0x650>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

	  }

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x1)
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <main+0x650>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b80      	cmp	r3, #128	@ 0x80
 8001c32:	f040 80d8 	bne.w	8001de6 <main+0x78e>
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <main+0x654>)
 8001c38:	8c1b      	ldrh	r3, [r3, #32]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f040 80d3 	bne.w	8001de6 <main+0x78e>
	  				{
	  					if (TT == 0)
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <main+0x658>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d133      	bne.n	8001cb8 <main+0x660>
	  					{
	  						shelfPos[0] = qeifloat*10.0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <main+0x65c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc43 	bl	80004e0 <__aeabi_f2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <main+0x644>)
 8001c60:	f7fe fc96 	bl	8000590 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe feca 	bl	8000a04 <__aeabi_d2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <main+0x640>)
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e0a7      	b.n	8001dca <main+0x772>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40300000 	.word	0x40300000
 8001c88:	200011dc 	.word	0x200011dc
 8001c8c:	20001214 	.word	0x20001214
 8001c90:	20000200 	.word	0x20000200
 8001c94:	20001198 	.word	0x20001198
 8001c98:	20001178 	.word	0x20001178
 8001c9c:	40240000 	.word	0x40240000
 8001ca0:	2000118c 	.word	0x2000118c
 8001ca4:	20001220 	.word	0x20001220
 8001ca8:	20000ae4 	.word	0x20000ae4
 8001cac:	20000fe8 	.word	0x20000fe8
 8001cb0:	20000af0 	.word	0x20000af0
 8001cb4:	20000aec 	.word	0x20000aec

	  					}

	  					else if (TT == 1)
 8001cb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f60 <main+0x908>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cc2:	eef4 7a47 	vcmp.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d114      	bne.n	8001cf6 <main+0x69e>
	  							{
	  						shelfPos[1] = qeifloat*10.0;
 8001ccc:	4ba5      	ldr	r3, [pc, #660]	@ (8001f64 <main+0x90c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc05 	bl	80004e0 <__aeabi_f2d>
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4ba3      	ldr	r3, [pc, #652]	@ (8001f68 <main+0x910>)
 8001cdc:	f7fe fc58 	bl	8000590 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe fe8c 	bl	8000a04 <__aeabi_d2uiz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8001f6c <main+0x914>)
 8001cf2:	805a      	strh	r2, [r3, #2]
 8001cf4:	e069      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 2)
 8001cf6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f60 <main+0x908>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001d00:	eef4 7a47 	vcmp.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d114      	bne.n	8001d34 <main+0x6dc>
	  							{
	  						shelfPos[2] = qeifloat*10.0;
 8001d0a:	4b96      	ldr	r3, [pc, #600]	@ (8001f64 <main+0x90c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbe6 	bl	80004e0 <__aeabi_f2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b93      	ldr	r3, [pc, #588]	@ (8001f68 <main+0x910>)
 8001d1a:	f7fe fc39 	bl	8000590 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fe6d 	bl	8000a04 <__aeabi_d2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f6c <main+0x914>)
 8001d30:	809a      	strh	r2, [r3, #4]
 8001d32:	e04a      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 3)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	@ (8001f60 <main+0x908>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001d3e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d114      	bne.n	8001d72 <main+0x71a>
	  							{
	  						shelfPos[3] = qeifloat*10.0;
 8001d48:	4b86      	ldr	r3, [pc, #536]	@ (8001f64 <main+0x90c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbc7 	bl	80004e0 <__aeabi_f2d>
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b84      	ldr	r3, [pc, #528]	@ (8001f68 <main+0x910>)
 8001d58:	f7fe fc1a 	bl	8000590 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fe4e 	bl	8000a04 <__aeabi_d2uiz>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <main+0x914>)
 8001d6e:	80da      	strh	r2, [r3, #6]
 8001d70:	e02b      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 4)
 8001d72:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <main+0x908>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d7c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d114      	bne.n	8001db0 <main+0x758>
	  							{
	  						shelfPos[4] = qeifloat*10.0;
 8001d86:	4b77      	ldr	r3, [pc, #476]	@ (8001f64 <main+0x90c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fba8 	bl	80004e0 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b74      	ldr	r3, [pc, #464]	@ (8001f68 <main+0x910>)
 8001d96:	f7fe fbfb 	bl	8000590 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fe2f 	bl	8000a04 <__aeabi_d2uiz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b70      	ldr	r3, [pc, #448]	@ (8001f6c <main+0x914>)
 8001dac:	811a      	strh	r2, [r3, #8]
 8001dae:	e00c      	b.n	8001dca <main+0x772>

	  							}
	  					else if ( TT >=  5)
 8001db0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f60 <main+0x908>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	db02      	blt.n	8001dca <main+0x772>
	  					{
	  						flagShelf = 1;
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f70 <main+0x918>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
	  					}
	  					TT += 1;
 8001dca:	4b65      	ldr	r3, [pc, #404]	@ (8001f60 <main+0x908>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dd8:	4b61      	ldr	r3, [pc, #388]	@ (8001f60 <main+0x908>)
 8001dda:	edc3 7a00 	vstr	s15, [r3]
	  					joystickPayload[0] = 0;
 8001dde:	4b65      	ldr	r3, [pc, #404]	@ (8001f74 <main+0x91c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e119      	b.n	800201a <main+0x9c2>
	  				}

	  else if ( joystickPayload[0] == 0x40)
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <main+0x91c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d120      	bne.n	8001e30 <main+0x7d8>
		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 0.1));
 8001dee:	4b62      	ldr	r3, [pc, #392]	@ (8001f78 <main+0x920>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb74 	bl	80004e0 <__aeabi_f2d>
 8001df8:	4680      	mov	r8, r0
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001f7c <main+0x924>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb6d 	bl	80004e0 <__aeabi_f2d>
 8001e06:	a354      	add	r3, pc, #336	@ (adr r3, 8001f58 <main+0x900>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fa0a 	bl	8000224 <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	ec43 2b17 	vmov	d7, r2, r3
 8001e18:	eeb0 1a47 	vmov.f32	s2, s14
 8001e1c:	eef0 1a67 	vmov.f32	s3, s15
 8001e20:	ec49 8b10 	vmov	d0, r8, r9
 8001e24:	f000 fdb2 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001e28:	4b52      	ldr	r3, [pc, #328]	@ (8001f74 <main+0x91c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e0f4      	b.n	800201a <main+0x9c2>
		}
	  else if ( joystickPayload[0] == 0x41)
 8001e30:	4b50      	ldr	r3, [pc, #320]	@ (8001f74 <main+0x91c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b41      	cmp	r3, #65	@ 0x41
 8001e36:	d120      	bne.n	8001e7a <main+0x822>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 1.0));
 8001e38:	4b4f      	ldr	r3, [pc, #316]	@ (8001f78 <main+0x920>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb4f 	bl	80004e0 <__aeabi_f2d>
 8001e42:	4680      	mov	r8, r0
 8001e44:	4689      	mov	r9, r1
 8001e46:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <main+0x924>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb48 	bl	80004e0 <__aeabi_f2d>
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <main+0x928>)
 8001e56:	f7fe f9e5 	bl	8000224 <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 1a47 	vmov.f32	s2, s14
 8001e66:	eef0 1a67 	vmov.f32	s3, s15
 8001e6a:	ec49 8b10 	vmov	d0, r8, r9
 8001e6e:	f000 fd8d 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001e72:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <main+0x91c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e0cf      	b.n	800201a <main+0x9c2>
	  		}
	  else if ( joystickPayload[0] == 0x42)
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <main+0x91c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b42      	cmp	r3, #66	@ 0x42
 8001e80:	d120      	bne.n	8001ec4 <main+0x86c>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 10.0));
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <main+0x920>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb2a 	bl	80004e0 <__aeabi_f2d>
 8001e8c:	4680      	mov	r8, r0
 8001e8e:	4689      	mov	r9, r1
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <main+0x924>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb23 	bl	80004e0 <__aeabi_f2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <main+0x910>)
 8001ea0:	f7fe f9c0 	bl	8000224 <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	ec43 2b17 	vmov	d7, r2, r3
 8001eac:	eeb0 1a47 	vmov.f32	s2, s14
 8001eb0:	eef0 1a67 	vmov.f32	s3, s15
 8001eb4:	ec49 8b10 	vmov	d0, r8, r9
 8001eb8:	f000 fd68 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <main+0x91c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0aa      	b.n	800201a <main+0x9c2>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <main+0x91c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b43      	cmp	r3, #67	@ 0x43
 8001eca:	d120      	bne.n	8001f0e <main+0x8b6>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 100.0));
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <main+0x920>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb05 	bl	80004e0 <__aeabi_f2d>
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	4689      	mov	r9, r1
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <main+0x924>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fafe 	bl	80004e0 <__aeabi_f2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <main+0x92c>)
 8001eea:	f7fe f99b 	bl	8000224 <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	ec43 2b17 	vmov	d7, r2, r3
 8001ef6:	eeb0 1a47 	vmov.f32	s2, s14
 8001efa:	eef0 1a67 	vmov.f32	s3, s15
 8001efe:	ec49 8b10 	vmov	d0, r8, r9
 8001f02:	f000 fd43 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <main+0x91c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e085      	b.n	800201a <main+0x9c2>
//	  else if ( joystickPayload[0] == 0x00)
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  	  else if ( joystickPayload[0] == 0x01)
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <main+0x91c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d138      	bne.n	8001f88 <main+0x930>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 1.0));
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <main+0x920>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fae0 	bl	80004e0 <__aeabi_f2d>
 8001f20:	4680      	mov	r8, r0
 8001f22:	4689      	mov	r9, r1
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <main+0x924>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fad9 	bl	80004e0 <__aeabi_f2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <main+0x928>)
 8001f34:	f7fe f974 	bl	8000220 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 1a47 	vmov.f32	s2, s14
 8001f44:	eef0 1a67 	vmov.f32	s3, s15
 8001f48:	ec49 8b10 	vmov	d0, r8, r9
 8001f4c:	f000 fd1e 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <main+0x91c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e060      	b.n	800201a <main+0x9c2>
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fb99999 	.word	0x3fb99999
 8001f60:	20000af0 	.word	0x20000af0
 8001f64:	20000aec 	.word	0x20000aec
 8001f68:	40240000 	.word	0x40240000
 8001f6c:	20001178 	.word	0x20001178
 8001f70:	20000fd0 	.word	0x20000fd0
 8001f74:	20000ae4 	.word	0x20000ae4
 8001f78:	20000200 	.word	0x20000200
 8001f7c:	200011d8 	.word	0x200011d8
 8001f80:	3ff00000 	.word	0x3ff00000
 8001f84:	40590000 	.word	0x40590000
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02)
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <main+0x9f8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d120      	bne.n	8001fd2 <main+0x97a>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 10.0));
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <main+0x9fc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faa3 	bl	80004e0 <__aeabi_f2d>
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	4689      	mov	r9, r1
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <main+0xa00>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa9c 	bl	80004e0 <__aeabi_f2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <main+0xa04>)
 8001fae:	f7fe f937 	bl	8000220 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b17 	vmov	d7, r2, r3
 8001fba:	eeb0 1a47 	vmov.f32	s2, s14
 8001fbe:	eef0 1a67 	vmov.f32	s3, s15
 8001fc2:	ec49 8b10 	vmov	d0, r8, r9
 8001fc6:	f000 fce1 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <main+0x9f8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e023      	b.n	800201a <main+0x9c2>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03)
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <main+0x9f8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d11f      	bne.n	800201a <main+0x9c2>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 100.0));
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <main+0x9fc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa7e 	bl	80004e0 <__aeabi_f2d>
 8001fe4:	4680      	mov	r8, r0
 8001fe6:	4689      	mov	r9, r1
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <main+0xa00>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa77 	bl	80004e0 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <main+0xa08>)
 8001ff8:	f7fe f912 	bl	8000220 <__aeabi_dsub>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ec43 2b17 	vmov	d7, r2, r3
 8002004:	eeb0 1a47 	vmov.f32	s2, s14
 8002008:	eef0 1a67 	vmov.f32	s3, s15
 800200c:	ec49 8b10 	vmov	d0, r8, r9
 8002010:	f000 fcbc 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <main+0x9f8>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	  	  		}


	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <main+0xa0c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <main+0xa10>)
 8002022:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2))*(60.00/8192);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <main+0xa0c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa36 	bl	800049c <__aeabi_ui2d>
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <main+0xa14>)
 8002036:	f7fe faab 	bl	8000590 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fcff 	bl	8000a44 <__aeabi_d2f>
 8002046:	4603      	mov	r3, r0
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <main+0xa18>)
 800204a:	6013      	str	r3, [r2, #0]
  {
 800204c:	f7ff bb9c 	b.w	8001788 <main+0x130>
 8002050:	20000ae4 	.word	0x20000ae4
 8002054:	20000200 	.word	0x20000200
 8002058:	200011d8 	.word	0x200011d8
 800205c:	40240000 	.word	0x40240000
 8002060:	40590000 	.word	0x40590000
 8002064:	20000304 	.word	0x20000304
 8002068:	20000ae8 	.word	0x20000ae8
 800206c:	3f7e0000 	.word	0x3f7e0000
 8002070:	20000aec 	.word	0x20000aec

08002074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	@ 0x50
 8002078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	2238      	movs	r2, #56	@ 0x38
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f008 fc2a 	bl	800a8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002096:	2000      	movs	r0, #0
 8002098:	f002 fef2 	bl	8004e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a6:	2340      	movs	r3, #64	@ 0x40
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020aa:	2302      	movs	r3, #2
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ae:	2302      	movs	r3, #2
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020b2:	2304      	movs	r3, #4
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020b6:	2355      	movs	r3, #85	@ 0x55
 80020b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020be:	2302      	movs	r3, #2
 80020c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020c2:	2302      	movs	r3, #2
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ff8c 	bl	8004fe8 <HAL_RCC_OscConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020d6:	f001 fb87 	bl	80037e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020da:	230f      	movs	r3, #15
 80020dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2303      	movs	r3, #3
 80020e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2104      	movs	r1, #4
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fa8a 	bl	800560c <HAL_RCC_ClockConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020fe:	f001 fb73 	bl	80037e8 <Error_Handler>
  }
}
 8002102:	bf00      	nop
 8002104:	3750      	adds	r7, #80	@ 0x50
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b09e      	sub	sp, #120	@ 0x78
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800212c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2234      	movs	r2, #52	@ 0x34
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f008 fbc2 	bl	800a8dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002158:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800215a:	4a55      	ldr	r2, [pc, #340]	@ (80022b0 <MX_TIM1_Init+0x1a4>)
 800215c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800215e:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002160:	2201      	movs	r2, #1
 8002162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800216a:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800216c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002178:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002184:	4849      	ldr	r0, [pc, #292]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002186:	f003 feab 	bl	8005ee0 <HAL_TIM_Base_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002190:	f001 fb2a 	bl	80037e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002198:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800219a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800219e:	4619      	mov	r1, r3
 80021a0:	4842      	ldr	r0, [pc, #264]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021a2:	f005 f921 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021ac:	f001 fb1c 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021b0:	483e      	ldr	r0, [pc, #248]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021b2:	f004 f811 	bl	80061d8 <HAL_TIM_PWM_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80021bc:	f001 fb14 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021d0:	4619      	mov	r1, r3
 80021d2:	4836      	ldr	r0, [pc, #216]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021d4:	f006 f9bc 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80021de:	f001 fb03 	bl	80037e8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80021e2:	2301      	movs	r3, #1
 80021e4:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80021ea:	2301      	movs	r3, #1
 80021ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80021ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021f2:	461a      	mov	r2, r3
 80021f4:	2101      	movs	r1, #1
 80021f6:	482d      	ldr	r0, [pc, #180]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021f8:	f006 fad4 	bl	80087a4 <HAL_TIMEx_ConfigBreakInput>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002202:	f001 faf1 	bl	80037e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002222:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4820      	ldr	r0, [pc, #128]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800222c:	f004 ffc8 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002236:	f001 fad7 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800223a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800223e:	2204      	movs	r2, #4
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002244:	f004 ffbc 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800224e:	f001 facb 	bl	80037e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002266:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	4619      	mov	r1, r3
 800228e:	4807      	ldr	r0, [pc, #28]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002290:	f006 f9f4 	bl	800867c <HAL_TIMEx_ConfigBreakDeadTime>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800229a:	f001 faa5 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800229e:	4803      	ldr	r0, [pc, #12]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80022a0:	f001 fc12 	bl	8003ac8 <HAL_TIM_MspPostInit>

}
 80022a4:	bf00      	nop
 80022a6:	3778      	adds	r7, #120	@ 0x78
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000238 	.word	0x20000238
 80022b0:	40012c00 	.word	0x40012c00

080022b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f008 fb0a 	bl	800a8dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d2:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022fa:	2303      	movs	r3, #3
 80022fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 800231a:	2302      	movs	r3, #2
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	@ (8002358 <MX_TIM2_Init+0xa4>)
 8002326:	f004 fc8f 	bl	8006c48 <HAL_TIM_Encoder_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002330:	f001 fa5a 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	@ (8002358 <MX_TIM2_Init+0xa4>)
 8002342:	f006 f905 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800234c:	f001 fa4c 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	@ 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000304 	.word	0x20000304

0800235c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	@ 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238e:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002390:	4a2c      	ldr	r2, [pc, #176]	@ (8002444 <MX_TIM3_Init+0xe8>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <MX_TIM3_Init+0xe4>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023a2:	226a      	movs	r2, #106	@ 0x6a
 80023a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023b2:	4823      	ldr	r0, [pc, #140]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023b4:	f003 fd94 	bl	8005ee0 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023be:	f001 fa13 	bl	80037e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481c      	ldr	r0, [pc, #112]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023d0:	f005 f80a 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023da:	f001 fa05 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023de:	4818      	ldr	r0, [pc, #96]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023e0:	f003 fefa 	bl	80061d8 <HAL_TIM_PWM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023ea:	f001 f9fd 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4810      	ldr	r0, [pc, #64]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023fe:	f006 f8a7 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002408:	f001 f9ee 	bl	80037e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240c:	2360      	movs	r3, #96	@ 0x60
 800240e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	2204      	movs	r2, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002424:	f004 fecc 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800242e:	f001 f9db 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002434:	f001 fb48 	bl	8003ac8 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	@ 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200003d0 	.word	0x200003d0
 8002444:	40000400 	.word	0x40000400

08002448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <MX_TIM4_Init+0x98>)
 800246a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <MX_TIM4_Init+0x94>)
 800246e:	22a9      	movs	r2, #169	@ 0xa9
 8002470:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <MX_TIM4_Init+0x94>)
 800247a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800247e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800248c:	4813      	ldr	r0, [pc, #76]	@ (80024dc <MX_TIM4_Init+0x94>)
 800248e:	f003 fd27 	bl	8005ee0 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002498:	f001 f9a6 	bl	80037e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_TIM4_Init+0x94>)
 80024aa:	f004 ff9d 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80024b4:	f001 f998 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_TIM4_Init+0x94>)
 80024c6:	f006 f843 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f001 f98a 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000049c 	.word	0x2000049c
 80024e0:	40000800 	.word	0x40000800

080024e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <MX_TIM5_Init+0x98>)
 8002504:	4a1e      	ldr	r2, [pc, #120]	@ (8002580 <MX_TIM5_Init+0x9c>)
 8002506:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_TIM5_Init+0x98>)
 800250a:	f244 2267 	movw	r2, #16999	@ 0x4267
 800250e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_TIM5_Init+0x98>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_TIM5_Init+0x98>)
 8002518:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800251c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_TIM5_Init+0x98>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_TIM5_Init+0x98>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800252a:	4814      	ldr	r0, [pc, #80]	@ (800257c <MX_TIM5_Init+0x98>)
 800252c:	f003 fcd8 	bl	8005ee0 <HAL_TIM_Base_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002536:	f001 f957 	bl	80037e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <MX_TIM5_Init+0x98>)
 8002548:	f004 ff4e 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002552:	f001 f949 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4806      	ldr	r0, [pc, #24]	@ (800257c <MX_TIM5_Init+0x98>)
 8002564:	f005 fff4 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800256e:	f001 f93b 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000568 	.word	0x20000568
 8002580:	40000c00 	.word	0x40000c00

08002584 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <MX_TIM7_Init+0x64>)
 8002596:	4a15      	ldr	r2, [pc, #84]	@ (80025ec <MX_TIM7_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <MX_TIM7_Init+0x64>)
 800259c:	22a9      	movs	r2, #169	@ 0xa9
 800259e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025b6:	f003 fc93 	bl	8005ee0 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025c0:	f001 f912 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025d2:	f005 ffbd 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f001 f904 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000634 	.word	0x20000634
 80025ec:	40001400 	.word	0x40001400

080025f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_TIM16_Init+0x44>)
 80025f6:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <MX_TIM16_Init+0x48>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_TIM16_Init+0x44>)
 80025fc:	22a9      	movs	r2, #169	@ 0xa9
 80025fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002608:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800260c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_TIM16_Init+0x44>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002622:	f003 fc5d 	bl	8005ee0 <HAL_TIM_Base_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800262c:	f001 f8dc 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000700 	.word	0x20000700
 8002638:	40014400 	.word	0x40014400

0800263c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002642:	4a23      	ldr	r2, [pc, #140]	@ (80026d0 <MX_USART1_UART_Init+0x94>)
 8002644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265a:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800267a:	2200      	movs	r2, #0
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002680:	2200      	movs	r2, #0
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002684:	4811      	ldr	r0, [pc, #68]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002686:	f006 f9ff 	bl	8008a88 <HAL_UART_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002690:	f001 f8aa 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002698:	f008 f81f 	bl	800a6da <HAL_UARTEx_SetTxFifoThreshold>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026a2:	f001 f8a1 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4808      	ldr	r0, [pc, #32]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 80026aa:	f008 f854 	bl	800a756 <HAL_UARTEx_SetRxFifoThreshold>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026b4:	f001 f898 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 80026ba:	f007 ffd5 	bl	800a668 <HAL_UARTEx_DisableFifoMode>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026c4:	f001 f890 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000082c 	.word	0x2000082c
 80026d0:	40013800 	.word	0x40013800

080026d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <MX_USART2_UART_Init+0x98>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026e0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80026e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002720:	4811      	ldr	r0, [pc, #68]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002722:	f006 f9b1 	bl	8008a88 <HAL_UART_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800272c:	f001 f85c 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002734:	f007 ffd1 	bl	800a6da <HAL_UARTEx_SetTxFifoThreshold>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800273e:	f001 f853 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002746:	f008 f806 	bl	800a756 <HAL_UARTEx_SetRxFifoThreshold>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002750:	f001 f84a 	bl	80037e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002756:	f007 ff87 	bl	800a668 <HAL_UARTEx_DisableFifoMode>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002760:	f001 f842 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200008f8 	.word	0x200008f8
 800276c:	40004400 	.word	0x40004400

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <MX_DMA_Init+0x98>)
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	4a23      	ldr	r2, [pc, #140]	@ (8002808 <MX_DMA_Init+0x98>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6493      	str	r3, [r2, #72]	@ 0x48
 8002782:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <MX_DMA_Init+0x98>)
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_DMA_Init+0x98>)
 8002790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002792:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <MX_DMA_Init+0x98>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6493      	str	r3, [r2, #72]	@ 0x48
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_DMA_Init+0x98>)
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_DMA_Init+0x98>)
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <MX_DMA_Init+0x98>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <MX_DMA_Init+0x98>)
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200b      	movs	r0, #11
 80027c4:	f001 fe2b 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027c8:	200b      	movs	r0, #11
 80027ca:	f001 fe42 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	200c      	movs	r0, #12
 80027d4:	f001 fe23 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027d8:	200c      	movs	r0, #12
 80027da:	f001 fe3a 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	200d      	movs	r0, #13
 80027e4:	f001 fe1b 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80027e8:	200d      	movs	r0, #13
 80027ea:	f001 fe32 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2039      	movs	r0, #57	@ 0x39
 80027f4:	f001 fe13 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80027f8:	2039      	movs	r0, #57	@ 0x39
 80027fa:	f001 fe2a 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	4a56      	ldr	r2, [pc, #344]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282e:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <MX_GPIO_Init+0x174>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	4a50      	ldr	r2, [pc, #320]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002840:	f043 0320 	orr.w	r3, r3, #32
 8002844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002846:	4b4e      	ldr	r3, [pc, #312]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b48      	ldr	r3, [pc, #288]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b45      	ldr	r3, [pc, #276]	@ (8002980 <MX_GPIO_Init+0x174>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a44      	ldr	r2, [pc, #272]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b42      	ldr	r3, [pc, #264]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	f240 6111 	movw	r1, #1553	@ 0x611
 8002888:	483e      	ldr	r0, [pc, #248]	@ (8002984 <MX_GPIO_Init+0x178>)
 800288a:	f002 fac9 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	483d      	ldr	r0, [pc, #244]	@ (8002988 <MX_GPIO_Init+0x17c>)
 8002894:	f002 fac4 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800289e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	4836      	ldr	r0, [pc, #216]	@ (8002988 <MX_GPIO_Init+0x17c>)
 80028b0:	f002 f91c 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028bc:	2301      	movs	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ca:	f002 f90f 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9;
 80028ce:	f240 6311 	movw	r3, #1553	@ 0x611
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4827      	ldr	r0, [pc, #156]	@ (8002984 <MX_GPIO_Init+0x178>)
 80028e8:	f002 f900 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4821      	ldr	r0, [pc, #132]	@ (8002988 <MX_GPIO_Init+0x17c>)
 8002904:	f002 f8f2 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800290e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f002 f8e3 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002926:	2320      	movs	r3, #32
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800292a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800292e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4812      	ldr	r0, [pc, #72]	@ (8002984 <MX_GPIO_Init+0x178>)
 800293c:	f002 f8d6 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002940:	2340      	movs	r3, #64	@ 0x40
 8002942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	480c      	ldr	r0, [pc, #48]	@ (8002984 <MX_GPIO_Init+0x178>)
 8002954:	f002 f8ca 	bl	8004aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2017      	movs	r0, #23
 800295e:	f001 fd5e 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002962:	2017      	movs	r0, #23
 8002964:	f001 fd75 	bl	8004452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	2028      	movs	r0, #40	@ 0x28
 800296e:	f001 fd56 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002972:	2028      	movs	r0, #40	@ 0x28
 8002974:	f001 fd6d 	bl	8004452 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	@ 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800

0800298c <generate_trapezoidal_velocity_profile>:

/* USER CODE BEGIN 4 */

///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	ed87 0b02 	vstr	d0, [r7, #8]
 8002996:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <generate_trapezoidal_velocity_profile+0xa8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fd9e 	bl	80004e0 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ac:	f7fd fc38 	bl	8000220 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f844 	bl	8000a44 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <generate_trapezoidal_velocity_profile+0xac>)
 80029c0:	6013      	str	r3, [r2, #0]
	total_time = t2;
 80029c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c6:	f7fe f83d 	bl	8000a44 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029ce:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 80029d0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029d2:	ed93 7a00 	vldr	s14, [r3]
 80029d6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80029da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <generate_trapezoidal_velocity_profile+0xb8>)
 80029fa:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <generate_trapezoidal_velocity_profile+0xac>)
 8002a00:	edd3 6a00 	vldr	s13, [r3]
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <generate_trapezoidal_velocity_profile+0xb8>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <generate_trapezoidal_velocity_profile+0xbc>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]

	HAL_TIM_Base_Start_IT(&htim4);
 8002a1e:	480b      	ldr	r0, [pc, #44]	@ (8002a4c <generate_trapezoidal_velocity_profile+0xc0>)
 8002a20:	f003 fb32 	bl	8006088 <HAL_TIM_Base_Start_IT>

	Mode = 0;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <generate_trapezoidal_velocity_profile+0xc4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]

  }
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000aec 	.word	0x20000aec
 8002a38:	200011b0 	.word	0x200011b0
 8002a3c:	200011b4 	.word	0x200011b4
 8002a40:	200011b8 	.word	0x200011b8
 8002a44:	200011bc 	.word	0x200011bc
 8002a48:	200011c0 	.word	0x200011c0
 8002a4c:	2000049c 	.word	0x2000049c
 8002a50:	200011dc 	.word	0x200011dc
 8002a54:	00000000 	.word	0x00000000

08002a58 <generate_Velocity>:

void generate_Velocity()
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0

		t = (time_op) * i / num_points;
 8002a5e:	4bb4      	ldr	r3, [pc, #720]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f904 	bl	8000c74 <__aeabi_ul2f>
 8002a6c:	ee07 0a10 	vmov	s14, r0
 8002a70:	4bb0      	ldr	r3, [pc, #704]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a7a:	4baf      	ldr	r3, [pc, #700]	@ (8002d38 <generate_Velocity+0x2e0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a8a:	4bac      	ldr	r3, [pc, #688]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002a8c:	edc3 7a00 	vstr	s15, [r3]
				        if (t < t_acc) {
 8002a90:	4baa      	ldr	r3, [pc, #680]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4baa      	ldr	r3, [pc, #680]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d510      	bpl.n	8002ac8 <generate_Velocity+0x70>
				          velocity = (Peak * (t / t_acc));
 8002aa6:	4ba5      	ldr	r3, [pc, #660]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002aa8:	edd3 6a00 	vldr	s13, [r3]
 8002aac:	4ba4      	ldr	r3, [pc, #656]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4ba3      	ldr	r3, [pc, #652]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
 8002ac6:	e034      	b.n	8002b32 <generate_Velocity+0xda>
				        } else if (t >= t_acc && t <+ t_acc + t_const) {
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	4b9c      	ldr	r3, [pc, #624]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	db14      	blt.n	8002b08 <generate_Velocity+0xb0>
 8002ade:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b99      	ldr	r3, [pc, #612]	@ (8002d4c <generate_Velocity+0x2f4>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aee:	4b93      	ldr	r3, [pc, #588]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	dd04      	ble.n	8002b08 <generate_Velocity+0xb0>
				          velocity = Peak;
 8002afe:	4b91      	ldr	r3, [pc, #580]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a91      	ldr	r2, [pc, #580]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e014      	b.n	8002b32 <generate_Velocity+0xda>
				        } else {
				          velocity = (Peak * ((time_op - t) / t_acc));
 8002b08:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b18:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2c:	4b86      	ldr	r3, [pc, #536]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
				        }
				        position += velocity/1000.0;
 8002b32:	4b87      	ldr	r3, [pc, #540]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcd2 	bl	80004e0 <__aeabi_f2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fccb 	bl	80004e0 <__aeabi_f2d>
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <generate_Velocity+0x2fc>)
 8002b50:	f7fd fe48 	bl	80007e4 <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7fd fb62 	bl	8000224 <__adddf3>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ff6c 	bl	8000a44 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a78      	ldr	r2, [pc, #480]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b70:	6013      	str	r3, [r2, #0]

				        position_now = position;
 8002b72:	4b77      	ldr	r3, [pc, #476]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a78      	ldr	r2, [pc, #480]	@ (8002d58 <generate_Velocity+0x300>)
 8002b78:	6013      	str	r3, [r2, #0]

				        Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <generate_Velocity+0x300>)
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <generate_Velocity+0x304>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8a:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <generate_Velocity+0x308>)
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bee:	6013      	str	r3, [r2, #0]



				        BTempV = Vfeedback;
 8002bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d68 <generate_Velocity+0x310>)
 8002bf6:	6013      	str	r3, [r2, #0]

				        VInM = Vfeedback * (24.0/65535.0);
 8002bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fc6f 	bl	80004e0 <__aeabi_f2d>
 8002c02:	a347      	add	r3, pc, #284	@ (adr r3, 8002d20 <generate_Velocity+0x2c8>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fcc2 	bl	8000590 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ff16 	bl	8000a44 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <generate_Velocity+0x314>)
 8002c1c:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

				        zStop = 0;
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <generate_Velocity+0x318>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
				        pwmM = Vfeedback * (65535.0/24.0);
 8002c24:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc59 	bl	80004e0 <__aeabi_f2d>
 8002c2e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002d28 <generate_Velocity+0x2d0>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fcac 	bl	8000590 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd feb8 	bl	80009b4 <__aeabi_d2iz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a4b      	ldr	r2, [pc, #300]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c48:	6013      	str	r3, [r2, #0]

				        if(Vfeedback >= 0)
 8002c4a:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	db09      	blt.n	8002c6e <generate_Velocity+0x216>
				        {
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 8002c5a:	4b46      	ldr	r3, [pc, #280]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <generate_Velocity+0x320>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002c64:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <generate_Velocity+0x320>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c6c:	e011      	b.n	8002c92 <generate_Velocity+0x23a>

				        }

				        else if (Vfeedback < 0)
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	d509      	bpl.n	8002c92 <generate_Velocity+0x23a>
				        {

				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <generate_Velocity+0x320>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	425a      	negs	r2, r3
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <generate_Velocity+0x320>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

				        if ( i >= time_op*1000)
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fd ffea 	bl	8000c74 <__aeabi_ul2f>
 8002ca0:	ee06 0a90 	vmov	s13, r0
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002d7c <generate_Velocity+0x324>
 8002cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	da00      	bge.n	8002cbe <generate_Velocity+0x266>
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 8002cbc:	e02b      	b.n	8002d16 <generate_Velocity+0x2be>
				        	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <generate_Velocity+0x328>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
				        	HAL_TIM_Base_Stop_IT(&htim4);
 8002cc6:	482e      	ldr	r0, [pc, #184]	@ (8002d80 <generate_Velocity+0x328>)
 8002cc8:	f003 fa56 	bl	8006178 <HAL_TIM_Base_Stop_IT>
				        	rou += 1;
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <generate_Velocity+0x32c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <generate_Velocity+0x32c>)
 8002cd6:	801a      	strh	r2, [r3, #0]
				        	i = 0;
 8002cd8:	4915      	ldr	r1, [pc, #84]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9c1 2300 	strd	r2, r3, [r1]
				        	buf[0] = 2;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <generate_Velocity+0x330>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]
				        	L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002cec:	2204      	movs	r2, #4
 8002cee:	4927      	ldr	r1, [pc, #156]	@ (8002d8c <generate_Velocity+0x334>)
 8002cf0:	4825      	ldr	r0, [pc, #148]	@ (8002d88 <generate_Velocity+0x330>)
 8002cf2:	f001 f91b 	bl	8003f2c <updateLED>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <generate_Velocity+0x338>)
 8002cfc:	701a      	strb	r2, [r3, #0]
				        	fin = 1;
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <generate_Velocity+0x33c>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <generate_Velocity+0x320>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <generate_Velocity+0x320>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00180018 	.word	0x00180018
 8002d24:	3f380018 	.word	0x3f380018
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40a55540 	.word	0x40a55540
 8002d30:	200011c8 	.word	0x200011c8
 8002d34:	20000200 	.word	0x20000200
 8002d38:	20000204 	.word	0x20000204
 8002d3c:	200011d0 	.word	0x200011d0
 8002d40:	200011b8 	.word	0x200011b8
 8002d44:	200011c0 	.word	0x200011c0
 8002d48:	200011d4 	.word	0x200011d4
 8002d4c:	200011bc 	.word	0x200011bc
 8002d50:	200011d8 	.word	0x200011d8
 8002d54:	408f4000 	.word	0x408f4000
 8002d58:	200011ac 	.word	0x200011ac
 8002d5c:	20000aec 	.word	0x20000aec
 8002d60:	200011e8 	.word	0x200011e8
 8002d64:	200011e0 	.word	0x200011e0
 8002d68:	2000120c 	.word	0x2000120c
 8002d6c:	200011e4 	.word	0x200011e4
 8002d70:	20000af4 	.word	0x20000af4
 8002d74:	20001210 	.word	0x20001210
 8002d78:	20000238 	.word	0x20000238
 8002d7c:	447a0000 	.word	0x447a0000
 8002d80:	2000049c 	.word	0x2000049c
 8002d84:	20001214 	.word	0x20001214
 8002d88:	20000208 	.word	0x20000208
 8002d8c:	200003d0 	.word	0x200003d0
 8002d90:	20001216 	.word	0x20001216
 8002d94:	20001217 	.word	0x20001217

08002d98 <BaseAction>:

//uint64_t micros()
//{
//return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
//}
void BaseAction(void){
 8002d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d9c:	af00      	add	r7, sp, #0

	  position_goal = setPos/10.0;
 8002d9e:	4b9a      	ldr	r3, [pc, #616]	@ (8003008 <BaseAction+0x270>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fb8a 	bl	80004bc <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b97      	ldr	r3, [pc, #604]	@ (800300c <BaseAction+0x274>)
 8002dae:	f7fd fd19 	bl	80007e4 <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd fe43 	bl	8000a44 <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a93      	ldr	r2, [pc, #588]	@ (8003010 <BaseAction+0x278>)
 8002dc2:	6013      	str	r3, [r2, #0]
	  if (velocity < 0)
 8002dc4:	4b93      	ldr	r3, [pc, #588]	@ (8003014 <BaseAction+0x27c>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d508      	bpl.n	8002de6 <BaseAction+0x4e>
	  {
		  linear_velocity = velocity * -1;
 8002dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8003014 <BaseAction+0x27c>)
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	eef1 7a67 	vneg.f32	s15, s15
 8002dde:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <BaseAction+0x280>)
 8002de0:	edc3 7a00 	vstr	s15, [r3]
 8002de4:	e00b      	b.n	8002dfe <BaseAction+0x66>
	  }

	  else if (velocity >= 0)
 8002de6:	4b8b      	ldr	r3, [pc, #556]	@ (8003014 <BaseAction+0x27c>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	db03      	blt.n	8002dfe <BaseAction+0x66>
	  {
		  linear_velocity = velocity;
 8002df6:	4b87      	ldr	r3, [pc, #540]	@ (8003014 <BaseAction+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a87      	ldr	r2, [pc, #540]	@ (8003018 <BaseAction+0x280>)
 8002dfc:	6013      	str	r3, [r2, #0]
	  }
	  //linear_accel = accerelometer;
	  linear_position = qeifloat-16.0 ;
 8002dfe:	4b87      	ldr	r3, [pc, #540]	@ (800301c <BaseAction+0x284>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e0c:	4b84      	ldr	r3, [pc, #528]	@ (8003020 <BaseAction+0x288>)
 8002e0e:	edc3 7a00 	vstr	s15, [r3]



	  rState1=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002e12:	2140      	movs	r1, #64	@ 0x40
 8002e14:	4883      	ldr	r0, [pc, #524]	@ (8003024 <BaseAction+0x28c>)
 8002e16:	f001 ffeb 	bl	8004df0 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b82      	ldr	r3, [pc, #520]	@ (8003028 <BaseAction+0x290>)
 8002e20:	801a      	strh	r2, [r3, #0]
	  rState2=  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002e22:	2180      	movs	r1, #128	@ 0x80
 8002e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e28:	f001 ffe2 	bl	8004df0 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b7e      	ldr	r3, [pc, #504]	@ (800302c <BaseAction+0x294>)
 8002e32:	801a      	strh	r2, [r3, #0]
	  if (gripper ==1){
 8002e34:	4b7e      	ldr	r3, [pc, #504]	@ (8003030 <BaseAction+0x298>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10e      	bne.n	8002e5a <BaseAction+0xc2>
		  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0;
 8002e3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e40:	4878      	ldr	r0, [pc, #480]	@ (8003024 <BaseAction+0x28c>)
 8002e42:	f001 ffd5 	bl	8004df0 <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d109      	bne.n	8002e60 <BaseAction+0xc8>
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	4879      	ldr	r0, [pc, #484]	@ (8003034 <BaseAction+0x29c>)
 8002e50:	f001 ffce 	bl	8004df0 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	e002      	b.n	8002e60 <BaseAction+0xc8>
	  }
	  else if (gripper = 0){
 8002e5a:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <BaseAction+0x298>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
	static uint16_t timestamp1 = 0;
	static uint16_t timestamp2 = 0;
	static uint16_t timestamp3 = 0;
	static uint16_t timestamp4 = 0;
	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8002e60:	4b75      	ldr	r3, [pc, #468]	@ (8003038 <BaseAction+0x2a0>)
 8002e62:	889b      	ldrh	r3, [r3, #4]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b75      	ldr	r3, [pc, #468]	@ (800303c <BaseAction+0x2a4>)
 8002e68:	701a      	strb	r2, [r3, #0]

	  if (vacuum == 1)
 8002e6a:	4b74      	ldr	r3, [pc, #464]	@ (800303c <BaseAction+0x2a4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <BaseAction+0xe8>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e78:	486a      	ldr	r0, [pc, #424]	@ (8003024 <BaseAction+0x28c>)
 8002e7a:	f001 ffd1 	bl	8004e20 <HAL_GPIO_WritePin>
 8002e7e:	e005      	b.n	8002e8c <BaseAction+0xf4>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002e80:	2201      	movs	r2, #1
 8002e82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e86:	4867      	ldr	r0, [pc, #412]	@ (8003024 <BaseAction+0x28c>)
 8002e88:	f001 ffca 	bl	8004e20 <HAL_GPIO_WritePin>
	  }
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <BaseAction+0x2a0>)
 8002e8e:	88db      	ldrh	r3, [r3, #6]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b67      	ldr	r3, [pc, #412]	@ (8003030 <BaseAction+0x298>)
 8002e94:	701a      	strb	r2, [r3, #0]

	  reed = rState1 + (2 * rState2); //for 2 back 1
 8002e96:	4b64      	ldr	r3, [pc, #400]	@ (8003028 <BaseAction+0x290>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b63      	ldr	r3, [pc, #396]	@ (800302c <BaseAction+0x294>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b65      	ldr	r3, [pc, #404]	@ (8003040 <BaseAction+0x2a8>)
 8002eac:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8002eae:	4b64      	ldr	r3, [pc, #400]	@ (8003040 <BaseAction+0x2a8>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	005a      	lsls	r2, r3, #1
 8002eb4:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <BaseAction+0x2ac>)
 8002eb6:	fb83 3102 	smull	r3, r1, r3, r2
 8002eba:	17d3      	asrs	r3, r2, #31
 8002ebc:	1ac9      	subs	r1, r1, r3
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	440b      	add	r3, r1
 8002ec4:	1ad1      	subs	r1, r2, r3
 8002ec6:	b28a      	uxth	r2, r1
 8002ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <BaseAction+0x2a0>)
 8002eca:	811a      	strh	r2, [r3, #8]


	  registerFrame[0x11].U16 = (float)(linear_position * 10); //Position
 8002ecc:	4b54      	ldr	r3, [pc, #336]	@ (8003020 <BaseAction+0x288>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ede:	ee17 3a90 	vmov	r3, s15
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b54      	ldr	r3, [pc, #336]	@ (8003038 <BaseAction+0x2a0>)
 8002ee6:	845a      	strh	r2, [r3, #34]	@ 0x22
	  registerFrame[0x12].U16 = (float)(linear_velocity * 10); //Velocity
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8003018 <BaseAction+0x280>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efa:	ee17 3a90 	vmov	r3, s15
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b4d      	ldr	r3, [pc, #308]	@ (8003038 <BaseAction+0x2a0>)
 8002f02:	849a      	strh	r2, [r3, #36]	@ 0x24
	  registerFrame[0x13].U16 = (float)(linear_accel * 10)	; //Acceleration
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <BaseAction+0x2b0>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f16:	ee17 3a90 	vmov	r3, s15
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <BaseAction+0x2a0>)
 8002f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <BaseAction+0x2b4>)
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	4b44      	ldr	r3, [pc, #272]	@ (8003038 <BaseAction+0x2a0>)
 8002f26:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8002f2a:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <BaseAction+0x2a0>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <BaseAction+0x1a6>
		  registerFrame[0x00].U16 = 22881;
 8002f36:	4b40      	ldr	r3, [pc, #256]	@ (8003038 <BaseAction+0x2a0>)
 8002f38:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002f3c:	801a      	strh	r2, [r3, #0]
	  }

	  static uint16_t timestamp = 0;

		/////Set shelves
		  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <BaseAction+0x2a0>)
 8002f40:	885b      	ldrh	r3, [r3, #2]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10e      	bne.n	8002f64 <BaseAction+0x1cc>
		  {
			  registerFrame[0x01].U16 = 0; //change to idle mode
 8002f46:	4b3c      	ldr	r3, [pc, #240]	@ (8003038 <BaseAction+0x2a0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	805a      	strh	r2, [r3, #2]
			  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <BaseAction+0x2a0>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	841a      	strh	r2, [r3, #32]
//			  set_position_box();



			  //delay 2000ms
			 timestamp = HAL_GetTick()+2000;
 8002f52:	f001 f95b 	bl	800420c <HAL_GetTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <BaseAction+0x2b8>)
 8002f62:	801a      	strh	r2, [r3, #0]
		  }
		  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8002f64:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <BaseAction+0x2a0>)
 8002f66:	8c1b      	ldrh	r3, [r3, #32]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d123      	bne.n	8002fb4 <BaseAction+0x21c>
 8002f6c:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <BaseAction+0x2bc>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11f      	bne.n	8002fb4 <BaseAction+0x21c>
		  {
			  registerFrame[0x23].U16 = shelfPos[0];
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <BaseAction+0x2c0>)
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	4b2f      	ldr	r3, [pc, #188]	@ (8003038 <BaseAction+0x2a0>)
 8002f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			  registerFrame[0x24].U16 = shelfPos[1];
 8002f7e:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <BaseAction+0x2c0>)
 8002f80:	885a      	ldrh	r2, [r3, #2]
 8002f82:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <BaseAction+0x2a0>)
 8002f84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			  registerFrame[0x25].U16 = shelfPos[2];
 8002f88:	4b33      	ldr	r3, [pc, #204]	@ (8003058 <BaseAction+0x2c0>)
 8002f8a:	889a      	ldrh	r2, [r3, #4]
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <BaseAction+0x2a0>)
 8002f8e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			  registerFrame[0x26].U16 = shelfPos[3];
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <BaseAction+0x2c0>)
 8002f94:	88da      	ldrh	r2, [r3, #6]
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <BaseAction+0x2a0>)
 8002f98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			  registerFrame[0x27].U16 = shelfPos[4];
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <BaseAction+0x2c0>)
 8002f9e:	891a      	ldrh	r2, [r3, #8]
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <BaseAction+0x2a0>)
 8002fa2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			  registerFrame[0x10].U16 = 0; //
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <BaseAction+0x2a0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	841a      	strh	r2, [r3, #32]
			  flagShelf = 0;
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <BaseAction+0x2bc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e2a6      	b.n	8003502 <BaseAction+0x76a>
		  }

		///////Home
		  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <BaseAction+0x2a0>)
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d157      	bne.n	800306c <BaseAction+0x2d4>
		  	{
		  		(registerFrame[0x01].U16) = 0; //reset status
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <BaseAction+0x2a0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	805a      	strh	r2, [r3, #2]
		  		(registerFrame[0x10].U16) = 2; //Z-home
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <BaseAction+0x2a0>)
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	841a      	strh	r2, [r3, #32]

		  		//setPos = shelfPos[0]; // set goal to home
		  		setPos = 160;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <BaseAction+0x270>)
 8002fca:	22a0      	movs	r2, #160	@ 0xa0
 8002fcc:	801a      	strh	r2, [r3, #0]
		  		piingpong = 0;
 8002fce:	4b23      	ldr	r3, [pc, #140]	@ (800305c <BaseAction+0x2c4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	801a      	strh	r2, [r3, #0]
//		  		  uint8_t result = HomeZ();
//		  		  HAL_Delay(2000);
		  		  generate_trapezoidal_velocity_profile(time_op,16.0);
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <BaseAction+0x2c8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fa81 	bl	80004e0 <__aeabi_f2d>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	ed9f 1b07 	vldr	d1, [pc, #28]	@ 8003000 <BaseAction+0x268>
 8002fe6:	ec43 2b10 	vmov	d0, r2, r3
 8002fea:	f7ff fccf 	bl	800298c <generate_trapezoidal_velocity_profile>
		  		  Home = 0;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <BaseAction+0x2cc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	801a      	strh	r2, [r3, #0]
		  		  rou = 0;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <BaseAction+0x2d0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
				{
					registerFrame[0x10].U16 = 0; // finish point & home mode
					rnd2 = 0;
				}
			}
	}
 8002ffa:	e282      	b.n	8003502 <BaseAction+0x76a>
 8002ffc:	f3af 8000 	nop.w
 8003000:	00000000 	.word	0x00000000
 8003004:	40300000 	.word	0x40300000
 8003008:	20001182 	.word	0x20001182
 800300c:	40240000 	.word	0x40240000
 8003010:	200011a8 	.word	0x200011a8
 8003014:	200011d4 	.word	0x200011d4
 8003018:	20000fdc 	.word	0x20000fdc
 800301c:	20000aec 	.word	0x20000aec
 8003020:	20000fe4 	.word	0x20000fe4
 8003024:	48000400 	.word	0x48000400
 8003028:	20000fd8 	.word	0x20000fd8
 800302c:	20000fda 	.word	0x20000fda
 8003030:	20000fd5 	.word	0x20000fd5
 8003034:	48000800 	.word	0x48000800
 8003038:	20000fe8 	.word	0x20000fe8
 800303c:	20000fd4 	.word	0x20000fd4
 8003040:	20000fd6 	.word	0x20000fd6
 8003044:	55555556 	.word	0x55555556
 8003048:	20000fe0 	.word	0x20000fe0
 800304c:	20001184 	.word	0x20001184
 8003050:	20001238 	.word	0x20001238
 8003054:	20000fd0 	.word	0x20000fd0
 8003058:	20001178 	.word	0x20001178
 800305c:	20000fd2 	.word	0x20000fd2
 8003060:	20000200 	.word	0x20000200
 8003064:	200011de 	.word	0x200011de
 8003068:	20001214 	.word	0x20001214
			else if((registerFrame[0x01].U16) == 8)
 800306c:	4b98      	ldr	r3, [pc, #608]	@ (80032d0 <BaseAction+0x538>)
 800306e:	885b      	ldrh	r3, [r3, #2]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d138      	bne.n	80030e6 <BaseAction+0x34e>
				(registerFrame[0x01].U16) = 0; //reset status
 8003074:	4b96      	ldr	r3, [pc, #600]	@ (80032d0 <BaseAction+0x538>)
 8003076:	2200      	movs	r2, #0
 8003078:	805a      	strh	r2, [r3, #2]
				(registerFrame[0x10].U16) = 16; // Z-go point
 800307a:	4b95      	ldr	r3, [pc, #596]	@ (80032d0 <BaseAction+0x538>)
 800307c:	2210      	movs	r2, #16
 800307e:	841a      	strh	r2, [r3, #32]
				setPos = ((registerFrame[0x30].U16)/10.0)+16.0; // goal = point 30->base system 4 point mode
 8003080:	4b93      	ldr	r3, [pc, #588]	@ (80032d0 <BaseAction+0x538>)
 8003082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa18 	bl	80004bc <__aeabi_i2d>
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	4b90      	ldr	r3, [pc, #576]	@ (80032d4 <BaseAction+0x53c>)
 8003092:	f7fd fba7 	bl	80007e4 <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	4b8d      	ldr	r3, [pc, #564]	@ (80032d8 <BaseAction+0x540>)
 80030a4:	f7fd f8be 	bl	8000224 <__adddf3>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fca8 	bl	8000a04 <__aeabi_d2uiz>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b88      	ldr	r3, [pc, #544]	@ (80032dc <BaseAction+0x544>)
 80030ba:	801a      	strh	r2, [r3, #0]
				generate_trapezoidal_velocity_profile(time_op,setPos);
 80030bc:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <BaseAction+0x548>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa0d 	bl	80004e0 <__aeabi_f2d>
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1
 80030ca:	4b84      	ldr	r3, [pc, #528]	@ (80032dc <BaseAction+0x544>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f9e4 	bl	800049c <__aeabi_ui2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	ec43 2b11 	vmov	d1, r2, r3
 80030dc:	ec45 4b10 	vmov	d0, r4, r5
 80030e0:	f7ff fc54 	bl	800298c <generate_trapezoidal_velocity_profile>
	}
 80030e4:	e20d      	b.n	8003502 <BaseAction+0x76a>
			else if((registerFrame[0x01].U16 ==4)){
 80030e6:	4b7a      	ldr	r3, [pc, #488]	@ (80032d0 <BaseAction+0x538>)
 80030e8:	885b      	ldrh	r3, [r3, #2]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d10f      	bne.n	800310e <BaseAction+0x376>
				(registerFrame[0x01].U16) = 0; //reset status
 80030ee:	4b78      	ldr	r3, [pc, #480]	@ (80032d0 <BaseAction+0x538>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	805a      	strh	r2, [r3, #2]
				temPick = (registerFrame[0x21].U16);
 80030f4:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <BaseAction+0x538>)
 80030f6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80030fa:	4b7a      	ldr	r3, [pc, #488]	@ (80032e4 <BaseAction+0x54c>)
 80030fc:	801a      	strh	r2, [r3, #0]
				temPlace = (registerFrame[0x22].U16);
 80030fe:	4b74      	ldr	r3, [pc, #464]	@ (80032d0 <BaseAction+0x538>)
 8003100:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003104:	4b78      	ldr	r3, [pc, #480]	@ (80032e8 <BaseAction+0x550>)
 8003106:	801a      	strh	r2, [r3, #0]
				OrderSeparate();
 8003108:	f000 fa20 	bl	800354c <OrderSeparate>
	}
 800310c:	e1f9      	b.n	8003502 <BaseAction+0x76a>
			else if(rnd > 0)
 800310e:	4b77      	ldr	r3, [pc, #476]	@ (80032ec <BaseAction+0x554>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 81b5 	beq.w	8003482 <BaseAction+0x6ea>
			if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8003118:	4b6d      	ldr	r3, [pc, #436]	@ (80032d0 <BaseAction+0x538>)
 800311a:	8c1b      	ldrh	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d122      	bne.n	8003166 <BaseAction+0x3ce>
 8003120:	4b72      	ldr	r3, [pc, #456]	@ (80032ec <BaseAction+0x554>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d11e      	bne.n	8003166 <BaseAction+0x3ce>
 8003128:	4b71      	ldr	r3, [pc, #452]	@ (80032f0 <BaseAction+0x558>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11a      	bne.n	8003166 <BaseAction+0x3ce>
 8003130:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <BaseAction+0x55c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d116      	bne.n	8003166 <BaseAction+0x3ce>
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <BaseAction+0x560>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d112      	bne.n	8003166 <BaseAction+0x3ce>
				mode = 9; // for debug - pick
 8003140:	4b6e      	ldr	r3, [pc, #440]	@ (80032fc <BaseAction+0x564>)
 8003142:	2209      	movs	r2, #9
 8003144:	701a      	strb	r2, [r3, #0]
				(registerFrame[0x10].U16) = 4; // Z-go pick
 8003146:	4b62      	ldr	r3, [pc, #392]	@ (80032d0 <BaseAction+0x538>)
 8003148:	2204      	movs	r2, #4
 800314a:	841a      	strh	r2, [r3, #32]
				setPos = shelfPos[pick[5-rnd]-1];
 800314c:	4b67      	ldr	r3, [pc, #412]	@ (80032ec <BaseAction+0x554>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	f1c3 0305 	rsb	r3, r3, #5
 8003154:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <BaseAction+0x568>)
 8003156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800315a:	3b01      	subs	r3, #1
 800315c:	4a69      	ldr	r2, [pc, #420]	@ (8003304 <BaseAction+0x56c>)
 800315e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003162:	4b5e      	ldr	r3, [pc, #376]	@ (80032dc <BaseAction+0x544>)
 8003164:	801a      	strh	r2, [r3, #0]
			if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 8003166:	4b68      	ldr	r3, [pc, #416]	@ (8003308 <BaseAction+0x570>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80d8 	beq.w	8003320 <BaseAction+0x588>
 8003170:	4b57      	ldr	r3, [pc, #348]	@ (80032d0 <BaseAction+0x538>)
 8003172:	8c1b      	ldrh	r3, [r3, #32]
 8003174:	2b08      	cmp	r3, #8
 8003176:	f040 80d3 	bne.w	8003320 <BaseAction+0x588>
				if(mode == 6){
 800317a:	4b60      	ldr	r3, [pc, #384]	@ (80032fc <BaseAction+0x564>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d10b      	bne.n	800319a <BaseAction+0x402>
					timestamp1 = HAL_GetTick() + 300; // 0.5 sec delay
 8003182:	f001 f843 	bl	800420c <HAL_GetTick>
 8003186:	4603      	mov	r3, r0
 8003188:	b29b      	uxth	r3, r3
 800318a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <BaseAction+0x574>)
 8003192:	801a      	strh	r2, [r3, #0]
					mode = 60;
 8003194:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <BaseAction+0x564>)
 8003196:	223c      	movs	r2, #60	@ 0x3c
 8003198:	701a      	strb	r2, [r3, #0]
				if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 800319a:	4b56      	ldr	r3, [pc, #344]	@ (80032f4 <BaseAction+0x55c>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d021      	beq.n	80031e6 <BaseAction+0x44e>
 80031a2:	4b52      	ldr	r3, [pc, #328]	@ (80032ec <BaseAction+0x554>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01d      	beq.n	80031e6 <BaseAction+0x44e>
 80031aa:	4b53      	ldr	r3, [pc, #332]	@ (80032f8 <BaseAction+0x560>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d119      	bne.n	80031e6 <BaseAction+0x44e>
 80031b2:	4b4f      	ldr	r3, [pc, #316]	@ (80032f0 <BaseAction+0x558>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <BaseAction+0x44e>
 80031ba:	f001 f827 	bl	800420c <HAL_GetTick>
 80031be:	4603      	mov	r3, r0
 80031c0:	4a52      	ldr	r2, [pc, #328]	@ (800330c <BaseAction+0x574>)
 80031c2:	8812      	ldrh	r2, [r2, #0]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d30e      	bcc.n	80031e6 <BaseAction+0x44e>
					registerFrame[0x03].U16 = 1; // gripper forward
 80031c8:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <BaseAction+0x538>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	80da      	strh	r2, [r3, #6]
					timestamp2 = HAL_GetTick() + 100;
 80031ce:	f001 f81d 	bl	800420c <HAL_GetTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3364      	adds	r3, #100	@ 0x64
 80031d8:	b29a      	uxth	r2, r3
 80031da:	4b4d      	ldr	r3, [pc, #308]	@ (8003310 <BaseAction+0x578>)
 80031dc:	801a      	strh	r2, [r3, #0]
					mode = 61;
 80031de:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <BaseAction+0x564>)
 80031e0:	223d      	movs	r2, #61	@ 0x3d
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e03d      	b.n	8003262 <BaseAction+0x4ca>
				else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 80031e6:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <BaseAction+0x55c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d119      	bne.n	8003222 <BaseAction+0x48a>
 80031ee:	4b42      	ldr	r3, [pc, #264]	@ (80032f8 <BaseAction+0x560>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d115      	bne.n	8003222 <BaseAction+0x48a>
 80031f6:	f001 f809 	bl	800420c <HAL_GetTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4a44      	ldr	r2, [pc, #272]	@ (8003310 <BaseAction+0x578>)
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	4293      	cmp	r3, r2
 8003202:	d30e      	bcc.n	8003222 <BaseAction+0x48a>
					registerFrame[0x02].U16 = 0; //vacuum off
 8003204:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <BaseAction+0x538>)
 8003206:	2200      	movs	r2, #0
 8003208:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 100; // 0.5 sec delay
 800320a:	f000 ffff 	bl	800420c <HAL_GetTick>
 800320e:	4603      	mov	r3, r0
 8003210:	b29b      	uxth	r3, r3
 8003212:	3364      	adds	r3, #100	@ 0x64
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b3f      	ldr	r3, [pc, #252]	@ (8003314 <BaseAction+0x57c>)
 8003218:	801a      	strh	r2, [r3, #0]
					mode = 62;
 800321a:	4b38      	ldr	r3, [pc, #224]	@ (80032fc <BaseAction+0x564>)
 800321c:	223e      	movs	r2, #62	@ 0x3e
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e01f      	b.n	8003262 <BaseAction+0x4ca>
				else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 8003222:	4b35      	ldr	r3, [pc, #212]	@ (80032f8 <BaseAction+0x560>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11b      	bne.n	8003262 <BaseAction+0x4ca>
 800322a:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <BaseAction+0x558>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d117      	bne.n	8003262 <BaseAction+0x4ca>
 8003232:	f000 ffeb 	bl	800420c <HAL_GetTick>
 8003236:	4603      	mov	r3, r0
 8003238:	4a36      	ldr	r2, [pc, #216]	@ (8003314 <BaseAction+0x57c>)
 800323a:	8812      	ldrh	r2, [r2, #0]
 800323c:	4293      	cmp	r3, r2
 800323e:	d310      	bcc.n	8003262 <BaseAction+0x4ca>
					registerFrame[0x03].U16 = 0; //gripper backward
 8003240:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <BaseAction+0x538>)
 8003242:	2200      	movs	r2, #0
 8003244:	80da      	strh	r2, [r3, #6]
					load = 0;
 8003246:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <BaseAction+0x580>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 100;
 800324c:	f000 ffde 	bl	800420c <HAL_GetTick>
 8003250:	4603      	mov	r3, r0
 8003252:	b29b      	uxth	r3, r3
 8003254:	3364      	adds	r3, #100	@ 0x64
 8003256:	b29a      	uxth	r2, r3
 8003258:	4b30      	ldr	r3, [pc, #192]	@ (800331c <BaseAction+0x584>)
 800325a:	801a      	strh	r2, [r3, #0]
					mode = 63;
 800325c:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <BaseAction+0x564>)
 800325e:	223f      	movs	r2, #63	@ 0x3f
 8003260:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8003262:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <BaseAction+0x558>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 814a 	bne.w	8003500 <BaseAction+0x768>
 800326c:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <BaseAction+0x55c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8145 	bne.w	8003500 <BaseAction+0x768>
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <BaseAction+0x560>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 8140 	bne.w	8003500 <BaseAction+0x768>
 8003280:	f000 ffc4 	bl	800420c <HAL_GetTick>
 8003284:	4603      	mov	r3, r0
 8003286:	4a25      	ldr	r2, [pc, #148]	@ (800331c <BaseAction+0x584>)
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	4293      	cmp	r3, r2
 800328c:	f0c0 8138 	bcc.w	8003500 <BaseAction+0x768>
					rnd--;
 8003290:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <BaseAction+0x554>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <BaseAction+0x554>)
 800329a:	701a      	strb	r2, [r3, #0]
					if(rnd>0)
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <BaseAction+0x554>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 812d 	beq.w	8003500 <BaseAction+0x768>
						(registerFrame[0x10].U16) = 4; // Z-go pick
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <BaseAction+0x538>)
 80032a8:	2204      	movs	r2, #4
 80032aa:	841a      	strh	r2, [r3, #32]
						setPos = shelfPos[pick[5-rnd]-1];
 80032ac:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <BaseAction+0x554>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f1c3 0305 	rsb	r3, r3, #5
 80032b4:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <BaseAction+0x568>)
 80032b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <BaseAction+0x56c>)
 80032be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <BaseAction+0x544>)
 80032c4:	801a      	strh	r2, [r3, #0]
						mode = 9;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <BaseAction+0x564>)
 80032c8:	2209      	movs	r2, #9
 80032ca:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80032cc:	e118      	b.n	8003500 <BaseAction+0x768>
 80032ce:	bf00      	nop
 80032d0:	20000fe8 	.word	0x20000fe8
 80032d4:	40240000 	.word	0x40240000
 80032d8:	40300000 	.word	0x40300000
 80032dc:	20001182 	.word	0x20001182
 80032e0:	20000200 	.word	0x20000200
 80032e4:	20001188 	.word	0x20001188
 80032e8:	2000118a 	.word	0x2000118a
 80032ec:	200011a2 	.word	0x200011a2
 80032f0:	20000fd5 	.word	0x20000fd5
 80032f4:	20000fd6 	.word	0x20000fd6
 80032f8:	20000fd4 	.word	0x20000fd4
 80032fc:	20001186 	.word	0x20001186
 8003300:	2000118c 	.word	0x2000118c
 8003304:	20001178 	.word	0x20001178
 8003308:	20000fd2 	.word	0x20000fd2
 800330c:	2000123a 	.word	0x2000123a
 8003310:	2000123c 	.word	0x2000123c
 8003314:	2000123e 	.word	0x2000123e
 8003318:	200011a4 	.word	0x200011a4
 800331c:	20001240 	.word	0x20001240
			else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 8003320:	4b79      	ldr	r3, [pc, #484]	@ (8003508 <BaseAction+0x770>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80ec 	beq.w	8003502 <BaseAction+0x76a>
 800332a:	4b78      	ldr	r3, [pc, #480]	@ (800350c <BaseAction+0x774>)
 800332c:	8c1b      	ldrh	r3, [r3, #32]
 800332e:	2b04      	cmp	r3, #4
 8003330:	f040 80e7 	bne.w	8003502 <BaseAction+0x76a>
				if(mode == 9){
 8003334:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <BaseAction+0x778>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d107      	bne.n	800334c <BaseAction+0x5b4>
					timestamp1 = HAL_GetTick() + 50; // 0.05 sec delay
 800333c:	f000 ff66 	bl	800420c <HAL_GetTick>
 8003340:	4603      	mov	r3, r0
 8003342:	b29b      	uxth	r3, r3
 8003344:	3332      	adds	r3, #50	@ 0x32
 8003346:	b29a      	uxth	r2, r3
 8003348:	4b72      	ldr	r3, [pc, #456]	@ (8003514 <BaseAction+0x77c>)
 800334a:	801a      	strh	r2, [r3, #0]
				if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 800334c:	4b72      	ldr	r3, [pc, #456]	@ (8003518 <BaseAction+0x780>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d11a      	bne.n	800338a <BaseAction+0x5f2>
 8003354:	4b71      	ldr	r3, [pc, #452]	@ (800351c <BaseAction+0x784>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <BaseAction+0x5f2>
 800335c:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <BaseAction+0x788>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d112      	bne.n	800338a <BaseAction+0x5f2>
 8003364:	f000 ff52 	bl	800420c <HAL_GetTick>
 8003368:	4603      	mov	r3, r0
 800336a:	4a6a      	ldr	r2, [pc, #424]	@ (8003514 <BaseAction+0x77c>)
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	4293      	cmp	r3, r2
 8003370:	d30b      	bcc.n	800338a <BaseAction+0x5f2>
					timestamp2 = HAL_GetTick() + 100;
 8003372:	f000 ff4b 	bl	800420c <HAL_GetTick>
 8003376:	4603      	mov	r3, r0
 8003378:	b29b      	uxth	r3, r3
 800337a:	3364      	adds	r3, #100	@ 0x64
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b69      	ldr	r3, [pc, #420]	@ (8003524 <BaseAction+0x78c>)
 8003380:	801a      	strh	r2, [r3, #0]
					registerFrame[0x03].U16 = 1; //gripper forward
 8003382:	4b62      	ldr	r3, [pc, #392]	@ (800350c <BaseAction+0x774>)
 8003384:	2201      	movs	r2, #1
 8003386:	80da      	strh	r2, [r3, #6]
 8003388:	e03c      	b.n	8003404 <BaseAction+0x66c>
				else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 800338a:	4b64      	ldr	r3, [pc, #400]	@ (800351c <BaseAction+0x784>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d117      	bne.n	80033c2 <BaseAction+0x62a>
 8003392:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <BaseAction+0x788>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <BaseAction+0x62a>
 800339a:	f000 ff37 	bl	800420c <HAL_GetTick>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a60      	ldr	r2, [pc, #384]	@ (8003524 <BaseAction+0x78c>)
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d30c      	bcc.n	80033c2 <BaseAction+0x62a>
					registerFrame[0x02].U16 = 1; //vacuum on
 80033a8:	4b58      	ldr	r3, [pc, #352]	@ (800350c <BaseAction+0x774>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 400;
 80033ae:	f000 ff2d 	bl	800420c <HAL_GetTick>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003528 <BaseAction+0x790>)
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e020      	b.n	8003404 <BaseAction+0x66c>
				else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 80033c2:	4b55      	ldr	r3, [pc, #340]	@ (8003518 <BaseAction+0x780>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d11c      	bne.n	8003404 <BaseAction+0x66c>
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <BaseAction+0x784>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d118      	bne.n	8003404 <BaseAction+0x66c>
 80033d2:	4b53      	ldr	r3, [pc, #332]	@ (8003520 <BaseAction+0x788>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d114      	bne.n	8003404 <BaseAction+0x66c>
 80033da:	f000 ff17 	bl	800420c <HAL_GetTick>
 80033de:	4603      	mov	r3, r0
 80033e0:	4a51      	ldr	r2, [pc, #324]	@ (8003528 <BaseAction+0x790>)
 80033e2:	8812      	ldrh	r2, [r2, #0]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d30d      	bcc.n	8003404 <BaseAction+0x66c>
					registerFrame[0x03].U16 = 0; //gripper backward
 80033e8:	4b48      	ldr	r3, [pc, #288]	@ (800350c <BaseAction+0x774>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	80da      	strh	r2, [r3, #6]
					load = 1;
 80033ee:	4b4f      	ldr	r3, [pc, #316]	@ (800352c <BaseAction+0x794>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 200;
 80033f4:	f000 ff0a 	bl	800420c <HAL_GetTick>
 80033f8:	4603      	mov	r3, r0
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	33c8      	adds	r3, #200	@ 0xc8
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <BaseAction+0x798>)
 8003402:	801a      	strh	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 8003404:	4b45      	ldr	r3, [pc, #276]	@ (800351c <BaseAction+0x784>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d17a      	bne.n	8003502 <BaseAction+0x76a>
 800340c:	4b42      	ldr	r3, [pc, #264]	@ (8003518 <BaseAction+0x780>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d176      	bne.n	8003502 <BaseAction+0x76a>
 8003414:	4b42      	ldr	r3, [pc, #264]	@ (8003520 <BaseAction+0x788>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d172      	bne.n	8003502 <BaseAction+0x76a>
 800341c:	f000 fef6 	bl	800420c <HAL_GetTick>
 8003420:	4603      	mov	r3, r0
 8003422:	4a43      	ldr	r2, [pc, #268]	@ (8003530 <BaseAction+0x798>)
 8003424:	8812      	ldrh	r2, [r2, #0]
 8003426:	4293      	cmp	r3, r2
 8003428:	d36b      	bcc.n	8003502 <BaseAction+0x76a>
					(registerFrame[0x10].U16) = 8; // Z-go place
 800342a:	4b38      	ldr	r3, [pc, #224]	@ (800350c <BaseAction+0x774>)
 800342c:	2208      	movs	r2, #8
 800342e:	841a      	strh	r2, [r3, #32]
					if(place[5-rnd] == 5){
 8003430:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <BaseAction+0x79c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f1c3 0305 	rsb	r3, r3, #5
 8003438:	4a3f      	ldr	r2, [pc, #252]	@ (8003538 <BaseAction+0x7a0>)
 800343a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d10f      	bne.n	8003462 <BaseAction+0x6ca>
						setPos = shelfPos[place[5-rnd]-1] + 50; // goal + 5mm
 8003442:	4b3c      	ldr	r3, [pc, #240]	@ (8003534 <BaseAction+0x79c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f1c3 0305 	rsb	r3, r3, #5
 800344a:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <BaseAction+0x7a0>)
 800344c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003450:	3b01      	subs	r3, #1
 8003452:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <BaseAction+0x7a4>)
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	3332      	adds	r3, #50	@ 0x32
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <BaseAction+0x7a8>)
 800345e:	801a      	strh	r2, [r3, #0]
	}
 8003460:	e04f      	b.n	8003502 <BaseAction+0x76a>
						setPos = shelfPos[place[5-rnd]-1] + 100; // goal + 5mm
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <BaseAction+0x79c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f1c3 0305 	rsb	r3, r3, #5
 800346a:	4a33      	ldr	r2, [pc, #204]	@ (8003538 <BaseAction+0x7a0>)
 800346c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003470:	3b01      	subs	r3, #1
 8003472:	4a32      	ldr	r2, [pc, #200]	@ (800353c <BaseAction+0x7a4>)
 8003474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003478:	3364      	adds	r3, #100	@ 0x64
 800347a:	b29a      	uxth	r2, r3
 800347c:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <BaseAction+0x7a8>)
 800347e:	801a      	strh	r2, [r3, #0]
	}
 8003480:	e03f      	b.n	8003502 <BaseAction+0x76a>
			else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 8003482:	4b22      	ldr	r3, [pc, #136]	@ (800350c <BaseAction+0x774>)
 8003484:	8c1b      	ldrh	r3, [r3, #32]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d107      	bne.n	800349a <BaseAction+0x702>
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <BaseAction+0x79c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <BaseAction+0x702>
				(registerFrame[0x10].U16 = 0); // End Jogs
 8003492:	4b1e      	ldr	r3, [pc, #120]	@ (800350c <BaseAction+0x774>)
 8003494:	2200      	movs	r2, #0
 8003496:	841a      	strh	r2, [r3, #32]
 8003498:	e033      	b.n	8003502 <BaseAction+0x76a>
			else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 800349a:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <BaseAction+0x770>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02f      	beq.n	8003502 <BaseAction+0x76a>
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <BaseAction+0x774>)
 80034a4:	8c1b      	ldrh	r3, [r3, #32]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <BaseAction+0x71a>
 80034aa:	4b18      	ldr	r3, [pc, #96]	@ (800350c <BaseAction+0x774>)
 80034ac:	8c1b      	ldrh	r3, [r3, #32]
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d127      	bne.n	8003502 <BaseAction+0x76a>
				if(rnd2 == 0){
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <BaseAction+0x7ac>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <BaseAction+0x740>
					Timestamp = HAL_GetTick() + 1000; //delay
 80034ba:	f000 fea7 	bl	800420c <HAL_GetTick>
 80034be:	4603      	mov	r3, r0
 80034c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80034c4:	2200      	movs	r2, #0
 80034c6:	4698      	mov	r8, r3
 80034c8:	4691      	mov	r9, r2
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <BaseAction+0x7b0>)
 80034cc:	e9c3 8900 	strd	r8, r9, [r3]
					rnd2 = 1;
 80034d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <BaseAction+0x7ac>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
	}
 80034d6:	e014      	b.n	8003502 <BaseAction+0x76a>
				else if(HAL_GetTick() >= Timestamp)
 80034d8:	f000 fe98 	bl	800420c <HAL_GetTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	2200      	movs	r2, #0
 80034e0:	461c      	mov	r4, r3
 80034e2:	4615      	mov	r5, r2
 80034e4:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <BaseAction+0x7b0>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	4294      	cmp	r4, r2
 80034ec:	eb75 0303 	sbcs.w	r3, r5, r3
 80034f0:	d307      	bcc.n	8003502 <BaseAction+0x76a>
					registerFrame[0x10].U16 = 0; // finish point & home mode
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <BaseAction+0x774>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	841a      	strh	r2, [r3, #32]
					rnd2 = 0;
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <BaseAction+0x7ac>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
	}
 80034fe:	e000      	b.n	8003502 <BaseAction+0x76a>
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8003500:	bf00      	nop
	}
 8003502:	bf00      	nop
 8003504:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003508:	20000fd2 	.word	0x20000fd2
 800350c:	20000fe8 	.word	0x20000fe8
 8003510:	20001186 	.word	0x20001186
 8003514:	2000123a 	.word	0x2000123a
 8003518:	20000fd6 	.word	0x20000fd6
 800351c:	20000fd5 	.word	0x20000fd5
 8003520:	20000fd4 	.word	0x20000fd4
 8003524:	2000123c 	.word	0x2000123c
 8003528:	2000123e 	.word	0x2000123e
 800352c:	200011a4 	.word	0x200011a4
 8003530:	20001240 	.word	0x20001240
 8003534:	200011a2 	.word	0x200011a2
 8003538:	20001198 	.word	0x20001198
 800353c:	20001178 	.word	0x20001178
 8003540:	20001182 	.word	0x20001182
 8003544:	200011a3 	.word	0x200011a3
 8003548:	20001248 	.word	0x20001248

0800354c <OrderSeparate>:


void OrderSeparate(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
	rnd = 0;
 8003552:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <OrderSeparate+0xd8>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
	////// Convert to string
	for(uint16_t p = 10000;p>=1;p/=10)
 8003558:	f242 7310 	movw	r3, #10000	@ 0x2710
 800355c:	80fb      	strh	r3, [r7, #6]
 800355e:	e057      	b.n	8003610 <OrderSeparate+0xc4>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 8003560:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <OrderSeparate+0xdc>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	429a      	cmp	r2, r3
 8003568:	d814      	bhi.n	8003594 <OrderSeparate+0x48>
 800356a:	4b2f      	ldr	r3, [pc, #188]	@ (8003628 <OrderSeparate+0xdc>)
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b05      	cmp	r3, #5
 8003578:	d80c      	bhi.n	8003594 <OrderSeparate+0x48>
 800357a:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <OrderSeparate+0xe0>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	429a      	cmp	r2, r3
 8003582:	d807      	bhi.n	8003594 <OrderSeparate+0x48>
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <OrderSeparate+0xe0>)
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b05      	cmp	r3, #5
 8003592:	d903      	bls.n	800359c <OrderSeparate+0x50>
		{
			rnd = 0;
 8003594:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <OrderSeparate+0xd8>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
			//mode = 0;
			break;
 800359a:	e03d      	b.n	8003618 <OrderSeparate+0xcc>
		}
		pick[rnd] = temPick/p; // use this for pick
 800359c:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <OrderSeparate+0xdc>)
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <OrderSeparate+0xd8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <OrderSeparate+0xe4>)
 80035b0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <OrderSeparate+0xe0>)
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <OrderSeparate+0xd8>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <OrderSeparate+0xe8>)
 80035c8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 80035cc:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <OrderSeparate+0xdc>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d6:	fb01 f202 	mul.w	r2, r1, r2
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	b29a      	uxth	r2, r3
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <OrderSeparate+0xdc>)
 80035e0:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 80035e2:	4b12      	ldr	r3, [pc, #72]	@ (800362c <OrderSeparate+0xe0>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035ec:	fb01 f202 	mul.w	r2, r1, r2
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <OrderSeparate+0xe0>)
 80035f6:	801a      	strh	r2, [r3, #0]
		rnd++;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <OrderSeparate+0xd8>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <OrderSeparate+0xd8>)
 8003602:	701a      	strb	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1;p/=10)
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4a0c      	ldr	r2, [pc, #48]	@ (8003638 <OrderSeparate+0xec>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	80fb      	strh	r3, [r7, #6]
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1a4      	bne.n	8003560 <OrderSeparate+0x14>
	}
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	200011a2 	.word	0x200011a2
 8003628:	20001188 	.word	0x20001188
 800362c:	2000118a 	.word	0x2000118a
 8003630:	2000118c 	.word	0x2000118c
 8003634:	20001198 	.word	0x20001198
 8003638:	cccccccd 	.word	0xcccccccd

0800363c <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 8003648:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <serviceMotor+0x48>)
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
	if(dir){
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <serviceMotor+0x4c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <serviceMotor+0x4c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 8003664:	e007      	b.n	8003676 <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <serviceMotor+0x4c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <serviceMotor+0x4c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000af4 	.word	0x20000af4
 8003688:	20000238 	.word	0x20000238

0800368c <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	return zStop;
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <getZStop+0x14>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20000af4 	.word	0x20000af4

080036a4 <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_EXTI_Callback+0x18>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ba:	d117      	bne.n	80036ec <HAL_GPIO_EXTI_Callback+0x48>
 80036bc:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d112      	bne.n	80036ec <HAL_GPIO_EXTI_Callback+0x48>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x58>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036ce:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_GPIO_EXTI_Callback+0x58>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24
		qeifloat = 0;
 80036e4:	4b07      	ldr	r3, [pc, #28]	@ (8003704 <HAL_GPIO_EXTI_Callback+0x60>)
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
	}

}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	20000af4 	.word	0x20000af4
 80036fc:	20000238 	.word	0x20000238
 8003700:	20000304 	.word	0x20000304
 8003704:	20000aec 	.word	0x20000aec

08003708 <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a05      	ldr	r2, [pc, #20]	@ (800372c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d103      	bne.n	8003722 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 800371a:	2104      	movs	r1, #4
 800371c:	4804      	ldr	r0, [pc, #16]	@ (8003730 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800371e:	f003 f907 	bl	8006930 <HAL_TIM_PWM_Stop_DMA>
	}

}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40000400 	.word	0x40000400
 8003730:	200003d0 	.word	0x200003d0

08003734 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003734:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a16      	ldr	r2, [pc, #88]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d104      	bne.n	8003750 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 8003746:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003748:	f645 1261 	movw	r2, #22881	@ 0x5961
 800374c:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 800374e:	e01f      	b.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim4)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10c      	bne.n	8003772 <HAL_TIM_PeriodElapsedCallback+0x3e>
		i+=1;
 8003758:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f112 0801 	adds.w	r8, r2, #1
 8003762:	f143 0900 	adc.w	r9, r3, #0
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003768:	e9c3 8900 	strd	r8, r9, [r3]
		generate_Velocity();
 800376c:	f7ff f974 	bl	8002a58 <generate_Velocity>
}
 8003770:	e00e      	b.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim7)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10a      	bne.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x5c>
	_micros += UINT16_MAX;
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003784:	1854      	adds	r4, r2, r1
 8003786:	f143 0500 	adc.w	r5, r3, #0
 800378a:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800378c:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800379a:	bf00      	nop
 800379c:	20000568 	.word	0x20000568
 80037a0:	20000fe8 	.word	0x20000fe8
 80037a4:	2000049c 	.word	0x2000049c
 80037a8:	200011c8 	.word	0x200011c8
 80037ac:	20000634 	.word	0x20000634
 80037b0:	20001228 	.word	0x20001228

080037b4 <micros>:

uint64_t micros()
{
 80037b4:	b4b0      	push	{r4, r5, r7}
 80037b6:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <micros+0x2c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	2200      	movs	r2, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <micros+0x30>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	1884      	adds	r4, r0, r2
 80037cc:	eb41 0503 	adc.w	r5, r1, r3
 80037d0:	4622      	mov	r2, r4
 80037d2:	462b      	mov	r3, r5
}
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	bcb0      	pop	{r4, r5, r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000634 	.word	0x20000634
 80037e4:	20001228 	.word	0x20001228

080037e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037ec:	b672      	cpsid	i
}
 80037ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <Error_Handler+0x8>

080037f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003838 <HAL_MspInit+0x44>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003838 <HAL_MspInit+0x44>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6613      	str	r3, [r2, #96]	@ 0x60
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_MspInit+0x44>)
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_MspInit+0x44>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <HAL_MspInit+0x44>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	@ 0x58
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_MspInit+0x44>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800382a:	f001 fbcd 	bl	8004fc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	@ 0x38
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a72      	ldr	r2, [pc, #456]	@ (8003a24 <HAL_TIM_Base_MspInit+0x1e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d139      	bne.n	80038d2 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800385e:	4b72      	ldr	r3, [pc, #456]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003862:	4a71      	ldr	r2, [pc, #452]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003864:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003868:	6613      	str	r3, [r2, #96]	@ 0x60
 800386a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003882:	4b69      	ldr	r3, [pc, #420]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800388e:	2340      	movs	r3, #64	@ 0x40
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003892:	2312      	movs	r3, #18
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	2300      	movs	r3, #0
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800389e:	2306      	movs	r3, #6
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a6:	4619      	mov	r1, r3
 80038a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ac:	f001 f91e 	bl	8004aec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	2018      	movs	r0, #24
 80038b6:	f000 fdb2 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80038ba:	2018      	movs	r0, #24
 80038bc:	f000 fdc9 	bl	8004452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	2019      	movs	r0, #25
 80038c6:	f000 fdaa 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038ca:	2019      	movs	r0, #25
 80038cc:	f000 fdc1 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80038d0:	e0a3      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a55      	ldr	r2, [pc, #340]	@ (8003a2c <HAL_TIM_Base_MspInit+0x1f0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d137      	bne.n	800394c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038dc:	4b52      	ldr	r3, [pc, #328]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	4a51      	ldr	r2, [pc, #324]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 80038f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 80038f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a34 <HAL_TIM_Base_MspInit+0x1f8>)
 80038f8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80038fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 80038fc:	223e      	movs	r2, #62	@ 0x3e
 80038fe:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003900:	4b4b      	ldr	r3, [pc, #300]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003902:	2210      	movs	r2, #16
 8003904:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003906:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800390c:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003912:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003918:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800391a:	4b45      	ldr	r3, [pc, #276]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 800391c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003920:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003924:	2200      	movs	r2, #0
 8003926:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003928:	4b41      	ldr	r3, [pc, #260]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800392e:	4840      	ldr	r0, [pc, #256]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003930:	f000 fdaa 	bl	8004488 <HAL_DMA_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 800393a:	f7ff ff55 	bl	80037e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a3b      	ldr	r2, [pc, #236]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
 8003944:	4a3a      	ldr	r2, [pc, #232]	@ (8003a30 <HAL_TIM_Base_MspInit+0x1f4>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800394a:	e066      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a39      	ldr	r2, [pc, #228]	@ (8003a38 <HAL_TIM_Base_MspInit+0x1fc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d114      	bne.n	8003980 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003956:	4b34      	ldr	r3, [pc, #208]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395a:	4a33      	ldr	r2, [pc, #204]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6593      	str	r3, [r2, #88]	@ 0x58
 8003962:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	201e      	movs	r0, #30
 8003974:	f000 fd53 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003978:	201e      	movs	r0, #30
 800397a:	f000 fd6a 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 800397e:	e04c      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2d      	ldr	r2, [pc, #180]	@ (8003a3c <HAL_TIM_Base_MspInit+0x200>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d114      	bne.n	80039b4 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800398a:	4b27      	ldr	r3, [pc, #156]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	6593      	str	r3, [r2, #88]	@ 0x58
 8003996:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	2032      	movs	r0, #50	@ 0x32
 80039a8:	f000 fd39 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80039ac:	2032      	movs	r0, #50	@ 0x32
 80039ae:	f000 fd50 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 80039b2:	e032      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a21      	ldr	r2, [pc, #132]	@ (8003a40 <HAL_TIM_Base_MspInit+0x204>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d114      	bne.n	80039e8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80039be:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80039c4:	f043 0320 	orr.w	r3, r3, #32
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ca:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	2037      	movs	r0, #55	@ 0x37
 80039dc:	f000 fd1f 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80039e0:	2037      	movs	r0, #55	@ 0x37
 80039e2:	f000 fd36 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 80039e6:	e018      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <HAL_TIM_Base_MspInit+0x208>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d113      	bne.n	8003a1a <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_TIM_Base_MspInit+0x1ec>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2019      	movs	r0, #25
 8003a10:	f000 fd05 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a14:	2019      	movs	r0, #25
 8003a16:	f000 fd1c 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3738      	adds	r7, #56	@ 0x38
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	200007cc 	.word	0x200007cc
 8003a34:	40020030 	.word	0x40020030
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40001400 	.word	0x40001400
 8003a44:	40014400 	.word	0x40014400

08003a48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a68:	d128      	bne.n	8003abc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a86:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003a9a:	2322      	movs	r3, #34	@ 0x22
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ab8:	f001 f818 	bl	8004aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	@ 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <HAL_TIM_MspPostInit+0xac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d11e      	bne.n	8003b28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aea:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aee:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af6:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003b14:	2306      	movs	r3, #6
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b22:	f000 ffe3 	bl	8004aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b26:	e021      	b.n	8003b6c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a13      	ldr	r2, [pc, #76]	@ (8003b7c <HAL_TIM_MspPostInit+0xb4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d11c      	bne.n	8003b6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b32:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <HAL_TIM_MspPostInit+0xb0>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b68:	f000 ffc0 	bl	8004aec <HAL_GPIO_Init>
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40000400 	.word	0x40000400

08003b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0a0      	sub	sp, #128	@ 0x80
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b98:	f107 0318 	add.w	r3, r7, #24
 8003b9c:	2254      	movs	r2, #84	@ 0x54
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f006 fe9b 	bl	800a8dc <memset>
  if(huart->Instance==USART1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a80      	ldr	r2, [pc, #512]	@ (8003dac <HAL_UART_MspInit+0x22c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d161      	bne.n	8003c74 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb8:	f107 0318 	add.w	r3, r7, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 ff41 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bc8:	f7ff fe0e 	bl	80037e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bcc:	4b78      	ldr	r3, [pc, #480]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd0:	4a77      	ldr	r2, [pc, #476]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd8:	4b75      	ldr	r3, [pc, #468]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be4:	4b72      	ldr	r3, [pc, #456]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be8:	4a71      	ldr	r2, [pc, #452]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bfc:	2330      	movs	r3, #48	@ 0x30
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c00:	2302      	movs	r3, #2
 8003c02:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c0c:	2307      	movs	r3, #7
 8003c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c14:	4619      	mov	r1, r3
 8003c16:	4867      	ldr	r0, [pc, #412]	@ (8003db4 <HAL_UART_MspInit+0x234>)
 8003c18:	f000 ff68 	bl	8004aec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003c1c:	4b66      	ldr	r3, [pc, #408]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c1e:	4a67      	ldr	r2, [pc, #412]	@ (8003dbc <HAL_UART_MspInit+0x23c>)
 8003c20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003c22:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c24:	2218      	movs	r2, #24
 8003c26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c28:	4b63      	ldr	r3, [pc, #396]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2e:	4b62      	ldr	r3, [pc, #392]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c34:	4b60      	ldr	r3, [pc, #384]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c40:	4b5d      	ldr	r3, [pc, #372]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003c46:	4b5c      	ldr	r3, [pc, #368]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c54:	4858      	ldr	r0, [pc, #352]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c56:	f000 fc17 	bl	8004488 <HAL_DMA_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003c60:	f7ff fdc2 	bl	80037e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a54      	ldr	r2, [pc, #336]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003c6c:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_UART_MspInit+0x238>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c72:	e097      	b.n	8003da4 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a51      	ldr	r2, [pc, #324]	@ (8003dc0 <HAL_UART_MspInit+0x240>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	f040 8092 	bne.w	8003da4 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c80:	2302      	movs	r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c88:	f107 0318 	add.w	r3, r7, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fed9 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8003c98:	f7ff fda6 	bl	80037e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9c:	4b44      	ldr	r3, [pc, #272]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca8:	4b41      	ldr	r3, [pc, #260]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_UART_MspInit+0x230>)
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ccc:	230c      	movs	r3, #12
 8003cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cdc:	2307      	movs	r3, #7
 8003cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cea:	f000 feff 	bl	8004aec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003cee:	4b35      	ldr	r3, [pc, #212]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003cf0:	4a35      	ldr	r2, [pc, #212]	@ (8003dc8 <HAL_UART_MspInit+0x248>)
 8003cf2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003cf4:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003cf6:	221a      	movs	r2, #26
 8003cf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cfa:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d00:	4b30      	ldr	r3, [pc, #192]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d06:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d08:	2280      	movs	r2, #128	@ 0x80
 8003d0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d12:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d18:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d1e:	4b29      	ldr	r3, [pc, #164]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d24:	4827      	ldr	r0, [pc, #156]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d26:	f000 fbaf 	bl	8004488 <HAL_DMA_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003d30:	f7ff fd5a 	bl	80037e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a23      	ldr	r2, [pc, #140]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003d3c:	4a21      	ldr	r2, [pc, #132]	@ (8003dc4 <HAL_UART_MspInit+0x244>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003d42:	4b22      	ldr	r3, [pc, #136]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d44:	4a22      	ldr	r2, [pc, #136]	@ (8003dd0 <HAL_UART_MspInit+0x250>)
 8003d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003d48:	4b20      	ldr	r3, [pc, #128]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d4a:	221b      	movs	r2, #27
 8003d4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d50:	2210      	movs	r2, #16
 8003d52:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d66:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d78:	4814      	ldr	r0, [pc, #80]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d7a:	f000 fb85 	bl	8004488 <HAL_DMA_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003d84:	f7ff fd30 	bl	80037e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dcc <HAL_UART_MspInit+0x24c>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	2026      	movs	r0, #38	@ 0x26
 8003d9a:	f000 fb40 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d9e:	2026      	movs	r0, #38	@ 0x26
 8003da0:	f000 fb57 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8003da4:	bf00      	nop
 8003da6:	3780      	adds	r7, #128	@ 0x80
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40021000 	.word	0x40021000
 8003db4:	48000800 	.word	0x48000800
 8003db8:	200009c4 	.word	0x200009c4
 8003dbc:	4002041c 	.word	0x4002041c
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	20000a24 	.word	0x20000a24
 8003dc8:	4002001c 	.word	0x4002001c
 8003dcc:	20000a84 	.word	0x20000a84
 8003dd0:	40020008 	.word	0x40020008

08003dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <NMI_Handler+0x4>

08003ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003de0:	bf00      	nop
 8003de2:	e7fd      	b.n	8003de0 <HardFault_Handler+0x4>

08003de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de8:	bf00      	nop
 8003dea:	e7fd      	b.n	8003de8 <MemManage_Handler+0x4>

08003dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <BusFault_Handler+0x4>

08003df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <UsageFault_Handler+0x4>

08003dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e2a:	f000 f9dd 	bl	80041e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003e38:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <DMA1_Channel1_IRQHandler+0x10>)
 8003e3a:	f000 fd08 	bl	800484e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000a84 	.word	0x20000a84

08003e48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e4c:	4802      	ldr	r0, [pc, #8]	@ (8003e58 <DMA1_Channel2_IRQHandler+0x10>)
 8003e4e:	f000 fcfe 	bl	800484e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000a24 	.word	0x20000a24

08003e5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003e60:	4802      	ldr	r0, [pc, #8]	@ (8003e6c <DMA1_Channel3_IRQHandler+0x10>)
 8003e62:	f000 fcf4 	bl	800484e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200007cc 	.word	0x200007cc

08003e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e74:	2020      	movs	r0, #32
 8003e76:	f000 ffeb 	bl	8004e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e84:	4802      	ldr	r0, [pc, #8]	@ (8003e90 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003e86:	f003 f821 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000238 	.word	0x20000238

08003e94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e98:	4803      	ldr	r0, [pc, #12]	@ (8003ea8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003e9a:	f003 f817 	bl	8006ecc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003e9e:	4803      	ldr	r0, [pc, #12]	@ (8003eac <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003ea0:	f003 f814 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000238 	.word	0x20000238
 8003eac:	20000700 	.word	0x20000700

08003eb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003eb4:	4802      	ldr	r0, [pc, #8]	@ (8003ec0 <TIM4_IRQHandler+0x10>)
 8003eb6:	f003 f809 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000049c 	.word	0x2000049c

08003ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ec8:	4802      	ldr	r0, [pc, #8]	@ (8003ed4 <USART2_IRQHandler+0x10>)
 8003eca:	f004 ffc3 	bl	8008e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200008f8 	.word	0x200008f8

08003ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003edc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003ee0:	f000 ffb6 	bl	8004e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ee4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003ee8:	f000 ffb2 	bl	8004e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ef4:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <TIM5_IRQHandler+0x10>)
 8003ef6:	f002 ffe9 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000568 	.word	0x20000568

08003f04 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f08:	4802      	ldr	r0, [pc, #8]	@ (8003f14 <TIM7_DAC_IRQHandler+0x10>)
 8003f0a:	f002 ffdf 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000634 	.word	0x20000634

08003f18 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f1c:	4802      	ldr	r0, [pc, #8]	@ (8003f28 <DMA2_Channel2_IRQHandler+0x10>)
 8003f1e:	f000 fc96 	bl	800484e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200009c4 	.word	0x200009c4

08003f2c <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b09b      	sub	sp, #108	@ 0x6c
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 8003f38:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <updateLED+0x140>)
 8003f3a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003f3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 8003f44:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <updateLED+0x144>)
 8003f46:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 8003f50:	2300      	movs	r3, #0
 8003f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f54:	e076      	b.n	8004044 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 8003f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d032      	beq.n	8003fc8 <updateLED+0x9c>
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	dc46      	bgt.n	8003ff4 <updateLED+0xc8>
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d002      	beq.n	8003f70 <updateLED+0x44>
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d016      	beq.n	8003f9c <updateLED+0x70>
 8003f6e:	e041      	b.n	8003ff4 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003f70:	f107 0414 	add.w	r4, r7, #20
 8003f74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 8003f7e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003f82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003f8c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003f90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003f9a:	e041      	b.n	8004020 <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 8003f9c:	f107 0414 	add.w	r4, r7, #20
 8003fa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003faa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003fae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003fb8:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003fbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003fc6:	e02b      	b.n	8004020 <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003fc8:	f107 0414 	add.w	r4, r7, #20
 8003fcc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003fd6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003fda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8003fe4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003ff2:	e015      	b.n	8004020 <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003ff4:	f107 0414 	add.w	r4, r7, #20
 8003ff8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ffc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8004002:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004006:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800400a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004010:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004014:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800401a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800401e:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 8004020:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	333c      	adds	r3, #60	@ 0x3c
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <updateLED+0x148>)
 8004030:	4413      	add	r3, r2
 8004032:	f107 0114 	add.w	r1, r7, #20
 8004036:	2230      	movs	r2, #48	@ 0x30
 8004038:	4618      	mov	r0, r3
 800403a:	f006 fc7b 	bl	800a934 <memcpy>
	for (int i = 0; i < 3; i++){
 800403e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004040:	3301      	adds	r3, #1
 8004042:	667b      	str	r3, [r7, #100]	@ 0x64
 8004044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004046:	2b02      	cmp	r3, #2
 8004048:	dd85      	ble.n	8003f56 <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 800404a:	2278      	movs	r2, #120	@ 0x78
 800404c:	2100      	movs	r1, #0
 800404e:	4809      	ldr	r0, [pc, #36]	@ (8004074 <updateLED+0x148>)
 8004050:	f006 fc44 	bl	800a8dc <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 8004054:	2384      	movs	r3, #132	@ 0x84
 8004056:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <updateLED+0x148>)
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68b8      	ldr	r0, [r7, #8]
 800405c:	f002 fa3c 	bl	80064d8 <HAL_TIM_PWM_Start_DMA>
 8004060:	4603      	mov	r3, r0

}
 8004062:	4618      	mov	r0, r3
 8004064:	376c      	adds	r7, #108	@ 0x6c
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	0800a968 	.word	0x0800a968
 8004070:	0800a978 	.word	0x0800a978
 8004074:	20001250 	.word	0x20001250

08004078 <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 800407e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004082:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 8004084:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004088:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 800408a:	f000 f8bf 	bl	800420c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 8004096:	2100      	movs	r1, #0
 8004098:	68b8      	ldr	r0, [r7, #8]
 800409a:	f7ff facf 	bl	800363c <serviceMotor>

	while(HAL_GetTick() < Timeout){
 800409e:	e00a      	b.n	80040b6 <HomeZ+0x3e>
		if(getZStop() == 1){
 80040a0:	f7ff faf4 	bl	800368c <getZStop>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HomeZ+0x3e>
			//HAL_Delay(50);
			serviceMotor(0, 0);
 80040aa:	2100      	movs	r1, #0
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7ff fac5 	bl	800363c <serviceMotor>
			return 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e006      	b.n	80040c4 <HomeZ+0x4c>
	while(HAL_GetTick() < Timeout){
 80040b6:	f000 f8a9 	bl	800420c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4293      	cmp	r3, r2
 80040c0:	d8ee      	bhi.n	80040a0 <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 80040c2:	2301      	movs	r3, #1

}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <SystemInit+0x20>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	4a05      	ldr	r2, [pc, #20]	@ (80040ec <SystemInit+0x20>)
 80040d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040f0:	480d      	ldr	r0, [pc, #52]	@ (8004128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040f4:	f7ff ffea 	bl	80040cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040f8:	480c      	ldr	r0, [pc, #48]	@ (800412c <LoopForever+0x6>)
  ldr r1, =_edata
 80040fa:	490d      	ldr	r1, [pc, #52]	@ (8004130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004134 <LoopForever+0xe>)
  movs r3, #0
 80040fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004100:	e002      	b.n	8004108 <LoopCopyDataInit>

08004102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004106:	3304      	adds	r3, #4

08004108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800410a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800410c:	d3f9      	bcc.n	8004102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800410e:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004110:	4c0a      	ldr	r4, [pc, #40]	@ (800413c <LoopForever+0x16>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004114:	e001      	b.n	800411a <LoopFillZerobss>

08004116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004118:	3204      	adds	r2, #4

0800411a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800411a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800411c:	d3fb      	bcc.n	8004116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800411e:	f006 fbe5 	bl	800a8ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004122:	f7fd fa99 	bl	8001658 <main>

08004126 <LoopForever>:

LoopForever:
    b LoopForever
 8004126:	e7fe      	b.n	8004126 <LoopForever>
  ldr   r0, =_estack
 8004128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800412c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004130:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8004134:	0800a9d8 	.word	0x0800a9d8
  ldr r2, =_sbss
 8004138:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800413c:	2000135c 	.word	0x2000135c

08004140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004140:	e7fe      	b.n	8004140 <ADC1_2_IRQHandler>

08004142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800414c:	2003      	movs	r0, #3
 800414e:	f000 f95b 	bl	8004408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004152:	2000      	movs	r0, #0
 8004154:	f000 f80e 	bl	8004174 <HAL_InitTick>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	71fb      	strb	r3, [r7, #7]
 8004162:	e001      	b.n	8004168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004164:	f7ff fb46 	bl	80037f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004168:	79fb      	ldrb	r3, [r7, #7]

}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004180:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <HAL_InitTick+0x68>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d022      	beq.n	80041ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004188:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <HAL_InitTick+0x6c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <HAL_InitTick+0x68>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004194:	fbb1 f3f3 	udiv	r3, r1, r3
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f966 	bl	800446e <HAL_SYSTICK_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10f      	bne.n	80041c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b0f      	cmp	r3, #15
 80041ac:	d809      	bhi.n	80041c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ae:	2200      	movs	r2, #0
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295
 80041b6:	f000 f932 	bl	800441e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <HAL_InitTick+0x70>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e007      	b.n	80041d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e004      	b.n	80041d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e001      	b.n	80041d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000214 	.word	0x20000214
 80041e0:	2000020c 	.word	0x2000020c
 80041e4:	20000210 	.word	0x20000210

080041e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_IncTick+0x1c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_IncTick+0x20>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	4a03      	ldr	r2, [pc, #12]	@ (8004204 <HAL_IncTick+0x1c>)
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20001358 	.word	0x20001358
 8004208:	20000214 	.word	0x20000214

0800420c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return uwTick;
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <HAL_GetTick+0x14>)
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20001358 	.word	0x20001358

08004224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7ff ffee 	bl	800420c <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d004      	beq.n	8004248 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800423e:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <HAL_Delay+0x40>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004248:	bf00      	nop
 800424a:	f7ff ffdf 	bl	800420c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	429a      	cmp	r2, r3
 8004258:	d8f7      	bhi.n	800424a <HAL_Delay+0x26>
  {
  }
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000214 	.word	0x20000214

08004268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429a:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60d3      	str	r3, [r2, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b4:	4b04      	ldr	r3, [pc, #16]	@ (80042c8 <__NVIC_GetPriorityGrouping+0x18>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0307 	and.w	r3, r3, #7
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db0b      	blt.n	80042f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4907      	ldr	r1, [pc, #28]	@ (8004304 <__NVIC_EnableIRQ+0x38>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2001      	movs	r0, #1
 80042ee:	fa00 f202 	lsl.w	r2, r0, r2
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	@ (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf28      	it	cs
 800437a:	2304      	movcs	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3304      	adds	r3, #4
 8004382:	2b06      	cmp	r3, #6
 8004384:	d902      	bls.n	800438c <NVIC_EncodePriority+0x30>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3b03      	subs	r3, #3
 800438a:	e000      	b.n	800438e <NVIC_EncodePriority+0x32>
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	4313      	orrs	r3, r2
         );
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	@ 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d4:	d301      	bcc.n	80043da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00f      	b.n	80043fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043da:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <SysTick_Config+0x40>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043e2:	210f      	movs	r1, #15
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f7ff ff8e 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <SysTick_Config+0x40>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043f2:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <SysTick_Config+0x40>)
 80043f4:	2207      	movs	r2, #7
 80043f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000e010 	.word	0xe000e010

08004408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff29 	bl	8004268 <__NVIC_SetPriorityGrouping>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff40 	bl	80042b0 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff90 	bl	800435c <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5f 	bl	8004308 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff33 	bl	80042cc <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ffa4 	bl	80043c4 <SysTick_Config>
 800447c:	4603      	mov	r3, r0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e08d      	b.n	80045b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_DMA_Init+0x138>)
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d80f      	bhi.n	80044c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b45      	ldr	r3, [pc, #276]	@ (80045c4 <HAL_DMA_Init+0x13c>)
 80044ae:	4413      	add	r3, r2
 80044b0:	4a45      	ldr	r2, [pc, #276]	@ (80045c8 <HAL_DMA_Init+0x140>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	009a      	lsls	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a42      	ldr	r2, [pc, #264]	@ (80045cc <HAL_DMA_Init+0x144>)
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80044c4:	e00e      	b.n	80044e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b40      	ldr	r3, [pc, #256]	@ (80045d0 <HAL_DMA_Init+0x148>)
 80044ce:	4413      	add	r3, r2
 80044d0:	4a3d      	ldr	r2, [pc, #244]	@ (80045c8 <HAL_DMA_Init+0x140>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	@ (80045d4 <HAL_DMA_Init+0x14c>)
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa76 	bl	8004a28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004544:	d102      	bne.n	800454c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004560:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d010      	beq.n	800458c <HAL_DMA_Init+0x104>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d80c      	bhi.n	800458c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa96 	bl	8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e008      	b.n	800459e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40020407 	.word	0x40020407
 80045c4:	bffdfff8 	.word	0xbffdfff8
 80045c8:	cccccccd 	.word	0xcccccccd
 80045cc:	40020000 	.word	0x40020000
 80045d0:	bffdfbf8 	.word	0xbffdfbf8
 80045d4:	40020400 	.word	0x40020400

080045d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_DMA_Start_IT+0x20>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e066      	b.n	80046c6 <HAL_DMA_Start_IT+0xee>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d155      	bne.n	80046b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9bb 	bl	80049ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 020e 	orr.w	r2, r2, #14
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e00f      	b.n	8004670 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 020a 	orr.w	r2, r2, #10
 800466e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e005      	b.n	80046c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d005      	beq.n	80046f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2204      	movs	r2, #4
 80046ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e037      	b.n	8004762 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 020e 	bic.w	r2, r2, #14
 8004700:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004710:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f003 021f 	and.w	r2, r3, #31
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f202 	lsl.w	r2, r1, r2
 8004734:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800473e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004760:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d00d      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2204      	movs	r2, #4
 800479c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e047      	b.n	8004844 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020e 	bic.w	r2, r2, #14
 80047c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f202 	lsl.w	r2, r1, r2
 80047f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004800:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004818:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004822:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
    }
  }
  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2204      	movs	r2, #4
 8004870:	409a      	lsls	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d026      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x7a>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d021      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f003 021f 	and.w	r2, r3, #31
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	2104      	movs	r1, #4
 80048b0:	fa01 f202 	lsl.w	r2, r1, r2
 80048b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d071      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048c6:	e06c      	b.n	80049a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2202      	movs	r2, #2
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d02e      	beq.n	800493a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d029      	beq.n	800493a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 020a 	bic.w	r2, r2, #10
 8004902:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	2102      	movs	r1, #2
 800491a:	fa01 f202 	lsl.w	r2, r1, r2
 800491e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d038      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004938:	e033      	b.n	80049a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2208      	movs	r2, #8
 8004944:	409a      	lsls	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d02a      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d025      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 020e 	bic.w	r2, r2, #14
 8004966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
}
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	f003 021f 	and.w	r2, r3, #31
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f202 	lsl.w	r2, r1, r2
 80049e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d108      	bne.n	8004a0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a0a:	e007      	b.n	8004a1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a3c:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e001      	b.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a42:	4b15      	ldr	r3, [pc, #84]	@ (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3b08      	subs	r3, #8
 8004a52:	4a12      	ldr	r2, [pc, #72]	@ (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40020407 	.word	0x40020407
 8004a94:	40020800 	.word	0x40020800
 8004a98:	40020820 	.word	0x40020820
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020880 	.word	0x40020880

08004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a08      	ldr	r2, [pc, #32]	@ (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ac6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	1000823f 	.word	0x1000823f
 8004ae8:	40020940 	.word	0x40020940

08004aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004afa:	e15a      	b.n	8004db2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2101      	movs	r1, #1
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 814c 	beq.w	8004dac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d005      	beq.n	8004b2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d130      	bne.n	8004b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b62:	2201      	movs	r2, #1
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 0201 	and.w	r2, r3, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d017      	beq.n	8004bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d123      	bne.n	8004c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	08da      	lsrs	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3208      	adds	r2, #8
 8004bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	220f      	movs	r2, #15
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	08da      	lsrs	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3208      	adds	r2, #8
 8004c18:	6939      	ldr	r1, [r7, #16]
 8004c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	2203      	movs	r2, #3
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0203 	and.w	r2, r3, #3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80a6 	beq.w	8004dac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c60:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c64:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c6c:	4b58      	ldr	r3, [pc, #352]	@ (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c78:	4a56      	ldr	r2, [pc, #344]	@ (8004dd4 <HAL_GPIO_Init+0x2e8>)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	3302      	adds	r3, #2
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	220f      	movs	r2, #15
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ca2:	d01f      	beq.n	8004ce4 <HAL_GPIO_Init+0x1f8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8004dd8 <HAL_GPIO_Init+0x2ec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d019      	beq.n	8004ce0 <HAL_GPIO_Init+0x1f4>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a4b      	ldr	r2, [pc, #300]	@ (8004ddc <HAL_GPIO_Init+0x2f0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_GPIO_Init+0x1f0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8004de0 <HAL_GPIO_Init+0x2f4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00d      	beq.n	8004cd8 <HAL_GPIO_Init+0x1ec>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a49      	ldr	r2, [pc, #292]	@ (8004de4 <HAL_GPIO_Init+0x2f8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <HAL_GPIO_Init+0x1e8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a48      	ldr	r2, [pc, #288]	@ (8004de8 <HAL_GPIO_Init+0x2fc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_GPIO_Init+0x1e4>
 8004ccc:	2305      	movs	r3, #5
 8004cce:	e00a      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004cd0:	2306      	movs	r3, #6
 8004cd2:	e008      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	e006      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e004      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e002      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	f002 0203 	and.w	r2, r2, #3
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	4093      	lsls	r3, r2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cf6:	4937      	ldr	r1, [pc, #220]	@ (8004dd4 <HAL_GPIO_Init+0x2e8>)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d04:	4b39      	ldr	r3, [pc, #228]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d28:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d52:	4a26      	ldr	r2, [pc, #152]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d58:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d82:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004da6:	4a11      	ldr	r2, [pc, #68]	@ (8004dec <HAL_GPIO_Init+0x300>)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3301      	adds	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f47f ae9d 	bne.w	8004afc <HAL_GPIO_Init+0x10>
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	48000400 	.word	0x48000400
 8004ddc:	48000800 	.word	0x48000800
 8004de0:	48000c00 	.word	0x48000c00
 8004de4:	48001000 	.word	0x48001000
 8004de8:	48001400 	.word	0x48001400
 8004dec:	40010400 	.word	0x40010400

08004df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e001      	b.n	8004e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e30:	787b      	ldrb	r3, [r7, #1]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e3c:	e002      	b.n	8004e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e5a:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e66:	4a05      	ldr	r2, [pc, #20]	@ (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fc18 	bl	80036a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40010400 	.word	0x40010400

08004e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d141      	bne.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9a:	d131      	bne.n	8004f00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e9c:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea2:	4a46      	ldr	r2, [pc, #280]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eac:	4b43      	ldr	r3, [pc, #268]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eb4:	4a41      	ldr	r2, [pc, #260]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ebc:	4b40      	ldr	r3, [pc, #256]	@ (8004fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2232      	movs	r2, #50	@ 0x32
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	0c9b      	lsrs	r3, r3, #18
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed2:	e002      	b.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eda:	4b38      	ldr	r3, [pc, #224]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee6:	d102      	bne.n	8004eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f2      	bne.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eee:	4b33      	ldr	r3, [pc, #204]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004efa:	d158      	bne.n	8004fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e057      	b.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f00:	4b2e      	ldr	r3, [pc, #184]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f06:	4a2d      	ldr	r2, [pc, #180]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f10:	e04d      	b.n	8004fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f18:	d141      	bne.n	8004f9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f1a:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d131      	bne.n	8004f8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f28:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f2e:	4a23      	ldr	r2, [pc, #140]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f38:	4b20      	ldr	r3, [pc, #128]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f40:	4a1e      	ldr	r2, [pc, #120]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f48:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2232      	movs	r2, #50	@ 0x32
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	0c9b      	lsrs	r3, r3, #18
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5e:	e002      	b.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f66:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d102      	bne.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f2      	bne.n	8004f60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f7a:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f86:	d112      	bne.n	8004fae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e011      	b.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f92:	4a0a      	ldr	r2, [pc, #40]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f9c:	e007      	b.n	8004fae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fa6:	4a05      	ldr	r2, [pc, #20]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	2000020c 	.word	0x2000020c
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fd6:	6093      	str	r3, [r2, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40007000 	.word	0x40007000

08004fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e2fe      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d075      	beq.n	80050f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4b97      	ldr	r3, [pc, #604]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005010:	4b94      	ldr	r3, [pc, #592]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	d102      	bne.n	8005026 <HAL_RCC_OscConfig+0x3e>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d002      	beq.n	800502c <HAL_RCC_OscConfig+0x44>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	4b8d      	ldr	r3, [pc, #564]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x108>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d157      	bne.n	80050f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e2d9      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x74>
 800504e:	4b85      	ldr	r3, [pc, #532]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a84      	ldr	r2, [pc, #528]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xb0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x98>
 8005066:	4b7f      	ldr	r3, [pc, #508]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7e      	ldr	r2, [pc, #504]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b7c      	ldr	r3, [pc, #496]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7b      	ldr	r2, [pc, #492]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xb0>
 8005080:	4b78      	ldr	r3, [pc, #480]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a77      	ldr	r2, [pc, #476]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b75      	ldr	r3, [pc, #468]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a74      	ldr	r2, [pc, #464]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7ff f8b4 	bl	800420c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7ff f8b0 	bl	800420c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	@ 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e29e      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xc0>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7ff f8a0 	bl	800420c <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7ff f89c 	bl	800420c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	@ 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e28a      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050e2:	4b60      	ldr	r3, [pc, #384]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0xe8>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d075      	beq.n	80051ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fe:	4b59      	ldr	r3, [pc, #356]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005108:	4b56      	ldr	r3, [pc, #344]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d102      	bne.n	800511e <HAL_RCC_OscConfig+0x136>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d002      	beq.n	8005124 <HAL_RCC_OscConfig+0x13c>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d11f      	bne.n	8005164 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005124:	4b4f      	ldr	r3, [pc, #316]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_OscConfig+0x154>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e25d      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513c:	4b49      	ldr	r3, [pc, #292]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	4946      	ldr	r1, [pc, #280]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005150:	4b45      	ldr	r3, [pc, #276]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff f80d 	bl	8004174 <HAL_InitTick>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d043      	beq.n	80051e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e249      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d023      	beq.n	80051b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800516c:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7ff f848 	bl	800420c <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005180:	f7ff f844 	bl	800420c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e232      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005192:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	492d      	ldr	r1, [pc, #180]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
 80051b2:	e01a      	b.n	80051ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7ff f824 	bl	800420c <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c8:	f7ff f820 	bl	800420c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e20e      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d041      	beq.n	800527a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01c      	beq.n	8005238 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fe:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005204:	4a17      	ldr	r2, [pc, #92]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fe fffd 	bl	800420c <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005216:	f7fe fff9 	bl	800420c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e1e7      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005228:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ef      	beq.n	8005216 <HAL_RCC_OscConfig+0x22e>
 8005236:	e020      	b.n	800527a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800523e:	4a09      	ldr	r2, [pc, #36]	@ (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fe ffe0 	bl	800420c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800524e:	e00d      	b.n	800526c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7fe ffdc 	bl	800420c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d906      	bls.n	800526c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e1ca      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800526c:	4b8c      	ldr	r3, [pc, #560]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800526e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ea      	bne.n	8005250 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80a6 	beq.w	80053d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800528c:	4b84      	ldr	r3, [pc, #528]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_OscConfig+0x2b4>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x2b6>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a2:	4b7f      	ldr	r3, [pc, #508]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a6:	4a7e      	ldr	r2, [pc, #504]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ae:	4b7c      	ldr	r3, [pc, #496]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052ba:	2301      	movs	r3, #1
 80052bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052be:	4b79      	ldr	r3, [pc, #484]	@ (80054a4 <HAL_RCC_OscConfig+0x4bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d118      	bne.n	80052fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ca:	4b76      	ldr	r3, [pc, #472]	@ (80054a4 <HAL_RCC_OscConfig+0x4bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a75      	ldr	r2, [pc, #468]	@ (80054a4 <HAL_RCC_OscConfig+0x4bc>)
 80052d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d6:	f7fe ff99 	bl	800420c <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052de:	f7fe ff95 	bl	800420c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e183      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f0:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCC_OscConfig+0x4bc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d108      	bne.n	8005316 <HAL_RCC_OscConfig+0x32e>
 8005304:	4b66      	ldr	r3, [pc, #408]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	4a65      	ldr	r2, [pc, #404]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005314:	e024      	b.n	8005360 <HAL_RCC_OscConfig+0x378>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d110      	bne.n	8005340 <HAL_RCC_OscConfig+0x358>
 800531e:	4b60      	ldr	r3, [pc, #384]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	4a5e      	ldr	r2, [pc, #376]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005326:	f043 0304 	orr.w	r3, r3, #4
 800532a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800532e:	4b5c      	ldr	r3, [pc, #368]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	4a5a      	ldr	r2, [pc, #360]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800533e:	e00f      	b.n	8005360 <HAL_RCC_OscConfig+0x378>
 8005340:	4b57      	ldr	r3, [pc, #348]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005346:	4a56      	ldr	r2, [pc, #344]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005350:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	4a52      	ldr	r2, [pc, #328]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005358:	f023 0304 	bic.w	r3, r3, #4
 800535c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fe ff50 	bl	800420c <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fe ff4c 	bl	800420c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e138      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005386:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ed      	beq.n	8005370 <HAL_RCC_OscConfig+0x388>
 8005394:	e015      	b.n	80053c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fe ff39 	bl	800420c <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fe ff35 	bl	800420c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e121      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053b4:	4b3a      	ldr	r3, [pc, #232]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1ed      	bne.n	800539e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053c2:	7ffb      	ldrb	r3, [r7, #31]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c8:	4b35      	ldr	r3, [pc, #212]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	4a34      	ldr	r2, [pc, #208]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80053ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03c      	beq.n	800545a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01c      	beq.n	8005422 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053e8:	4b2d      	ldr	r3, [pc, #180]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80053ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fe ff08 	bl	800420c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005400:	f7fe ff04 	bl	800420c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0f2      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005412:	4b23      	ldr	r3, [pc, #140]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ef      	beq.n	8005400 <HAL_RCC_OscConfig+0x418>
 8005420:	e01b      	b.n	800545a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005422:	4b1f      	ldr	r3, [pc, #124]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005428:	4a1d      	ldr	r2, [pc, #116]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005432:	f7fe feeb 	bl	800420c <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800543a:	f7fe fee7 	bl	800420c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0d5      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800544c:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ef      	bne.n	800543a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80c9 	beq.w	80055f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005464:	4b0e      	ldr	r3, [pc, #56]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b0c      	cmp	r3, #12
 800546e:	f000 8083 	beq.w	8005578 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d15e      	bne.n	8005538 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a08      	ldr	r2, [pc, #32]	@ (80054a0 <HAL_RCC_OscConfig+0x4b8>)
 8005480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fe fec1 	bl	800420c <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800548c:	e00c      	b.n	80054a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7fe febd 	bl	800420c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d905      	bls.n	80054a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e0ab      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a8:	4b55      	ldr	r3, [pc, #340]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ec      	bne.n	800548e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b4:	4b52      	ldr	r3, [pc, #328]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	4b52      	ldr	r3, [pc, #328]	@ (8005604 <HAL_RCC_OscConfig+0x61c>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6a11      	ldr	r1, [r2, #32]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054c4:	3a01      	subs	r2, #1
 80054c6:	0112      	lsls	r2, r2, #4
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054ce:	0212      	lsls	r2, r2, #8
 80054d0:	4311      	orrs	r1, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054d6:	0852      	lsrs	r2, r2, #1
 80054d8:	3a01      	subs	r2, #1
 80054da:	0552      	lsls	r2, r2, #21
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054e2:	0852      	lsrs	r2, r2, #1
 80054e4:	3a01      	subs	r2, #1
 80054e6:	0652      	lsls	r2, r2, #25
 80054e8:	4311      	orrs	r1, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054ee:	06d2      	lsls	r2, r2, #27
 80054f0:	430a      	orrs	r2, r1
 80054f2:	4943      	ldr	r1, [pc, #268]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f8:	4b41      	ldr	r3, [pc, #260]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a40      	ldr	r2, [pc, #256]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 80054fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005502:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005504:	4b3e      	ldr	r3, [pc, #248]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a3d      	ldr	r2, [pc, #244]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 800550a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fe fe7c 	bl	800420c <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005518:	f7fe fe78 	bl	800420c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e066      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800552a:	4b35      	ldr	r3, [pc, #212]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x530>
 8005536:	e05e      	b.n	80055f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005538:	4b31      	ldr	r3, [pc, #196]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a30      	ldr	r2, [pc, #192]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 800553e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe fe62 	bl	800420c <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554c:	f7fe fe5e 	bl	800420c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e04c      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555e:	4b28      	ldr	r3, [pc, #160]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800556a:	4b25      	ldr	r3, [pc, #148]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	4924      	ldr	r1, [pc, #144]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <HAL_RCC_OscConfig+0x620>)
 8005572:	4013      	ands	r3, r2
 8005574:	60cb      	str	r3, [r1, #12]
 8005576:	e03e      	b.n	80055f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e039      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005584:	4b1e      	ldr	r3, [pc, #120]	@ (8005600 <HAL_RCC_OscConfig+0x618>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0203 	and.w	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	429a      	cmp	r2, r3
 8005596:	d12c      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	3b01      	subs	r3, #1
 80055a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d123      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d11b      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d113      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	3b01      	subs	r3, #1
 80055d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d109      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	3b01      	subs	r3, #1
 80055ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d001      	beq.n	80055f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	019f800c 	.word	0x019f800c
 8005608:	feeefffc 	.word	0xfeeefffc

0800560c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e11e      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005624:	4b91      	ldr	r3, [pc, #580]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d910      	bls.n	8005654 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b8e      	ldr	r3, [pc, #568]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 020f 	bic.w	r2, r3, #15
 800563a:	498c      	ldr	r1, [pc, #560]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b8a      	ldr	r3, [pc, #552]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e106      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d073      	beq.n	8005748 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d129      	bne.n	80056bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005668:	4b81      	ldr	r3, [pc, #516]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0f4      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005678:	f000 f99e 	bl	80059b8 <RCC_GetSysClockFreqFromPLLSource>
 800567c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4a7c      	ldr	r2, [pc, #496]	@ (8005874 <HAL_RCC_ClockConfig+0x268>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d93f      	bls.n	8005706 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005686:	4b7a      	ldr	r3, [pc, #488]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800569a:	2b00      	cmp	r3, #0
 800569c:	d033      	beq.n	8005706 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d12f      	bne.n	8005706 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056a6:	4b72      	ldr	r3, [pc, #456]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ae:	4a70      	ldr	r2, [pc, #448]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e024      	b.n	8005706 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d107      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0c6      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d4:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0be      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056e4:	f000 f8ce 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4a61      	ldr	r2, [pc, #388]	@ (8005874 <HAL_RCC_ClockConfig+0x268>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d909      	bls.n	8005706 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fa:	4a5d      	ldr	r2, [pc, #372]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80056fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005700:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005706:	4b5a      	ldr	r3, [pc, #360]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4957      	ldr	r1, [pc, #348]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005718:	f7fe fd78 	bl	800420c <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	e00a      	b.n	8005736 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005720:	f7fe fd74 	bl	800420c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e095      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	4b4e      	ldr	r3, [pc, #312]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 020c 	and.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d1eb      	bne.n	8005720 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d023      	beq.n	800579c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005760:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800576a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005778:	4b3d      	ldr	r3, [pc, #244]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005780:	4a3b      	ldr	r2, [pc, #236]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005786:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005788:	4b39      	ldr	r3, [pc, #228]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4936      	ldr	r1, [pc, #216]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
 800579a:	e008      	b.n	80057ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b80      	cmp	r3, #128	@ 0x80
 80057a0:	d105      	bne.n	80057ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057a2:	4b33      	ldr	r3, [pc, #204]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a32      	ldr	r2, [pc, #200]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 80057a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ae:	4b2f      	ldr	r3, [pc, #188]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d21d      	bcs.n	80057f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 020f 	bic.w	r2, r3, #15
 80057c4:	4929      	ldr	r1, [pc, #164]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057cc:	f7fe fd1e 	bl	800420c <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d4:	f7fe fd1a 	bl	800420c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e03b      	b.n	8005862 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b20      	ldr	r3, [pc, #128]	@ (800586c <HAL_RCC_ClockConfig+0x260>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d1ed      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4917      	ldr	r1, [pc, #92]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005822:	4b13      	ldr	r3, [pc, #76]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	490f      	ldr	r1, [pc, #60]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005836:	f000 f825 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800583a:	4602      	mov	r2, r0
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <HAL_RCC_ClockConfig+0x264>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	490c      	ldr	r1, [pc, #48]	@ (8005878 <HAL_RCC_ClockConfig+0x26c>)
 8005848:	5ccb      	ldrb	r3, [r1, r3]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <HAL_RCC_ClockConfig+0x270>)
 8005854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <HAL_RCC_ClockConfig+0x274>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fc8a 	bl	8004174 <HAL_InitTick>
 8005860:	4603      	mov	r3, r0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40022000 	.word	0x40022000
 8005870:	40021000 	.word	0x40021000
 8005874:	04c4b400 	.word	0x04c4b400
 8005878:	0800a988 	.word	0x0800a988
 800587c:	2000020c 	.word	0x2000020c
 8005880:	20000210 	.word	0x20000210

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800588a:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d102      	bne.n	800589c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005896:	4b2a      	ldr	r3, [pc, #168]	@ (8005940 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e047      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800589c:	4b27      	ldr	r3, [pc, #156]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d102      	bne.n	80058ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058a8:	4b26      	ldr	r3, [pc, #152]	@ (8005944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e03e      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058ae:	4b23      	ldr	r3, [pc, #140]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d136      	bne.n	8005928 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ba:	4b20      	ldr	r3, [pc, #128]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058c4:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	3301      	adds	r3, #1
 80058d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d10c      	bne.n	80058f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	4a16      	ldr	r2, [pc, #88]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e2:	68d2      	ldr	r2, [r2, #12]
 80058e4:	0a12      	lsrs	r2, r2, #8
 80058e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	617b      	str	r3, [r7, #20]
      break;
 80058f0:	e00c      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058f2:	4a13      	ldr	r2, [pc, #76]	@ (8005940 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fa:	4a10      	ldr	r2, [pc, #64]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058fc:	68d2      	ldr	r2, [r2, #12]
 80058fe:	0a12      	lsrs	r2, r2, #8
 8005900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]
      break;
 800590a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800590c:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <HAL_RCC_GetSysClockFreq+0xb8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	0e5b      	lsrs	r3, r3, #25
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	3301      	adds	r3, #1
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	e001      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800592c:	693b      	ldr	r3, [r7, #16]
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000
 8005940:	00f42400 	.word	0x00f42400
 8005944:	016e3600 	.word	0x016e3600

08005948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800594c:	4b03      	ldr	r3, [pc, #12]	@ (800595c <HAL_RCC_GetHCLKFreq+0x14>)
 800594e:	681b      	ldr	r3, [r3, #0]
}
 8005950:	4618      	mov	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2000020c 	.word	0x2000020c

08005960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005964:	f7ff fff0 	bl	8005948 <HAL_RCC_GetHCLKFreq>
 8005968:	4602      	mov	r2, r0
 800596a:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	4904      	ldr	r1, [pc, #16]	@ (8005988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005976:	5ccb      	ldrb	r3, [r1, r3]
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40021000 	.word	0x40021000
 8005988:	0800a998 	.word	0x0800a998

0800598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005990:	f7ff ffda 	bl	8005948 <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	0adb      	lsrs	r3, r3, #11
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4904      	ldr	r1, [pc, #16]	@ (80059b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40021000 	.word	0x40021000
 80059b4:	0800a998 	.word	0x0800a998

080059b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059be:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d10c      	bne.n	80059f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059dc:	4a17      	ldr	r2, [pc, #92]	@ (8005a3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e6:	68d2      	ldr	r2, [r2, #12]
 80059e8:	0a12      	lsrs	r2, r2, #8
 80059ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	617b      	str	r3, [r7, #20]
    break;
 80059f4:	e00c      	b.n	8005a10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a00:	68d2      	ldr	r2, [r2, #12]
 8005a02:	0a12      	lsrs	r2, r2, #8
 8005a04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a08:	fb02 f303 	mul.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    break;
 8005a0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a10:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0e5b      	lsrs	r3, r3, #25
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a2a:	687b      	ldr	r3, [r7, #4]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	016e3600 	.word	0x016e3600
 8005a40:	00f42400 	.word	0x00f42400

08005a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a50:	2300      	movs	r3, #0
 8005a52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8098 	beq.w	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a62:	2300      	movs	r3, #0
 8005a64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a66:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	4b40      	ldr	r3, [pc, #256]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a76:	4a3f      	ldr	r2, [pc, #252]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	60bb      	str	r3, [r7, #8]
 8005a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a39      	ldr	r2, [pc, #228]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a9a:	f7fe fbb7 	bl	800420c <HAL_GetTick>
 8005a9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa0:	e009      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fe fbb3 	bl	800420c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d902      	bls.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab6:	4b30      	ldr	r3, [pc, #192]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ac2:	7cfb      	ldrb	r3, [r7, #19]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d159      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01e      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d019      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ae4:	4b23      	ldr	r3, [pc, #140]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005af0:	4b20      	ldr	r3, [pc, #128]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b00:	4b1c      	ldr	r3, [pc, #112]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fe fb73 	bl	800420c <HAL_GetTick>
 8005b26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b28:	e00b      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fe fb6f 	bl	800420c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d902      	bls.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ec      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b56:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b64:	4903      	ldr	r1, [pc, #12]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b6c:	e008      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	74bb      	strb	r3, [r7, #18]
 8005b72:	e005      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7cfb      	ldrb	r3, [r7, #19]
 8005b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b80:	7c7b      	ldrb	r3, [r7, #17]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d105      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b86:	4ba7      	ldr	r3, [pc, #668]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8a:	4aa6      	ldr	r2, [pc, #664]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b9e:	4ba1      	ldr	r3, [pc, #644]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f023 0203 	bic.w	r2, r3, #3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	499d      	ldr	r1, [pc, #628]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bc0:	4b98      	ldr	r3, [pc, #608]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f023 020c 	bic.w	r2, r3, #12
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4995      	ldr	r1, [pc, #596]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005be2:	4b90      	ldr	r3, [pc, #576]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	498c      	ldr	r1, [pc, #560]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c04:	4b87      	ldr	r3, [pc, #540]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	4984      	ldr	r1, [pc, #528]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c26:	4b7f      	ldr	r3, [pc, #508]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	497b      	ldr	r1, [pc, #492]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c48:	4b76      	ldr	r3, [pc, #472]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	4973      	ldr	r1, [pc, #460]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	496a      	ldr	r1, [pc, #424]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c8c:	4b65      	ldr	r3, [pc, #404]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	4962      	ldr	r1, [pc, #392]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cae:	4b5d      	ldr	r3, [pc, #372]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	4959      	ldr	r1, [pc, #356]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cd0:	4b54      	ldr	r3, [pc, #336]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd6:	f023 0203 	bic.w	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	4951      	ldr	r1, [pc, #324]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4948      	ldr	r1, [pc, #288]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d14:	4b43      	ldr	r3, [pc, #268]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d22:	4940      	ldr	r1, [pc, #256]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d32:	d105      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d34:	4b3b      	ldr	r3, [pc, #236]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a3a      	ldr	r2, [pc, #232]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d4c:	4b35      	ldr	r3, [pc, #212]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5a:	4932      	ldr	r1, [pc, #200]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d6a:	d105      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d84:	4b27      	ldr	r3, [pc, #156]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	4924      	ldr	r1, [pc, #144]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dbc:	4b19      	ldr	r3, [pc, #100]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	4916      	ldr	r1, [pc, #88]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ddc:	4b11      	ldr	r3, [pc, #68]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a10      	ldr	r2, [pc, #64]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005de6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d019      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	4908      	ldr	r1, [pc, #32]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e12:	d109      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e14:	4b03      	ldr	r3, [pc, #12]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a02      	ldr	r2, [pc, #8]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
 8005e20:	e002      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e34:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	4926      	ldr	r1, [pc, #152]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e52:	d105      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d015      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7a:	4918      	ldr	r1, [pc, #96]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8a:	d105      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb2:	490a      	ldr	r1, [pc, #40]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec4:	4b05      	ldr	r3, [pc, #20]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ece:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ed0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000

08005ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e054      	b.n	8005f9c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d111      	bne.n	8005f22 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f002 faac 	bl	8008464 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a23      	ldr	r2, [pc, #140]	@ (8005fa4 <HAL_TIM_Base_Init+0xc4>)
 8005f18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f001 fdf5 	bl	8007b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0800383d 	.word	0x0800383d

08005fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e04c      	b.n	800605a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	@ (8006068 <HAL_TIM_Base_Start+0xc0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fda:	d01d      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a22      	ldr	r2, [pc, #136]	@ (800606c <HAL_TIM_Base_Start+0xc4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a21      	ldr	r2, [pc, #132]	@ (8006070 <HAL_TIM_Base_Start+0xc8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8006074 <HAL_TIM_Base_Start+0xcc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8006078 <HAL_TIM_Base_Start+0xd0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1c      	ldr	r2, [pc, #112]	@ (800607c <HAL_TIM_Base_Start+0xd4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIM_Base_Start+0x70>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	@ (8006080 <HAL_TIM_Base_Start+0xd8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d115      	bne.n	8006044 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	4b19      	ldr	r3, [pc, #100]	@ (8006084 <HAL_TIM_Base_Start+0xdc>)
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b06      	cmp	r3, #6
 8006028:	d015      	beq.n	8006056 <HAL_TIM_Base_Start+0xae>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d011      	beq.n	8006056 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006042:	e008      	b.n	8006056 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e000      	b.n	8006058 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40015000 	.word	0x40015000
 8006084:	00010007 	.word	0x00010007

08006088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d001      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e054      	b.n	800614a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a26      	ldr	r2, [pc, #152]	@ (8006158 <HAL_TIM_Base_Start_IT+0xd0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d022      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ca:	d01d      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a22      	ldr	r2, [pc, #136]	@ (800615c <HAL_TIM_Base_Start_IT+0xd4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a21      	ldr	r2, [pc, #132]	@ (8006160 <HAL_TIM_Base_Start_IT+0xd8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006164 <HAL_TIM_Base_Start_IT+0xdc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006168 <HAL_TIM_Base_Start_IT+0xe0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <HAL_TIM_Base_Start_IT+0xe4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x80>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <HAL_TIM_Base_Start_IT+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d115      	bne.n	8006134 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	4b19      	ldr	r3, [pc, #100]	@ (8006174 <HAL_TIM_Base_Start_IT+0xec>)
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b06      	cmp	r3, #6
 8006118:	d015      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0xbe>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006120:	d011      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	e008      	b.n	8006146 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e000      	b.n	8006148 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40013400 	.word	0x40013400
 800616c:	40014000 	.word	0x40014000
 8006170:	40015000 	.word	0x40015000
 8006174:	00010007 	.word	0x00010007

08006178 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	f241 1311 	movw	r3, #4369	@ 0x1111
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10f      	bne.n	80061c0 <HAL_TIM_Base_Stop_IT+0x48>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_Base_Stop_IT+0x48>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e054      	b.n	8006294 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d111      	bne.n	800621a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 f930 	bl	8008464 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a23      	ldr	r2, [pc, #140]	@ (800629c <HAL_TIM_PWM_Init+0xc4>)
 8006210:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f001 fc79 	bl	8007b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	080062a1 	.word	0x080062a1

080062a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x24>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e03c      	b.n	8006352 <HAL_TIM_PWM_Start+0x9e>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d109      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x3e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e02f      	b.n	8006352 <HAL_TIM_PWM_Start+0x9e>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d109      	bne.n	800630c <HAL_TIM_PWM_Start+0x58>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	bf14      	ite	ne
 8006304:	2301      	movne	r3, #1
 8006306:	2300      	moveq	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e022      	b.n	8006352 <HAL_TIM_PWM_Start+0x9e>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d109      	bne.n	8006326 <HAL_TIM_PWM_Start+0x72>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	bf14      	ite	ne
 800631e:	2301      	movne	r3, #1
 8006320:	2300      	moveq	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	e015      	b.n	8006352 <HAL_TIM_PWM_Start+0x9e>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b10      	cmp	r3, #16
 800632a:	d109      	bne.n	8006340 <HAL_TIM_PWM_Start+0x8c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e008      	b.n	8006352 <HAL_TIM_PWM_Start+0x9e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e0a6      	b.n	80064a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_TIM_PWM_Start+0xb6>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006368:	e023      	b.n	80063b2 <HAL_TIM_PWM_Start+0xfe>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b04      	cmp	r3, #4
 800636e:	d104      	bne.n	800637a <HAL_TIM_PWM_Start+0xc6>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006378:	e01b      	b.n	80063b2 <HAL_TIM_PWM_Start+0xfe>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d104      	bne.n	800638a <HAL_TIM_PWM_Start+0xd6>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	e013      	b.n	80063b2 <HAL_TIM_PWM_Start+0xfe>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d104      	bne.n	800639a <HAL_TIM_PWM_Start+0xe6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006398:	e00b      	b.n	80063b2 <HAL_TIM_PWM_Start+0xfe>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d104      	bne.n	80063aa <HAL_TIM_PWM_Start+0xf6>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a8:	e003      	b.n	80063b2 <HAL_TIM_PWM_Start+0xfe>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2201      	movs	r2, #1
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f002 f82c 	bl	8008418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a3a      	ldr	r2, [pc, #232]	@ (80064b0 <HAL_TIM_PWM_Start+0x1fc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d018      	beq.n	80063fc <HAL_TIM_PWM_Start+0x148>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a39      	ldr	r2, [pc, #228]	@ (80064b4 <HAL_TIM_PWM_Start+0x200>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <HAL_TIM_PWM_Start+0x148>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a37      	ldr	r2, [pc, #220]	@ (80064b8 <HAL_TIM_PWM_Start+0x204>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00e      	beq.n	80063fc <HAL_TIM_PWM_Start+0x148>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a36      	ldr	r2, [pc, #216]	@ (80064bc <HAL_TIM_PWM_Start+0x208>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_TIM_PWM_Start+0x148>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a34      	ldr	r2, [pc, #208]	@ (80064c0 <HAL_TIM_PWM_Start+0x20c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_PWM_Start+0x148>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a33      	ldr	r2, [pc, #204]	@ (80064c4 <HAL_TIM_PWM_Start+0x210>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_TIM_PWM_Start+0x14c>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <HAL_TIM_PWM_Start+0x14e>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a25      	ldr	r2, [pc, #148]	@ (80064b0 <HAL_TIM_PWM_Start+0x1fc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006428:	d01d      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	@ (80064c8 <HAL_TIM_PWM_Start+0x214>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	@ (80064cc <HAL_TIM_PWM_Start+0x218>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	@ (80064d0 <HAL_TIM_PWM_Start+0x21c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <HAL_TIM_PWM_Start+0x200>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_TIM_PWM_Start+0x204>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIM_PWM_Start+0x1b2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIM_PWM_Start+0x210>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d115      	bne.n	8006492 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	4b19      	ldr	r3, [pc, #100]	@ (80064d4 <HAL_TIM_PWM_Start+0x220>)
 800646e:	4013      	ands	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b06      	cmp	r3, #6
 8006476:	d015      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x1f0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647e:	d011      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	e008      	b.n	80064a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e000      	b.n	80064a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40013400 	.word	0x40013400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800
 80064c4:	40015000 	.word	0x40015000
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	00010007 	.word	0x00010007

080064d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <HAL_TIM_PWM_Start_DMA+0x2c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	e03c      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b04      	cmp	r3, #4
 8006508:	d109      	bne.n	800651e <HAL_TIM_PWM_Start_DMA+0x46>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e02f      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0xa6>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d109      	bne.n	8006538 <HAL_TIM_PWM_Start_DMA+0x60>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e022      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d109      	bne.n	8006552 <HAL_TIM_PWM_Start_DMA+0x7a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	e015      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b10      	cmp	r3, #16
 8006556:	d109      	bne.n	800656c <HAL_TIM_PWM_Start_DMA+0x94>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e008      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0xa6>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	bf0c      	ite	eq
 8006578:	2301      	moveq	r3, #1
 800657a:	2300      	movne	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	e1b5      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf0c      	ite	eq
 8006598:	2301      	moveq	r3, #1
 800659a:	2300      	movne	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e03c      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x142>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d109      	bne.n	80065ba <HAL_TIM_PWM_Start_DMA+0xe2>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	e02f      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x142>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d109      	bne.n	80065d4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e022      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x142>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b0c      	cmp	r3, #12
 80065d8:	d109      	bne.n	80065ee <HAL_TIM_PWM_Start_DMA+0x116>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e015      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x142>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d109      	bne.n	8006608 <HAL_TIM_PWM_Start_DMA+0x130>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e008      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x142>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d034      	beq.n	8006688 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_TIM_PWM_Start_DMA+0x152>
 8006624:	887b      	ldrh	r3, [r7, #2]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e161      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <HAL_TIM_PWM_Start_DMA+0x166>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800663c:	e026      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d104      	bne.n	800664e <HAL_TIM_PWM_Start_DMA+0x176>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800664c:	e01e      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d104      	bne.n	800665e <HAL_TIM_PWM_Start_DMA+0x186>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800665c:	e016      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b0c      	cmp	r3, #12
 8006662:	d104      	bne.n	800666e <HAL_TIM_PWM_Start_DMA+0x196>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800666c:	e00e      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b10      	cmp	r3, #16
 8006672:	d104      	bne.n	800667e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800667c:	e006      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006686:	e001      	b.n	800668c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e132      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	f200 80ae 	bhi.w	80067f0 <HAL_TIM_PWM_Start_DMA+0x318>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080067f1 	.word	0x080067f1
 80066a4:	080067f1 	.word	0x080067f1
 80066a8:	080067f1 	.word	0x080067f1
 80066ac:	08006719 	.word	0x08006719
 80066b0:	080067f1 	.word	0x080067f1
 80066b4:	080067f1 	.word	0x080067f1
 80066b8:	080067f1 	.word	0x080067f1
 80066bc:	08006761 	.word	0x08006761
 80066c0:	080067f1 	.word	0x080067f1
 80066c4:	080067f1 	.word	0x080067f1
 80066c8:	080067f1 	.word	0x080067f1
 80066cc:	080067a9 	.word	0x080067a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	4a89      	ldr	r2, [pc, #548]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x424>)
 80066d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	4a88      	ldr	r2, [pc, #544]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x428>)
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	4a87      	ldr	r2, [pc, #540]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80066e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3334      	adds	r3, #52	@ 0x34
 80066f4:	461a      	mov	r2, r3
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	f7fd ff6e 	bl	80045d8 <HAL_DMA_Start_IT>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e0f5      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006714:	60da      	str	r2, [r3, #12]
      break;
 8006716:	e06e      	b.n	80067f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	4a77      	ldr	r2, [pc, #476]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x424>)
 800671e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	4a76      	ldr	r2, [pc, #472]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	4a75      	ldr	r2, [pc, #468]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800672e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3338      	adds	r3, #56	@ 0x38
 800673c:	461a      	mov	r2, r3
 800673e:	887b      	ldrh	r3, [r7, #2]
 8006740:	f7fd ff4a 	bl	80045d8 <HAL_DMA_Start_IT>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e0d1      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800675c:	60da      	str	r2, [r3, #12]
      break;
 800675e:	e04a      	b.n	80067f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	4a65      	ldr	r2, [pc, #404]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x424>)
 8006766:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	4a64      	ldr	r2, [pc, #400]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x428>)
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	4a63      	ldr	r2, [pc, #396]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006776:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	333c      	adds	r3, #60	@ 0x3c
 8006784:	461a      	mov	r2, r3
 8006786:	887b      	ldrh	r3, [r7, #2]
 8006788:	f7fd ff26 	bl	80045d8 <HAL_DMA_Start_IT>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e0ad      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a4:	60da      	str	r2, [r3, #12]
      break;
 80067a6:	e026      	b.n	80067f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	4a53      	ldr	r2, [pc, #332]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x424>)
 80067ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	4a52      	ldr	r2, [pc, #328]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x428>)
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067bc:	4a51      	ldr	r2, [pc, #324]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80067be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3340      	adds	r3, #64	@ 0x40
 80067cc:	461a      	mov	r2, r3
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	f7fd ff02 	bl	80045d8 <HAL_DMA_Start_IT>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e089      	b.n	80068f2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067ec:	60da      	str	r2, [r3, #12]
      break;
 80067ee:	e002      	b.n	80067f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
      break;
 80067f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d179      	bne.n	80068f0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fe07 	bl	8008418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	@ (8006908 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3c      	ldr	r2, [pc, #240]	@ (800690c <HAL_TIM_PWM_Start_DMA+0x434>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_TIM_PWM_Start_DMA+0x36e>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	@ (8006910 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a39      	ldr	r2, [pc, #228]	@ (8006914 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a38      	ldr	r2, [pc, #224]	@ (8006918 <HAL_TIM_PWM_Start_DMA+0x440>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_TIM_PWM_Start_DMA+0x36e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a36      	ldr	r2, [pc, #216]	@ (800691c <HAL_TIM_PWM_Start_DMA+0x444>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_Start_DMA+0x372>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <HAL_TIM_PWM_Start_DMA+0x374>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800685e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a28      	ldr	r2, [pc, #160]	@ (8006908 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d022      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	d01d      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a29      	ldr	r2, [pc, #164]	@ (8006920 <HAL_TIM_PWM_Start_DMA+0x448>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a28      	ldr	r2, [pc, #160]	@ (8006924 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <HAL_TIM_PWM_Start_DMA+0x450>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <HAL_TIM_PWM_Start_DMA+0x434>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006910 <HAL_TIM_PWM_Start_DMA+0x438>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <HAL_TIM_PWM_Start_DMA+0x444>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d115      	bne.n	80068dc <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <HAL_TIM_PWM_Start_DMA+0x454>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d015      	beq.n	80068ee <HAL_TIM_PWM_Start_DMA+0x416>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c8:	d011      	beq.n	80068ee <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068da:	e008      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	08007a0b 	.word	0x08007a0b
 8006900:	08007ab7 	.word	0x08007ab7
 8006904:	08007975 	.word	0x08007975
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800
 800691c:	40015000 	.word	0x40015000
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	00010007 	.word	0x00010007

08006930 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d855      	bhi.n	80069f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006944:	a201      	add	r2, pc, #4	@ (adr r2, 800694c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006981 	.word	0x08006981
 8006950:	080069f1 	.word	0x080069f1
 8006954:	080069f1 	.word	0x080069f1
 8006958:	080069f1 	.word	0x080069f1
 800695c:	0800699d 	.word	0x0800699d
 8006960:	080069f1 	.word	0x080069f1
 8006964:	080069f1 	.word	0x080069f1
 8006968:	080069f1 	.word	0x080069f1
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069f1 	.word	0x080069f1
 8006974:	080069f1 	.word	0x080069f1
 8006978:	080069f1 	.word	0x080069f1
 800697c:	080069d5 	.word	0x080069d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800698e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd fef3 	bl	8004780 <HAL_DMA_Abort_IT>
      break;
 800699a:	e02c      	b.n	80069f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fd fee5 	bl	8004780 <HAL_DMA_Abort_IT>
      break;
 80069b6:	e01e      	b.n	80069f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fd fed7 	bl	8004780 <HAL_DMA_Abort_IT>
      break;
 80069d2:	e010      	b.n	80069f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd fec9 	bl	8004780 <HAL_DMA_Abort_IT>
      break;
 80069ee:	e002      	b.n	80069f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      break;
 80069f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 8086 	bne.w	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fd06 	bl	8008418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a40      	ldr	r2, [pc, #256]	@ (8006b14 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d018      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b18 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a3d      	ldr	r2, [pc, #244]	@ (8006b1c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00e      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b20 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3a      	ldr	r2, [pc, #232]	@ (8006b24 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a39      	ldr	r2, [pc, #228]	@ (8006b28 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d101      	bne.n	8006a4c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1a      	ldr	r2, [r3, #32]
 8006a68:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10f      	bne.n	8006ab2 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac0:	e023      	b.n	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ad0:	e01b      	b.n	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ae0:	e013      	b.n	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b0c      	cmp	r3, #12
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006af0:	e00b      	b.n	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b00:	e003      	b.n	8006b0a <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40013400 	.word	0x40013400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800
 8006b28:	40015000 	.word	0x40015000

08006b2c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b54:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d108      	bne.n	8006b6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d102      	bne.n	8006b6e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b68:	7b3b      	ldrb	r3, [r7, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e059      	b.n	8006c26 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0202 	orr.w	r2, r2, #2
 8006ba0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0204 	orr.w	r2, r2, #4
 8006bb0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 fc2c 	bl	8008418 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fc25 	bl	8008418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a15      	ldr	r2, [pc, #84]	@ (8006c34 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a14      	ldr	r2, [pc, #80]	@ (8006c38 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a12      	ldr	r2, [pc, #72]	@ (8006c3c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a11      	ldr	r2, [pc, #68]	@ (8006c40 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40013400 	.word	0x40013400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40014400 	.word	0x40014400
 8006c40:	40014800 	.word	0x40014800
 8006c44:	40015000 	.word	0x40015000

08006c48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0a2      	b.n	8006da2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d111      	bne.n	8006c8c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fbf7 	bl	8008464 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a4a      	ldr	r2, [pc, #296]	@ (8006dac <HAL_TIM_Encoder_Init+0x164>)
 8006c82:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006ca2:	f023 0307 	bic.w	r3, r3, #7
 8006ca6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f000 ff36 	bl	8007b24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce0:	f023 0303 	bic.w	r3, r3, #3
 8006ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cfe:	f023 030c 	bic.w	r3, r3, #12
 8006d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	011a      	lsls	r2, r3, #4
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d3c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d44:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4313      	orrs	r3, r2
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	08003a49 	.word	0x08003a49

08006db0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006dc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d110      	bne.n	8006e02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d102      	bne.n	8006dec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006de6:	7b7b      	ldrb	r3, [r7, #13]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d001      	beq.n	8006df0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e069      	b.n	8006ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e00:	e031      	b.n	8006e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d110      	bne.n	8006e2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d102      	bne.n	8006e14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e0e:	7b3b      	ldrb	r3, [r7, #12]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d001      	beq.n	8006e18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e055      	b.n	8006ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e28:	e01d      	b.n	8006e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d108      	bne.n	8006e42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e36:	7b7b      	ldrb	r3, [r7, #13]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d102      	bne.n	8006e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e3c:	7b3b      	ldrb	r3, [r7, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d001      	beq.n	8006e46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e03e      	b.n	8006ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <HAL_TIM_Encoder_Start+0xc4>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d008      	beq.n	8006e84 <HAL_TIM_Encoder_Start+0xd4>
 8006e72:	e00f      	b.n	8006e94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 facb 	bl	8008418 <TIM_CCxChannelCmd>
      break;
 8006e82:	e016      	b.n	8006eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fac3 	bl	8008418 <TIM_CCxChannelCmd>
      break;
 8006e92:	e00e      	b.n	8006eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fabb 	bl	8008418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fab4 	bl	8008418 <TIM_CCxChannelCmd>
      break;
 8006eb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d026      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d021      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0202 	mvn.w	r2, #2
 8006f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
 8006f20:	e009      	b.n	8006f36 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d026      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d021      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0204 	mvn.w	r2, #4
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	e009      	b.n	8006f8e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d026      	beq.n	8006fec <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d021      	beq.n	8006fec <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0208 	mvn.w	r2, #8
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
 8006fd0:	e009      	b.n	8006fe6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d026      	beq.n	8007044 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d021      	beq.n	8007044 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0210 	mvn.w	r2, #16
 8007008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2208      	movs	r2, #8
 800700e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
 8007028:	e009      	b.n	800703e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0201 	mvn.w	r2, #1
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007072:	2b00      	cmp	r3, #0
 8007074:	d104      	bne.n	8007080 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00e      	beq.n	800709e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00e      	beq.n	80070ee <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f06f 0220 	mvn.w	r2, #32
 800710a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0ff      	b.n	80073de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b14      	cmp	r3, #20
 80071ea:	f200 80f0 	bhi.w	80073ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080073cf 	.word	0x080073cf
 80071fc:	080073cf 	.word	0x080073cf
 8007200:	080073cf 	.word	0x080073cf
 8007204:	08007289 	.word	0x08007289
 8007208:	080073cf 	.word	0x080073cf
 800720c:	080073cf 	.word	0x080073cf
 8007210:	080073cf 	.word	0x080073cf
 8007214:	080072cb 	.word	0x080072cb
 8007218:	080073cf 	.word	0x080073cf
 800721c:	080073cf 	.word	0x080073cf
 8007220:	080073cf 	.word	0x080073cf
 8007224:	0800730b 	.word	0x0800730b
 8007228:	080073cf 	.word	0x080073cf
 800722c:	080073cf 	.word	0x080073cf
 8007230:	080073cf 	.word	0x080073cf
 8007234:	0800734d 	.word	0x0800734d
 8007238:	080073cf 	.word	0x080073cf
 800723c:	080073cf 	.word	0x080073cf
 8007240:	080073cf 	.word	0x080073cf
 8007244:	0800738d 	.word	0x0800738d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fd1c 	bl	8007c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e0a5      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fd96 	bl	8007dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e084      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fe09 	bl	8007ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e064      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fe7b 	bl	800800c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e043      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 feee 	bl	8008134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0208 	orr.w	r2, r2, #8
 8007366:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0204 	bic.w	r2, r2, #4
 8007376:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800738a:	e023      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 ff38 	bl	8008208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	021a      	lsls	r2, r3, #8
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073cc:	e002      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
      break;
 80073d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_ConfigClockSource+0x1c>
 8007400:	2302      	movs	r3, #2
 8007402:	e0f6      	b.n	80075f2 <HAL_TIM_ConfigClockSource+0x20a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800742e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a6f      	ldr	r2, [pc, #444]	@ (80075fc <HAL_TIM_ConfigClockSource+0x214>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f000 80c1 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007444:	4a6d      	ldr	r2, [pc, #436]	@ (80075fc <HAL_TIM_ConfigClockSource+0x214>)
 8007446:	4293      	cmp	r3, r2
 8007448:	f200 80c6 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800744c:	4a6c      	ldr	r2, [pc, #432]	@ (8007600 <HAL_TIM_ConfigClockSource+0x218>)
 800744e:	4293      	cmp	r3, r2
 8007450:	f000 80b9 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007454:	4a6a      	ldr	r2, [pc, #424]	@ (8007600 <HAL_TIM_ConfigClockSource+0x218>)
 8007456:	4293      	cmp	r3, r2
 8007458:	f200 80be 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800745c:	4a69      	ldr	r2, [pc, #420]	@ (8007604 <HAL_TIM_ConfigClockSource+0x21c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f000 80b1 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007464:	4a67      	ldr	r2, [pc, #412]	@ (8007604 <HAL_TIM_ConfigClockSource+0x21c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	f200 80b6 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800746c:	4a66      	ldr	r2, [pc, #408]	@ (8007608 <HAL_TIM_ConfigClockSource+0x220>)
 800746e:	4293      	cmp	r3, r2
 8007470:	f000 80a9 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007474:	4a64      	ldr	r2, [pc, #400]	@ (8007608 <HAL_TIM_ConfigClockSource+0x220>)
 8007476:	4293      	cmp	r3, r2
 8007478:	f200 80ae 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800747c:	4a63      	ldr	r2, [pc, #396]	@ (800760c <HAL_TIM_ConfigClockSource+0x224>)
 800747e:	4293      	cmp	r3, r2
 8007480:	f000 80a1 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007484:	4a61      	ldr	r2, [pc, #388]	@ (800760c <HAL_TIM_ConfigClockSource+0x224>)
 8007486:	4293      	cmp	r3, r2
 8007488:	f200 80a6 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800748c:	4a60      	ldr	r2, [pc, #384]	@ (8007610 <HAL_TIM_ConfigClockSource+0x228>)
 800748e:	4293      	cmp	r3, r2
 8007490:	f000 8099 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007494:	4a5e      	ldr	r2, [pc, #376]	@ (8007610 <HAL_TIM_ConfigClockSource+0x228>)
 8007496:	4293      	cmp	r3, r2
 8007498:	f200 809e 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800749c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074a0:	f000 8091 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 80074a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074a8:	f200 8096 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074b0:	f000 8089 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 80074b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074b8:	f200 808e 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c0:	d03e      	beq.n	8007540 <HAL_TIM_ConfigClockSource+0x158>
 80074c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c6:	f200 8087 	bhi.w	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ce:	f000 8086 	beq.w	80075de <HAL_TIM_ConfigClockSource+0x1f6>
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d6:	d87f      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074d8:	2b70      	cmp	r3, #112	@ 0x70
 80074da:	d01a      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x12a>
 80074dc:	2b70      	cmp	r3, #112	@ 0x70
 80074de:	d87b      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074e0:	2b60      	cmp	r3, #96	@ 0x60
 80074e2:	d050      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x19e>
 80074e4:	2b60      	cmp	r3, #96	@ 0x60
 80074e6:	d877      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074e8:	2b50      	cmp	r3, #80	@ 0x50
 80074ea:	d03c      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x17e>
 80074ec:	2b50      	cmp	r3, #80	@ 0x50
 80074ee:	d873      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	d058      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 80074f4:	2b40      	cmp	r3, #64	@ 0x40
 80074f6:	d86f      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80074f8:	2b30      	cmp	r3, #48	@ 0x30
 80074fa:	d064      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 80074fc:	2b30      	cmp	r3, #48	@ 0x30
 80074fe:	d86b      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d060      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007504:	2b20      	cmp	r3, #32
 8007506:	d867      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d05c      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 800750c:	2b10      	cmp	r3, #16
 800750e:	d05a      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x1de>
 8007510:	e062      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007522:	f000 ff59 	bl	80083d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	609a      	str	r2, [r3, #8]
      break;
 800753e:	e04f      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007550:	f000 ff42 	bl	80083d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007562:	609a      	str	r2, [r3, #8]
      break;
 8007564:	e03c      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007572:	461a      	mov	r2, r3
 8007574:	f000 feb4 	bl	80082e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2150      	movs	r1, #80	@ 0x50
 800757e:	4618      	mov	r0, r3
 8007580:	f000 ff0d 	bl	800839e <TIM_ITRx_SetConfig>
      break;
 8007584:	e02c      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007592:	461a      	mov	r2, r3
 8007594:	f000 fed3 	bl	800833e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2160      	movs	r1, #96	@ 0x60
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fefd 	bl	800839e <TIM_ITRx_SetConfig>
      break;
 80075a4:	e01c      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075b2:	461a      	mov	r2, r3
 80075b4:	f000 fe94 	bl	80082e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2140      	movs	r1, #64	@ 0x40
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 feed 	bl	800839e <TIM_ITRx_SetConfig>
      break;
 80075c4:	e00c      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f000 fee4 	bl	800839e <TIM_ITRx_SetConfig>
      break;
 80075d6:	e003      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	e000      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80075de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	00100070 	.word	0x00100070
 8007600:	00100060 	.word	0x00100060
 8007604:	00100050 	.word	0x00100050
 8007608:	00100040 	.word	0x00100040
 800760c:	00100030 	.word	0x00100030
 8007610:	00100020 	.word	0x00100020

08007614 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	460b      	mov	r3, r1
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e14a      	b.n	8007966 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 80dd 	bne.w	8007898 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b1f      	cmp	r3, #31
 80076e2:	f200 80d6 	bhi.w	8007892 <HAL_TIM_RegisterCallback+0x1de>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <HAL_TIM_RegisterCallback+0x38>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	08007775 	.word	0x08007775
 80076f4:	0800777d 	.word	0x0800777d
 80076f8:	08007785 	.word	0x08007785
 80076fc:	0800778d 	.word	0x0800778d
 8007700:	08007795 	.word	0x08007795
 8007704:	0800779d 	.word	0x0800779d
 8007708:	080077a5 	.word	0x080077a5
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077b5 	.word	0x080077b5
 8007714:	080077bd 	.word	0x080077bd
 8007718:	080077c5 	.word	0x080077c5
 800771c:	080077cd 	.word	0x080077cd
 8007720:	080077d5 	.word	0x080077d5
 8007724:	080077df 	.word	0x080077df
 8007728:	080077e9 	.word	0x080077e9
 800772c:	080077f3 	.word	0x080077f3
 8007730:	080077fd 	.word	0x080077fd
 8007734:	08007807 	.word	0x08007807
 8007738:	08007811 	.word	0x08007811
 800773c:	0800781b 	.word	0x0800781b
 8007740:	08007825 	.word	0x08007825
 8007744:	0800782f 	.word	0x0800782f
 8007748:	08007839 	.word	0x08007839
 800774c:	08007843 	.word	0x08007843
 8007750:	0800784d 	.word	0x0800784d
 8007754:	08007857 	.word	0x08007857
 8007758:	08007861 	.word	0x08007861
 800775c:	0800786b 	.word	0x0800786b
 8007760:	08007875 	.word	0x08007875
 8007764:	0800787f 	.word	0x0800787f
 8007768:	08007889 	.word	0x08007889
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007772:	e0f7      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800777a:	e0f3      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007782:	e0ef      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800778a:	e0eb      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007792:	e0e7      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800779a:	e0e3      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80077a2:	e0df      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80077aa:	e0db      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80077b2:	e0d7      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80077ba:	e0d3      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80077c2:	e0cf      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80077ca:	e0cb      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80077d2:	e0c7      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80077dc:	e0c2      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80077e6:	e0bd      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80077f0:	e0b8      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80077fa:	e0b3      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007804:	e0ae      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800780e:	e0a9      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007818:	e0a4      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007822:	e09f      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800782c:	e09a      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007836:	e095      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007840:	e090      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800784a:	e08b      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007854:	e086      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800785e:	e081      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007868:	e07c      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007872:	e077      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800787c:	e072      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007886:	e06d      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007890:	e068      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
        break;
 8007896:	e065      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d15d      	bne.n	8007960 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	2b0d      	cmp	r3, #13
 80078a8:	d857      	bhi.n	800795a <HAL_TIM_RegisterCallback+0x2a6>
 80078aa:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <HAL_TIM_RegisterCallback+0x1fc>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078f1 	.word	0x080078f1
 80078b8:	080078f9 	.word	0x080078f9
 80078bc:	08007901 	.word	0x08007901
 80078c0:	08007909 	.word	0x08007909
 80078c4:	08007911 	.word	0x08007911
 80078c8:	08007919 	.word	0x08007919
 80078cc:	08007921 	.word	0x08007921
 80078d0:	08007929 	.word	0x08007929
 80078d4:	08007931 	.word	0x08007931
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007941 	.word	0x08007941
 80078e0:	08007949 	.word	0x08007949
 80078e4:	08007951 	.word	0x08007951
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80078ee:	e039      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80078f6:	e035      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80078fe:	e031      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007906:	e02d      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800790e:	e029      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007916:	e025      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800791e:	e021      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007926:	e01d      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800792e:	e019      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007936:	e015      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800793e:	e011      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007946:	e00d      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800794e:	e009      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007958:	e004      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
        break;
 800795e:	e001      	b.n	8007964 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop

08007974 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d107      	bne.n	800799c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800799a:	e02a      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d107      	bne.n	80079b6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079b4:	e01d      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d107      	bne.n	80079d0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2204      	movs	r2, #4
 80079c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079ce:	e010      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d107      	bne.n	80079ea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2208      	movs	r2, #8
 80079de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079e8:	e003      	b.n	80079f2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	771a      	strb	r2, [r3, #28]
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d10b      	bne.n	8007a3a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d136      	bne.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a38:	e031      	b.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d10b      	bne.n	8007a5c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2202      	movs	r2, #2
 8007a48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d125      	bne.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a5a:	e020      	b.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d10b      	bne.n	8007a7e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a7c:	e00f      	b.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d10a      	bne.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	771a      	strb	r2, [r3, #28]
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d103      	bne.n	8007ad6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	771a      	strb	r2, [r3, #28]
 8007ad4:	e019      	b.n	8007b0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d103      	bne.n	8007ae8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	771a      	strb	r2, [r3, #28]
 8007ae6:	e010      	b.n	8007b0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d103      	bne.n	8007afa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2204      	movs	r2, #4
 8007af6:	771a      	strb	r2, [r3, #28]
 8007af8:	e007      	b.n	8007b0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d102      	bne.n	8007b0a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2208      	movs	r2, #8
 8007b08:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	771a      	strb	r2, [r3, #28]
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a4c      	ldr	r2, [pc, #304]	@ (8007c68 <TIM_Base_SetConfig+0x144>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d017      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b42:	d013      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a49      	ldr	r2, [pc, #292]	@ (8007c6c <TIM_Base_SetConfig+0x148>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00f      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a48      	ldr	r2, [pc, #288]	@ (8007c70 <TIM_Base_SetConfig+0x14c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00b      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a47      	ldr	r2, [pc, #284]	@ (8007c74 <TIM_Base_SetConfig+0x150>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d007      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a46      	ldr	r2, [pc, #280]	@ (8007c78 <TIM_Base_SetConfig+0x154>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_Base_SetConfig+0x48>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a45      	ldr	r2, [pc, #276]	@ (8007c7c <TIM_Base_SetConfig+0x158>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d108      	bne.n	8007b7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a39      	ldr	r2, [pc, #228]	@ (8007c68 <TIM_Base_SetConfig+0x144>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d023      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8c:	d01f      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a36      	ldr	r2, [pc, #216]	@ (8007c6c <TIM_Base_SetConfig+0x148>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01b      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a35      	ldr	r2, [pc, #212]	@ (8007c70 <TIM_Base_SetConfig+0x14c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d017      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a34      	ldr	r2, [pc, #208]	@ (8007c74 <TIM_Base_SetConfig+0x150>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a33      	ldr	r2, [pc, #204]	@ (8007c78 <TIM_Base_SetConfig+0x154>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00f      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a33      	ldr	r2, [pc, #204]	@ (8007c80 <TIM_Base_SetConfig+0x15c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00b      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a32      	ldr	r2, [pc, #200]	@ (8007c84 <TIM_Base_SetConfig+0x160>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a31      	ldr	r2, [pc, #196]	@ (8007c88 <TIM_Base_SetConfig+0x164>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_Base_SetConfig+0xaa>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8007c7c <TIM_Base_SetConfig+0x158>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d108      	bne.n	8007be0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a18      	ldr	r2, [pc, #96]	@ (8007c68 <TIM_Base_SetConfig+0x144>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d013      	beq.n	8007c34 <TIM_Base_SetConfig+0x110>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c78 <TIM_Base_SetConfig+0x154>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00f      	beq.n	8007c34 <TIM_Base_SetConfig+0x110>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a1a      	ldr	r2, [pc, #104]	@ (8007c80 <TIM_Base_SetConfig+0x15c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00b      	beq.n	8007c34 <TIM_Base_SetConfig+0x110>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a19      	ldr	r2, [pc, #100]	@ (8007c84 <TIM_Base_SetConfig+0x160>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d007      	beq.n	8007c34 <TIM_Base_SetConfig+0x110>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a18      	ldr	r2, [pc, #96]	@ (8007c88 <TIM_Base_SetConfig+0x164>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_Base_SetConfig+0x110>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a13      	ldr	r2, [pc, #76]	@ (8007c7c <TIM_Base_SetConfig+0x158>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40000c00 	.word	0x40000c00
 8007c78:	40013400 	.word	0x40013400
 8007c7c:	40015000 	.word	0x40015000
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	40014800 	.word	0x40014800

08007c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f023 0201 	bic.w	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 0302 	bic.w	r3, r3, #2
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a30      	ldr	r2, [pc, #192]	@ (8007da8 <TIM_OC1_SetConfig+0x11c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <TIM_OC1_SetConfig+0x88>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a2f      	ldr	r2, [pc, #188]	@ (8007dac <TIM_OC1_SetConfig+0x120>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00f      	beq.n	8007d14 <TIM_OC1_SetConfig+0x88>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8007db0 <TIM_OC1_SetConfig+0x124>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_OC1_SetConfig+0x88>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8007db4 <TIM_OC1_SetConfig+0x128>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_OC1_SetConfig+0x88>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a2c      	ldr	r2, [pc, #176]	@ (8007db8 <TIM_OC1_SetConfig+0x12c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC1_SetConfig+0x88>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dbc <TIM_OC1_SetConfig+0x130>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d10c      	bne.n	8007d2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f023 0308 	bic.w	r3, r3, #8
 8007d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 0304 	bic.w	r3, r3, #4
 8007d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <TIM_OC1_SetConfig+0x11c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <TIM_OC1_SetConfig+0xd2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <TIM_OC1_SetConfig+0x120>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_OC1_SetConfig+0xd2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1b      	ldr	r2, [pc, #108]	@ (8007db0 <TIM_OC1_SetConfig+0x124>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_OC1_SetConfig+0xd2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <TIM_OC1_SetConfig+0x128>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_OC1_SetConfig+0xd2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a19      	ldr	r2, [pc, #100]	@ (8007db8 <TIM_OC1_SetConfig+0x12c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_OC1_SetConfig+0xd2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a18      	ldr	r2, [pc, #96]	@ (8007dbc <TIM_OC1_SetConfig+0x130>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d111      	bne.n	8007d82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	621a      	str	r2, [r3, #32]
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800
 8007dbc:	40015000 	.word	0x40015000

08007dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	f023 0210 	bic.w	r2, r3, #16
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f023 0320 	bic.w	r3, r3, #32
 8007e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ed0 <TIM_OC2_SetConfig+0x110>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d007      	beq.n	8007e34 <TIM_OC2_SetConfig+0x74>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed4 <TIM_OC2_SetConfig+0x114>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_OC2_SetConfig+0x74>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed8 <TIM_OC2_SetConfig+0x118>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d10d      	bne.n	8007e50 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed0 <TIM_OC2_SetConfig+0x110>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d013      	beq.n	8007e80 <TIM_OC2_SetConfig+0xc0>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ed4 <TIM_OC2_SetConfig+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00f      	beq.n	8007e80 <TIM_OC2_SetConfig+0xc0>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <TIM_OC2_SetConfig+0x11c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00b      	beq.n	8007e80 <TIM_OC2_SetConfig+0xc0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <TIM_OC2_SetConfig+0x120>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d007      	beq.n	8007e80 <TIM_OC2_SetConfig+0xc0>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1c      	ldr	r2, [pc, #112]	@ (8007ee4 <TIM_OC2_SetConfig+0x124>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_OC2_SetConfig+0xc0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a17      	ldr	r2, [pc, #92]	@ (8007ed8 <TIM_OC2_SetConfig+0x118>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d113      	bne.n	8007ea8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40012c00 	.word	0x40012c00
 8007ed4:	40013400 	.word	0x40013400
 8007ed8:	40015000 	.word	0x40015000
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	40014400 	.word	0x40014400
 8007ee4:	40014800 	.word	0x40014800

08007ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2b      	ldr	r2, [pc, #172]	@ (8007ff4 <TIM_OC3_SetConfig+0x10c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <TIM_OC3_SetConfig+0x72>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ff8 <TIM_OC3_SetConfig+0x110>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC3_SetConfig+0x72>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a29      	ldr	r2, [pc, #164]	@ (8007ffc <TIM_OC3_SetConfig+0x114>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d10d      	bne.n	8007f76 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1e      	ldr	r2, [pc, #120]	@ (8007ff4 <TIM_OC3_SetConfig+0x10c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <TIM_OC3_SetConfig+0xbe>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff8 <TIM_OC3_SetConfig+0x110>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00f      	beq.n	8007fa6 <TIM_OC3_SetConfig+0xbe>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <TIM_OC3_SetConfig+0x118>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_OC3_SetConfig+0xbe>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <TIM_OC3_SetConfig+0x11c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_OC3_SetConfig+0xbe>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <TIM_OC3_SetConfig+0x120>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_OC3_SetConfig+0xbe>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	@ (8007ffc <TIM_OC3_SetConfig+0x114>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d113      	bne.n	8007fce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	621a      	str	r2, [r3, #32]
}
 8007fe8:	bf00      	nop
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40013400 	.word	0x40013400
 8007ffc:	40015000 	.word	0x40015000
 8008000:	40014000 	.word	0x40014000
 8008004:	40014400 	.word	0x40014400
 8008008:	40014800 	.word	0x40014800

0800800c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800805a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	031b      	lsls	r3, r3, #12
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a2c      	ldr	r2, [pc, #176]	@ (800811c <TIM_OC4_SetConfig+0x110>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d007      	beq.n	8008080 <TIM_OC4_SetConfig+0x74>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a2b      	ldr	r2, [pc, #172]	@ (8008120 <TIM_OC4_SetConfig+0x114>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC4_SetConfig+0x74>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a2a      	ldr	r2, [pc, #168]	@ (8008124 <TIM_OC4_SetConfig+0x118>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10d      	bne.n	800809c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	031b      	lsls	r3, r3, #12
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800809a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a1f      	ldr	r2, [pc, #124]	@ (800811c <TIM_OC4_SetConfig+0x110>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <TIM_OC4_SetConfig+0xc0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008120 <TIM_OC4_SetConfig+0x114>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00f      	beq.n	80080cc <TIM_OC4_SetConfig+0xc0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008128 <TIM_OC4_SetConfig+0x11c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00b      	beq.n	80080cc <TIM_OC4_SetConfig+0xc0>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1d      	ldr	r2, [pc, #116]	@ (800812c <TIM_OC4_SetConfig+0x120>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <TIM_OC4_SetConfig+0xc0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1c      	ldr	r2, [pc, #112]	@ (8008130 <TIM_OC4_SetConfig+0x124>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_OC4_SetConfig+0xc0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a17      	ldr	r2, [pc, #92]	@ (8008124 <TIM_OC4_SetConfig+0x118>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d113      	bne.n	80080f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	019b      	lsls	r3, r3, #6
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	019b      	lsls	r3, r3, #6
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	40012c00 	.word	0x40012c00
 8008120:	40013400 	.word	0x40013400
 8008124:	40015000 	.word	0x40015000
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800

08008134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a19      	ldr	r2, [pc, #100]	@ (80081f0 <TIM_OC5_SetConfig+0xbc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <TIM_OC5_SetConfig+0x82>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <TIM_OC5_SetConfig+0xc0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00f      	beq.n	80081b6 <TIM_OC5_SetConfig+0x82>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <TIM_OC5_SetConfig+0xc4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00b      	beq.n	80081b6 <TIM_OC5_SetConfig+0x82>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a16      	ldr	r2, [pc, #88]	@ (80081fc <TIM_OC5_SetConfig+0xc8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d007      	beq.n	80081b6 <TIM_OC5_SetConfig+0x82>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a15      	ldr	r2, [pc, #84]	@ (8008200 <TIM_OC5_SetConfig+0xcc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d003      	beq.n	80081b6 <TIM_OC5_SetConfig+0x82>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a14      	ldr	r2, [pc, #80]	@ (8008204 <TIM_OC5_SetConfig+0xd0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d109      	bne.n	80081ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40013400 	.word	0x40013400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40014400 	.word	0x40014400
 8008200:	40014800 	.word	0x40014800
 8008204:	40015000 	.word	0x40015000

08008208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800824e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	051b      	lsls	r3, r3, #20
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <TIM_OC6_SetConfig+0xc0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d013      	beq.n	800828c <TIM_OC6_SetConfig+0x84>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a19      	ldr	r2, [pc, #100]	@ (80082cc <TIM_OC6_SetConfig+0xc4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00f      	beq.n	800828c <TIM_OC6_SetConfig+0x84>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a18      	ldr	r2, [pc, #96]	@ (80082d0 <TIM_OC6_SetConfig+0xc8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00b      	beq.n	800828c <TIM_OC6_SetConfig+0x84>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a17      	ldr	r2, [pc, #92]	@ (80082d4 <TIM_OC6_SetConfig+0xcc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d007      	beq.n	800828c <TIM_OC6_SetConfig+0x84>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a16      	ldr	r2, [pc, #88]	@ (80082d8 <TIM_OC6_SetConfig+0xd0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_OC6_SetConfig+0x84>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a15      	ldr	r2, [pc, #84]	@ (80082dc <TIM_OC6_SetConfig+0xd4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d109      	bne.n	80082a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	029b      	lsls	r3, r3, #10
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40012c00 	.word	0x40012c00
 80082cc:	40013400 	.word	0x40013400
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800
 80082dc:	40015000 	.word	0x40015000

080082e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f023 0201 	bic.w	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800830a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f023 030a 	bic.w	r3, r3, #10
 800831c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	621a      	str	r2, [r3, #32]
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	f023 0210 	bic.w	r2, r3, #16
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800837a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	621a      	str	r2, [r3, #32]
}
 8008392:	bf00      	nop
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	f043 0307 	orr.w	r3, r3, #7
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	609a      	str	r2, [r3, #8]
}
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	021a      	lsls	r2, r3, #8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4313      	orrs	r3, r2
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	609a      	str	r2, [r3, #8]
}
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 031f 	and.w	r3, r3, #31
 800842a:	2201      	movs	r2, #1
 800842c:	fa02 f303 	lsl.w	r3, r2, r3
 8008430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1a      	ldr	r2, [r3, #32]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	43db      	mvns	r3, r3
 800843a:	401a      	ands	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	fa01 f303 	lsl.w	r3, r1, r3
 8008450:	431a      	orrs	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a26      	ldr	r2, [pc, #152]	@ (8008508 <TIM_ResetCallback+0xa4>)
 8008470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a25      	ldr	r2, [pc, #148]	@ (800850c <TIM_ResetCallback+0xa8>)
 8008478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a24      	ldr	r2, [pc, #144]	@ (8008510 <TIM_ResetCallback+0xac>)
 8008480:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a23      	ldr	r2, [pc, #140]	@ (8008514 <TIM_ResetCallback+0xb0>)
 8008488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a22      	ldr	r2, [pc, #136]	@ (8008518 <TIM_ResetCallback+0xb4>)
 8008490:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a21      	ldr	r2, [pc, #132]	@ (800851c <TIM_ResetCallback+0xb8>)
 8008498:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a20      	ldr	r2, [pc, #128]	@ (8008520 <TIM_ResetCallback+0xbc>)
 80084a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008524 <TIM_ResetCallback+0xc0>)
 80084a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <TIM_ResetCallback+0xc4>)
 80084b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a1d      	ldr	r2, [pc, #116]	@ (800852c <TIM_ResetCallback+0xc8>)
 80084b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a1c      	ldr	r2, [pc, #112]	@ (8008530 <TIM_ResetCallback+0xcc>)
 80084c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008534 <TIM_ResetCallback+0xd0>)
 80084c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <TIM_ResetCallback+0xd4>)
 80084d0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a19      	ldr	r2, [pc, #100]	@ (800853c <TIM_ResetCallback+0xd8>)
 80084d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a18      	ldr	r2, [pc, #96]	@ (8008540 <TIM_ResetCallback+0xdc>)
 80084e0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a17      	ldr	r2, [pc, #92]	@ (8008544 <TIM_ResetCallback+0xe0>)
 80084e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a16      	ldr	r2, [pc, #88]	@ (8008548 <TIM_ResetCallback+0xe4>)
 80084f0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a15      	ldr	r2, [pc, #84]	@ (800854c <TIM_ResetCallback+0xe8>)
 80084f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	08003735 	.word	0x08003735
 800850c:	08007615 	.word	0x08007615
 8008510:	08007679 	.word	0x08007679
 8008514:	0800768d 	.word	0x0800768d
 8008518:	0800763d 	.word	0x0800763d
 800851c:	08007651 	.word	0x08007651
 8008520:	08007629 	.word	0x08007629
 8008524:	08003709 	.word	0x08003709
 8008528:	08007665 	.word	0x08007665
 800852c:	080076a1 	.word	0x080076a1
 8008530:	080089e9 	.word	0x080089e9
 8008534:	080089fd 	.word	0x080089fd
 8008538:	08008a11 	.word	0x08008a11
 800853c:	08008a25 	.word	0x08008a25
 8008540:	08008a39 	.word	0x08008a39
 8008544:	08008a4d 	.word	0x08008a4d
 8008548:	08008a61 	.word	0x08008a61
 800854c:	08008a75 	.word	0x08008a75

08008550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e074      	b.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a34      	ldr	r2, [pc, #208]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d009      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a33      	ldr	r2, [pc, #204]	@ (8008664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d004      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a31      	ldr	r2, [pc, #196]	@ (8008668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d108      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80085be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a21      	ldr	r2, [pc, #132]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d022      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e8:	d01d      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d018      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008670 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a1c      	ldr	r2, [pc, #112]	@ (8008674 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a15      	ldr	r2, [pc, #84]	@ (8008664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a18      	ldr	r2, [pc, #96]	@ (8008678 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a11      	ldr	r2, [pc, #68]	@ (8008668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d10c      	bne.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800862c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	4313      	orrs	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40013400 	.word	0x40013400
 8008668:	40015000 	.word	0x40015000
 800866c:	40000400 	.word	0x40000400
 8008670:	40000800 	.word	0x40000800
 8008674:	40000c00 	.word	0x40000c00
 8008678:	40014000 	.word	0x40014000

0800867c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008694:	2302      	movs	r3, #2
 8008696:	e078      	b.n	800878a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	041b      	lsls	r3, r3, #16
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1c      	ldr	r2, [pc, #112]	@ (8008798 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d009      	beq.n	800873e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1b      	ldr	r2, [pc, #108]	@ (800879c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d004      	beq.n	800873e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a19      	ldr	r2, [pc, #100]	@ (80087a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d11c      	bne.n	8008778 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	051b      	lsls	r3, r3, #20
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40013400 	.word	0x40013400
 80087a0:	40015000 	.word	0x40015000

080087a4 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b08b      	sub	sp, #44	@ 0x2c
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_TIMEx_ConfigBreakInput+0x20>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e10b      	b.n	80089dc <HAL_TIMEx_ConfigBreakInput+0x238>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b80      	cmp	r3, #128	@ 0x80
 80087d2:	f000 8096 	beq.w	8008902 <HAL_TIMEx_ConfigBreakInput+0x15e>
 80087d6:	2b80      	cmp	r3, #128	@ 0x80
 80087d8:	f200 809c 	bhi.w	8008914 <HAL_TIMEx_ConfigBreakInput+0x170>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d849      	bhi.n	8008874 <HAL_TIMEx_ConfigBreakInput+0xd0>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8097 	beq.w	8008914 <HAL_TIMEx_ConfigBreakInput+0x170>
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b1f      	cmp	r3, #31
 80087ea:	f200 8093 	bhi.w	8008914 <HAL_TIMEx_ConfigBreakInput+0x170>
 80087ee:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	0800887b 	.word	0x0800887b
 80087f8:	0800888f 	.word	0x0800888f
 80087fc:	08008915 	.word	0x08008915
 8008800:	080088a3 	.word	0x080088a3
 8008804:	08008915 	.word	0x08008915
 8008808:	08008915 	.word	0x08008915
 800880c:	08008915 	.word	0x08008915
 8008810:	080088b7 	.word	0x080088b7
 8008814:	08008915 	.word	0x08008915
 8008818:	08008915 	.word	0x08008915
 800881c:	08008915 	.word	0x08008915
 8008820:	08008915 	.word	0x08008915
 8008824:	08008915 	.word	0x08008915
 8008828:	08008915 	.word	0x08008915
 800882c:	08008915 	.word	0x08008915
 8008830:	080088cb 	.word	0x080088cb
 8008834:	08008915 	.word	0x08008915
 8008838:	08008915 	.word	0x08008915
 800883c:	08008915 	.word	0x08008915
 8008840:	08008915 	.word	0x08008915
 8008844:	08008915 	.word	0x08008915
 8008848:	08008915 	.word	0x08008915
 800884c:	08008915 	.word	0x08008915
 8008850:	08008915 	.word	0x08008915
 8008854:	08008915 	.word	0x08008915
 8008858:	08008915 	.word	0x08008915
 800885c:	08008915 	.word	0x08008915
 8008860:	08008915 	.word	0x08008915
 8008864:	08008915 	.word	0x08008915
 8008868:	08008915 	.word	0x08008915
 800886c:	08008915 	.word	0x08008915
 8008870:	080088df 	.word	0x080088df
 8008874:	2b40      	cmp	r3, #64	@ 0x40
 8008876:	d03b      	beq.n	80088f0 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8008878:	e04c      	b.n	8008914 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800887a:	2301      	movs	r3, #1
 800887c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800887e:	2300      	movs	r3, #0
 8008880:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008886:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008888:	2309      	movs	r3, #9
 800888a:	617b      	str	r3, [r7, #20]
      break;
 800888c:	e04b      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800888e:	2302      	movs	r3, #2
 8008890:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008892:	2301      	movs	r3, #1
 8008894:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800889a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800889c:	230a      	movs	r3, #10
 800889e:	617b      	str	r3, [r7, #20]
      break;
 80088a0:	e041      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80088a2:	2304      	movs	r3, #4
 80088a4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80088a6:	2302      	movs	r3, #2
 80088a8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80088aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088ae:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80088b0:	230b      	movs	r3, #11
 80088b2:	617b      	str	r3, [r7, #20]
      break;
 80088b4:	e037      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80088b6:	2308      	movs	r3, #8
 80088b8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80088ba:	2303      	movs	r3, #3
 80088bc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80088be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80088c2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80088c4:	230c      	movs	r3, #12
 80088c6:	617b      	str	r3, [r7, #20]
      break;
 80088c8:	e02d      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80088ca:	2310      	movs	r3, #16
 80088cc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80088ce:	2304      	movs	r3, #4
 80088d0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80088d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80088d6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80088d8:	230d      	movs	r3, #13
 80088da:	617b      	str	r3, [r7, #20]
      break;
 80088dc:	e023      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80088de:	2320      	movs	r3, #32
 80088e0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80088e2:	2305      	movs	r3, #5
 80088e4:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
      break;
 80088ee:	e01a      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80088f0:	2340      	movs	r3, #64	@ 0x40
 80088f2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80088f4:	2306      	movs	r3, #6
 80088f6:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]
      break;
 8008900:	e011      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008902:	2380      	movs	r3, #128	@ 0x80
 8008904:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008906:	2307      	movs	r3, #7
 8008908:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
      break;
 8008912:	e008      	b.n	8008926 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
      break;
 8008924:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d003      	beq.n	8008934 <HAL_TIMEx_ConfigBreakInput+0x190>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d025      	beq.n	800897e <HAL_TIMEx_ConfigBreakInput+0x1da>
 8008932:	e049      	b.n	80089c8 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800893a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	43db      	mvns	r3, r3
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4013      	ands	r3, r2
 8008944:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	409a      	lsls	r2, r3
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	4013      	ands	r3, r2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	43db      	mvns	r3, r3
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4013      	ands	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	409a      	lsls	r2, r3
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	4013      	ands	r3, r2
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800897c:	e028      	b.n	80089d0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008984:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	43db      	mvns	r3, r3
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4013      	ands	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	409a      	lsls	r2, r3
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	4013      	ands	r3, r2
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	43db      	mvns	r3, r3
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4013      	ands	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	409a      	lsls	r2, r3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4013      	ands	r3, r2
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80089c6:	e003      	b.n	80089d0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80089ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80089dc:	4618      	mov	r0, r3
 80089de:	372c      	adds	r7, #44	@ 0x2c
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e050      	b.n	8008b3c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d114      	bne.n	8008ace <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fdc5 	bl	800963c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a21      	ldr	r2, [pc, #132]	@ (8008b44 <HAL_UART_Init+0xbc>)
 8008ac0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2224      	movs	r2, #36	@ 0x24
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0201 	bic.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 f8f2 	bl	8009cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fdf3 	bl	80096e0 <UART_SetConfig>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e01b      	b.n	8008b3c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f042 0201 	orr.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f971 	bl	8009e1c <UART_CheckIdleState>
 8008b3a:	4603      	mov	r3, r0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	08003b81 	.word	0x08003b81

08008b48 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	460b      	mov	r3, r1
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e09c      	b.n	8008cae <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d16c      	bne.n	8008c58 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
 8008b80:	2b0c      	cmp	r3, #12
 8008b82:	d85e      	bhi.n	8008c42 <HAL_UART_RegisterCallback+0xfa>
 8008b84:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <HAL_UART_RegisterCallback+0x44>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008bcb 	.word	0x08008bcb
 8008b94:	08008bd5 	.word	0x08008bd5
 8008b98:	08008bdf 	.word	0x08008bdf
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008bf3 	.word	0x08008bf3
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008c07 	.word	0x08008c07
 8008bac:	08008c11 	.word	0x08008c11
 8008bb0:	08008c1b 	.word	0x08008c1b
 8008bb4:	08008c25 	.word	0x08008c25
 8008bb8:	08008c2f 	.word	0x08008c2f
 8008bbc:	08008c39 	.word	0x08008c39
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008bc8:	e070      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008bd2:	e06b      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008bdc:	e066      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008be6:	e061      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008bf0:	e05c      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008bfa:	e057      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008c04:	e052      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008c0e:	e04d      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008c18:	e048      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008c22:	e043      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008c2c:	e03e      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c36:	e039      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c40:	e034      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	75fb      	strb	r3, [r7, #23]
        break;
 8008c56:	e029      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d11a      	bne.n	8008c98 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	2b0b      	cmp	r3, #11
 8008c66:	d002      	beq.n	8008c6e <HAL_UART_RegisterCallback+0x126>
 8008c68:	2b0c      	cmp	r3, #12
 8008c6a:	d005      	beq.n	8008c78 <HAL_UART_RegisterCallback+0x130>
 8008c6c:	e009      	b.n	8008c82 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c76:	e019      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c80:	e014      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
        break;
 8008c96:	e009      	b.n	8008cac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop

08008cbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	@ 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d167      	bne.n	8008da4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_UART_Transmit_DMA+0x24>
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e060      	b.n	8008da6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	88fa      	ldrh	r2, [r7, #6]
 8008cee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	88fa      	ldrh	r2, [r7, #6]
 8008cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2221      	movs	r2, #33	@ 0x21
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d028      	beq.n	8008d64 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d16:	4a26      	ldr	r2, [pc, #152]	@ (8008db0 <HAL_UART_Transmit_DMA+0xf4>)
 8008d18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d1e:	4a25      	ldr	r2, [pc, #148]	@ (8008db4 <HAL_UART_Transmit_DMA+0xf8>)
 8008d20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d26:	4a24      	ldr	r2, [pc, #144]	@ (8008db8 <HAL_UART_Transmit_DMA+0xfc>)
 8008d28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d2e:	2200      	movs	r2, #0
 8008d30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3328      	adds	r3, #40	@ 0x28
 8008d42:	461a      	mov	r2, r3
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	f7fb fc47 	bl	80045d8 <HAL_DMA_Start_IT>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2210      	movs	r2, #16
 8008d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e020      	b.n	8008da6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2240      	movs	r2, #64	@ 0x40
 8008d6a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d8c:	623a      	str	r2, [r7, #32]
 8008d8e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	6a3a      	ldr	r2, [r7, #32]
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e5      	bne.n	8008d6c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008da4:	2302      	movs	r3, #2
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3728      	adds	r7, #40	@ 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	0800a2e7 	.word	0x0800a2e7
 8008db4:	0800a385 	.word	0x0800a385
 8008db8:	0800a51f 	.word	0x0800a51f

08008dbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	@ 0x28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d137      	bne.n	8008e44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_UART_Receive_DMA+0x24>
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e030      	b.n	8008e46 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a18      	ldr	r2, [pc, #96]	@ (8008e50 <HAL_UART_Receive_DMA+0x94>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d01f      	beq.n	8008e34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d018      	beq.n	8008e34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	461a      	mov	r2, r3
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f001 f906 	bl	800a04c <UART_Start_Receive_DMA>
 8008e40:	4603      	mov	r3, r0
 8008e42:	e000      	b.n	8008e46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e44:	2302      	movs	r3, #2
  }
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3728      	adds	r7, #40	@ 0x28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40008000 	.word	0x40008000

08008e54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b0ba      	sub	sp, #232	@ 0xe8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008e7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008e82:	4013      	ands	r3, r2
 8008e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11b      	bne.n	8008ec8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d015      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d105      	bne.n	8008eb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 82f3 	beq.w	80094a4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
      }
      return;
 8008ec6:	e2ed      	b.n	80094a4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8129 	beq.w	8009124 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ed2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ed6:	4b90      	ldr	r3, [pc, #576]	@ (8009118 <HAL_UART_IRQHandler+0x2c4>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800911c <HAL_UART_IRQHandler+0x2c8>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 811c 	beq.w	8009124 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d011      	beq.n	8008f1c <HAL_UART_IRQHandler+0xc8>
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f12:	f043 0201 	orr.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d011      	beq.n	8008f4c <HAL_UART_IRQHandler+0xf8>
 8008f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f42:	f043 0204 	orr.w	r2, r3, #4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d011      	beq.n	8008f7c <HAL_UART_IRQHandler+0x128>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2204      	movs	r2, #4
 8008f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f72:	f043 0202 	orr.w	r2, r3, #2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f98:	4b5f      	ldr	r3, [pc, #380]	@ (8009118 <HAL_UART_IRQHandler+0x2c4>)
 8008f9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fae:	f043 0208 	orr.w	r2, r3, #8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d012      	beq.n	8008fea <HAL_UART_IRQHandler+0x196>
 8008fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00c      	beq.n	8008fea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8259 	beq.w	80094a8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d013      	beq.n	800902a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009030:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903e:	2b40      	cmp	r3, #64	@ 0x40
 8009040:	d005      	beq.n	800904e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009046:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800904a:	2b00      	cmp	r3, #0
 800904c:	d058      	beq.n	8009100 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 f8e3 	bl	800a21a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905e:	2b40      	cmp	r3, #64	@ 0x40
 8009060:	d148      	bne.n	80090f4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800907c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800908e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800909a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1d9      	bne.n	8009062 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d017      	beq.n	80090e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090be:	4a18      	ldr	r2, [pc, #96]	@ (8009120 <HAL_UART_IRQHandler+0x2cc>)
 80090c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb fb59 	bl	8004780 <HAL_DMA_Abort_IT>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01f      	beq.n	8009114 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80090e2:	4610      	mov	r0, r2
 80090e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e6:	e015      	b.n	8009114 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f2:	e00f      	b.n	8009114 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fe:	e009      	b.n	8009114 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009112:	e1c9      	b.n	80094a8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	bf00      	nop
    return;
 8009116:	e1c7      	b.n	80094a8 <HAL_UART_IRQHandler+0x654>
 8009118:	10000001 	.word	0x10000001
 800911c:	04000120 	.word	0x04000120
 8009120:	0800a5a3 	.word	0x0800a5a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009128:	2b01      	cmp	r3, #1
 800912a:	f040 8157 	bne.w	80093dc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800912e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 8150 	beq.w	80093dc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8149 	beq.w	80093dc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2210      	movs	r2, #16
 8009150:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915c:	2b40      	cmp	r3, #64	@ 0x40
 800915e:	f040 80bd 	bne.w	80092dc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8199 	beq.w	80094ac <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009184:	429a      	cmp	r2, r3
 8009186:	f080 8191 	bcs.w	80094ac <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 8087 	bne.w	80092b6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1da      	bne.n	80091a8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009216:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800921a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800921e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e1      	bne.n	80091f2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800923e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3308      	adds	r3, #8
 800924e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009252:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009254:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009258:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e3      	bne.n	800922e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009284:	f023 0310 	bic.w	r3, r3, #16
 8009288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009296:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009298:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800929c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e4      	bne.n	8009274 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fb fa0c 	bl	80046ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80092ce:	b292      	uxth	r2, r2
 80092d0:	1a8a      	subs	r2, r1, r2
 80092d2:	b292      	uxth	r2, r2
 80092d4:	4611      	mov	r1, r2
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092da:	e0e7      	b.n	80094ac <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80d9 	beq.w	80094b0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80092fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80d4 	beq.w	80094b0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800931c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800932a:	647b      	str	r3, [r7, #68]	@ 0x44
 800932c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009330:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e4      	bne.n	8009308 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	623b      	str	r3, [r7, #32]
   return(result);
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009366:	633a      	str	r2, [r7, #48]	@ 0x30
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800936c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e1      	bne.n	800933e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	60fb      	str	r3, [r7, #12]
   return(result);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0310 	bic.w	r3, r3, #16
 80093a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	69b9      	ldr	r1, [r7, #24]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	617b      	str	r3, [r7, #20]
   return(result);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e4      	bne.n	800938e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80093d0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80093d4:	4611      	mov	r1, r2
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093da:	e069      	b.n	80094b0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d010      	beq.n	800940a <HAL_UART_IRQHandler+0x5b6>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80093fc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009408:	e055      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800940e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d014      	beq.n	8009440 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800941a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009432:	2b00      	cmp	r3, #0
 8009434:	d03e      	beq.n	80094b4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
    }
    return;
 800943e:	e039      	b.n	80094b4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_UART_IRQHandler+0x60c>
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f8ba 	bl	800a5d2 <UART_EndTransmit_IT>
    return;
 800945e:	e02a      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <HAL_UART_IRQHandler+0x630>
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009470:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009482:	e018      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d012      	beq.n	80094b6 <HAL_UART_IRQHandler+0x662>
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0e      	bge.n	80094b6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094a2:	e008      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
      return;
 80094a4:	bf00      	nop
 80094a6:	e006      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
    return;
 80094a8:	bf00      	nop
 80094aa:	e004      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
      return;
 80094ac:	bf00      	nop
 80094ae:	e002      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
      return;
 80094b0:	bf00      	nop
 80094b2:	e000      	b.n	80094b6 <HAL_UART_IRQHandler+0x662>
    return;
 80094b4:	bf00      	nop
  }
}
 80094b6:	37e8      	adds	r7, #232	@ 0xe8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a09      	ldr	r2, [pc, #36]	@ (80095a8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d009      	beq.n	800959c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	615a      	str	r2, [r3, #20]
  }
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	40008000 	.word	0x40008000

080095ac <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a18      	ldr	r2, [pc, #96]	@ (800961c <HAL_UART_EnableReceiverTimeout+0x70>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d027      	beq.n	800960e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d120      	bne.n	800960a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UART_EnableReceiverTimeout+0x2a>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e01c      	b.n	8009610 <HAL_UART_EnableReceiverTimeout+0x64>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2224      	movs	r2, #36	@ 0x24
 80095e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80095f4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	e002      	b.n	8009610 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800960a:	2302      	movs	r3, #2
 800960c:	e000      	b.n	8009610 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
  }
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40008000 	.word	0x40008000

08009620 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <UART_InitCallbacksToDefault+0x74>)
 8009648:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a19      	ldr	r2, [pc, #100]	@ (80096b4 <UART_InitCallbacksToDefault+0x78>)
 8009650:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <UART_InitCallbacksToDefault+0x7c>)
 8009658:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a17      	ldr	r2, [pc, #92]	@ (80096bc <UART_InitCallbacksToDefault+0x80>)
 8009660:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a16      	ldr	r2, [pc, #88]	@ (80096c0 <UART_InitCallbacksToDefault+0x84>)
 8009668:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a15      	ldr	r2, [pc, #84]	@ (80096c4 <UART_InitCallbacksToDefault+0x88>)
 8009670:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a14      	ldr	r2, [pc, #80]	@ (80096c8 <UART_InitCallbacksToDefault+0x8c>)
 8009678:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a13      	ldr	r2, [pc, #76]	@ (80096cc <UART_InitCallbacksToDefault+0x90>)
 8009680:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a12      	ldr	r2, [pc, #72]	@ (80096d0 <UART_InitCallbacksToDefault+0x94>)
 8009688:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a11      	ldr	r2, [pc, #68]	@ (80096d4 <UART_InitCallbacksToDefault+0x98>)
 8009690:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a10      	ldr	r2, [pc, #64]	@ (80096d8 <UART_InitCallbacksToDefault+0x9c>)
 8009698:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a0f      	ldr	r2, [pc, #60]	@ (80096dc <UART_InitCallbacksToDefault+0xa0>)
 80096a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	080094d1 	.word	0x080094d1
 80096b4:	080094bd 	.word	0x080094bd
 80096b8:	080094f9 	.word	0x080094f9
 80096bc:	080094e5 	.word	0x080094e5
 80096c0:	0800950d 	.word	0x0800950d
 80096c4:	08009521 	.word	0x08009521
 80096c8:	08009535 	.word	0x08009535
 80096cc:	08009549 	.word	0x08009549
 80096d0:	0800a62d 	.word	0x0800a62d
 80096d4:	0800a641 	.word	0x0800a641
 80096d8:	0800a655 	.word	0x0800a655
 80096dc:	0800955d 	.word	0x0800955d

080096e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e4:	b08c      	sub	sp, #48	@ 0x30
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	431a      	orrs	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	4313      	orrs	r3, r2
 8009706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4baa      	ldr	r3, [pc, #680]	@ (80099b8 <UART_SetConfig+0x2d8>)
 8009710:	4013      	ands	r3, r2
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009718:	430b      	orrs	r3, r1
 800971a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a9f      	ldr	r2, [pc, #636]	@ (80099bc <UART_SetConfig+0x2dc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009748:	4313      	orrs	r3, r2
 800974a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009756:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009760:	430b      	orrs	r3, r1
 8009762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	f023 010f 	bic.w	r1, r3, #15
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a90      	ldr	r2, [pc, #576]	@ (80099c0 <UART_SetConfig+0x2e0>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d125      	bne.n	80097d0 <UART_SetConfig+0xf0>
 8009784:	4b8f      	ldr	r3, [pc, #572]	@ (80099c4 <UART_SetConfig+0x2e4>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	2b03      	cmp	r3, #3
 8009790:	d81a      	bhi.n	80097c8 <UART_SetConfig+0xe8>
 8009792:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <UART_SetConfig+0xb8>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ae:	e116      	b.n	80099de <UART_SetConfig+0x2fe>
 80097b0:	2302      	movs	r3, #2
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b6:	e112      	b.n	80099de <UART_SetConfig+0x2fe>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097be:	e10e      	b.n	80099de <UART_SetConfig+0x2fe>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c6:	e10a      	b.n	80099de <UART_SetConfig+0x2fe>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ce:	e106      	b.n	80099de <UART_SetConfig+0x2fe>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a7c      	ldr	r2, [pc, #496]	@ (80099c8 <UART_SetConfig+0x2e8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d138      	bne.n	800984c <UART_SetConfig+0x16c>
 80097da:	4b7a      	ldr	r3, [pc, #488]	@ (80099c4 <UART_SetConfig+0x2e4>)
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e0:	f003 030c 	and.w	r3, r3, #12
 80097e4:	2b0c      	cmp	r3, #12
 80097e6:	d82d      	bhi.n	8009844 <UART_SetConfig+0x164>
 80097e8:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x110>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009825 	.word	0x08009825
 80097f4:	08009845 	.word	0x08009845
 80097f8:	08009845 	.word	0x08009845
 80097fc:	08009845 	.word	0x08009845
 8009800:	08009835 	.word	0x08009835
 8009804:	08009845 	.word	0x08009845
 8009808:	08009845 	.word	0x08009845
 800980c:	08009845 	.word	0x08009845
 8009810:	0800982d 	.word	0x0800982d
 8009814:	08009845 	.word	0x08009845
 8009818:	08009845 	.word	0x08009845
 800981c:	08009845 	.word	0x08009845
 8009820:	0800983d 	.word	0x0800983d
 8009824:	2300      	movs	r3, #0
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982a:	e0d8      	b.n	80099de <UART_SetConfig+0x2fe>
 800982c:	2302      	movs	r3, #2
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009832:	e0d4      	b.n	80099de <UART_SetConfig+0x2fe>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983a:	e0d0      	b.n	80099de <UART_SetConfig+0x2fe>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009842:	e0cc      	b.n	80099de <UART_SetConfig+0x2fe>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984a:	e0c8      	b.n	80099de <UART_SetConfig+0x2fe>
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5e      	ldr	r2, [pc, #376]	@ (80099cc <UART_SetConfig+0x2ec>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d125      	bne.n	80098a2 <UART_SetConfig+0x1c2>
 8009856:	4b5b      	ldr	r3, [pc, #364]	@ (80099c4 <UART_SetConfig+0x2e4>)
 8009858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009860:	2b30      	cmp	r3, #48	@ 0x30
 8009862:	d016      	beq.n	8009892 <UART_SetConfig+0x1b2>
 8009864:	2b30      	cmp	r3, #48	@ 0x30
 8009866:	d818      	bhi.n	800989a <UART_SetConfig+0x1ba>
 8009868:	2b20      	cmp	r3, #32
 800986a:	d00a      	beq.n	8009882 <UART_SetConfig+0x1a2>
 800986c:	2b20      	cmp	r3, #32
 800986e:	d814      	bhi.n	800989a <UART_SetConfig+0x1ba>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <UART_SetConfig+0x19a>
 8009874:	2b10      	cmp	r3, #16
 8009876:	d008      	beq.n	800988a <UART_SetConfig+0x1aa>
 8009878:	e00f      	b.n	800989a <UART_SetConfig+0x1ba>
 800987a:	2300      	movs	r3, #0
 800987c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009880:	e0ad      	b.n	80099de <UART_SetConfig+0x2fe>
 8009882:	2302      	movs	r3, #2
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009888:	e0a9      	b.n	80099de <UART_SetConfig+0x2fe>
 800988a:	2304      	movs	r3, #4
 800988c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009890:	e0a5      	b.n	80099de <UART_SetConfig+0x2fe>
 8009892:	2308      	movs	r3, #8
 8009894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009898:	e0a1      	b.n	80099de <UART_SetConfig+0x2fe>
 800989a:	2310      	movs	r3, #16
 800989c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098a0:	e09d      	b.n	80099de <UART_SetConfig+0x2fe>
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a4a      	ldr	r2, [pc, #296]	@ (80099d0 <UART_SetConfig+0x2f0>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d125      	bne.n	80098f8 <UART_SetConfig+0x218>
 80098ac:	4b45      	ldr	r3, [pc, #276]	@ (80099c4 <UART_SetConfig+0x2e4>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80098b8:	d016      	beq.n	80098e8 <UART_SetConfig+0x208>
 80098ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80098bc:	d818      	bhi.n	80098f0 <UART_SetConfig+0x210>
 80098be:	2b80      	cmp	r3, #128	@ 0x80
 80098c0:	d00a      	beq.n	80098d8 <UART_SetConfig+0x1f8>
 80098c2:	2b80      	cmp	r3, #128	@ 0x80
 80098c4:	d814      	bhi.n	80098f0 <UART_SetConfig+0x210>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <UART_SetConfig+0x1f0>
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d008      	beq.n	80098e0 <UART_SetConfig+0x200>
 80098ce:	e00f      	b.n	80098f0 <UART_SetConfig+0x210>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d6:	e082      	b.n	80099de <UART_SetConfig+0x2fe>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098de:	e07e      	b.n	80099de <UART_SetConfig+0x2fe>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e6:	e07a      	b.n	80099de <UART_SetConfig+0x2fe>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e076      	b.n	80099de <UART_SetConfig+0x2fe>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f6:	e072      	b.n	80099de <UART_SetConfig+0x2fe>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a35      	ldr	r2, [pc, #212]	@ (80099d4 <UART_SetConfig+0x2f4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d12a      	bne.n	8009958 <UART_SetConfig+0x278>
 8009902:	4b30      	ldr	r3, [pc, #192]	@ (80099c4 <UART_SetConfig+0x2e4>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800990c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009910:	d01a      	beq.n	8009948 <UART_SetConfig+0x268>
 8009912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009916:	d81b      	bhi.n	8009950 <UART_SetConfig+0x270>
 8009918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800991c:	d00c      	beq.n	8009938 <UART_SetConfig+0x258>
 800991e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009922:	d815      	bhi.n	8009950 <UART_SetConfig+0x270>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <UART_SetConfig+0x250>
 8009928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800992c:	d008      	beq.n	8009940 <UART_SetConfig+0x260>
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x270>
 8009930:	2300      	movs	r3, #0
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009936:	e052      	b.n	80099de <UART_SetConfig+0x2fe>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993e:	e04e      	b.n	80099de <UART_SetConfig+0x2fe>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009946:	e04a      	b.n	80099de <UART_SetConfig+0x2fe>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994e:	e046      	b.n	80099de <UART_SetConfig+0x2fe>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009956:	e042      	b.n	80099de <UART_SetConfig+0x2fe>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a17      	ldr	r2, [pc, #92]	@ (80099bc <UART_SetConfig+0x2dc>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d13a      	bne.n	80099d8 <UART_SetConfig+0x2f8>
 8009962:	4b18      	ldr	r3, [pc, #96]	@ (80099c4 <UART_SetConfig+0x2e4>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800996c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009970:	d01a      	beq.n	80099a8 <UART_SetConfig+0x2c8>
 8009972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009976:	d81b      	bhi.n	80099b0 <UART_SetConfig+0x2d0>
 8009978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800997c:	d00c      	beq.n	8009998 <UART_SetConfig+0x2b8>
 800997e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009982:	d815      	bhi.n	80099b0 <UART_SetConfig+0x2d0>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <UART_SetConfig+0x2b0>
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998c:	d008      	beq.n	80099a0 <UART_SetConfig+0x2c0>
 800998e:	e00f      	b.n	80099b0 <UART_SetConfig+0x2d0>
 8009990:	2300      	movs	r3, #0
 8009992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009996:	e022      	b.n	80099de <UART_SetConfig+0x2fe>
 8009998:	2302      	movs	r3, #2
 800999a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999e:	e01e      	b.n	80099de <UART_SetConfig+0x2fe>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a6:	e01a      	b.n	80099de <UART_SetConfig+0x2fe>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ae:	e016      	b.n	80099de <UART_SetConfig+0x2fe>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b6:	e012      	b.n	80099de <UART_SetConfig+0x2fe>
 80099b8:	cfff69f3 	.word	0xcfff69f3
 80099bc:	40008000 	.word	0x40008000
 80099c0:	40013800 	.word	0x40013800
 80099c4:	40021000 	.word	0x40021000
 80099c8:	40004400 	.word	0x40004400
 80099cc:	40004800 	.word	0x40004800
 80099d0:	40004c00 	.word	0x40004c00
 80099d4:	40005000 	.word	0x40005000
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4aae      	ldr	r2, [pc, #696]	@ (8009c9c <UART_SetConfig+0x5bc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	f040 8097 	bne.w	8009b18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d823      	bhi.n	8009a3a <UART_SetConfig+0x35a>
 80099f2:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <UART_SetConfig+0x318>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a3b 	.word	0x08009a3b
 8009a00:	08009a25 	.word	0x08009a25
 8009a04:	08009a3b 	.word	0x08009a3b
 8009a08:	08009a2b 	.word	0x08009a2b
 8009a0c:	08009a3b 	.word	0x08009a3b
 8009a10:	08009a3b 	.word	0x08009a3b
 8009a14:	08009a3b 	.word	0x08009a3b
 8009a18:	08009a33 	.word	0x08009a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a1c:	f7fb ffa0 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 8009a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a22:	e010      	b.n	8009a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a24:	4b9e      	ldr	r3, [pc, #632]	@ (8009ca0 <UART_SetConfig+0x5c0>)
 8009a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a28:	e00d      	b.n	8009a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a2a:	f7fb ff2b 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8009a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a30:	e009      	b.n	8009a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a38:	e005      	b.n	8009a46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8130 	beq.w	8009cae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a52:	4a94      	ldr	r2, [pc, #592]	@ (8009ca4 <UART_SetConfig+0x5c4>)
 8009a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	4413      	add	r3, r2
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d305      	bcc.n	8009a7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d903      	bls.n	8009a86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a84:	e113      	b.n	8009cae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	2200      	movs	r2, #0
 8009a8a:	60bb      	str	r3, [r7, #8]
 8009a8c:	60fa      	str	r2, [r7, #12]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	4a84      	ldr	r2, [pc, #528]	@ (8009ca4 <UART_SetConfig+0x5c4>)
 8009a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	603b      	str	r3, [r7, #0]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009aa8:	f7f7 f92a 	bl	8000d00 <__aeabi_uldivmod>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	f04f 0300 	mov.w	r3, #0
 8009abc:	020b      	lsls	r3, r1, #8
 8009abe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ac2:	0202      	lsls	r2, r0, #8
 8009ac4:	6979      	ldr	r1, [r7, #20]
 8009ac6:	6849      	ldr	r1, [r1, #4]
 8009ac8:	0849      	lsrs	r1, r1, #1
 8009aca:	2000      	movs	r0, #0
 8009acc:	460c      	mov	r4, r1
 8009ace:	4605      	mov	r5, r0
 8009ad0:	eb12 0804 	adds.w	r8, r2, r4
 8009ad4:	eb43 0905 	adc.w	r9, r3, r5
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	469a      	mov	sl, r3
 8009ae0:	4693      	mov	fp, r2
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f7 f909 	bl	8000d00 <__aeabi_uldivmod>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4613      	mov	r3, r2
 8009af4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afc:	d308      	bcc.n	8009b10 <UART_SetConfig+0x430>
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b04:	d204      	bcs.n	8009b10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a3a      	ldr	r2, [r7, #32]
 8009b0c:	60da      	str	r2, [r3, #12]
 8009b0e:	e0ce      	b.n	8009cae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b16:	e0ca      	b.n	8009cae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b20:	d166      	bne.n	8009bf0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009b22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d827      	bhi.n	8009b7a <UART_SetConfig+0x49a>
 8009b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b30 <UART_SetConfig+0x450>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	08009b7b 	.word	0x08009b7b
 8009b40:	08009b6b 	.word	0x08009b6b
 8009b44:	08009b7b 	.word	0x08009b7b
 8009b48:	08009b7b 	.word	0x08009b7b
 8009b4c:	08009b7b 	.word	0x08009b7b
 8009b50:	08009b73 	.word	0x08009b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b54:	f7fb ff04 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 8009b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b5a:	e014      	b.n	8009b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b5c:	f7fb ff16 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 8009b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b62:	e010      	b.n	8009b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b64:	4b4e      	ldr	r3, [pc, #312]	@ (8009ca0 <UART_SetConfig+0x5c0>)
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b68:	e00d      	b.n	8009b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6a:	f7fb fe8b 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8009b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b70:	e009      	b.n	8009b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b78:	e005      	b.n	8009b86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8090 	beq.w	8009cae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	4a44      	ldr	r2, [pc, #272]	@ (8009ca4 <UART_SetConfig+0x5c4>)
 8009b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba0:	005a      	lsls	r2, r3, #1
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	441a      	add	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d916      	bls.n	8009be8 <UART_SetConfig+0x508>
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bc0:	d212      	bcs.n	8009be8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	f023 030f 	bic.w	r3, r3, #15
 8009bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	085b      	lsrs	r3, r3, #1
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	8bfb      	ldrh	r3, [r7, #30]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	8bfa      	ldrh	r2, [r7, #30]
 8009be4:	60da      	str	r2, [r3, #12]
 8009be6:	e062      	b.n	8009cae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bee:	e05e      	b.n	8009cae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d828      	bhi.n	8009c4a <UART_SetConfig+0x56a>
 8009bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009c00 <UART_SetConfig+0x520>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c35 	.word	0x08009c35
 8009c0c:	08009c4b 	.word	0x08009c4b
 8009c10:	08009c3b 	.word	0x08009c3b
 8009c14:	08009c4b 	.word	0x08009c4b
 8009c18:	08009c4b 	.word	0x08009c4b
 8009c1c:	08009c4b 	.word	0x08009c4b
 8009c20:	08009c43 	.word	0x08009c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c24:	f7fb fe9c 	bl	8005960 <HAL_RCC_GetPCLK1Freq>
 8009c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c2a:	e014      	b.n	8009c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2c:	f7fb feae 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 8009c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c32:	e010      	b.n	8009c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c34:	4b1a      	ldr	r3, [pc, #104]	@ (8009ca0 <UART_SetConfig+0x5c0>)
 8009c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c38:	e00d      	b.n	8009c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c3a:	f7fb fe23 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8009c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c40:	e009      	b.n	8009c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c48:	e005      	b.n	8009c56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c54:	bf00      	nop
    }

    if (pclk != 0U)
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d028      	beq.n	8009cae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	4a10      	ldr	r2, [pc, #64]	@ (8009ca4 <UART_SetConfig+0x5c4>)
 8009c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c66:	461a      	mov	r2, r3
 8009c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	085b      	lsrs	r3, r3, #1
 8009c74:	441a      	add	r2, r3
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	2b0f      	cmp	r3, #15
 8009c84:	d910      	bls.n	8009ca8 <UART_SetConfig+0x5c8>
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c8c:	d20c      	bcs.n	8009ca8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60da      	str	r2, [r3, #12]
 8009c98:	e009      	b.n	8009cae <UART_SetConfig+0x5ce>
 8009c9a:	bf00      	nop
 8009c9c:	40008000 	.word	0x40008000
 8009ca0:	00f42400 	.word	0x00f42400
 8009ca4:	0800a9a0 	.word	0x0800a9a0
      }
      else
      {
        ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009cca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3730      	adds	r7, #48	@ 0x30
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00a      	beq.n	8009d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00a      	beq.n	8009d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01a      	beq.n	8009dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd6:	d10a      	bne.n	8009dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	605a      	str	r2, [r3, #4]
  }
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b098      	sub	sp, #96	@ 0x60
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e2c:	f7fa f9ee 	bl	800420c <HAL_GetTick>
 8009e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d12f      	bne.n	8009ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f88e 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d022      	beq.n	8009ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e6      	bne.n	8009e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e063      	b.n	8009f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d149      	bne.n	8009f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f857 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d03c      	beq.n	8009f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e6      	bne.n	8009ec8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f023 0301 	bic.w	r3, r3, #1
 8009f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f1a:	61fa      	str	r2, [r7, #28]
 8009f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	69b9      	ldr	r1, [r7, #24]
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	617b      	str	r3, [r7, #20]
   return(result);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e5      	bne.n	8009efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e012      	b.n	8009f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3758      	adds	r7, #88	@ 0x58
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f80:	e04f      	b.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d04b      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f8a:	f7fa f93f 	bl	800420c <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d302      	bcc.n	8009fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e04e      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d037      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b80      	cmp	r3, #128	@ 0x80
 8009fb6:	d034      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b40      	cmp	r3, #64	@ 0x40
 8009fbc:	d031      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d110      	bne.n	8009fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f920 	bl	800a21a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e029      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ffc:	d111      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f906 	bl	800a21a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e00f      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4013      	ands	r3, r2
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	bf0c      	ite	eq
 800a032:	2301      	moveq	r3, #1
 800a034:	2300      	movne	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d0a0      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b096      	sub	sp, #88	@ 0x58
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	88fa      	ldrh	r2, [r7, #6]
 800a064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2222      	movs	r2, #34	@ 0x22
 800a074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02d      	beq.n	800a0de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a088:	4a40      	ldr	r2, [pc, #256]	@ (800a18c <UART_Start_Receive_DMA+0x140>)
 800a08a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a092:	4a3f      	ldr	r2, [pc, #252]	@ (800a190 <UART_Start_Receive_DMA+0x144>)
 800a094:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09c:	4a3d      	ldr	r2, [pc, #244]	@ (800a194 <UART_Start_Receive_DMA+0x148>)
 800a09e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3324      	adds	r3, #36	@ 0x24
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0bc:	461a      	mov	r2, r3
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	f7fa fa8a 	bl	80045d8 <HAL_DMA_Start_IT>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2210      	movs	r2, #16
 800a0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e051      	b.n	800a182 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d018      	beq.n	800a118 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a104:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a106:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a10a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e6      	bne.n	800a0e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3308      	adds	r3, #8
 800a11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	f043 0301 	orr.w	r3, r3, #1
 800a12e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3308      	adds	r3, #8
 800a136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a138:	637a      	str	r2, [r7, #52]	@ 0x34
 800a13a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a13e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e5      	bne.n	800a118 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	613b      	str	r3, [r7, #16]
   return(result);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3308      	adds	r3, #8
 800a16a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a16c:	623a      	str	r2, [r7, #32]
 800a16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	6a3a      	ldr	r2, [r7, #32]
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	61bb      	str	r3, [r7, #24]
   return(result);
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e5      	bne.n	800a14c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3758      	adds	r7, #88	@ 0x58
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	0800a3a5 	.word	0x0800a3a5
 800a190:	0800a4d9 	.word	0x0800a4d9
 800a194:	0800a51f 	.word	0x0800a51f

0800a198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b08f      	sub	sp, #60	@ 0x3c
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e6      	bne.n	800a1a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a1e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1f2:	61ba      	str	r2, [r7, #24]
 800a1f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6979      	ldr	r1, [r7, #20]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e5      	bne.n	800a1d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a20e:	bf00      	nop
 800a210:	373c      	adds	r7, #60	@ 0x3c
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b095      	sub	sp, #84	@ 0x54
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a240:	643b      	str	r3, [r7, #64]	@ 0x40
 800a242:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e6      	bne.n	800a222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3308      	adds	r3, #8
 800a25a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	61fb      	str	r3, [r7, #28]
   return(result);
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3308      	adds	r3, #8
 800a276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a278:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a27a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a27e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e3      	bne.n	800a254 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d118      	bne.n	800a2c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f023 0310 	bic.w	r3, r3, #16
 800a2a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b2:	61bb      	str	r3, [r7, #24]
 800a2b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6979      	ldr	r1, [r7, #20]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2da:	bf00      	nop
 800a2dc:	3754      	adds	r7, #84	@ 0x54
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b090      	sub	sp, #64	@ 0x40
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d137      	bne.n	800a372 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	2200      	movs	r2, #0
 800a306:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3308      	adds	r3, #8
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	623b      	str	r3, [r7, #32]
   return(result);
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a320:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3308      	adds	r3, #8
 800a328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a32a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e5      	bne.n	800a30a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
 800a354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	61fb      	str	r3, [r7, #28]
 800a35e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	69b9      	ldr	r1, [r7, #24]
 800a362:	69fa      	ldr	r2, [r7, #28]
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	617b      	str	r3, [r7, #20]
   return(result);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e6      	bne.n	800a33e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a370:	e004      	b.n	800a37c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a374:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a378:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a37a:	4798      	blx	r3
}
 800a37c:	bf00      	nop
 800a37e:	3740      	adds	r7, #64	@ 0x40
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a390:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b09c      	sub	sp, #112	@ 0x70
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d171      	bne.n	800a4a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e6      	bne.n	800a3c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3308      	adds	r3, #8
 800a400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40c:	f023 0301 	bic.w	r3, r3, #1
 800a410:	667b      	str	r3, [r7, #100]	@ 0x64
 800a412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3308      	adds	r3, #8
 800a418:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a41a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a41c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e5      	bne.n	800a3fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a42e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3308      	adds	r3, #8
 800a434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	623b      	str	r3, [r7, #32]
   return(result);
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a444:	663b      	str	r3, [r7, #96]	@ 0x60
 800a446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a44e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1e5      	bne.n	800a42e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d118      	bne.n	800a4a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	e853 3f00 	ldrex	r3, [r3]
 800a47e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 0310 	bic.w	r3, r3, #16
 800a486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	461a      	mov	r2, r3
 800a48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	69b9      	ldr	r1, [r7, #24]
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	e841 2300 	strex	r3, r2, [r1]
 800a49c:	617b      	str	r3, [r7, #20]
   return(result);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e6      	bne.n	800a472 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d109      	bne.n	800a4c6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a4b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a4be:	4611      	mov	r1, r2
 800a4c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4c2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4c4:	e004      	b.n	800a4d0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a4c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4ce:	4798      	blx	r3
}
 800a4d0:	bf00      	nop
 800a4d2:	3770      	adds	r7, #112	@ 0x70
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d10b      	bne.n	800a50c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a500:	0852      	lsrs	r2, r2, #1
 800a502:	b292      	uxth	r2, r2
 800a504:	4611      	mov	r1, r2
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a50a:	e004      	b.n	800a516 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	4798      	blx	r3
}
 800a516:	bf00      	nop
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a532:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a546:	2b80      	cmp	r3, #128	@ 0x80
 800a548:	d109      	bne.n	800a55e <UART_DMAError+0x40>
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	2b21      	cmp	r3, #33	@ 0x21
 800a54e:	d106      	bne.n	800a55e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2200      	movs	r2, #0
 800a554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a558:	6978      	ldr	r0, [r7, #20]
 800a55a:	f7ff fe1d 	bl	800a198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a568:	2b40      	cmp	r3, #64	@ 0x40
 800a56a:	d109      	bne.n	800a580 <UART_DMAError+0x62>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b22      	cmp	r3, #34	@ 0x22
 800a570:	d106      	bne.n	800a580 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2200      	movs	r2, #0
 800a576:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff fe4d 	bl	800a21a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a586:	f043 0210 	orr.w	r2, r3, #16
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a596:	6978      	ldr	r0, [r7, #20]
 800a598:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b088      	sub	sp, #32
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	e853 3f00 	ldrex	r3, [r3]
 800a5e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	61bb      	str	r3, [r7, #24]
 800a5fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fc:	6979      	ldr	r1, [r7, #20]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	e841 2300 	strex	r3, r2, [r1]
 800a604:	613b      	str	r3, [r7, #16]
   return(result);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1e6      	bne.n	800a5da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2220      	movs	r2, #32
 800a610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a624:	bf00      	nop
 800a626:	3720      	adds	r7, #32
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_UARTEx_DisableFifoMode+0x16>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e027      	b.n	800a6ce <HAL_UARTEx_DisableFifoMode+0x66>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2224      	movs	r2, #36	@ 0x24
 800a68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0201 	bic.w	r2, r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e02d      	b.n	800a74e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2224      	movs	r2, #36	@ 0x24
 800a6fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0201 	bic.w	r2, r2, #1
 800a718:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f850 	bl	800a7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e02d      	b.n	800a7ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2224      	movs	r2, #36	@ 0x24
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0201 	bic.w	r2, r2, #1
 800a794:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f812 	bl	800a7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d108      	bne.n	800a7f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7f4:	e031      	b.n	800a85a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7fa:	2308      	movs	r3, #8
 800a7fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	0e5b      	lsrs	r3, r3, #25
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	0f5b      	lsrs	r3, r3, #29
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	7b3a      	ldrb	r2, [r7, #12]
 800a822:	4911      	ldr	r1, [pc, #68]	@ (800a868 <UARTEx_SetNbDataToProcess+0x94>)
 800a824:	5c8a      	ldrb	r2, [r1, r2]
 800a826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a82a:	7b3a      	ldrb	r2, [r7, #12]
 800a82c:	490f      	ldr	r1, [pc, #60]	@ (800a86c <UARTEx_SetNbDataToProcess+0x98>)
 800a82e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a830:	fb93 f3f2 	sdiv	r3, r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	7b7a      	ldrb	r2, [r7, #13]
 800a840:	4909      	ldr	r1, [pc, #36]	@ (800a868 <UARTEx_SetNbDataToProcess+0x94>)
 800a842:	5c8a      	ldrb	r2, [r1, r2]
 800a844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a848:	7b7a      	ldrb	r2, [r7, #13]
 800a84a:	4908      	ldr	r1, [pc, #32]	@ (800a86c <UARTEx_SetNbDataToProcess+0x98>)
 800a84c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a84e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a852:	b29a      	uxth	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a85a:	bf00      	nop
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	0800a9b8 	.word	0x0800a9b8
 800a86c:	0800a9c0 	.word	0x0800a9c0

0800a870 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	ed93 7a06 	vldr	s14, [r3, #24]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	edd3 7a07 	vldr	s15, [r3, #28]
 800a886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	edd3 7a08 	vldr	s15, [r3, #32]
 800a890:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	edd3 7a06 	vldr	s15, [r3, #24]
 800a8a0:	eeb1 7a67 	vneg.f32	s14, s15
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	edd3 7a08 	vldr	s15, [r3, #32]
 800a8aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a8ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	330c      	adds	r3, #12
 800a8ca:	220c      	movs	r2, #12
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f804 	bl	800a8dc <memset>
  }

}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <memset>:
 800a8dc:	4402      	add	r2, r0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d100      	bne.n	800a8e6 <memset+0xa>
 800a8e4:	4770      	bx	lr
 800a8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ea:	e7f9      	b.n	800a8e0 <memset+0x4>

0800a8ec <__libc_init_array>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a924 <__libc_init_array+0x38>)
 800a8f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a928 <__libc_init_array+0x3c>)
 800a8f2:	1b64      	subs	r4, r4, r5
 800a8f4:	10a4      	asrs	r4, r4, #2
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	42a6      	cmp	r6, r4
 800a8fa:	d109      	bne.n	800a910 <__libc_init_array+0x24>
 800a8fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a92c <__libc_init_array+0x40>)
 800a8fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a930 <__libc_init_array+0x44>)
 800a900:	f000 f826 	bl	800a950 <_init>
 800a904:	1b64      	subs	r4, r4, r5
 800a906:	10a4      	asrs	r4, r4, #2
 800a908:	2600      	movs	r6, #0
 800a90a:	42a6      	cmp	r6, r4
 800a90c:	d105      	bne.n	800a91a <__libc_init_array+0x2e>
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
 800a910:	f855 3b04 	ldr.w	r3, [r5], #4
 800a914:	4798      	blx	r3
 800a916:	3601      	adds	r6, #1
 800a918:	e7ee      	b.n	800a8f8 <__libc_init_array+0xc>
 800a91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91e:	4798      	blx	r3
 800a920:	3601      	adds	r6, #1
 800a922:	e7f2      	b.n	800a90a <__libc_init_array+0x1e>
 800a924:	0800a9d0 	.word	0x0800a9d0
 800a928:	0800a9d0 	.word	0x0800a9d0
 800a92c:	0800a9d0 	.word	0x0800a9d0
 800a930:	0800a9d4 	.word	0x0800a9d4

0800a934 <memcpy>:
 800a934:	440a      	add	r2, r1
 800a936:	4291      	cmp	r1, r2
 800a938:	f100 33ff 	add.w	r3, r0, #4294967295
 800a93c:	d100      	bne.n	800a940 <memcpy+0xc>
 800a93e:	4770      	bx	lr
 800a940:	b510      	push	{r4, lr}
 800a942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94a:	4291      	cmp	r1, r2
 800a94c:	d1f9      	bne.n	800a942 <memcpy+0xe>
 800a94e:	bd10      	pop	{r4, pc}

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
