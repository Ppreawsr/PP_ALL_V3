
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a824  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a9fc  0800a9fc  0000b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa5c  0800aa5c  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa5c  0800aa5c  0000ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa64  0800aa64  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa64  0800aa64  0000ba64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa68  0800aa68  0000ba68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800aa6c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001144  20000218  0800ac84  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  0800ac84  0000c35c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017be5  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7d  00000000  00000000  00023e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00026cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea5  00000000  00000000  00027f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001711b  00000000  00000000  0004ff2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feaa9  00000000  00000000  00067049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  00165b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0016abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a9e4 	.word	0x0800a9e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800a9e4 	.word	0x0800a9e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_frsub>:
 8000ae4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae8:	e002      	b.n	8000af0 <__addsf3>
 8000aea:	bf00      	nop

08000aec <__aeabi_fsub>:
 8000aec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af0 <__addsf3>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	bf1f      	itttt	ne
 8000af4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af8:	ea92 0f03 	teqne	r2, r3
 8000afc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b04:	d06a      	beq.n	8000bdc <__addsf3+0xec>
 8000b06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b0e:	bfc1      	itttt	gt
 8000b10:	18d2      	addgt	r2, r2, r3
 8000b12:	4041      	eorgt	r1, r0
 8000b14:	4048      	eorgt	r0, r1
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	2b19      	cmp	r3, #25
 8000b1e:	bf88      	it	hi
 8000b20:	4770      	bxhi	lr
 8000b22:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4240      	negne	r0, r0
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4249      	negne	r1, r1
 8000b42:	ea92 0f03 	teq	r2, r3
 8000b46:	d03f      	beq.n	8000bc8 <__addsf3+0xd8>
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b50:	eb10 000c 	adds.w	r0, r0, ip
 8000b54:	f1c3 0320 	rsb	r3, r3, #32
 8000b58:	fa01 f103 	lsl.w	r1, r1, r3
 8000b5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__addsf3+0x78>
 8000b62:	4249      	negs	r1, r1
 8000b64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b68:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b6c:	d313      	bcc.n	8000b96 <__addsf3+0xa6>
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b72:	d306      	bcc.n	8000b82 <__addsf3+0x92>
 8000b74:	0840      	lsrs	r0, r0, #1
 8000b76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7a:	f102 0201 	add.w	r2, r2, #1
 8000b7e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b80:	d251      	bcs.n	8000c26 <__addsf3+0x136>
 8000b82:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	ea40 0003 	orr.w	r0, r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	0049      	lsls	r1, r1, #1
 8000b98:	eb40 0000 	adc.w	r0, r0, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba4:	d2ed      	bcs.n	8000b82 <__addsf3+0x92>
 8000ba6:	fab0 fc80 	clz	ip, r0
 8000baa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bae:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bb6:	bfaa      	itet	ge
 8000bb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bbc:	4252      	neglt	r2, r2
 8000bbe:	4318      	orrge	r0, r3
 8000bc0:	bfbc      	itt	lt
 8000bc2:	40d0      	lsrlt	r0, r2
 8000bc4:	4318      	orrlt	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	f092 0f00 	teq	r2, #0
 8000bcc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd0:	bf06      	itte	eq
 8000bd2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	3201      	addeq	r2, #1
 8000bd8:	3b01      	subne	r3, #1
 8000bda:	e7b5      	b.n	8000b48 <__addsf3+0x58>
 8000bdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be4:	bf18      	it	ne
 8000be6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bea:	d021      	beq.n	8000c30 <__addsf3+0x140>
 8000bec:	ea92 0f03 	teq	r2, r3
 8000bf0:	d004      	beq.n	8000bfc <__addsf3+0x10c>
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	4608      	moveq	r0, r1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea90 0f01 	teq	r0, r1
 8000c00:	bf1c      	itt	ne
 8000c02:	2000      	movne	r0, #0
 8000c04:	4770      	bxne	lr
 8000c06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0a:	d104      	bne.n	8000c16 <__addsf3+0x126>
 8000c0c:	0040      	lsls	r0, r0, #1
 8000c0e:	bf28      	it	cs
 8000c10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c14:	4770      	bx	lr
 8000c16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1a:	bf3c      	itt	cc
 8000c1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c20:	4770      	bxcc	lr
 8000c22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	4770      	bx	lr
 8000c30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c34:	bf16      	itet	ne
 8000c36:	4608      	movne	r0, r1
 8000c38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c3c:	4601      	movne	r1, r0
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	bf06      	itte	eq
 8000c42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c46:	ea90 0f01 	teqeq	r0, r1
 8000c4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_ui2f>:
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e004      	b.n	8000c60 <__aeabi_i2f+0x8>
 8000c56:	bf00      	nop

08000c58 <__aeabi_i2f>:
 8000c58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c5c:	bf48      	it	mi
 8000c5e:	4240      	negmi	r0, r0
 8000c60:	ea5f 0c00 	movs.w	ip, r0
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	e01c      	b.n	8000cae <__aeabi_l2f+0x2a>

08000c74 <__aeabi_ul2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e00a      	b.n	8000c98 <__aeabi_l2f+0x14>
 8000c82:	bf00      	nop

08000c84 <__aeabi_l2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__aeabi_l2f+0x14>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	ea5f 0c01 	movs.w	ip, r1
 8000c9c:	bf02      	ittt	eq
 8000c9e:	4684      	moveq	ip, r0
 8000ca0:	4601      	moveq	r1, r0
 8000ca2:	2000      	moveq	r0, #0
 8000ca4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca8:	bf08      	it	eq
 8000caa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb2:	fabc f28c 	clz	r2, ip
 8000cb6:	3a08      	subs	r2, #8
 8000cb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cbc:	db10      	blt.n	8000ce0 <__aeabi_l2f+0x5c>
 8000cbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	f020 0001 	biceq.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	f102 0220 	add.w	r2, r2, #32
 8000ce4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_uldivmod>:
 8000d00:	b953      	cbnz	r3, 8000d18 <__aeabi_uldivmod+0x18>
 8000d02:	b94a      	cbnz	r2, 8000d18 <__aeabi_uldivmod+0x18>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bf08      	it	eq
 8000d08:	2800      	cmpeq	r0, #0
 8000d0a:	bf1c      	itt	ne
 8000d0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295
 8000d14:	f000 b96a 	b.w	8000fec <__aeabi_idiv0>
 8000d18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d20:	f000 f806 	bl	8000d30 <__udivmoddi4>
 8000d24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <__udivmoddi4>:
 8000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d34:	9d08      	ldr	r5, [sp, #32]
 8000d36:	460c      	mov	r4, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14e      	bne.n	8000dda <__udivmoddi4+0xaa>
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	458c      	cmp	ip, r1
 8000d40:	4686      	mov	lr, r0
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	d962      	bls.n	8000e0e <__udivmoddi4+0xde>
 8000d48:	b14a      	cbz	r2, 8000d5e <__udivmoddi4+0x2e>
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	fa20 f303 	lsr.w	r3, r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d62:	fa1f f68c 	uxth.w	r6, ip
 8000d66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb04 f106 	mul.w	r1, r4, r6
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d90a      	bls.n	8000d94 <__udivmoddi4+0x64>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d86:	f080 8112 	bcs.w	8000fae <__udivmoddi4+0x27e>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 810f 	bls.w	8000fae <__udivmoddi4+0x27e>
 8000d90:	3c02      	subs	r4, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1a59      	subs	r1, r3, r1
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f606 	mul.w	r6, r0, r6
 8000daa:	429e      	cmp	r6, r3
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x94>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db6:	f080 80fc 	bcs.w	8000fb2 <__udivmoddi4+0x282>
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	f240 80f9 	bls.w	8000fb2 <__udivmoddi4+0x282>
 8000dc0:	4463      	add	r3, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	1b9b      	subs	r3, r3, r6
 8000dc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa6>
 8000dce:	40d3      	lsrs	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xba>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb4>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x150>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xcc>
 8000df6:	4290      	cmp	r0, r2
 8000df8:	f0c0 80f0 	bcc.w	8000fdc <__udivmoddi4+0x2ac>
 8000dfc:	1a86      	subs	r6, r0, r2
 8000dfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d0e6      	beq.n	8000dd6 <__udivmoddi4+0xa6>
 8000e08:	e9c5 6300 	strd	r6, r3, [r5]
 8000e0c:	e7e3      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x204>
 8000e14:	eba1 040c 	sub.w	r4, r1, ip
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e32:	fb07 f006 	mul.w	r0, r7, r6
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x11c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x11a>
 8000e44:	4298      	cmp	r0, r3
 8000e46:	f200 80cd 	bhi.w	8000fe4 <__udivmoddi4+0x2b4>
 8000e4a:	4626      	mov	r6, r4
 8000e4c:	1a1c      	subs	r4, r3, r0
 8000e4e:	fa1f f38e 	uxth.w	r3, lr
 8000e52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e56:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	429f      	cmp	r7, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x148>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x146>
 8000e70:	429f      	cmp	r7, r3
 8000e72:	f200 80b0 	bhi.w	8000fd6 <__udivmoddi4+0x2a6>
 8000e76:	4620      	mov	r0, r4
 8000e78:	1bdb      	subs	r3, r3, r7
 8000e7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x9c>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e90:	fa04 f301 	lsl.w	r3, r4, r1
 8000e94:	ea43 030c 	orr.w	r3, r3, ip
 8000e98:	40f4      	lsrs	r4, r6
 8000e9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000e9e:	0c38      	lsrs	r0, r7, #16
 8000ea0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea8:	fa1f fc87 	uxth.w	ip, r7
 8000eac:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb8:	45a1      	cmp	r9, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90a      	bls.n	8000ed6 <__udivmoddi4+0x1a6>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ec6:	f080 8084 	bcs.w	8000fd2 <__udivmoddi4+0x2a2>
 8000eca:	45a1      	cmp	r9, r4
 8000ecc:	f240 8081 	bls.w	8000fd2 <__udivmoddi4+0x2a2>
 8000ed0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	eba4 0409 	sub.w	r4, r4, r9
 8000eda:	fa1f f983 	uxth.w	r9, r3
 8000ede:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ee6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x1d2>
 8000ef2:	193c      	adds	r4, r7, r4
 8000ef4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef8:	d267      	bcs.n	8000fca <__udivmoddi4+0x29a>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d965      	bls.n	8000fca <__udivmoddi4+0x29a>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f06:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0a:	eba4 040c 	sub.w	r4, r4, ip
 8000f0e:	429c      	cmp	r4, r3
 8000f10:	46ce      	mov	lr, r9
 8000f12:	469c      	mov	ip, r3
 8000f14:	d351      	bcc.n	8000fba <__udivmoddi4+0x28a>
 8000f16:	d04e      	beq.n	8000fb6 <__udivmoddi4+0x286>
 8000f18:	b155      	cbz	r5, 8000f30 <__udivmoddi4+0x200>
 8000f1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000f1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	40cb      	lsrs	r3, r1
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	40cc      	lsrs	r4, r1
 8000f2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000f30:	2100      	movs	r1, #0
 8000f32:	e750      	b.n	8000dd6 <__udivmoddi4+0xa6>
 8000f34:	f1c2 0320 	rsb	r3, r2, #32
 8000f38:	fa20 f103 	lsr.w	r1, r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa24 f303 	lsr.w	r3, r4, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	430c      	orrs	r4, r1
 8000f48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f50:	fa1f f78c 	uxth.w	r7, ip
 8000f54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f58:	fb08 3110 	mls	r1, r8, r0, r3
 8000f5c:	0c23      	lsrs	r3, r4, #16
 8000f5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f62:	fb00 f107 	mul.w	r1, r0, r7
 8000f66:	4299      	cmp	r1, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x24c>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f72:	d22c      	bcs.n	8000fce <__udivmoddi4+0x29e>
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d92a      	bls.n	8000fce <__udivmoddi4+0x29e>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f84:	fb08 3311 	mls	r3, r8, r1, r3
 8000f88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f8c:	fb01 f307 	mul.w	r3, r1, r7
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x276>
 8000f94:	eb1c 0404 	adds.w	r4, ip, r4
 8000f98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f9c:	d213      	bcs.n	8000fc6 <__udivmoddi4+0x296>
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	d911      	bls.n	8000fc6 <__udivmoddi4+0x296>
 8000fa2:	3902      	subs	r1, #2
 8000fa4:	4464      	add	r4, ip
 8000fa6:	1ae4      	subs	r4, r4, r3
 8000fa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fac:	e739      	b.n	8000e22 <__udivmoddi4+0xf2>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	e6f0      	b.n	8000d94 <__udivmoddi4+0x64>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e706      	b.n	8000dc4 <__udivmoddi4+0x94>
 8000fb6:	45c8      	cmp	r8, r9
 8000fb8:	d2ae      	bcs.n	8000f18 <__udivmoddi4+0x1e8>
 8000fba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc2:	3801      	subs	r0, #1
 8000fc4:	e7a8      	b.n	8000f18 <__udivmoddi4+0x1e8>
 8000fc6:	4631      	mov	r1, r6
 8000fc8:	e7ed      	b.n	8000fa6 <__udivmoddi4+0x276>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	e799      	b.n	8000f02 <__udivmoddi4+0x1d2>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e7d4      	b.n	8000f7c <__udivmoddi4+0x24c>
 8000fd2:	46d6      	mov	lr, sl
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1a6>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e74d      	b.n	8000e78 <__udivmoddi4+0x148>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	4623      	mov	r3, r4
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e70f      	b.n	8000e04 <__udivmoddi4+0xd4>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	e730      	b.n	8000e4c <__udivmoddi4+0x11c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <modbus_1t5_Timeout+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000234 	.word	0x20000234

08001030 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <modbus_3t5_Timeout+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	755a      	strb	r2, [r3, #21]

}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000234 	.word	0x20000234

08001050 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f008 fb2b 	bl	80096b4 <HAL_UART_GetError>
 800105e:	4603      	mov	r3, r0
 8001060:	2b20      	cmp	r3, #32
 8001062:	d101      	bne.n	8001068 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001064:	f7ff ffc4 	bl	8000ff0 <modbus_1t5_Timeout>

	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800107a:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <Modbus_init+0xa0>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <Modbus_init+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <Modbus_init+0xa4>)
 800108e:	210e      	movs	r1, #14
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fb59 	bl	8007748 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2110      	movs	r1, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f008 fab3 	bl	8009608 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 faca 	bl	8009640 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <Modbus_init+0xa8>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fd91 	bl	8008bdc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <Modbus_init+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <Modbus_init+0xa0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <Modbus_init+0xa0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80010cc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010d0:	4413      	add	r3, r2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010d8:	4619      	mov	r1, r3
 80010da:	f007 feb9 	bl	8008e50 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <Modbus_init+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10c      	bne.n	8001108 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <Modbus_init+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f811 	bl	800611c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <Modbus_init+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fd5c 	bl	8006bc0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000234 	.word	0x20000234
 8001114:	08001031 	.word	0x08001031
 8001118:	08001051 	.word	0x08001051

0800111c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001128:	23ff      	movs	r3, #255	@ 0xff
 800112a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001130:	e013      	b.n	800115a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	4053      	eors	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <CRC16+0x64>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4053      	eors	r3, r2
 800114e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <CRC16+0x68>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	803a      	strh	r2, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e6      	bne.n	8001132 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29b      	uxth	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000100 	.word	0x20000100
 8001184:	20000000 	.word	0x20000000

08001188 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800118e:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7ddb      	ldrb	r3, [r3, #23]
 8001194:	3b01      	subs	r3, #1
 8001196:	2b03      	cmp	r3, #3
 8001198:	d80a      	bhi.n	80011b0 <Modbus_Protocal_Worker+0x28>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <Modbus_Protocal_Worker+0x18>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011bb 	.word	0x080011bb
 80011a4:	0800134f 	.word	0x0800134f
 80011a8:	08001247 	.word	0x08001247
 80011ac:	0800128b 	.word	0x0800128b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	75da      	strb	r2, [r3, #23]
		break;
 80011b8:	e0e1      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011ba:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80011ce:	f000 f9cd 	bl	800156c <Modbus_Emission>
 80011d2:	e018      	b.n	8001206 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80011d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80011de:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d00b      	beq.n	8001206 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2203      	movs	r2, #3
 8001204:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001206:	4b60      	ldr	r3, [pc, #384]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001210:	2b20      	cmp	r3, #32
 8001212:	f040 80ad 	bne.w	8001370 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b57      	ldr	r3, [pc, #348]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001232:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800123e:	4619      	mov	r1, r3
 8001240:	f007 fe06 	bl	8008e50 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001244:	e094      	b.n	8001370 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001246:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8091 	beq.w	8001374 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22fe      	movs	r2, #254	@ 0xfe
 8001258:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800125a:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001276:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001278:	1a8a      	subs	r2, r1, r2
 800127a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800127c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001288:	e074      	b.n	8001374 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001292:	f113 0f02 	cmn.w	r3, #2
 8001296:	d150      	bne.n	800133a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012b0:	3b02      	subs	r3, #2
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff ff31 	bl	800111c <CRC16>
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012be:	793a      	ldrb	r2, [r7, #4]
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012cc:	3b02      	subs	r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10c      	bne.n	80012f2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80012d8:	797a      	ldrb	r2, [r7, #5]
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012e6:	3b01      	subs	r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d004      	beq.n	80012fc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ff      	movs	r2, #255	@ 0xff
 80012f8:	759a      	strb	r2, [r3, #22]
				break;
 80012fa:	e040      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d113      	bne.n	8001336 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800131e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001328:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800132a:	461a      	mov	r2, r3
 800132c:	f009 fb4c 	bl	800a9c8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001330:	f000 f904 	bl	800153c <Modbus_frame_response>
 8001334:	e001      	b.n	800133a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001336:	bf00      	nop
					}
		break;


	}
}
 8001338:	e021      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7d5b      	ldrb	r3, [r3, #21]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	75da      	strb	r2, [r3, #23]
		break;
 800134c:	e014      	b.n	8001378 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001358:	2b20      	cmp	r3, #32
 800135a:	d10f      	bne.n	800137c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <Modbus_Protocal_Worker+0x200>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	75da      	strb	r2, [r3, #23]
		break;
 800136e:	e005      	b.n	800137c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001370:	bf00      	nop
 8001372:	e004      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001374:	bf00      	nop
 8001376:	e002      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001378:	bf00      	nop
 800137a:	e000      	b.n	800137e <Modbus_Protocal_Worker+0x1f6>
		break;
 800137c:	bf00      	nop
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000234 	.word	0x20000234

0800138c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <modbusWrite1Register+0x7c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	7e5b      	ldrb	r3, [r3, #25]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <modbusWrite1Register+0x7c>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	7e92      	ldrb	r2, [r2, #26]
 80013a2:	4413      	add	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d903      	bls.n	80013ba <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 f8a0 	bl	80014f8 <ModbusErrorReply>
			 return;
 80013b8:	e023      	b.n	8001402 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	440b      	add	r3, r1
 80013ca:	7ed2      	ldrb	r2, [r2, #27]
 80013cc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	440b      	add	r3, r1
 80013de:	7f12      	ldrb	r2, [r2, #28]
 80013e0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80013f0:	2208      	movs	r2, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	f009 fae8 	bl	800a9c8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <modbusWrite1Register+0x7c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000234 	.word	0x20000234

0800140c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001412:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	7edb      	ldrb	r3, [r3, #27]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	4a35      	ldr	r2, [pc, #212]	@ (80014f4 <modbusRead1Register+0xe8>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	7f12      	ldrb	r2, [r2, #28]
 8001422:	4413      	add	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	4a30      	ldr	r2, [pc, #192]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	7e92      	ldrb	r2, [r2, #26]
 8001436:	4413      	add	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <modbusRead1Register+0x3a>
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b7d      	cmp	r3, #125	@ 0x7d
 8001444:	d903      	bls.n	800144e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001446:	2003      	movs	r0, #3
 8001448:	f000 f856 	bl	80014f8 <ModbusErrorReply>
		 return;
 800144c:	e04e      	b.n	80014ec <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	429a      	cmp	r2, r3
 8001458:	d808      	bhi.n	800146c <modbusRead1Register+0x60>
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	d903      	bls.n	8001474 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800146c:	2002      	movs	r0, #2
 800146e:	f000 f843 	bl	80014f8 <ModbusErrorReply>
		 return;
 8001472:	e03b      	b.n	80014ec <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800148e:	2400      	movs	r4, #0
 8001490:	e020      	b.n	80014d4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <modbusRead1Register+0xe8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	4423      	add	r3, r4
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	18d1      	adds	r1, r2, r3
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	1c63      	adds	r3, r4, #1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	7849      	ldrb	r1, [r1, #1]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	4423      	add	r3, r4
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18d1      	adds	r1, r2, r3
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	0063      	lsls	r3, r4, #1
 80014c6:	3303      	adds	r3, #3
 80014c8:	7809      	ldrb	r1, [r1, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	460a      	mov	r2, r1
 80014ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80014d2:	3401      	adds	r4, #1
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	429c      	cmp	r4, r3
 80014d8:	dbdb      	blt.n	8001492 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <modbusRead1Register+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000234 	.word	0x20000234

080014f8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ModbusErrorReply+0x40>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	7e1a      	ldrb	r2, [r3, #24]
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <ModbusErrorReply+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <ModbusErrorReply+0x40>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <ModbusErrorReply+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000234 	.word	0x20000234

0800153c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <Modbus_frame_response+0x2c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d004      	beq.n	8001554 <Modbus_frame_response+0x18>
 800154a:	2b06      	cmp	r3, #6
 800154c:	d105      	bne.n	800155a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800154e:	f7ff ff1d 	bl	800138c <modbusWrite1Register>
		break;
 8001552:	e006      	b.n	8001562 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001554:	f7ff ff5a 	bl	800140c <modbusRead1Register>
		break;
 8001558:	e003      	b.n	8001562 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ffcc 	bl	80014f8 <ModbusErrorReply>
		break;
 8001560:	bf00      	nop

	}
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000234 	.word	0x20000234

0800156c <Modbus_Emission>:

void Modbus_Emission()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <Modbus_Emission+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157c:	2b20      	cmp	r3, #32
 800157e:	d15d      	bne.n	800163c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <Modbus_Emission+0xe8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <Modbus_Emission+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <Modbus_Emission+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001596:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001598:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <Modbus_Emission+0xe8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <Modbus_Emission+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80015a8:	461a      	mov	r2, r3
 80015aa:	f009 fa0d 	bl	800a9c8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <Modbus_Emission+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3203      	adds	r2, #3
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <Modbus_Emission+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <Modbus_Emission+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80015d4:	3b02      	subs	r3, #2
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff fd9f 	bl	800111c <CRC16>
 80015de:	4603      	mov	r3, r0
 80015e0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <Modbus_Emission+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015ee:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80015f0:	7939      	ldrb	r1, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	460a      	mov	r2, r1
 80015f6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <Modbus_Emission+0xe8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <Modbus_Emission+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001606:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001608:	7979      	ldrb	r1, [r7, #5]
 800160a:	4413      	add	r3, r2
 800160c:	460a      	mov	r2, r1
 800160e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <Modbus_Emission+0xe8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161c:	2b20      	cmp	r3, #32
 800161e:	d10d      	bne.n	800163c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <Modbus_Emission+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <Modbus_Emission+0xe8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <Modbus_Emission+0xe8>)
 8001630:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001632:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001636:	461a      	mov	r2, r3
 8001638:	f007 fb8a 	bl	8008d50 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <Modbus_Emission+0xe8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <Modbus_Emission+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	755a      	strb	r2, [r3, #21]

}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000234 	.word	0x20000234

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f002 fdb9 	bl	80041d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 fd06 	bl	8002074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f001 f8d0 	bl	800280c <MX_GPIO_Init>
  MX_DMA_Init();
 800166c:	f001 f880 	bl	8002770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001670:	f000 ffe4 	bl	800263c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001674:	f001 f82e 	bl	80026d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001678:	f000 fd48 	bl	800210c <MX_TIM1_Init>
  MX_TIM2_Init();
 800167c:	f000 fe1a 	bl	80022b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001680:	f000 fe6c 	bl	800235c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001684:	f000 ff2e 	bl	80024e4 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001688:	f000 ffb2 	bl	80025f0 <MX_TIM16_Init>
  MX_TIM4_Init();
 800168c:	f000 fedc 	bl	8002448 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001690:	f000 ff78 	bl	8002584 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 6.1;
 8001694:	4ba4      	ldr	r3, [pc, #656]	@ (8001928 <main+0x2d0>)
 8001696:	4aa5      	ldr	r2, [pc, #660]	@ (800192c <main+0x2d4>)
 8001698:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 800169a:	4ba3      	ldr	r3, [pc, #652]	@ (8001928 <main+0x2d0>)
 800169c:	4aa4      	ldr	r2, [pc, #656]	@ (8001930 <main+0x2d8>)
 800169e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 80016a0:	4ba1      	ldr	r3, [pc, #644]	@ (8001928 <main+0x2d0>)
 80016a2:	4aa4      	ldr	r2, [pc, #656]	@ (8001934 <main+0x2dc>)
 80016a4:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	489f      	ldr	r0, [pc, #636]	@ (8001928 <main+0x2d0>)
 80016aa:	f009 f92b 	bl	800a904 <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	49a1      	ldr	r1, [pc, #644]	@ (8001938 <main+0x2e0>)
 80016b2:	48a2      	ldr	r0, [pc, #648]	@ (800193c <main+0x2e4>)
 80016b4:	f007 fbcc 	bl	8008e50 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80016b8:	48a1      	ldr	r0, [pc, #644]	@ (8001940 <main+0x2e8>)
 80016ba:	f004 fd2f 	bl	800611c <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80016be:	4ba1      	ldr	r3, [pc, #644]	@ (8001944 <main+0x2ec>)
 80016c0:	4aa1      	ldr	r2, [pc, #644]	@ (8001948 <main+0x2f0>)
 80016c2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80016c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001944 <main+0x2ec>)
 80016c6:	4aa1      	ldr	r2, [pc, #644]	@ (800194c <main+0x2f4>)
 80016c8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001944 <main+0x2ec>)
 80016cc:	2215      	movs	r2, #21
 80016ce:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80016d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001944 <main+0x2ec>)
 80016d2:	22c8      	movs	r2, #200	@ 0xc8
 80016d4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80016d6:	499e      	ldr	r1, [pc, #632]	@ (8001950 <main+0x2f8>)
 80016d8:	489a      	ldr	r0, [pc, #616]	@ (8001944 <main+0x2ec>)
 80016da:	f7ff fcc9 	bl	8001070 <Modbus_init>
  reed = 0;
 80016de:	4b9d      	ldr	r3, [pc, #628]	@ (8001954 <main+0x2fc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 16;
 80016e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001958 <main+0x300>)
 80016e6:	2210      	movs	r2, #16
 80016e8:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 80016ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001958 <main+0x300>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 80016f0:	4b99      	ldr	r3, [pc, #612]	@ (8001958 <main+0x300>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 80016f6:	4b98      	ldr	r3, [pc, #608]	@ (8001958 <main+0x300>)
 80016f8:	2204      	movs	r2, #4
 80016fa:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 80016fc:	4b96      	ldr	r3, [pc, #600]	@ (8001958 <main+0x300>)
 80016fe:	2205      	movs	r2, #5
 8001700:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8001702:	4896      	ldr	r0, [pc, #600]	@ (800195c <main+0x304>)
 8001704:	f004 fc9a 	bl	800603c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	4894      	ldr	r0, [pc, #592]	@ (800195c <main+0x304>)
 800170c:	f004 fe1c 	bl	8006348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	4892      	ldr	r0, [pc, #584]	@ (800195c <main+0x304>)
 8001714:	f004 fe18 	bl	8006348 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001718:	213c      	movs	r1, #60	@ 0x3c
 800171a:	4891      	ldr	r0, [pc, #580]	@ (8001960 <main+0x308>)
 800171c:	f005 fb92 	bl	8006e44 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001720:	4890      	ldr	r0, [pc, #576]	@ (8001964 <main+0x30c>)
 8001722:	f004 fc8b 	bl	800603c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001726:	4890      	ldr	r0, [pc, #576]	@ (8001968 <main+0x310>)
 8001728:	f004 fcf8 	bl	800611c <HAL_TIM_Base_Start_IT>
//  {
//	  pos_err = position_goal;
//  }


  buf[0] = 3;
 800172c:	4b8f      	ldr	r3, [pc, #572]	@ (800196c <main+0x314>)
 800172e:	2203      	movs	r2, #3
 8001730:	701a      	strb	r2, [r3, #0]
  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8001732:	2204      	movs	r2, #4
 8001734:	498b      	ldr	r1, [pc, #556]	@ (8001964 <main+0x30c>)
 8001736:	488d      	ldr	r0, [pc, #564]	@ (800196c <main+0x314>)
 8001738:	f002 fc42 	bl	8003fc0 <updateLED>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <main+0x318>)
 8001742:	701a      	strb	r2, [r3, #0]
  piingpong = 0;
 8001744:	4b8b      	ldr	r3, [pc, #556]	@ (8001974 <main+0x31c>)
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
  uint8_t result = HomeZ();
 800174a:	f002 fcdf 	bl	800410c <HomeZ>
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(2000);
 8001752:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001756:	f002 fdaf 	bl	80042b8 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800175a:	4b81      	ldr	r3, [pc, #516]	@ (8001960 <main+0x308>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001762:	4b85      	ldr	r3, [pc, #532]	@ (8001978 <main+0x320>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feba 	bl	80004e0 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 8001920 <main+0x2c8>
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f001 f908 	bl	800298c <generate_trapezoidal_velocity_profile>
  Home = 0;
 800177c:	4b7f      	ldr	r3, [pc, #508]	@ (800197c <main+0x324>)
 800177e:	2200      	movs	r2, #0
 8001780:	801a      	strh	r2, [r3, #0]
  rou = 0;
 8001782:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <main+0x328>)
 8001784:	2200      	movs	r2, #0
 8001786:	801a      	strh	r2, [r3, #0]
//	  Mode = 1;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8001788:	f7ff fcfe 	bl	8001188 <Modbus_Protocal_Worker>
	  BaseAction();
 800178c:	f001 fb04 	bl	8002d98 <BaseAction>
	  OrderSeparate();
 8001790:	f001 ff20 	bl	80035d4 <OrderSeparate>
	  piingpong =1;
 8001794:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <main+0x31c>)
 8001796:	2201      	movs	r2, #1
 8001798:	801a      	strh	r2, [r3, #0]

//	  uint8_t result = HomeZ();

	  static uint64_t timestamps =0;
	  if (rou >= 2 && end == 0)
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <main+0x328>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d90b      	bls.n	80017ba <main+0x162>
 80017a2:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <main+0x32c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d107      	bne.n	80017ba <main+0x162>
	  {
		  currentTime = micros();
 80017aa:	f002 f84d 	bl	8003848 <micros>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4975      	ldr	r1, [pc, #468]	@ (8001988 <main+0x330>)
 80017b4:	e9c1 2300 	strd	r2, r3, [r1]
 80017b8:	e015      	b.n	80017e6 <main+0x18e>
	  }
	  else if (end == 1)
 80017ba:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <main+0x32c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <main+0x18e>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 80017c2:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <main+0x310>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
		  currentTime = 0;
 80017ca:	496f      	ldr	r1, [pc, #444]	@ (8001988 <main+0x330>)
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
		  _micros = 0;
 80017d8:	496c      	ldr	r1, [pc, #432]	@ (800198c <main+0x334>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
//		  end = 0;
	  }
	  if(currentTime > timestamps && fin == 1)
 80017e6:	4b68      	ldr	r3, [pc, #416]	@ (8001988 <main+0x330>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	4968      	ldr	r1, [pc, #416]	@ (8001990 <main+0x338>)
 80017ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f2:	4290      	cmp	r0, r2
 80017f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80017f8:	d213      	bcs.n	8001822 <main+0x1ca>
 80017fa:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <main+0x33c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10f      	bne.n	8001822 <main+0x1ca>
	  {
	  timestamps =currentTime + 250000000;//us
 8001802:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <main+0x330>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	4963      	ldr	r1, [pc, #396]	@ (8001998 <main+0x340>)
 800180a:	1854      	adds	r4, r2, r1
 800180c:	f143 0500 	adc.w	r5, r3, #0
 8001810:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <main+0x338>)
 8001812:	e9c3 4500 	strd	r4, r5, [r3]
	  Mode = 1;
 8001816:	4b61      	ldr	r3, [pc, #388]	@ (800199c <main+0x344>)
 8001818:	2201      	movs	r2, #1
 800181a:	801a      	strh	r2, [r3, #0]
	  fin = 0;
 800181c:	4b5d      	ldr	r3, [pc, #372]	@ (8001994 <main+0x33c>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
//	  err_g =  (position_goal * err);
//
//	  pos_err = (position_goal - err_g)+14;
//
//
	  if (Mode == 1 && rou == 20)
 8001822:	4b5e      	ldr	r3, [pc, #376]	@ (800199c <main+0x344>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d125      	bne.n	8001876 <main+0x21e>
 800182a:	4b55      	ldr	r3, [pc, #340]	@ (8001980 <main+0x328>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b14      	cmp	r3, #20
 8001830:	d121      	bne.n	8001876 <main+0x21e>
	 	  {
	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[0]]/10.0);
 8001832:	4b51      	ldr	r3, [pc, #324]	@ (8001978 <main+0x320>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe52 	bl	80004e0 <__aeabi_f2d>
 800183c:	4680      	mov	r8, r0
 800183e:	4689      	mov	r9, r1
 8001840:	4b57      	ldr	r3, [pc, #348]	@ (80019a0 <main+0x348>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <main+0x300>)
 8001848:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe35 	bl	80004bc <__aeabi_i2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <main+0x34c>)
 8001858:	f7fe ffc4 	bl	80007e4 <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b17 	vmov	d7, r2, r3
 8001864:	eeb0 1a47 	vmov.f32	s2, s14
 8001868:	eef0 1a67 	vmov.f32	s3, s15
 800186c:	ec49 8b10 	vmov	d0, r8, r9
 8001870:	f001 f88c 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001874:	e1c2      	b.n	8001bfc <main+0x5a4>

	 	  }

	  else if (Mode == 1 && rou == 21)
 8001876:	4b49      	ldr	r3, [pc, #292]	@ (800199c <main+0x344>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d125      	bne.n	80018ca <main+0x272>
 800187e:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <main+0x328>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2b15      	cmp	r3, #21
 8001884:	d121      	bne.n	80018ca <main+0x272>
	  	 	  {
	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[0]]/10.0);
 8001886:	4b3c      	ldr	r3, [pc, #240]	@ (8001978 <main+0x320>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe28 	bl	80004e0 <__aeabi_f2d>
 8001890:	4680      	mov	r8, r0
 8001892:	4689      	mov	r9, r1
 8001894:	4b44      	ldr	r3, [pc, #272]	@ (80019a8 <main+0x350>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <main+0x300>)
 800189c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe0b 	bl	80004bc <__aeabi_i2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <main+0x34c>)
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b17 	vmov	d7, r2, r3
 80018b8:	eeb0 1a47 	vmov.f32	s2, s14
 80018bc:	eef0 1a67 	vmov.f32	s3, s15
 80018c0:	ec49 8b10 	vmov	d0, r8, r9
 80018c4:	f001 f862 	bl	800298c <generate_trapezoidal_velocity_profile>
 80018c8:	e198      	b.n	8001bfc <main+0x5a4>

	  	 	  }
	  else if (Mode == 1 && rou == 22)
 80018ca:	4b34      	ldr	r3, [pc, #208]	@ (800199c <main+0x344>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d16c      	bne.n	80019ac <main+0x354>
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <main+0x328>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b16      	cmp	r3, #22
 80018d8:	d168      	bne.n	80019ac <main+0x354>
	  	  	 	  {
	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[1]]/10.0);
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <main+0x320>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdfe 	bl	80004e0 <__aeabi_f2d>
 80018e4:	4680      	mov	r8, r0
 80018e6:	4689      	mov	r9, r1
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <main+0x348>)
 80018ea:	885b      	ldrh	r3, [r3, #2]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <main+0x300>)
 80018f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fde1 	bl	80004bc <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <main+0x34c>)
 8001900:	f7fe ff70 	bl	80007e4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b17 	vmov	d7, r2, r3
 800190c:	eeb0 1a47 	vmov.f32	s2, s14
 8001910:	eef0 1a67 	vmov.f32	s3, s15
 8001914:	ec49 8b10 	vmov	d0, r8, r9
 8001918:	f001 f838 	bl	800298c <generate_trapezoidal_velocity_profile>
 800191c:	e16e      	b.n	8001bfc <main+0x5a4>
 800191e:	bf00      	nop
 8001920:	00000000 	.word	0x00000000
 8001924:	40300000 	.word	0x40300000
 8001928:	200011e8 	.word	0x200011e8
 800192c:	40c33333 	.word	0x40c33333
 8001930:	3a83126f 	.word	0x3a83126f
 8001934:	3c23d70a 	.word	0x3c23d70a
 8001938:	20000ae4 	.word	0x20000ae4
 800193c:	2000082c 	.word	0x2000082c
 8001940:	20000568 	.word	0x20000568
 8001944:	20000af8 	.word	0x20000af8
 8001948:	200008f8 	.word	0x200008f8
 800194c:	20000700 	.word	0x20000700
 8001950:	20000fe8 	.word	0x20000fe8
 8001954:	20000fd6 	.word	0x20000fd6
 8001958:	20001178 	.word	0x20001178
 800195c:	20000238 	.word	0x20000238
 8001960:	20000304 	.word	0x20000304
 8001964:	200003d0 	.word	0x200003d0
 8001968:	20000634 	.word	0x20000634
 800196c:	20000208 	.word	0x20000208
 8001970:	20001216 	.word	0x20001216
 8001974:	20000fd2 	.word	0x20000fd2
 8001978:	20000200 	.word	0x20000200
 800197c:	200011de 	.word	0x200011de
 8001980:	20001214 	.word	0x20001214
 8001984:	20001220 	.word	0x20001220
 8001988:	20001218 	.word	0x20001218
 800198c:	20001228 	.word	0x20001228
 8001990:	20001230 	.word	0x20001230
 8001994:	20001217 	.word	0x20001217
 8001998:	0ee6b280 	.word	0x0ee6b280
 800199c:	200011dc 	.word	0x200011dc
 80019a0:	2000118c 	.word	0x2000118c
 80019a4:	40240000 	.word	0x40240000
 80019a8:	20001198 	.word	0x20001198

	  	  	 	  }
	  else if (Mode == 1 && rou == 23)
 80019ac:	4bb6      	ldr	r3, [pc, #728]	@ (8001c88 <main+0x630>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d125      	bne.n	8001a00 <main+0x3a8>
 80019b4:	4bb5      	ldr	r3, [pc, #724]	@ (8001c8c <main+0x634>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	2b17      	cmp	r3, #23
 80019ba:	d121      	bne.n	8001a00 <main+0x3a8>
	  	  	  	 	  {
	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[1]]/10.0);
 80019bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001c90 <main+0x638>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd8d 	bl	80004e0 <__aeabi_f2d>
 80019c6:	4680      	mov	r8, r0
 80019c8:	4689      	mov	r9, r1
 80019ca:	4bb2      	ldr	r3, [pc, #712]	@ (8001c94 <main+0x63c>)
 80019cc:	885b      	ldrh	r3, [r3, #2]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001c98 <main+0x640>)
 80019d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd70 	bl	80004bc <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4bae      	ldr	r3, [pc, #696]	@ (8001c9c <main+0x644>)
 80019e2:	f7fe feff 	bl	80007e4 <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ec43 2b17 	vmov	d7, r2, r3
 80019ee:	eeb0 1a47 	vmov.f32	s2, s14
 80019f2:	eef0 1a67 	vmov.f32	s3, s15
 80019f6:	ec49 8b10 	vmov	d0, r8, r9
 80019fa:	f000 ffc7 	bl	800298c <generate_trapezoidal_velocity_profile>
 80019fe:	e0fd      	b.n	8001bfc <main+0x5a4>

	  	  	  	 	  }
	  else if (Mode == 1 && rou == 24)
 8001a00:	4ba1      	ldr	r3, [pc, #644]	@ (8001c88 <main+0x630>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d125      	bne.n	8001a54 <main+0x3fc>
 8001a08:	4ba0      	ldr	r3, [pc, #640]	@ (8001c8c <main+0x634>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b18      	cmp	r3, #24
 8001a0e:	d121      	bne.n	8001a54 <main+0x3fc>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[2]]/10.0);
 8001a10:	4b9f      	ldr	r3, [pc, #636]	@ (8001c90 <main+0x638>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd63 	bl	80004e0 <__aeabi_f2d>
 8001a1a:	4680      	mov	r8, r0
 8001a1c:	4689      	mov	r9, r1
 8001a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ca0 <main+0x648>)
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b9c      	ldr	r3, [pc, #624]	@ (8001c98 <main+0x640>)
 8001a26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd46 	bl	80004bc <__aeabi_i2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b99      	ldr	r3, [pc, #612]	@ (8001c9c <main+0x644>)
 8001a36:	f7fe fed5 	bl	80007e4 <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	ec43 2b17 	vmov	d7, r2, r3
 8001a42:	eeb0 1a47 	vmov.f32	s2, s14
 8001a46:	eef0 1a67 	vmov.f32	s3, s15
 8001a4a:	ec49 8b10 	vmov	d0, r8, r9
 8001a4e:	f000 ff9d 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001a52:	e0d3      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 25)
 8001a54:	4b8c      	ldr	r3, [pc, #560]	@ (8001c88 <main+0x630>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d125      	bne.n	8001aa8 <main+0x450>
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	@ (8001c8c <main+0x634>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	2b19      	cmp	r3, #25
 8001a62:	d121      	bne.n	8001aa8 <main+0x450>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[2]]/10.0);
 8001a64:	4b8a      	ldr	r3, [pc, #552]	@ (8001c90 <main+0x638>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd39 	bl	80004e0 <__aeabi_f2d>
 8001a6e:	4680      	mov	r8, r0
 8001a70:	4689      	mov	r9, r1
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <main+0x63c>)
 8001a74:	889b      	ldrh	r3, [r3, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b87      	ldr	r3, [pc, #540]	@ (8001c98 <main+0x640>)
 8001a7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd1c 	bl	80004bc <__aeabi_i2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b84      	ldr	r3, [pc, #528]	@ (8001c9c <main+0x644>)
 8001a8a:	f7fe feab 	bl	80007e4 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	eeb0 1a47 	vmov.f32	s2, s14
 8001a9a:	eef0 1a67 	vmov.f32	s3, s15
 8001a9e:	ec49 8b10 	vmov	d0, r8, r9
 8001aa2:	f000 ff73 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001aa6:	e0a9      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 26)
 8001aa8:	4b77      	ldr	r3, [pc, #476]	@ (8001c88 <main+0x630>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d125      	bne.n	8001afc <main+0x4a4>
 8001ab0:	4b76      	ldr	r3, [pc, #472]	@ (8001c8c <main+0x634>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2b1a      	cmp	r3, #26
 8001ab6:	d121      	bne.n	8001afc <main+0x4a4>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[3]]/10.0);
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <main+0x638>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd0f 	bl	80004e0 <__aeabi_f2d>
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <main+0x648>)
 8001ac8:	88db      	ldrh	r3, [r3, #6]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <main+0x640>)
 8001ace:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcf2 	bl	80004bc <__aeabi_i2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <main+0x644>)
 8001ade:	f7fe fe81 	bl	80007e4 <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	ec43 2b17 	vmov	d7, r2, r3
 8001aea:	eeb0 1a47 	vmov.f32	s2, s14
 8001aee:	eef0 1a67 	vmov.f32	s3, s15
 8001af2:	ec49 8b10 	vmov	d0, r8, r9
 8001af6:	f000 ff49 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001afa:	e07f      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 27)
 8001afc:	4b62      	ldr	r3, [pc, #392]	@ (8001c88 <main+0x630>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d125      	bne.n	8001b50 <main+0x4f8>
 8001b04:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <main+0x634>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b1b      	cmp	r3, #27
 8001b0a:	d121      	bne.n	8001b50 <main+0x4f8>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[place[3]]/10.0);
 8001b0c:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <main+0x638>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fce5 	bl	80004e0 <__aeabi_f2d>
 8001b16:	4680      	mov	r8, r0
 8001b18:	4689      	mov	r9, r1
 8001b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c94 <main+0x63c>)
 8001b1c:	88db      	ldrh	r3, [r3, #6]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <main+0x640>)
 8001b22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcc8 	bl	80004bc <__aeabi_i2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <main+0x644>)
 8001b32:	f7fe fe57 	bl	80007e4 <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ec43 2b17 	vmov	d7, r2, r3
 8001b3e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b42:	eef0 1a67 	vmov.f32	s3, s15
 8001b46:	ec49 8b10 	vmov	d0, r8, r9
 8001b4a:	f000 ff1f 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001b4e:	e055      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 28)
 8001b50:	4b4d      	ldr	r3, [pc, #308]	@ (8001c88 <main+0x630>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d125      	bne.n	8001ba4 <main+0x54c>
 8001b58:	4b4c      	ldr	r3, [pc, #304]	@ (8001c8c <main+0x634>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b1c      	cmp	r3, #28
 8001b5e:	d121      	bne.n	8001ba4 <main+0x54c>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, shelfPos[pick[4]]/10.0);
 8001b60:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <main+0x638>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcbb 	bl	80004e0 <__aeabi_f2d>
 8001b6a:	4680      	mov	r8, r0
 8001b6c:	4689      	mov	r9, r1
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca0 <main+0x648>)
 8001b70:	891b      	ldrh	r3, [r3, #8]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <main+0x640>)
 8001b76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc9e 	bl	80004bc <__aeabi_i2d>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b45      	ldr	r3, [pc, #276]	@ (8001c9c <main+0x644>)
 8001b86:	f7fe fe2d 	bl	80007e4 <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
 8001b92:	eeb0 1a47 	vmov.f32	s2, s14
 8001b96:	eef0 1a67 	vmov.f32	s3, s15
 8001b9a:	ec49 8b10 	vmov	d0, r8, r9
 8001b9e:	f000 fef5 	bl	800298c <generate_trapezoidal_velocity_profile>
 8001ba2:	e02b      	b.n	8001bfc <main+0x5a4>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 29)
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <main+0x630>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d127      	bne.n	8001bfc <main+0x5a4>
 8001bac:	4b37      	ldr	r3, [pc, #220]	@ (8001c8c <main+0x634>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	2b1d      	cmp	r3, #29
 8001bb2:	d123      	bne.n	8001bfc <main+0x5a4>
	  	  	  	  	  	  	 	  {
	  	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op,shelfPos[place[4]]/10.0);
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <main+0x638>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc91 	bl	80004e0 <__aeabi_f2d>
 8001bbe:	4680      	mov	r8, r0
 8001bc0:	4689      	mov	r9, r1
 8001bc2:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <main+0x63c>)
 8001bc4:	891b      	ldrh	r3, [r3, #8]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <main+0x640>)
 8001bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc74 	bl	80004bc <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <main+0x644>)
 8001bda:	f7fe fe03 	bl	80007e4 <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ec43 2b17 	vmov	d7, r2, r3
 8001be6:	eeb0 1a47 	vmov.f32	s2, s14
 8001bea:	eef0 1a67 	vmov.f32	s3, s15
 8001bee:	ec49 8b10 	vmov	d0, r8, r9
 8001bf2:	f000 fecb 	bl	800298c <generate_trapezoidal_velocity_profile>
	  	  	  	  	  	  	 		  end = 1;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <main+0x64c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]

	  	  	  	  	  	  	 	  }

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x0)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <main+0x650>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b80      	cmp	r3, #128	@ 0x80
 8001c02:	d113      	bne.n	8001c2c <main+0x5d4>
 8001c04:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <main+0x654>)
 8001c06:	8c1b      	ldrh	r3, [r3, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <main+0x5d4>
	  {
		  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <main+0x638>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc65 	bl	80004e0 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001c80 <main+0x628>
 8001c1e:	ec43 2b10 	vmov	d0, r2, r3
 8001c22:	f000 feb3 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <main+0x650>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

	  }

	  if ( joystickPayload[0] == 0x80 && registerFrame[0x10].U16 == 0x1)
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <main+0x650>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b80      	cmp	r3, #128	@ 0x80
 8001c32:	f040 80d8 	bne.w	8001de6 <main+0x78e>
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <main+0x654>)
 8001c38:	8c1b      	ldrh	r3, [r3, #32]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f040 80d3 	bne.w	8001de6 <main+0x78e>
	  				{
	  					if (TT == 0)
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <main+0x658>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d133      	bne.n	8001cb8 <main+0x660>
	  					{
	  						shelfPos[0] = qeifloat*10.0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <main+0x65c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc43 	bl	80004e0 <__aeabi_f2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <main+0x644>)
 8001c60:	f7fe fc96 	bl	8000590 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe feca 	bl	8000a04 <__aeabi_d2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <main+0x640>)
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e0a7      	b.n	8001dca <main+0x772>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40300000 	.word	0x40300000
 8001c88:	200011dc 	.word	0x200011dc
 8001c8c:	20001214 	.word	0x20001214
 8001c90:	20000200 	.word	0x20000200
 8001c94:	20001198 	.word	0x20001198
 8001c98:	20001178 	.word	0x20001178
 8001c9c:	40240000 	.word	0x40240000
 8001ca0:	2000118c 	.word	0x2000118c
 8001ca4:	20001220 	.word	0x20001220
 8001ca8:	20000ae4 	.word	0x20000ae4
 8001cac:	20000fe8 	.word	0x20000fe8
 8001cb0:	20000af0 	.word	0x20000af0
 8001cb4:	20000aec 	.word	0x20000aec

	  					}

	  					else if (TT == 1)
 8001cb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f60 <main+0x908>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cc2:	eef4 7a47 	vcmp.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d114      	bne.n	8001cf6 <main+0x69e>
	  							{
	  						shelfPos[1] = qeifloat*10.0;
 8001ccc:	4ba5      	ldr	r3, [pc, #660]	@ (8001f64 <main+0x90c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc05 	bl	80004e0 <__aeabi_f2d>
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4ba3      	ldr	r3, [pc, #652]	@ (8001f68 <main+0x910>)
 8001cdc:	f7fe fc58 	bl	8000590 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe fe8c 	bl	8000a04 <__aeabi_d2uiz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8001f6c <main+0x914>)
 8001cf2:	805a      	strh	r2, [r3, #2]
 8001cf4:	e069      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 2)
 8001cf6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f60 <main+0x908>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001d00:	eef4 7a47 	vcmp.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d114      	bne.n	8001d34 <main+0x6dc>
	  							{
	  						shelfPos[2] = qeifloat*10.0;
 8001d0a:	4b96      	ldr	r3, [pc, #600]	@ (8001f64 <main+0x90c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbe6 	bl	80004e0 <__aeabi_f2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b93      	ldr	r3, [pc, #588]	@ (8001f68 <main+0x910>)
 8001d1a:	f7fe fc39 	bl	8000590 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fe6d 	bl	8000a04 <__aeabi_d2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f6c <main+0x914>)
 8001d30:	809a      	strh	r2, [r3, #4]
 8001d32:	e04a      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 3)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	@ (8001f60 <main+0x908>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001d3e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d114      	bne.n	8001d72 <main+0x71a>
	  							{
	  						shelfPos[3] = qeifloat*10.0;
 8001d48:	4b86      	ldr	r3, [pc, #536]	@ (8001f64 <main+0x90c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbc7 	bl	80004e0 <__aeabi_f2d>
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b84      	ldr	r3, [pc, #528]	@ (8001f68 <main+0x910>)
 8001d58:	f7fe fc1a 	bl	8000590 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fe4e 	bl	8000a04 <__aeabi_d2uiz>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <main+0x914>)
 8001d6e:	80da      	strh	r2, [r3, #6]
 8001d70:	e02b      	b.n	8001dca <main+0x772>

	  							}

	  					else if (TT == 4)
 8001d72:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <main+0x908>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d7c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d114      	bne.n	8001db0 <main+0x758>
	  							{
	  						shelfPos[4] = qeifloat*10.0;
 8001d86:	4b77      	ldr	r3, [pc, #476]	@ (8001f64 <main+0x90c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fba8 	bl	80004e0 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b74      	ldr	r3, [pc, #464]	@ (8001f68 <main+0x910>)
 8001d96:	f7fe fbfb 	bl	8000590 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fe2f 	bl	8000a04 <__aeabi_d2uiz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b70      	ldr	r3, [pc, #448]	@ (8001f6c <main+0x914>)
 8001dac:	811a      	strh	r2, [r3, #8]
 8001dae:	e00c      	b.n	8001dca <main+0x772>

	  							}
	  					else if ( TT >=  5)
 8001db0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f60 <main+0x908>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	db02      	blt.n	8001dca <main+0x772>
	  					{
	  						flagShelf = 1;
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f70 <main+0x918>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
	  					}
	  					TT += 1;
 8001dca:	4b65      	ldr	r3, [pc, #404]	@ (8001f60 <main+0x908>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dd8:	4b61      	ldr	r3, [pc, #388]	@ (8001f60 <main+0x908>)
 8001dda:	edc3 7a00 	vstr	s15, [r3]
	  					joystickPayload[0] = 0;
 8001dde:	4b65      	ldr	r3, [pc, #404]	@ (8001f74 <main+0x91c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e119      	b.n	800201a <main+0x9c2>
	  				}

	  else if ( joystickPayload[0] == 0x40)
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <main+0x91c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d120      	bne.n	8001e30 <main+0x7d8>
		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 0.1));
 8001dee:	4b62      	ldr	r3, [pc, #392]	@ (8001f78 <main+0x920>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb74 	bl	80004e0 <__aeabi_f2d>
 8001df8:	4680      	mov	r8, r0
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001f7c <main+0x924>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb6d 	bl	80004e0 <__aeabi_f2d>
 8001e06:	a354      	add	r3, pc, #336	@ (adr r3, 8001f58 <main+0x900>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fa0a 	bl	8000224 <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	ec43 2b17 	vmov	d7, r2, r3
 8001e18:	eeb0 1a47 	vmov.f32	s2, s14
 8001e1c:	eef0 1a67 	vmov.f32	s3, s15
 8001e20:	ec49 8b10 	vmov	d0, r8, r9
 8001e24:	f000 fdb2 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001e28:	4b52      	ldr	r3, [pc, #328]	@ (8001f74 <main+0x91c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e0f4      	b.n	800201a <main+0x9c2>
		}
	  else if ( joystickPayload[0] == 0x41)
 8001e30:	4b50      	ldr	r3, [pc, #320]	@ (8001f74 <main+0x91c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b41      	cmp	r3, #65	@ 0x41
 8001e36:	d120      	bne.n	8001e7a <main+0x822>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 1.0));
 8001e38:	4b4f      	ldr	r3, [pc, #316]	@ (8001f78 <main+0x920>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb4f 	bl	80004e0 <__aeabi_f2d>
 8001e42:	4680      	mov	r8, r0
 8001e44:	4689      	mov	r9, r1
 8001e46:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <main+0x924>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb48 	bl	80004e0 <__aeabi_f2d>
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <main+0x928>)
 8001e56:	f7fe f9e5 	bl	8000224 <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 1a47 	vmov.f32	s2, s14
 8001e66:	eef0 1a67 	vmov.f32	s3, s15
 8001e6a:	ec49 8b10 	vmov	d0, r8, r9
 8001e6e:	f000 fd8d 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001e72:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <main+0x91c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e0cf      	b.n	800201a <main+0x9c2>
	  		}
	  else if ( joystickPayload[0] == 0x42)
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <main+0x91c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b42      	cmp	r3, #66	@ 0x42
 8001e80:	d120      	bne.n	8001ec4 <main+0x86c>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 10.0));
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <main+0x920>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb2a 	bl	80004e0 <__aeabi_f2d>
 8001e8c:	4680      	mov	r8, r0
 8001e8e:	4689      	mov	r9, r1
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <main+0x924>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb23 	bl	80004e0 <__aeabi_f2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <main+0x910>)
 8001ea0:	f7fe f9c0 	bl	8000224 <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	ec43 2b17 	vmov	d7, r2, r3
 8001eac:	eeb0 1a47 	vmov.f32	s2, s14
 8001eb0:	eef0 1a67 	vmov.f32	s3, s15
 8001eb4:	ec49 8b10 	vmov	d0, r8, r9
 8001eb8:	f000 fd68 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <main+0x91c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0aa      	b.n	800201a <main+0x9c2>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <main+0x91c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b43      	cmp	r3, #67	@ 0x43
 8001eca:	d120      	bne.n	8001f0e <main+0x8b6>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 100.0));
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <main+0x920>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb05 	bl	80004e0 <__aeabi_f2d>
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	4689      	mov	r9, r1
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <main+0x924>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fafe 	bl	80004e0 <__aeabi_f2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <main+0x92c>)
 8001eea:	f7fe f99b 	bl	8000224 <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	ec43 2b17 	vmov	d7, r2, r3
 8001ef6:	eeb0 1a47 	vmov.f32	s2, s14
 8001efa:	eef0 1a67 	vmov.f32	s3, s15
 8001efe:	ec49 8b10 	vmov	d0, r8, r9
 8001f02:	f000 fd43 	bl	800298c <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <main+0x91c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e085      	b.n	800201a <main+0x9c2>
//	  else if ( joystickPayload[0] == 0x00)
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  	  else if ( joystickPayload[0] == 0x01)
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <main+0x91c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d138      	bne.n	8001f88 <main+0x930>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 1.0));
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <main+0x920>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fae0 	bl	80004e0 <__aeabi_f2d>
 8001f20:	4680      	mov	r8, r0
 8001f22:	4689      	mov	r9, r1
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <main+0x924>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fad9 	bl	80004e0 <__aeabi_f2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <main+0x928>)
 8001f34:	f7fe f974 	bl	8000220 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 1a47 	vmov.f32	s2, s14
 8001f44:	eef0 1a67 	vmov.f32	s3, s15
 8001f48:	ec49 8b10 	vmov	d0, r8, r9
 8001f4c:	f000 fd1e 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <main+0x91c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e060      	b.n	800201a <main+0x9c2>
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fb99999 	.word	0x3fb99999
 8001f60:	20000af0 	.word	0x20000af0
 8001f64:	20000aec 	.word	0x20000aec
 8001f68:	40240000 	.word	0x40240000
 8001f6c:	20001178 	.word	0x20001178
 8001f70:	20000fd0 	.word	0x20000fd0
 8001f74:	20000ae4 	.word	0x20000ae4
 8001f78:	20000200 	.word	0x20000200
 8001f7c:	200011d8 	.word	0x200011d8
 8001f80:	3ff00000 	.word	0x3ff00000
 8001f84:	40590000 	.word	0x40590000
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02)
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <main+0x9f8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d120      	bne.n	8001fd2 <main+0x97a>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 10.0));
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <main+0x9fc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faa3 	bl	80004e0 <__aeabi_f2d>
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	4689      	mov	r9, r1
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <main+0xa00>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa9c 	bl	80004e0 <__aeabi_f2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <main+0xa04>)
 8001fae:	f7fe f937 	bl	8000220 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b17 	vmov	d7, r2, r3
 8001fba:	eeb0 1a47 	vmov.f32	s2, s14
 8001fbe:	eef0 1a67 	vmov.f32	s3, s15
 8001fc2:	ec49 8b10 	vmov	d0, r8, r9
 8001fc6:	f000 fce1 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <main+0x9f8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e023      	b.n	800201a <main+0x9c2>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03)
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <main+0x9f8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d11f      	bne.n	800201a <main+0x9c2>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 100.0));
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <main+0x9fc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa7e 	bl	80004e0 <__aeabi_f2d>
 8001fe4:	4680      	mov	r8, r0
 8001fe6:	4689      	mov	r9, r1
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <main+0xa00>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa77 	bl	80004e0 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <main+0xa08>)
 8001ff8:	f7fe f912 	bl	8000220 <__aeabi_dsub>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ec43 2b17 	vmov	d7, r2, r3
 8002004:	eeb0 1a47 	vmov.f32	s2, s14
 8002008:	eef0 1a67 	vmov.f32	s3, s15
 800200c:	ec49 8b10 	vmov	d0, r8, r9
 8002010:	f000 fcbc 	bl	800298c <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <main+0x9f8>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	  	  		}


	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <main+0xa0c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <main+0xa10>)
 8002022:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2))*(60.00/8192);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <main+0xa0c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa36 	bl	800049c <__aeabi_ui2d>
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <main+0xa14>)
 8002036:	f7fe faab 	bl	8000590 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fcff 	bl	8000a44 <__aeabi_d2f>
 8002046:	4603      	mov	r3, r0
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <main+0xa18>)
 800204a:	6013      	str	r3, [r2, #0]
  {
 800204c:	f7ff bb9c 	b.w	8001788 <main+0x130>
 8002050:	20000ae4 	.word	0x20000ae4
 8002054:	20000200 	.word	0x20000200
 8002058:	200011d8 	.word	0x200011d8
 800205c:	40240000 	.word	0x40240000
 8002060:	40590000 	.word	0x40590000
 8002064:	20000304 	.word	0x20000304
 8002068:	20000ae8 	.word	0x20000ae8
 800206c:	3f7e0000 	.word	0x3f7e0000
 8002070:	20000aec 	.word	0x20000aec

08002074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	@ 0x50
 8002078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	2238      	movs	r2, #56	@ 0x38
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f008 fc74 	bl	800a970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002096:	2000      	movs	r0, #0
 8002098:	f002 ff3c 	bl	8004f14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a6:	2340      	movs	r3, #64	@ 0x40
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020aa:	2302      	movs	r3, #2
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ae:	2302      	movs	r3, #2
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020b2:	2304      	movs	r3, #4
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020b6:	2355      	movs	r3, #85	@ 0x55
 80020b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020be:	2302      	movs	r3, #2
 80020c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020c2:	2302      	movs	r3, #2
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ffd6 	bl	800507c <HAL_RCC_OscConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020d6:	f001 fbd1 	bl	800387c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020da:	230f      	movs	r3, #15
 80020dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2303      	movs	r3, #3
 80020e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2104      	movs	r1, #4
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fad4 	bl	80056a0 <HAL_RCC_ClockConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020fe:	f001 fbbd 	bl	800387c <Error_Handler>
  }
}
 8002102:	bf00      	nop
 8002104:	3750      	adds	r7, #80	@ 0x50
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b09e      	sub	sp, #120	@ 0x78
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800212c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2234      	movs	r2, #52	@ 0x34
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f008 fc0c 	bl	800a970 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002158:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800215a:	4a55      	ldr	r2, [pc, #340]	@ (80022b0 <MX_TIM1_Init+0x1a4>)
 800215c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800215e:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002160:	2201      	movs	r2, #1
 8002162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800216a:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800216c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002178:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002184:	4849      	ldr	r0, [pc, #292]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002186:	f003 fef5 	bl	8005f74 <HAL_TIM_Base_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002190:	f001 fb74 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002198:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800219a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800219e:	4619      	mov	r1, r3
 80021a0:	4842      	ldr	r0, [pc, #264]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021a2:	f005 f96b 	bl	800747c <HAL_TIM_ConfigClockSource>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021ac:	f001 fb66 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021b0:	483e      	ldr	r0, [pc, #248]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021b2:	f004 f85b 	bl	800626c <HAL_TIM_PWM_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80021bc:	f001 fb5e 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021d0:	4619      	mov	r1, r3
 80021d2:	4836      	ldr	r0, [pc, #216]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021d4:	f006 fa06 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80021de:	f001 fb4d 	bl	800387c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80021e2:	2301      	movs	r3, #1
 80021e4:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80021ea:	2301      	movs	r3, #1
 80021ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80021ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021f2:	461a      	mov	r2, r3
 80021f4:	2101      	movs	r1, #1
 80021f6:	482d      	ldr	r0, [pc, #180]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80021f8:	f006 fb1e 	bl	8008838 <HAL_TIMEx_ConfigBreakInput>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002202:	f001 fb3b 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002222:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4820      	ldr	r0, [pc, #128]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 800222c:	f005 f812 	bl	8007254 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002236:	f001 fb21 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800223a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800223e:	2204      	movs	r2, #4
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002244:	f005 f806 	bl	8007254 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800224e:	f001 fb15 	bl	800387c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002266:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	4619      	mov	r1, r3
 800228e:	4807      	ldr	r0, [pc, #28]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 8002290:	f006 fa3e 	bl	8008710 <HAL_TIMEx_ConfigBreakDeadTime>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800229a:	f001 faef 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800229e:	4803      	ldr	r0, [pc, #12]	@ (80022ac <MX_TIM1_Init+0x1a0>)
 80022a0:	f001 fc5c 	bl	8003b5c <HAL_TIM_MspPostInit>

}
 80022a4:	bf00      	nop
 80022a6:	3778      	adds	r7, #120	@ 0x78
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000238 	.word	0x20000238
 80022b0:	40012c00 	.word	0x40012c00

080022b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f008 fb54 	bl	800a970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d2:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <MX_TIM2_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022fa:	2303      	movs	r3, #3
 80022fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 800231a:	2302      	movs	r3, #2
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	@ (8002358 <MX_TIM2_Init+0xa4>)
 8002326:	f004 fcd9 	bl	8006cdc <HAL_TIM_Encoder_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002330:	f001 faa4 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	@ (8002358 <MX_TIM2_Init+0xa4>)
 8002342:	f006 f94f 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800234c:	f001 fa96 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	@ 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000304 	.word	0x20000304

0800235c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	@ 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238e:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002390:	4a2c      	ldr	r2, [pc, #176]	@ (8002444 <MX_TIM3_Init+0xe8>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <MX_TIM3_Init+0xe4>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023a2:	226a      	movs	r2, #106	@ 0x6a
 80023a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023b2:	4823      	ldr	r0, [pc, #140]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023b4:	f003 fdde 	bl	8005f74 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023be:	f001 fa5d 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481c      	ldr	r0, [pc, #112]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023d0:	f005 f854 	bl	800747c <HAL_TIM_ConfigClockSource>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023da:	f001 fa4f 	bl	800387c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023de:	4818      	ldr	r0, [pc, #96]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023e0:	f003 ff44 	bl	800626c <HAL_TIM_PWM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023ea:	f001 fa47 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4810      	ldr	r0, [pc, #64]	@ (8002440 <MX_TIM3_Init+0xe4>)
 80023fe:	f006 f8f1 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002408:	f001 fa38 	bl	800387c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240c:	2360      	movs	r3, #96	@ 0x60
 800240e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	2204      	movs	r2, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002424:	f004 ff16 	bl	8007254 <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800242e:	f001 fa25 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <MX_TIM3_Init+0xe4>)
 8002434:	f001 fb92 	bl	8003b5c <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	@ 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200003d0 	.word	0x200003d0
 8002444:	40000400 	.word	0x40000400

08002448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <MX_TIM4_Init+0x98>)
 800246a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <MX_TIM4_Init+0x94>)
 800246e:	22a9      	movs	r2, #169	@ 0xa9
 8002470:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <MX_TIM4_Init+0x94>)
 800247a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800247e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <MX_TIM4_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800248c:	4813      	ldr	r0, [pc, #76]	@ (80024dc <MX_TIM4_Init+0x94>)
 800248e:	f003 fd71 	bl	8005f74 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002498:	f001 f9f0 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_TIM4_Init+0x94>)
 80024aa:	f004 ffe7 	bl	800747c <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80024b4:	f001 f9e2 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_TIM4_Init+0x94>)
 80024c6:	f006 f88d 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f001 f9d4 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000049c 	.word	0x2000049c
 80024e0:	40000800 	.word	0x40000800

080024e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <MX_TIM5_Init+0x98>)
 8002504:	4a1e      	ldr	r2, [pc, #120]	@ (8002580 <MX_TIM5_Init+0x9c>)
 8002506:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_TIM5_Init+0x98>)
 800250a:	f244 2267 	movw	r2, #16999	@ 0x4267
 800250e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_TIM5_Init+0x98>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_TIM5_Init+0x98>)
 8002518:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800251c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_TIM5_Init+0x98>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_TIM5_Init+0x98>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800252a:	4814      	ldr	r0, [pc, #80]	@ (800257c <MX_TIM5_Init+0x98>)
 800252c:	f003 fd22 	bl	8005f74 <HAL_TIM_Base_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002536:	f001 f9a1 	bl	800387c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <MX_TIM5_Init+0x98>)
 8002548:	f004 ff98 	bl	800747c <HAL_TIM_ConfigClockSource>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002552:	f001 f993 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4806      	ldr	r0, [pc, #24]	@ (800257c <MX_TIM5_Init+0x98>)
 8002564:	f006 f83e 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800256e:	f001 f985 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000568 	.word	0x20000568
 8002580:	40000c00 	.word	0x40000c00

08002584 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <MX_TIM7_Init+0x64>)
 8002596:	4a15      	ldr	r2, [pc, #84]	@ (80025ec <MX_TIM7_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <MX_TIM7_Init+0x64>)
 800259c:	22a9      	movs	r2, #169	@ 0xa9
 800259e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025b6:	f003 fcdd 	bl	8005f74 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025c0:	f001 f95c 	bl	800387c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <MX_TIM7_Init+0x64>)
 80025d2:	f006 f807 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f001 f94e 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000634 	.word	0x20000634
 80025ec:	40001400 	.word	0x40001400

080025f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_TIM16_Init+0x44>)
 80025f6:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <MX_TIM16_Init+0x48>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_TIM16_Init+0x44>)
 80025fc:	22a9      	movs	r2, #169	@ 0xa9
 80025fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002608:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800260c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_TIM16_Init+0x44>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <MX_TIM16_Init+0x44>)
 8002622:	f003 fca7 	bl	8005f74 <HAL_TIM_Base_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800262c:	f001 f926 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000700 	.word	0x20000700
 8002638:	40014400 	.word	0x40014400

0800263c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002642:	4a23      	ldr	r2, [pc, #140]	@ (80026d0 <MX_USART1_UART_Init+0x94>)
 8002644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265a:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 800267a:	2200      	movs	r2, #0
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002680:	2200      	movs	r2, #0
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002684:	4811      	ldr	r0, [pc, #68]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002686:	f006 fa49 	bl	8008b1c <HAL_UART_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002690:	f001 f8f4 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 8002698:	f008 f869 	bl	800a76e <HAL_UARTEx_SetTxFifoThreshold>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026a2:	f001 f8eb 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4808      	ldr	r0, [pc, #32]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 80026aa:	f008 f89e 	bl	800a7ea <HAL_UARTEx_SetRxFifoThreshold>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026b4:	f001 f8e2 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	@ (80026cc <MX_USART1_UART_Init+0x90>)
 80026ba:	f008 f81f 	bl	800a6fc <HAL_UARTEx_DisableFifoMode>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026c4:	f001 f8da 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000082c 	.word	0x2000082c
 80026d0:	40013800 	.word	0x40013800

080026d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <MX_USART2_UART_Init+0x98>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026e0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80026e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002720:	4811      	ldr	r0, [pc, #68]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002722:	f006 f9fb 	bl	8008b1c <HAL_UART_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800272c:	f001 f8a6 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002734:	f008 f81b 	bl	800a76e <HAL_UARTEx_SetTxFifoThreshold>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800273e:	f001 f89d 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002746:	f008 f850 	bl	800a7ea <HAL_UARTEx_SetRxFifoThreshold>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002750:	f001 f894 	bl	800387c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <MX_USART2_UART_Init+0x94>)
 8002756:	f007 ffd1 	bl	800a6fc <HAL_UARTEx_DisableFifoMode>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002760:	f001 f88c 	bl	800387c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200008f8 	.word	0x200008f8
 800276c:	40004400 	.word	0x40004400

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <MX_DMA_Init+0x98>)
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	4a23      	ldr	r2, [pc, #140]	@ (8002808 <MX_DMA_Init+0x98>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6493      	str	r3, [r2, #72]	@ 0x48
 8002782:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <MX_DMA_Init+0x98>)
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_DMA_Init+0x98>)
 8002790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002792:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <MX_DMA_Init+0x98>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6493      	str	r3, [r2, #72]	@ 0x48
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_DMA_Init+0x98>)
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_DMA_Init+0x98>)
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <MX_DMA_Init+0x98>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <MX_DMA_Init+0x98>)
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200b      	movs	r0, #11
 80027c4:	f001 fe75 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027c8:	200b      	movs	r0, #11
 80027ca:	f001 fe8c 	bl	80044e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	200c      	movs	r0, #12
 80027d4:	f001 fe6d 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027d8:	200c      	movs	r0, #12
 80027da:	f001 fe84 	bl	80044e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	200d      	movs	r0, #13
 80027e4:	f001 fe65 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80027e8:	200d      	movs	r0, #13
 80027ea:	f001 fe7c 	bl	80044e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2039      	movs	r0, #57	@ 0x39
 80027f4:	f001 fe5d 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80027f8:	2039      	movs	r0, #57	@ 0x39
 80027fa:	f001 fe74 	bl	80044e6 <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	4a56      	ldr	r2, [pc, #344]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282e:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <MX_GPIO_Init+0x174>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	4a50      	ldr	r2, [pc, #320]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002840:	f043 0320 	orr.w	r3, r3, #32
 8002844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002846:	4b4e      	ldr	r3, [pc, #312]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b48      	ldr	r3, [pc, #288]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b45      	ldr	r3, [pc, #276]	@ (8002980 <MX_GPIO_Init+0x174>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a44      	ldr	r2, [pc, #272]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b42      	ldr	r3, [pc, #264]	@ (8002980 <MX_GPIO_Init+0x174>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	f240 6111 	movw	r1, #1553	@ 0x611
 8002888:	483e      	ldr	r0, [pc, #248]	@ (8002984 <MX_GPIO_Init+0x178>)
 800288a:	f002 fb13 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	483d      	ldr	r0, [pc, #244]	@ (8002988 <MX_GPIO_Init+0x17c>)
 8002894:	f002 fb0e 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800289e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	4836      	ldr	r0, [pc, #216]	@ (8002988 <MX_GPIO_Init+0x17c>)
 80028b0:	f002 f966 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028bc:	2301      	movs	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ca:	f002 f959 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_9;
 80028ce:	f240 6311 	movw	r3, #1553	@ 0x611
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4827      	ldr	r0, [pc, #156]	@ (8002984 <MX_GPIO_Init+0x178>)
 80028e8:	f002 f94a 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4821      	ldr	r0, [pc, #132]	@ (8002988 <MX_GPIO_Init+0x17c>)
 8002904:	f002 f93c 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800290e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f002 f92d 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002926:	2320      	movs	r3, #32
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800292a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800292e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4812      	ldr	r0, [pc, #72]	@ (8002984 <MX_GPIO_Init+0x178>)
 800293c:	f002 f920 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002940:	2340      	movs	r3, #64	@ 0x40
 8002942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	480c      	ldr	r0, [pc, #48]	@ (8002984 <MX_GPIO_Init+0x178>)
 8002954:	f002 f914 	bl	8004b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2017      	movs	r0, #23
 800295e:	f001 fda8 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002962:	2017      	movs	r0, #23
 8002964:	f001 fdbf 	bl	80044e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	2028      	movs	r0, #40	@ 0x28
 800296e:	f001 fda0 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002972:	2028      	movs	r0, #40	@ 0x28
 8002974:	f001 fdb7 	bl	80044e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	@ 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800

0800298c <generate_trapezoidal_velocity_profile>:

/* USER CODE BEGIN 4 */

///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	ed87 0b02 	vstr	d0, [r7, #8]
 8002996:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <generate_trapezoidal_velocity_profile+0xa8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fd9e 	bl	80004e0 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ac:	f7fd fc38 	bl	8000220 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f844 	bl	8000a44 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <generate_trapezoidal_velocity_profile+0xac>)
 80029c0:	6013      	str	r3, [r2, #0]
	total_time = t2;
 80029c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c6:	f7fe f83d 	bl	8000a44 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029ce:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 80029d0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029d2:	ed93 7a00 	vldr	s14, [r3]
 80029d6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80029da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <generate_trapezoidal_velocity_profile+0xb0>)
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <generate_trapezoidal_velocity_profile+0xb8>)
 80029fa:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <generate_trapezoidal_velocity_profile+0xac>)
 8002a00:	edd3 6a00 	vldr	s13, [r3]
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <generate_trapezoidal_velocity_profile+0xb4>)
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <generate_trapezoidal_velocity_profile+0xb8>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <generate_trapezoidal_velocity_profile+0xbc>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]

	HAL_TIM_Base_Start_IT(&htim4);
 8002a1e:	480b      	ldr	r0, [pc, #44]	@ (8002a4c <generate_trapezoidal_velocity_profile+0xc0>)
 8002a20:	f003 fb7c 	bl	800611c <HAL_TIM_Base_Start_IT>

	Mode = 0;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <generate_trapezoidal_velocity_profile+0xc4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]

  }
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000aec 	.word	0x20000aec
 8002a38:	200011b0 	.word	0x200011b0
 8002a3c:	200011b4 	.word	0x200011b4
 8002a40:	200011b8 	.word	0x200011b8
 8002a44:	200011bc 	.word	0x200011bc
 8002a48:	200011c0 	.word	0x200011c0
 8002a4c:	2000049c 	.word	0x2000049c
 8002a50:	200011dc 	.word	0x200011dc
 8002a54:	00000000 	.word	0x00000000

08002a58 <generate_Velocity>:

void generate_Velocity()
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0

		t = (time_op) * i / num_points;
 8002a5e:	4bb4      	ldr	r3, [pc, #720]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f904 	bl	8000c74 <__aeabi_ul2f>
 8002a6c:	ee07 0a10 	vmov	s14, r0
 8002a70:	4bb0      	ldr	r3, [pc, #704]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a7a:	4baf      	ldr	r3, [pc, #700]	@ (8002d38 <generate_Velocity+0x2e0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a8a:	4bac      	ldr	r3, [pc, #688]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002a8c:	edc3 7a00 	vstr	s15, [r3]
		if (t < t_acc) {
 8002a90:	4baa      	ldr	r3, [pc, #680]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4baa      	ldr	r3, [pc, #680]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d510      	bpl.n	8002ac8 <generate_Velocity+0x70>
			velocity = (Peak * (t / t_acc));
 8002aa6:	4ba5      	ldr	r3, [pc, #660]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002aa8:	edd3 6a00 	vldr	s13, [r3]
 8002aac:	4ba4      	ldr	r3, [pc, #656]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4ba3      	ldr	r3, [pc, #652]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
 8002ac6:	e034      	b.n	8002b32 <generate_Velocity+0xda>
		} else if (t >= t_acc && t <+ t_acc + t_const) {
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	4b9c      	ldr	r3, [pc, #624]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	db14      	blt.n	8002b08 <generate_Velocity+0xb0>
 8002ade:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b99      	ldr	r3, [pc, #612]	@ (8002d4c <generate_Velocity+0x2f4>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aee:	4b93      	ldr	r3, [pc, #588]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	dd04      	ble.n	8002b08 <generate_Velocity+0xb0>
			velocity = Peak;
 8002afe:	4b91      	ldr	r3, [pc, #580]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a91      	ldr	r2, [pc, #580]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e014      	b.n	8002b32 <generate_Velocity+0xda>
		} else {
			velocity = (Peak * ((time_op - t) / t_acc));
 8002b08:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d3c <generate_Velocity+0x2e4>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b18:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <generate_Velocity+0x2e8>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <generate_Velocity+0x2ec>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2c:	4b86      	ldr	r3, [pc, #536]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
		}
		position += velocity/1000.0;
 8002b32:	4b87      	ldr	r3, [pc, #540]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcd2 	bl	80004e0 <__aeabi_f2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <generate_Velocity+0x2f0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fccb 	bl	80004e0 <__aeabi_f2d>
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <generate_Velocity+0x2fc>)
 8002b50:	f7fd fe48 	bl	80007e4 <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7fd fb62 	bl	8000224 <__adddf3>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ff6c 	bl	8000a44 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a78      	ldr	r2, [pc, #480]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b70:	6013      	str	r3, [r2, #0]

		position_now = position;
 8002b72:	4b77      	ldr	r3, [pc, #476]	@ (8002d50 <generate_Velocity+0x2f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a78      	ldr	r2, [pc, #480]	@ (8002d58 <generate_Velocity+0x300>)
 8002b78:	6013      	str	r3, [r2, #0]

		Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <generate_Velocity+0x300>)
 8002b7c:	ed93 7a00 	vldr	s14, [r3]
 8002b80:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <generate_Velocity+0x304>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8a:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <generate_Velocity+0x308>)
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bee:	6013      	str	r3, [r2, #0]



		BTempV = Vfeedback;
 8002bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d68 <generate_Velocity+0x310>)
 8002bf6:	6013      	str	r3, [r2, #0]

		VInM = Vfeedback * (24.0/65535.0);
 8002bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d64 <generate_Velocity+0x30c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fc6f 	bl	80004e0 <__aeabi_f2d>
 8002c02:	a347      	add	r3, pc, #284	@ (adr r3, 8002d20 <generate_Velocity+0x2c8>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fcc2 	bl	8000590 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ff16 	bl	8000a44 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <generate_Velocity+0x314>)
 8002c1c:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

		zStop = 0;
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <generate_Velocity+0x318>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		pwmM = Vfeedback * (65535.0/24.0);
 8002c24:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc59 	bl	80004e0 <__aeabi_f2d>
 8002c2e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002d28 <generate_Velocity+0x2d0>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fcac 	bl	8000590 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd feb8 	bl	80009b4 <__aeabi_d2iz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a4b      	ldr	r2, [pc, #300]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c48:	6013      	str	r3, [r2, #0]

		if(Vfeedback >= 0)
 8002c4a:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	db09      	blt.n	8002c6e <generate_Velocity+0x216>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 8002c5a:	4b46      	ldr	r3, [pc, #280]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <generate_Velocity+0x320>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002c64:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <generate_Velocity+0x320>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c6c:	e011      	b.n	8002c92 <generate_Velocity+0x23a>

		}

		else if (Vfeedback < 0)
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <generate_Velocity+0x30c>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	d509      	bpl.n	8002c92 <generate_Velocity+0x23a>
		{

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <generate_Velocity+0x320>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <generate_Velocity+0x31c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	425a      	negs	r2, r3
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <generate_Velocity+0x320>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

		if ( i >= time_op*1000)
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fd ffea 	bl	8000c74 <__aeabi_ul2f>
 8002ca0:	ee06 0a90 	vmov	s13, r0
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <generate_Velocity+0x2dc>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002d7c <generate_Velocity+0x324>
 8002cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	da00      	bge.n	8002cbe <generate_Velocity+0x266>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 8002cbc:	e02b      	b.n	8002d16 <generate_Velocity+0x2be>
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <generate_Velocity+0x328>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Stop_IT(&htim4);
 8002cc6:	482e      	ldr	r0, [pc, #184]	@ (8002d80 <generate_Velocity+0x328>)
 8002cc8:	f003 faa0 	bl	800620c <HAL_TIM_Base_Stop_IT>
			rou += 1;
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <generate_Velocity+0x32c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <generate_Velocity+0x32c>)
 8002cd6:	801a      	strh	r2, [r3, #0]
			i = 0;
 8002cd8:	4915      	ldr	r1, [pc, #84]	@ (8002d30 <generate_Velocity+0x2d8>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9c1 2300 	strd	r2, r3, [r1]
			buf[0] = 2;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <generate_Velocity+0x330>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]
			L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002cec:	2204      	movs	r2, #4
 8002cee:	4927      	ldr	r1, [pc, #156]	@ (8002d8c <generate_Velocity+0x334>)
 8002cf0:	4825      	ldr	r0, [pc, #148]	@ (8002d88 <generate_Velocity+0x330>)
 8002cf2:	f001 f965 	bl	8003fc0 <updateLED>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <generate_Velocity+0x338>)
 8002cfc:	701a      	strb	r2, [r3, #0]
			fin = 1;
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <generate_Velocity+0x33c>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <generate_Velocity+0x320>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <generate_Velocity+0x320>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00180018 	.word	0x00180018
 8002d24:	3f380018 	.word	0x3f380018
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40a55540 	.word	0x40a55540
 8002d30:	200011c8 	.word	0x200011c8
 8002d34:	20000200 	.word	0x20000200
 8002d38:	20000204 	.word	0x20000204
 8002d3c:	200011d0 	.word	0x200011d0
 8002d40:	200011b8 	.word	0x200011b8
 8002d44:	200011c0 	.word	0x200011c0
 8002d48:	200011d4 	.word	0x200011d4
 8002d4c:	200011bc 	.word	0x200011bc
 8002d50:	200011d8 	.word	0x200011d8
 8002d54:	408f4000 	.word	0x408f4000
 8002d58:	200011ac 	.word	0x200011ac
 8002d5c:	20000aec 	.word	0x20000aec
 8002d60:	200011e8 	.word	0x200011e8
 8002d64:	200011e0 	.word	0x200011e0
 8002d68:	2000120c 	.word	0x2000120c
 8002d6c:	200011e4 	.word	0x200011e4
 8002d70:	20000af4 	.word	0x20000af4
 8002d74:	20001210 	.word	0x20001210
 8002d78:	20000238 	.word	0x20000238
 8002d7c:	447a0000 	.word	0x447a0000
 8002d80:	2000049c 	.word	0x2000049c
 8002d84:	20001214 	.word	0x20001214
 8002d88:	20000208 	.word	0x20000208
 8002d8c:	200003d0 	.word	0x200003d0
 8002d90:	20001216 	.word	0x20001216
 8002d94:	20001217 	.word	0x20001217

08002d98 <BaseAction>:

//uint64_t micros()
//{
//return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
//}
void BaseAction(void){
 8002d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d9c:	af00      	add	r7, sp, #0

	  position_goal = setPos/10.0;
 8002d9e:	4ba4      	ldr	r3, [pc, #656]	@ (8003030 <BaseAction+0x298>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fb8a 	bl	80004bc <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4ba1      	ldr	r3, [pc, #644]	@ (8003034 <BaseAction+0x29c>)
 8002dae:	f7fd fd19 	bl	80007e4 <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd fe43 	bl	8000a44 <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a9d      	ldr	r2, [pc, #628]	@ (8003038 <BaseAction+0x2a0>)
 8002dc2:	6013      	str	r3, [r2, #0]
	  if (velocity < 0)
 8002dc4:	4b9d      	ldr	r3, [pc, #628]	@ (800303c <BaseAction+0x2a4>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d508      	bpl.n	8002de6 <BaseAction+0x4e>
	  {
		  linear_velocity = velocity * -1;
 8002dd4:	4b99      	ldr	r3, [pc, #612]	@ (800303c <BaseAction+0x2a4>)
 8002dd6:	edd3 7a00 	vldr	s15, [r3]
 8002dda:	eef1 7a67 	vneg.f32	s15, s15
 8002dde:	4b98      	ldr	r3, [pc, #608]	@ (8003040 <BaseAction+0x2a8>)
 8002de0:	edc3 7a00 	vstr	s15, [r3]
 8002de4:	e00b      	b.n	8002dfe <BaseAction+0x66>
	  }

	  else if (velocity >= 0)
 8002de6:	4b95      	ldr	r3, [pc, #596]	@ (800303c <BaseAction+0x2a4>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	db03      	blt.n	8002dfe <BaseAction+0x66>
	  {
		  linear_velocity = velocity;
 8002df6:	4b91      	ldr	r3, [pc, #580]	@ (800303c <BaseAction+0x2a4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a91      	ldr	r2, [pc, #580]	@ (8003040 <BaseAction+0x2a8>)
 8002dfc:	6013      	str	r3, [r2, #0]
	  }
	  //linear_accel = accerelometer;
	  linear_position = qeifloat-16.0 ;
 8002dfe:	4b91      	ldr	r3, [pc, #580]	@ (8003044 <BaseAction+0x2ac>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8003048 <BaseAction+0x2b0>)
 8002e0e:	edc3 7a00 	vstr	s15, [r3]



	  rState1=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002e12:	2140      	movs	r1, #64	@ 0x40
 8002e14:	488d      	ldr	r0, [pc, #564]	@ (800304c <BaseAction+0x2b4>)
 8002e16:	f002 f835 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b8c      	ldr	r3, [pc, #560]	@ (8003050 <BaseAction+0x2b8>)
 8002e20:	801a      	strh	r2, [r3, #0]
	  rState2=  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002e22:	2180      	movs	r1, #128	@ 0x80
 8002e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e28:	f002 f82c 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b88      	ldr	r3, [pc, #544]	@ (8003054 <BaseAction+0x2bc>)
 8002e32:	801a      	strh	r2, [r3, #0]
	static uint16_t timestamp1 = 0;
	static uint16_t timestamp2 = 0;
	static uint16_t timestamp3 = 0;
	static uint16_t timestamp4 = 0;
	// Vacuum & Gripper
	  vacuum = registerFrame[0x02].U16;
 8002e34:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <BaseAction+0x2c0>)
 8002e36:	889b      	ldrh	r3, [r3, #4]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b88      	ldr	r3, [pc, #544]	@ (800305c <BaseAction+0x2c4>)
 8002e3c:	701a      	strb	r2, [r3, #0]

	  if (vacuum == 1)
 8002e3e:	4b87      	ldr	r3, [pc, #540]	@ (800305c <BaseAction+0x2c4>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d106      	bne.n	8002e54 <BaseAction+0xbc>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e4c:	487f      	ldr	r0, [pc, #508]	@ (800304c <BaseAction+0x2b4>)
 8002e4e:	f002 f831 	bl	8004eb4 <HAL_GPIO_WritePin>
 8002e52:	e005      	b.n	8002e60 <BaseAction+0xc8>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002e54:	2201      	movs	r2, #1
 8002e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e5a:	487c      	ldr	r0, [pc, #496]	@ (800304c <BaseAction+0x2b4>)
 8002e5c:	f002 f82a 	bl	8004eb4 <HAL_GPIO_WritePin>
	  }
	  gripper = registerFrame[0x03].U16;	  //1 forward 0 backward
 8002e60:	4b7d      	ldr	r3, [pc, #500]	@ (8003058 <BaseAction+0x2c0>)
 8002e62:	88db      	ldrh	r3, [r3, #6]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b7e      	ldr	r3, [pc, #504]	@ (8003060 <BaseAction+0x2c8>)
 8002e68:	701a      	strb	r2, [r3, #0]
	  if (gripper ==1){
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003060 <BaseAction+0x2c8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d125      	bne.n	8002ebe <BaseAction+0x126>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e78:	4874      	ldr	r0, [pc, #464]	@ (800304c <BaseAction+0x2b4>)
 8002e7a:	f002 f81b 	bl	8004eb4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2180      	movs	r1, #128	@ 0x80
 8002e82:	4878      	ldr	r0, [pc, #480]	@ (8003064 <BaseAction+0x2cc>)
 8002e84:	f002 f816 	bl	8004eb4 <HAL_GPIO_WritePin>
	  		  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET )
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e8e:	f001 fff9 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d13b      	bne.n	8002f10 <BaseAction+0x178>
 8002e98:	2140      	movs	r1, #64	@ 0x40
 8002e9a:	486c      	ldr	r0, [pc, #432]	@ (800304c <BaseAction+0x2b4>)
 8002e9c:	f001 fff2 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d134      	bne.n	8002f10 <BaseAction+0x178>
	  		  {
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002eac:	4867      	ldr	r0, [pc, #412]	@ (800304c <BaseAction+0x2b4>)
 8002eae:	f002 f801 	bl	8004eb4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	486b      	ldr	r0, [pc, #428]	@ (8003064 <BaseAction+0x2cc>)
 8002eb8:	f001 fffc 	bl	8004eb4 <HAL_GPIO_WritePin>
 8002ebc:	e028      	b.n	8002f10 <BaseAction+0x178>
	  		  }
	  	  }
	  	  else if (gripper == 0){
 8002ebe:	4b68      	ldr	r3, [pc, #416]	@ (8003060 <BaseAction+0x2c8>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d124      	bne.n	8002f10 <BaseAction+0x178>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ecc:	485f      	ldr	r0, [pc, #380]	@ (800304c <BaseAction+0x2b4>)
 8002ece:	f001 fff1 	bl	8004eb4 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0 );
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	@ 0x80
 8002ed6:	4863      	ldr	r0, [pc, #396]	@ (8003064 <BaseAction+0x2cc>)
 8002ed8:	f001 ffec 	bl	8004eb4 <HAL_GPIO_WritePin>
	  		if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET )
 8002edc:	2140      	movs	r1, #64	@ 0x40
 8002ede:	485b      	ldr	r0, [pc, #364]	@ (800304c <BaseAction+0x2b4>)
 8002ee0:	f001 ffd0 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d112      	bne.n	8002f10 <BaseAction+0x178>
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef0:	f001 ffc8 	bl	8004e84 <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <BaseAction+0x178>
	  			  		  {
	  			  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002efa:	2201      	movs	r2, #1
 8002efc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f00:	4852      	ldr	r0, [pc, #328]	@ (800304c <BaseAction+0x2b4>)
 8002f02:	f001 ffd7 	bl	8004eb4 <HAL_GPIO_WritePin>
	  			  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1 );
 8002f06:	2201      	movs	r2, #1
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	4856      	ldr	r0, [pc, #344]	@ (8003064 <BaseAction+0x2cc>)
 8002f0c:	f001 ffd2 	bl	8004eb4 <HAL_GPIO_WritePin>
	  			  		  }
	  	  }

	  reed = rState1 + (2 * rState2); //for 2 back 1
 8002f10:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <BaseAction+0x2b8>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b4f      	ldr	r3, [pc, #316]	@ (8003054 <BaseAction+0x2bc>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <BaseAction+0x2d0>)
 8002f26:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = (reed*2%3);
 8002f28:	4b4f      	ldr	r3, [pc, #316]	@ (8003068 <BaseAction+0x2d0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	005a      	lsls	r2, r3, #1
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800306c <BaseAction+0x2d4>)
 8002f30:	fb83 3102 	smull	r3, r1, r3, r2
 8002f34:	17d3      	asrs	r3, r2, #31
 8002f36:	1ac9      	subs	r1, r1, r3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	1ad1      	subs	r1, r2, r3
 8002f40:	b28a      	uxth	r2, r1
 8002f42:	4b45      	ldr	r3, [pc, #276]	@ (8003058 <BaseAction+0x2c0>)
 8002f44:	811a      	strh	r2, [r3, #8]


	  registerFrame[0x11].U16 = (float)(linear_position * 10); //Position
 8002f46:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <BaseAction+0x2b0>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f58:	ee17 3a90 	vmov	r3, s15
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <BaseAction+0x2c0>)
 8002f60:	845a      	strh	r2, [r3, #34]	@ 0x22
	  registerFrame[0x12].U16 = (float)(linear_velocity * 10); //Velocity
 8002f62:	4b37      	ldr	r3, [pc, #220]	@ (8003040 <BaseAction+0x2a8>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b37      	ldr	r3, [pc, #220]	@ (8003058 <BaseAction+0x2c0>)
 8002f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
	  registerFrame[0x13].U16 = (float)(linear_accel * 10)	; //Acceleration
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <BaseAction+0x2d8>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f90:	ee17 3a90 	vmov	r3, s15
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b30      	ldr	r3, [pc, #192]	@ (8003058 <BaseAction+0x2c0>)
 8002f98:	84da      	strh	r2, [r3, #38]	@ 0x26
	  registerFrame[0x40].U16 = x_pos; // X-axis Position
 8002f9a:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <BaseAction+0x2dc>)
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <BaseAction+0x2c0>)
 8002fa0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	  //heartbeat protocal & debug
	  //registerFrame[0x00].U16 = 22881;
	  if(registerFrame[0x00].U16 != 22881){
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <BaseAction+0x2c0>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <BaseAction+0x220>
		  registerFrame[0x00].U16 = 22881;
 8002fb0:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <BaseAction+0x2c0>)
 8002fb2:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002fb6:	801a      	strh	r2, [r3, #0]
	  }

	  static uint16_t timestamp = 0;

		/////Set shelves
		  if(registerFrame[0x01].U16 == 1) // order mode 1 -> open setshelf
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <BaseAction+0x2c0>)
 8002fba:	885b      	ldrh	r3, [r3, #2]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10e      	bne.n	8002fde <BaseAction+0x246>
		  {
			  registerFrame[0x01].U16 = 0; //change to idle mode
 8002fc0:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <BaseAction+0x2c0>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	805a      	strh	r2, [r3, #2]
			  registerFrame[0x10].U16 = 1; //current state set shelf mode
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <BaseAction+0x2c0>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	841a      	strh	r2, [r3, #32]
//			  set_position_box();



			  //delay 2000ms
			 timestamp = HAL_GetTick()+2000;
 8002fcc:	f001 f968 	bl	80042a0 <HAL_GetTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b27      	ldr	r3, [pc, #156]	@ (8003078 <BaseAction+0x2e0>)
 8002fdc:	801a      	strh	r2, [r3, #0]
		  }
		  if(registerFrame[0x10].U16 == 1 && flagShelf == 1)
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <BaseAction+0x2c0>)
 8002fe0:	8c1b      	ldrh	r3, [r3, #32]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d14e      	bne.n	8003084 <BaseAction+0x2ec>
 8002fe6:	4b25      	ldr	r3, [pc, #148]	@ (800307c <BaseAction+0x2e4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d14a      	bne.n	8003084 <BaseAction+0x2ec>
		  {
			  registerFrame[0x23].U16 = shelfPos[0];
 8002fee:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <BaseAction+0x2e8>)
 8002ff0:	881a      	ldrh	r2, [r3, #0]
 8002ff2:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <BaseAction+0x2c0>)
 8002ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
			  registerFrame[0x24].U16 = shelfPos[1];
 8002ff8:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <BaseAction+0x2e8>)
 8002ffa:	885a      	ldrh	r2, [r3, #2]
 8002ffc:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <BaseAction+0x2c0>)
 8002ffe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
			  registerFrame[0x25].U16 = shelfPos[2];
 8003002:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <BaseAction+0x2e8>)
 8003004:	889a      	ldrh	r2, [r3, #4]
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <BaseAction+0x2c0>)
 8003008:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			  registerFrame[0x26].U16 = shelfPos[3];
 800300c:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <BaseAction+0x2e8>)
 800300e:	88da      	ldrh	r2, [r3, #6]
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <BaseAction+0x2c0>)
 8003012:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			  registerFrame[0x27].U16 = shelfPos[4];
 8003016:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <BaseAction+0x2e8>)
 8003018:	891a      	ldrh	r2, [r3, #8]
 800301a:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <BaseAction+0x2c0>)
 800301c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			  registerFrame[0x10].U16 = 0; //
 8003020:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <BaseAction+0x2c0>)
 8003022:	2200      	movs	r2, #0
 8003024:	841a      	strh	r2, [r3, #32]
			  flagShelf = 0;
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <BaseAction+0x2e4>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	e2c6      	b.n	80035bc <BaseAction+0x824>
 800302e:	bf00      	nop
 8003030:	20001182 	.word	0x20001182
 8003034:	40240000 	.word	0x40240000
 8003038:	200011a8 	.word	0x200011a8
 800303c:	200011d4 	.word	0x200011d4
 8003040:	20000fdc 	.word	0x20000fdc
 8003044:	20000aec 	.word	0x20000aec
 8003048:	20000fe4 	.word	0x20000fe4
 800304c:	48000400 	.word	0x48000400
 8003050:	20000fd8 	.word	0x20000fd8
 8003054:	20000fda 	.word	0x20000fda
 8003058:	20000fe8 	.word	0x20000fe8
 800305c:	20000fd4 	.word	0x20000fd4
 8003060:	20000fd5 	.word	0x20000fd5
 8003064:	48000800 	.word	0x48000800
 8003068:	20000fd6 	.word	0x20000fd6
 800306c:	55555556 	.word	0x55555556
 8003070:	20000fe0 	.word	0x20000fe0
 8003074:	20001184 	.word	0x20001184
 8003078:	20001238 	.word	0x20001238
 800307c:	20000fd0 	.word	0x20000fd0
 8003080:	20001178 	.word	0x20001178
		  }

		///////Home
		  else if((registerFrame[0x01].U16 == 2)) //go to mode 2: Home
 8003084:	4b82      	ldr	r3, [pc, #520]	@ (8003290 <BaseAction+0x4f8>)
 8003086:	885b      	ldrh	r3, [r3, #2]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d11f      	bne.n	80030cc <BaseAction+0x334>
		  	{
		  		(registerFrame[0x01].U16) = 0; //reset status
 800308c:	4b80      	ldr	r3, [pc, #512]	@ (8003290 <BaseAction+0x4f8>)
 800308e:	2200      	movs	r2, #0
 8003090:	805a      	strh	r2, [r3, #2]
		  		(registerFrame[0x10].U16) = 2; //Z-home
 8003092:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <BaseAction+0x4f8>)
 8003094:	2202      	movs	r2, #2
 8003096:	841a      	strh	r2, [r3, #32]

		  		//setPos = shelfPos[0]; // set goal to home
		  		setPos = 160;
 8003098:	4b7e      	ldr	r3, [pc, #504]	@ (8003294 <BaseAction+0x4fc>)
 800309a:	22a0      	movs	r2, #160	@ 0xa0
 800309c:	801a      	strh	r2, [r3, #0]
		  		piingpong = 0;
 800309e:	4b7e      	ldr	r3, [pc, #504]	@ (8003298 <BaseAction+0x500>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	801a      	strh	r2, [r3, #0]
//		  		  uint8_t result = HomeZ();
//		  		  HAL_Delay(2000);
		  		  generate_trapezoidal_velocity_profile(time_op,16.0);
 80030a4:	4b7d      	ldr	r3, [pc, #500]	@ (800329c <BaseAction+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa19 	bl	80004e0 <__aeabi_f2d>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8003288 <BaseAction+0x4f0>
 80030b6:	ec43 2b10 	vmov	d0, r2, r3
 80030ba:	f7ff fc67 	bl	800298c <generate_trapezoidal_velocity_profile>
		  		  Home = 0;
 80030be:	4b78      	ldr	r3, [pc, #480]	@ (80032a0 <BaseAction+0x508>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]
		  		  rou = 0;
 80030c4:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <BaseAction+0x50c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
				{
					registerFrame[0x10].U16 = 0; // finish point & home mode
					rnd2 = 0;
				}
			}
	}
 80030ca:	e277      	b.n	80035bc <BaseAction+0x824>
			else if((registerFrame[0x01].U16) == 8)
 80030cc:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <BaseAction+0x4f8>)
 80030ce:	885b      	ldrh	r3, [r3, #2]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d138      	bne.n	8003146 <BaseAction+0x3ae>
				(registerFrame[0x01].U16) = 0; //reset status
 80030d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003290 <BaseAction+0x4f8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	805a      	strh	r2, [r3, #2]
				(registerFrame[0x10].U16) = 16; // Z-go point
 80030da:	4b6d      	ldr	r3, [pc, #436]	@ (8003290 <BaseAction+0x4f8>)
 80030dc:	2210      	movs	r2, #16
 80030de:	841a      	strh	r2, [r3, #32]
				setPos = ((registerFrame[0x30].U16)/10.0)+16.0; // goal = point 30->base system 4 point mode
 80030e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003290 <BaseAction+0x4f8>)
 80030e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9e8 	bl	80004bc <__aeabi_i2d>
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4b6d      	ldr	r3, [pc, #436]	@ (80032a8 <BaseAction+0x510>)
 80030f2:	f7fd fb77 	bl	80007e4 <__aeabi_ddiv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <BaseAction+0x514>)
 8003104:	f7fd f88e 	bl	8000224 <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fc78 	bl	8000a04 <__aeabi_d2uiz>
 8003114:	4603      	mov	r3, r0
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <BaseAction+0x4fc>)
 800311a:	801a      	strh	r2, [r3, #0]
				generate_trapezoidal_velocity_profile(time_op,setPos);
 800311c:	4b5f      	ldr	r3, [pc, #380]	@ (800329c <BaseAction+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f9dd 	bl	80004e0 <__aeabi_f2d>
 8003126:	4604      	mov	r4, r0
 8003128:	460d      	mov	r5, r1
 800312a:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <BaseAction+0x4fc>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f9b4 	bl	800049c <__aeabi_ui2d>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	ec43 2b11 	vmov	d1, r2, r3
 800313c:	ec45 4b10 	vmov	d0, r4, r5
 8003140:	f7ff fc24 	bl	800298c <generate_trapezoidal_velocity_profile>
	}
 8003144:	e23a      	b.n	80035bc <BaseAction+0x824>
			else if((registerFrame[0x01].U16 ==4)){
 8003146:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <BaseAction+0x4f8>)
 8003148:	885b      	ldrh	r3, [r3, #2]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d10f      	bne.n	800316e <BaseAction+0x3d6>
				(registerFrame[0x01].U16) = 0; //reset status
 800314e:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <BaseAction+0x4f8>)
 8003150:	2200      	movs	r2, #0
 8003152:	805a      	strh	r2, [r3, #2]
				temPick = (registerFrame[0x21].U16);
 8003154:	4b4e      	ldr	r3, [pc, #312]	@ (8003290 <BaseAction+0x4f8>)
 8003156:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800315a:	4b55      	ldr	r3, [pc, #340]	@ (80032b0 <BaseAction+0x518>)
 800315c:	801a      	strh	r2, [r3, #0]
				temPlace = (registerFrame[0x22].U16);
 800315e:	4b4c      	ldr	r3, [pc, #304]	@ (8003290 <BaseAction+0x4f8>)
 8003160:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003164:	4b53      	ldr	r3, [pc, #332]	@ (80032b4 <BaseAction+0x51c>)
 8003166:	801a      	strh	r2, [r3, #0]
				OrderSeparate();
 8003168:	f000 fa34 	bl	80035d4 <OrderSeparate>
	}
 800316c:	e226      	b.n	80035bc <BaseAction+0x824>
			else if(rnd > 0)
 800316e:	4b52      	ldr	r3, [pc, #328]	@ (80032b8 <BaseAction+0x520>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 81c2 	beq.w	80034fc <BaseAction+0x764>
			if(registerFrame[0x10].U16 == 0 && rnd== 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 8003178:	4b45      	ldr	r3, [pc, #276]	@ (8003290 <BaseAction+0x4f8>)
 800317a:	8c1b      	ldrh	r3, [r3, #32]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d122      	bne.n	80031c6 <BaseAction+0x42e>
 8003180:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <BaseAction+0x520>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d11e      	bne.n	80031c6 <BaseAction+0x42e>
 8003188:	4b4c      	ldr	r3, [pc, #304]	@ (80032bc <BaseAction+0x524>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11a      	bne.n	80031c6 <BaseAction+0x42e>
 8003190:	4b4b      	ldr	r3, [pc, #300]	@ (80032c0 <BaseAction+0x528>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d116      	bne.n	80031c6 <BaseAction+0x42e>
 8003198:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <BaseAction+0x52c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <BaseAction+0x42e>
				mode = 9; // for debug - pick
 80031a0:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <BaseAction+0x530>)
 80031a2:	2209      	movs	r2, #9
 80031a4:	701a      	strb	r2, [r3, #0]
				(registerFrame[0x10].U16) = 4; // Z-go pick
 80031a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <BaseAction+0x4f8>)
 80031a8:	2204      	movs	r2, #4
 80031aa:	841a      	strh	r2, [r3, #32]
				setPos = shelfPos[pick[5-rnd]-1];
 80031ac:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <BaseAction+0x520>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f1c3 0305 	rsb	r3, r3, #5
 80031b4:	4a45      	ldr	r2, [pc, #276]	@ (80032cc <BaseAction+0x534>)
 80031b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	4a44      	ldr	r2, [pc, #272]	@ (80032d0 <BaseAction+0x538>)
 80031be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <BaseAction+0x4fc>)
 80031c4:	801a      	strh	r2, [r3, #0]
			if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: pick, do place
 80031c6:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <BaseAction+0x500>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80de 	beq.w	800338c <BaseAction+0x5f4>
 80031d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003290 <BaseAction+0x4f8>)
 80031d2:	8c1b      	ldrh	r3, [r3, #32]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	f040 80d9 	bne.w	800338c <BaseAction+0x5f4>
				if(mode == 6){
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <BaseAction+0x530>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d10b      	bne.n	80031fa <BaseAction+0x462>
					timestamp1 = HAL_GetTick() + 300; // 0.5 sec delay
 80031e2:	f001 f85d 	bl	80042a0 <HAL_GetTick>
 80031e6:	4603      	mov	r3, r0
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <BaseAction+0x53c>)
 80031f2:	801a      	strh	r2, [r3, #0]
					mode = 60;
 80031f4:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <BaseAction+0x530>)
 80031f6:	223c      	movs	r2, #60	@ 0x3c
 80031f8:	701a      	strb	r2, [r3, #0]
				if(reed != 2 && rnd> 0 && vacuum == 1 && gripper == 0 && HAL_GetTick() >= timestamp1){
 80031fa:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <BaseAction+0x528>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d021      	beq.n	8003246 <BaseAction+0x4ae>
 8003202:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <BaseAction+0x520>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01d      	beq.n	8003246 <BaseAction+0x4ae>
 800320a:	4b2e      	ldr	r3, [pc, #184]	@ (80032c4 <BaseAction+0x52c>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <BaseAction+0x4ae>
 8003212:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <BaseAction+0x524>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d115      	bne.n	8003246 <BaseAction+0x4ae>
 800321a:	f001 f841 	bl	80042a0 <HAL_GetTick>
 800321e:	4603      	mov	r3, r0
 8003220:	4a2c      	ldr	r2, [pc, #176]	@ (80032d4 <BaseAction+0x53c>)
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	4293      	cmp	r3, r2
 8003226:	d30e      	bcc.n	8003246 <BaseAction+0x4ae>
					registerFrame[0x03].U16 = 1; // gripper forward
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <BaseAction+0x4f8>)
 800322a:	2201      	movs	r2, #1
 800322c:	80da      	strh	r2, [r3, #6]
					timestamp2 = HAL_GetTick() + 100;
 800322e:	f001 f837 	bl	80042a0 <HAL_GetTick>
 8003232:	4603      	mov	r3, r0
 8003234:	b29b      	uxth	r3, r3
 8003236:	3364      	adds	r3, #100	@ 0x64
 8003238:	b29a      	uxth	r2, r3
 800323a:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <BaseAction+0x540>)
 800323c:	801a      	strh	r2, [r3, #0]
					mode = 61;
 800323e:	4b22      	ldr	r3, [pc, #136]	@ (80032c8 <BaseAction+0x530>)
 8003240:	223d      	movs	r2, #61	@ 0x3d
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e06c      	b.n	8003320 <BaseAction+0x588>
				else if(reed == 2 && vacuum == 1 && HAL_GetTick() >= timestamp2)//reached reed vacuum not off
 8003246:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <BaseAction+0x528>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d148      	bne.n	80032e0 <BaseAction+0x548>
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <BaseAction+0x52c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d144      	bne.n	80032e0 <BaseAction+0x548>
 8003256:	f001 f823 	bl	80042a0 <HAL_GetTick>
 800325a:	4603      	mov	r3, r0
 800325c:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <BaseAction+0x540>)
 800325e:	8812      	ldrh	r2, [r2, #0]
 8003260:	4293      	cmp	r3, r2
 8003262:	d33d      	bcc.n	80032e0 <BaseAction+0x548>
					registerFrame[0x02].U16 = 0; //vacuum off
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <BaseAction+0x4f8>)
 8003266:	2200      	movs	r2, #0
 8003268:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 100; // 0.5 sec delay
 800326a:	f001 f819 	bl	80042a0 <HAL_GetTick>
 800326e:	4603      	mov	r3, r0
 8003270:	b29b      	uxth	r3, r3
 8003272:	3364      	adds	r3, #100	@ 0x64
 8003274:	b29a      	uxth	r2, r3
 8003276:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <BaseAction+0x544>)
 8003278:	801a      	strh	r2, [r3, #0]
					mode = 62;
 800327a:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <BaseAction+0x530>)
 800327c:	223e      	movs	r2, #62	@ 0x3e
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e04e      	b.n	8003320 <BaseAction+0x588>
 8003282:	bf00      	nop
 8003284:	f3af 8000 	nop.w
 8003288:	00000000 	.word	0x00000000
 800328c:	40300000 	.word	0x40300000
 8003290:	20000fe8 	.word	0x20000fe8
 8003294:	20001182 	.word	0x20001182
 8003298:	20000fd2 	.word	0x20000fd2
 800329c:	20000200 	.word	0x20000200
 80032a0:	200011de 	.word	0x200011de
 80032a4:	20001214 	.word	0x20001214
 80032a8:	40240000 	.word	0x40240000
 80032ac:	40300000 	.word	0x40300000
 80032b0:	20001188 	.word	0x20001188
 80032b4:	2000118a 	.word	0x2000118a
 80032b8:	200011a2 	.word	0x200011a2
 80032bc:	20000fd5 	.word	0x20000fd5
 80032c0:	20000fd6 	.word	0x20000fd6
 80032c4:	20000fd4 	.word	0x20000fd4
 80032c8:	20001186 	.word	0x20001186
 80032cc:	2000118c 	.word	0x2000118c
 80032d0:	20001178 	.word	0x20001178
 80032d4:	2000123a 	.word	0x2000123a
 80032d8:	2000123c 	.word	0x2000123c
 80032dc:	2000123e 	.word	0x2000123e
				else if(vacuum == 0 && gripper == 1 && HAL_GetTick() >= timestamp3)
 80032e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003514 <BaseAction+0x77c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11b      	bne.n	8003320 <BaseAction+0x588>
 80032e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003518 <BaseAction+0x780>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d117      	bne.n	8003320 <BaseAction+0x588>
 80032f0:	f000 ffd6 	bl	80042a0 <HAL_GetTick>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a89      	ldr	r2, [pc, #548]	@ (800351c <BaseAction+0x784>)
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d310      	bcc.n	8003320 <BaseAction+0x588>
					registerFrame[0x03].U16 = 0; //gripper backward
 80032fe:	4b88      	ldr	r3, [pc, #544]	@ (8003520 <BaseAction+0x788>)
 8003300:	2200      	movs	r2, #0
 8003302:	80da      	strh	r2, [r3, #6]
					load = 0;
 8003304:	4b87      	ldr	r3, [pc, #540]	@ (8003524 <BaseAction+0x78c>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 100;
 800330a:	f000 ffc9 	bl	80042a0 <HAL_GetTick>
 800330e:	4603      	mov	r3, r0
 8003310:	b29b      	uxth	r3, r3
 8003312:	3364      	adds	r3, #100	@ 0x64
 8003314:	b29a      	uxth	r2, r3
 8003316:	4b84      	ldr	r3, [pc, #528]	@ (8003528 <BaseAction+0x790>)
 8003318:	801a      	strh	r2, [r3, #0]
					mode = 63;
 800331a:	4b84      	ldr	r3, [pc, #528]	@ (800352c <BaseAction+0x794>)
 800331c:	223f      	movs	r2, #63	@ 0x3f
 800331e:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 8003320:	4b7d      	ldr	r3, [pc, #500]	@ (8003518 <BaseAction+0x780>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 8148 	bne.w	80035ba <BaseAction+0x822>
 800332a:	4b81      	ldr	r3, [pc, #516]	@ (8003530 <BaseAction+0x798>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	f040 8143 	bne.w	80035ba <BaseAction+0x822>
 8003334:	4b77      	ldr	r3, [pc, #476]	@ (8003514 <BaseAction+0x77c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 813e 	bne.w	80035ba <BaseAction+0x822>
 800333e:	f000 ffaf 	bl	80042a0 <HAL_GetTick>
 8003342:	4603      	mov	r3, r0
 8003344:	4a78      	ldr	r2, [pc, #480]	@ (8003528 <BaseAction+0x790>)
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	4293      	cmp	r3, r2
 800334a:	f0c0 8136 	bcc.w	80035ba <BaseAction+0x822>
					rnd--;
 800334e:	4b79      	ldr	r3, [pc, #484]	@ (8003534 <BaseAction+0x79c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3b01      	subs	r3, #1
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b77      	ldr	r3, [pc, #476]	@ (8003534 <BaseAction+0x79c>)
 8003358:	701a      	strb	r2, [r3, #0]
					if(rnd>0)
 800335a:	4b76      	ldr	r3, [pc, #472]	@ (8003534 <BaseAction+0x79c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 812b 	beq.w	80035ba <BaseAction+0x822>
						(registerFrame[0x10].U16) = 4; // Z-go pick
 8003364:	4b6e      	ldr	r3, [pc, #440]	@ (8003520 <BaseAction+0x788>)
 8003366:	2204      	movs	r2, #4
 8003368:	841a      	strh	r2, [r3, #32]
						setPos = shelfPos[pick[5-rnd]-1];
 800336a:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <BaseAction+0x79c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	f1c3 0305 	rsb	r3, r3, #5
 8003372:	4a71      	ldr	r2, [pc, #452]	@ (8003538 <BaseAction+0x7a0>)
 8003374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003378:	3b01      	subs	r3, #1
 800337a:	4a70      	ldr	r2, [pc, #448]	@ (800353c <BaseAction+0x7a4>)
 800337c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003380:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <BaseAction+0x7a8>)
 8003382:	801a      	strh	r2, [r3, #0]
						mode = 9;
 8003384:	4b69      	ldr	r3, [pc, #420]	@ (800352c <BaseAction+0x794>)
 8003386:	2209      	movs	r2, #9
 8003388:	701a      	strb	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 800338a:	e116      	b.n	80035ba <BaseAction+0x822>
			else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: place, do pick
 800338c:	4b6d      	ldr	r3, [pc, #436]	@ (8003544 <BaseAction+0x7ac>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8113 	beq.w	80035bc <BaseAction+0x824>
 8003396:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <BaseAction+0x788>)
 8003398:	8c1b      	ldrh	r3, [r3, #32]
 800339a:	2b04      	cmp	r3, #4
 800339c:	f040 810e 	bne.w	80035bc <BaseAction+0x824>
				if(mode == 9){
 80033a0:	4b62      	ldr	r3, [pc, #392]	@ (800352c <BaseAction+0x794>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d107      	bne.n	80033b8 <BaseAction+0x620>
					timestamp1 = HAL_GetTick() + 50; // 0.05 sec delay
 80033a8:	f000 ff7a 	bl	80042a0 <HAL_GetTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3332      	adds	r3, #50	@ 0x32
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <BaseAction+0x7b0>)
 80033b6:	801a      	strh	r2, [r3, #0]
				if(reed == 1 && gripper == 0 && vacuum == 0 && HAL_GetTick() >= timestamp1)
 80033b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003530 <BaseAction+0x798>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d11d      	bne.n	80033fc <BaseAction+0x664>
 80033c0:	4b55      	ldr	r3, [pc, #340]	@ (8003518 <BaseAction+0x780>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d119      	bne.n	80033fc <BaseAction+0x664>
 80033c8:	4b52      	ldr	r3, [pc, #328]	@ (8003514 <BaseAction+0x77c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <BaseAction+0x664>
 80033d0:	f000 ff66 	bl	80042a0 <HAL_GetTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003548 <BaseAction+0x7b0>)
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	4293      	cmp	r3, r2
 80033dc:	d30e      	bcc.n	80033fc <BaseAction+0x664>
					registerFrame[0x02].U16 = 1; //vacuum on
 80033de:	4b50      	ldr	r3, [pc, #320]	@ (8003520 <BaseAction+0x788>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	809a      	strh	r2, [r3, #4]
					timestamp2 = HAL_GetTick() + 100;
 80033e4:	f000 ff5c 	bl	80042a0 <HAL_GetTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3364      	adds	r3, #100	@ 0x64
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b56      	ldr	r3, [pc, #344]	@ (800354c <BaseAction+0x7b4>)
 80033f2:	801a      	strh	r2, [r3, #0]
					registerFrame[0x03].U16 = 1; //gripper forward
 80033f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <BaseAction+0x788>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	80da      	strh	r2, [r3, #6]
 80033fa:	e03c      	b.n	8003476 <BaseAction+0x6de>
				else if(gripper == 1 && vacuum == 0 && HAL_GetTick() >= timestamp2) //if vacuum off
 80033fc:	4b46      	ldr	r3, [pc, #280]	@ (8003518 <BaseAction+0x780>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d117      	bne.n	8003434 <BaseAction+0x69c>
 8003404:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <BaseAction+0x77c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <BaseAction+0x69c>
 800340c:	f000 ff48 	bl	80042a0 <HAL_GetTick>
 8003410:	4603      	mov	r3, r0
 8003412:	4a4e      	ldr	r2, [pc, #312]	@ (800354c <BaseAction+0x7b4>)
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	4293      	cmp	r3, r2
 8003418:	d30c      	bcc.n	8003434 <BaseAction+0x69c>
					registerFrame[0x02].U16 = 1; //vacuum on
 800341a:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <BaseAction+0x788>)
 800341c:	2201      	movs	r2, #1
 800341e:	809a      	strh	r2, [r3, #4]
					timestamp3 = HAL_GetTick() + 400;
 8003420:	f000 ff3e 	bl	80042a0 <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
 8003426:	b29b      	uxth	r3, r3
 8003428:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800342c:	b29a      	uxth	r2, r3
 800342e:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <BaseAction+0x784>)
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e020      	b.n	8003476 <BaseAction+0x6de>
				else if(reed == 2 && gripper == 1 && vacuum == 1 && HAL_GetTick() >= timestamp3)
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <BaseAction+0x798>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11c      	bne.n	8003476 <BaseAction+0x6de>
 800343c:	4b36      	ldr	r3, [pc, #216]	@ (8003518 <BaseAction+0x780>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d118      	bne.n	8003476 <BaseAction+0x6de>
 8003444:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <BaseAction+0x77c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d114      	bne.n	8003476 <BaseAction+0x6de>
 800344c:	f000 ff28 	bl	80042a0 <HAL_GetTick>
 8003450:	4603      	mov	r3, r0
 8003452:	4a32      	ldr	r2, [pc, #200]	@ (800351c <BaseAction+0x784>)
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	4293      	cmp	r3, r2
 8003458:	d30d      	bcc.n	8003476 <BaseAction+0x6de>
					registerFrame[0x03].U16 = 0; //gripper backward
 800345a:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <BaseAction+0x788>)
 800345c:	2200      	movs	r2, #0
 800345e:	80da      	strh	r2, [r3, #6]
					load = 1;
 8003460:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <BaseAction+0x78c>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
					timestamp4 = HAL_GetTick() + 200;
 8003466:	f000 ff1b 	bl	80042a0 <HAL_GetTick>
 800346a:	4603      	mov	r3, r0
 800346c:	b29b      	uxth	r3, r3
 800346e:	33c8      	adds	r3, #200	@ 0xc8
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <BaseAction+0x790>)
 8003474:	801a      	strh	r2, [r3, #0]
				if(gripper == 0 && reed == 1 && vacuum == 1 && HAL_GetTick() >= timestamp4)
 8003476:	4b28      	ldr	r3, [pc, #160]	@ (8003518 <BaseAction+0x780>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 809e 	bne.w	80035bc <BaseAction+0x824>
 8003480:	4b2b      	ldr	r3, [pc, #172]	@ (8003530 <BaseAction+0x798>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 8099 	bne.w	80035bc <BaseAction+0x824>
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <BaseAction+0x77c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 8094 	bne.w	80035bc <BaseAction+0x824>
 8003494:	f000 ff04 	bl	80042a0 <HAL_GetTick>
 8003498:	4603      	mov	r3, r0
 800349a:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <BaseAction+0x790>)
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	4293      	cmp	r3, r2
 80034a0:	f0c0 808c 	bcc.w	80035bc <BaseAction+0x824>
					(registerFrame[0x10].U16) = 8; // Z-go place
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <BaseAction+0x788>)
 80034a6:	2208      	movs	r2, #8
 80034a8:	841a      	strh	r2, [r3, #32]
					if(place[5-rnd] == 5){
 80034aa:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <BaseAction+0x79c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f1c3 0305 	rsb	r3, r3, #5
 80034b2:	4a27      	ldr	r2, [pc, #156]	@ (8003550 <BaseAction+0x7b8>)
 80034b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d10f      	bne.n	80034dc <BaseAction+0x744>
						setPos = shelfPos[place[5-rnd]-1] + 50; // goal + 5mm
 80034bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <BaseAction+0x79c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f1c3 0305 	rsb	r3, r3, #5
 80034c4:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <BaseAction+0x7b8>)
 80034c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <BaseAction+0x7a4>)
 80034ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034d2:	3332      	adds	r3, #50	@ 0x32
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <BaseAction+0x7a8>)
 80034d8:	801a      	strh	r2, [r3, #0]
	}
 80034da:	e06f      	b.n	80035bc <BaseAction+0x824>
						setPos = shelfPos[place[5-rnd]-1] + 100; // goal + 5mm
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <BaseAction+0x79c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f1c3 0305 	rsb	r3, r3, #5
 80034e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <BaseAction+0x7b8>)
 80034e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	4a13      	ldr	r2, [pc, #76]	@ (800353c <BaseAction+0x7a4>)
 80034ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f2:	3364      	adds	r3, #100	@ 0x64
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <BaseAction+0x7a8>)
 80034f8:	801a      	strh	r2, [r3, #0]
	}
 80034fa:	e05f      	b.n	80035bc <BaseAction+0x824>
			else if(registerFrame[0x10].U16 == 8 && rnd== 0)
 80034fc:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <BaseAction+0x788>)
 80034fe:	8c1b      	ldrh	r3, [r3, #32]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d127      	bne.n	8003554 <BaseAction+0x7bc>
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <BaseAction+0x79c>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d123      	bne.n	8003554 <BaseAction+0x7bc>
				(registerFrame[0x10].U16 = 0); // End Jogs
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <BaseAction+0x788>)
 800350e:	2200      	movs	r2, #0
 8003510:	841a      	strh	r2, [r3, #32]
 8003512:	e053      	b.n	80035bc <BaseAction+0x824>
 8003514:	20000fd4 	.word	0x20000fd4
 8003518:	20000fd5 	.word	0x20000fd5
 800351c:	2000123e 	.word	0x2000123e
 8003520:	20000fe8 	.word	0x20000fe8
 8003524:	200011a4 	.word	0x200011a4
 8003528:	20001240 	.word	0x20001240
 800352c:	20001186 	.word	0x20001186
 8003530:	20000fd6 	.word	0x20000fd6
 8003534:	200011a2 	.word	0x200011a2
 8003538:	2000118c 	.word	0x2000118c
 800353c:	20001178 	.word	0x20001178
 8003540:	20001182 	.word	0x20001182
 8003544:	20000fd2 	.word	0x20000fd2
 8003548:	2000123a 	.word	0x2000123a
 800354c:	2000123c 	.word	0x2000123c
 8003550:	20001198 	.word	0x20001198
			else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <BaseAction+0x82c>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02f      	beq.n	80035bc <BaseAction+0x824>
 800355c:	4b1a      	ldr	r3, [pc, #104]	@ (80035c8 <BaseAction+0x830>)
 800355e:	8c1b      	ldrh	r3, [r3, #32]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d003      	beq.n	800356c <BaseAction+0x7d4>
 8003564:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <BaseAction+0x830>)
 8003566:	8c1b      	ldrh	r3, [r3, #32]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d127      	bne.n	80035bc <BaseAction+0x824>
				if(rnd2 == 0){
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <BaseAction+0x834>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <BaseAction+0x7fa>
					Timestamp = HAL_GetTick() + 1000; //delay
 8003574:	f000 fe94 	bl	80042a0 <HAL_GetTick>
 8003578:	4603      	mov	r3, r0
 800357a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800357e:	2200      	movs	r2, #0
 8003580:	4698      	mov	r8, r3
 8003582:	4691      	mov	r9, r2
 8003584:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <BaseAction+0x838>)
 8003586:	e9c3 8900 	strd	r8, r9, [r3]
					rnd2 = 1;
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <BaseAction+0x834>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
	}
 8003590:	e014      	b.n	80035bc <BaseAction+0x824>
				else if(HAL_GetTick() >= Timestamp)
 8003592:	f000 fe85 	bl	80042a0 <HAL_GetTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2200      	movs	r2, #0
 800359a:	461c      	mov	r4, r3
 800359c:	4615      	mov	r5, r2
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <BaseAction+0x838>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	4294      	cmp	r4, r2
 80035a6:	eb75 0303 	sbcs.w	r3, r5, r3
 80035aa:	d307      	bcc.n	80035bc <BaseAction+0x824>
					registerFrame[0x10].U16 = 0; // finish point & home mode
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <BaseAction+0x830>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	841a      	strh	r2, [r3, #32]
					rnd2 = 0;
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <BaseAction+0x834>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
	}
 80035b8:	e000      	b.n	80035bc <BaseAction+0x824>
				if(gripper == 0 && reed == 1 && vacuum == 0 && HAL_GetTick() >= timestamp4)
 80035ba:	bf00      	nop
	}
 80035bc:	bf00      	nop
 80035be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035c2:	bf00      	nop
 80035c4:	20000fd2 	.word	0x20000fd2
 80035c8:	20000fe8 	.word	0x20000fe8
 80035cc:	200011a3 	.word	0x200011a3
 80035d0:	20001248 	.word	0x20001248

080035d4 <OrderSeparate>:


void OrderSeparate(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
	rnd = 0;
 80035da:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <OrderSeparate+0xe0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
	////// Convert to string
	for(uint16_t p = 10000;p>=1;p/=10)
 80035e0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80035e4:	80fb      	strh	r3, [r7, #6]
 80035e6:	e05a      	b.n	800369e <OrderSeparate+0xca>
	{
		if(temPick/p <= 0 || temPick/p > 5 || temPlace/p <= 0 || temPlace/p > 5) // check if 0 or > 5
 80035e8:	4b33      	ldr	r3, [pc, #204]	@ (80036b8 <OrderSeparate+0xe4>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d814      	bhi.n	800361c <OrderSeparate+0x48>
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <OrderSeparate+0xe4>)
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d80c      	bhi.n	800361c <OrderSeparate+0x48>
 8003602:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <OrderSeparate+0xe8>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	429a      	cmp	r2, r3
 800360a:	d807      	bhi.n	800361c <OrderSeparate+0x48>
 800360c:	4b2b      	ldr	r3, [pc, #172]	@ (80036bc <OrderSeparate+0xe8>)
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b05      	cmp	r3, #5
 800361a:	d903      	bls.n	8003624 <OrderSeparate+0x50>
		{
			rnd = 0;
 800361c:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <OrderSeparate+0xe0>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
			//mode = 0;
			break;
 8003622:	e040      	b.n	80036a6 <OrderSeparate+0xd2>
		}
		pick[rnd] = temPick/p; // use this for pick
 8003624:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <OrderSeparate+0xe4>)
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <OrderSeparate+0xe0>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4619      	mov	r1, r3
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	b29a      	uxth	r2, r3
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <OrderSeparate+0xec>)
 8003638:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		place[rnd] = temPlace/p; // use this for place
 800363c:	4b1f      	ldr	r3, [pc, #124]	@ (80036bc <OrderSeparate+0xe8>)
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <OrderSeparate+0xe0>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	b29a      	uxth	r2, r3
 800364e:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <OrderSeparate+0xf0>)
 8003650:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		temPick = temPick%p;
 8003654:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <OrderSeparate+0xe4>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	fbb3 f1f2 	udiv	r1, r3, r2
 800365e:	fb01 f202 	mul.w	r2, r1, r2
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	b29a      	uxth	r2, r3
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <OrderSeparate+0xe4>)
 8003668:	801a      	strh	r2, [r3, #0]
		temPlace = temPlace%p;
 800366a:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <OrderSeparate+0xe8>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	fbb3 f1f2 	udiv	r1, r3, r2
 8003674:	fb01 f202 	mul.w	r2, r1, r2
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <OrderSeparate+0xe8>)
 800367e:	801a      	strh	r2, [r3, #0]
		rnd++;
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <OrderSeparate+0xe0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <OrderSeparate+0xe0>)
 800368a:	701a      	strb	r2, [r3, #0]
		rou = 20;
 800368c:	4b0e      	ldr	r3, [pc, #56]	@ (80036c8 <OrderSeparate+0xf4>)
 800368e:	2214      	movs	r2, #20
 8003690:	801a      	strh	r2, [r3, #0]
	for(uint16_t p = 10000;p>=1;p/=10)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <OrderSeparate+0xf8>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	08db      	lsrs	r3, r3, #3
 800369c:	80fb      	strh	r3, [r7, #6]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1a1      	bne.n	80035e8 <OrderSeparate+0x14>
	}
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	200011a2 	.word	0x200011a2
 80036b8:	20001188 	.word	0x20001188
 80036bc:	2000118a 	.word	0x2000118a
 80036c0:	2000118c 	.word	0x2000118c
 80036c4:	20001198 	.word	0x20001198
 80036c8:	20001214 	.word	0x20001214
 80036cc:	cccccccd 	.word	0xcccccccd

080036d0 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 80036dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <serviceMotor+0x48>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
	if(dir){
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 80036e8:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <serviceMotor+0x4c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <serviceMotor+0x4c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 80036f8:	e007      	b.n	800370a <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036fa:	4b08      	ldr	r3, [pc, #32]	@ (800371c <serviceMotor+0x4c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <serviceMotor+0x4c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000af4 	.word	0x20000af4
 800371c:	20000238 	.word	0x20000238

08003720 <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	return zStop;
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <getZStop+0x14>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	20000af4 	.word	0x20000af4

08003738 <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_EXTI_Callback+0x18>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	d117      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x48>
 8003750:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_GPIO_EXTI_Callback+0x54>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d112      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x48>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_GPIO_EXTI_Callback+0x58>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003762:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_GPIO_EXTI_Callback+0x58>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_GPIO_EXTI_Callback+0x54>)
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003770:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24
		qeifloat = 0;
 8003778:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <HAL_GPIO_EXTI_Callback+0x60>)
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
	}

}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000af4 	.word	0x20000af4
 8003790:	20000238 	.word	0x20000238
 8003794:	20000304 	.word	0x20000304
 8003798:	20000aec 	.word	0x20000aec

0800379c <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80037ae:	2104      	movs	r1, #4
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80037b2:	f003 f907 	bl	80069c4 <HAL_TIM_PWM_Stop_DMA>
	}

}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40000400 	.word	0x40000400
 80037c4:	200003d0 	.word	0x200003d0

080037c8 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80037c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a16      	ldr	r2, [pc, #88]	@ (8003830 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d104      	bne.n	80037e4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80037dc:	f645 1261 	movw	r2, #22881	@ 0x5961
 80037e0:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 80037e2:	e01f      	b.n	8003824 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim4)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a14      	ldr	r2, [pc, #80]	@ (8003838 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10c      	bne.n	8003806 <HAL_TIM_PeriodElapsedCallback+0x3e>
		i+=1;
 80037ec:	4b13      	ldr	r3, [pc, #76]	@ (800383c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f112 0801 	adds.w	r8, r2, #1
 80037f6:	f143 0900 	adc.w	r9, r3, #0
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80037fc:	e9c3 8900 	strd	r8, r9, [r3]
		generate_Velocity();
 8003800:	f7ff f92a 	bl	8002a58 <generate_Velocity>
}
 8003804:	e00e      	b.n	8003824 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim7)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10a      	bne.n	8003824 <HAL_TIM_PeriodElapsedCallback+0x5c>
	_micros += UINT16_MAX;
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003818:	1854      	adds	r4, r2, r1
 800381a:	f143 0500 	adc.w	r5, r3, #0
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003820:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800382e:	bf00      	nop
 8003830:	20000568 	.word	0x20000568
 8003834:	20000fe8 	.word	0x20000fe8
 8003838:	2000049c 	.word	0x2000049c
 800383c:	200011c8 	.word	0x200011c8
 8003840:	20000634 	.word	0x20000634
 8003844:	20001228 	.word	0x20001228

08003848 <micros>:

uint64_t micros()
{
 8003848:	b4b0      	push	{r4, r5, r7}
 800384a:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <micros+0x2c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2200      	movs	r2, #0
 8003854:	4618      	mov	r0, r3
 8003856:	4611      	mov	r1, r2
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <micros+0x30>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	1884      	adds	r4, r0, r2
 8003860:	eb41 0503 	adc.w	r5, r1, r3
 8003864:	4622      	mov	r2, r4
 8003866:	462b      	mov	r3, r5
}
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	bcb0      	pop	{r4, r5, r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000634 	.word	0x20000634
 8003878:	20001228 	.word	0x20001228

0800387c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
}
 8003882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <Error_Handler+0x8>

08003888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_MspInit+0x44>)
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_MspInit+0x44>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6613      	str	r3, [r2, #96]	@ 0x60
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_MspInit+0x44>)
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <HAL_MspInit+0x44>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <HAL_MspInit+0x44>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_MspInit+0x44>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80038be:	f001 fbcd 	bl	800505c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	@ 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a72      	ldr	r2, [pc, #456]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x1e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d139      	bne.n	8003966 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038f2:	4b72      	ldr	r3, [pc, #456]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	4a71      	ldr	r2, [pc, #452]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 80038f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80038fe:	4b6f      	ldr	r3, [pc, #444]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	4b6c      	ldr	r3, [pc, #432]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	4a6b      	ldr	r2, [pc, #428]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003916:	4b69      	ldr	r3, [pc, #420]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003922:	2340      	movs	r3, #64	@ 0x40
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003926:	2312      	movs	r3, #18
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	2301      	movs	r3, #1
 800392c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003932:	2306      	movs	r3, #6
 8003934:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003940:	f001 f91e 	bl	8004b80 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2018      	movs	r0, #24
 800394a:	f000 fdb2 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800394e:	2018      	movs	r0, #24
 8003950:	f000 fdc9 	bl	80044e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2019      	movs	r0, #25
 800395a:	f000 fdaa 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800395e:	2019      	movs	r0, #25
 8003960:	f000 fdc1 	bl	80044e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003964:	e0a3      	b.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a55      	ldr	r2, [pc, #340]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x1f0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d137      	bne.n	80039e0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003970:	4b52      	ldr	r3, [pc, #328]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	4a51      	ldr	r2, [pc, #324]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	6593      	str	r3, [r2, #88]	@ 0x58
 800397c:	4b4f      	ldr	r3, [pc, #316]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8003988:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 800398a:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac8 <HAL_TIM_Base_MspInit+0x1f8>)
 800398c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800398e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003990:	223e      	movs	r2, #62	@ 0x3e
 8003992:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003994:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 8003996:	2210      	movs	r2, #16
 8003998:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800399a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80039a0:	4b48      	ldr	r3, [pc, #288]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039a2:	2280      	movs	r2, #128	@ 0x80
 80039a4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039a6:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ac:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039ae:	4b45      	ldr	r3, [pc, #276]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80039b6:	4b43      	ldr	r3, [pc, #268]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80039bc:	4b41      	ldr	r3, [pc, #260]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80039c2:	4840      	ldr	r0, [pc, #256]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039c4:	f000 fdaa 	bl	800451c <HAL_DMA_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 80039ce:	f7ff ff55 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039d8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x1f4>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80039de:	e066      	b.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <HAL_TIM_Base_MspInit+0x1fc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d114      	bne.n	8003a14 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039ea:	4b34      	ldr	r3, [pc, #208]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	4a33      	ldr	r2, [pc, #204]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f6:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2100      	movs	r1, #0
 8003a06:	201e      	movs	r0, #30
 8003a08:	f000 fd53 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a0c:	201e      	movs	r0, #30
 8003a0e:	f000 fd6a 	bl	80044e6 <HAL_NVIC_EnableIRQ>
}
 8003a12:	e04c      	b.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <HAL_TIM_Base_MspInit+0x200>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d114      	bne.n	8003a48 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a1e:	4b27      	ldr	r3, [pc, #156]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	4a26      	ldr	r2, [pc, #152]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2a:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2032      	movs	r0, #50	@ 0x32
 8003a3c:	f000 fd39 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a40:	2032      	movs	r0, #50	@ 0x32
 8003a42:	f000 fd50 	bl	80044e6 <HAL_NVIC_EnableIRQ>
}
 8003a46:	e032      	b.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <HAL_TIM_Base_MspInit+0x204>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d114      	bne.n	8003a7c <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a52:	4b1a      	ldr	r3, [pc, #104]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2037      	movs	r0, #55	@ 0x37
 8003a70:	f000 fd1f 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003a74:	2037      	movs	r0, #55	@ 0x37
 8003a76:	f000 fd36 	bl	80044e6 <HAL_NVIC_EnableIRQ>
}
 8003a7a:	e018      	b.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <HAL_TIM_Base_MspInit+0x208>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d113      	bne.n	8003aae <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a92:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <HAL_TIM_Base_MspInit+0x1ec>)
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2019      	movs	r0, #25
 8003aa4:	f000 fd05 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003aa8:	2019      	movs	r0, #25
 8003aaa:	f000 fd1c 	bl	80044e6 <HAL_NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3738      	adds	r7, #56	@ 0x38
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	200007cc 	.word	0x200007cc
 8003ac8:	40020030 	.word	0x40020030
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40001400 	.word	0x40001400
 8003ad8:	40014400 	.word	0x40014400

08003adc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afc:	d128      	bne.n	8003b50 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0a:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003b2e:	2322      	movs	r3, #34	@ 0x22
 8003b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b4c:	f001 f818 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b50:	bf00      	nop
 8003b52:	3728      	adds	r7, #40	@ 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	@ 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <HAL_TIM_MspPostInit+0xac>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d11e      	bne.n	8003bbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b82:	4a22      	ldr	r2, [pc, #136]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8a:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003ba8:	2306      	movs	r3, #6
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bb6:	f000 ffe3 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bba:	e021      	b.n	8003c00 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <HAL_TIM_MspPostInit+0xb4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d11c      	bne.n	8003c00 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	4a10      	ldr	r2, [pc, #64]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <HAL_TIM_MspPostInit+0xb0>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bde:	2310      	movs	r3, #16
 8003be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bfc:	f000 ffc0 	bl	8004b80 <HAL_GPIO_Init>
}
 8003c00:	bf00      	nop
 8003c02:	3728      	adds	r7, #40	@ 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40000400 	.word	0x40000400

08003c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0a0      	sub	sp, #128	@ 0x80
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c2c:	f107 0318 	add.w	r3, r7, #24
 8003c30:	2254      	movs	r2, #84	@ 0x54
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f006 fe9b 	bl	800a970 <memset>
  if(huart->Instance==USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a80      	ldr	r2, [pc, #512]	@ (8003e40 <HAL_UART_MspInit+0x22c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d161      	bne.n	8003d08 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c44:	2301      	movs	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 ff41 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c5c:	f7ff fe0e 	bl	800387c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c60:	4b78      	ldr	r3, [pc, #480]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	4a77      	ldr	r2, [pc, #476]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c6c:	4b75      	ldr	r3, [pc, #468]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c78:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7c:	4a71      	ldr	r2, [pc, #452]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c84:	4b6f      	ldr	r3, [pc, #444]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c90:	2330      	movs	r3, #48	@ 0x30
 8003c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4867      	ldr	r0, [pc, #412]	@ (8003e48 <HAL_UART_MspInit+0x234>)
 8003cac:	f000 ff68 	bl	8004b80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cb2:	4a67      	ldr	r2, [pc, #412]	@ (8003e50 <HAL_UART_MspInit+0x23c>)
 8003cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003cb6:	4b65      	ldr	r3, [pc, #404]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cb8:	2218      	movs	r2, #24
 8003cba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cbc:	4b63      	ldr	r3, [pc, #396]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cc2:	4b62      	ldr	r3, [pc, #392]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc8:	4b60      	ldr	r3, [pc, #384]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cca:	2280      	movs	r2, #128	@ 0x80
 8003ccc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cce:	4b5f      	ldr	r3, [pc, #380]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003cda:	4b5c      	ldr	r3, [pc, #368]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cdc:	2220      	movs	r2, #32
 8003cde:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ce0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003ce2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ce8:	4858      	ldr	r0, [pc, #352]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cea:	f000 fc17 	bl	800451c <HAL_DMA_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003cf4:	f7ff fdc2 	bl	800387c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a54      	ldr	r2, [pc, #336]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003d00:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <HAL_UART_MspInit+0x238>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d06:	e097      	b.n	8003e38 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a51      	ldr	r2, [pc, #324]	@ (8003e54 <HAL_UART_MspInit+0x240>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f040 8092 	bne.w	8003e38 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fed9 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8003d2c:	f7ff fda6 	bl	800387c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d30:	4b44      	ldr	r3, [pc, #272]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	4a43      	ldr	r2, [pc, #268]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d48:	4b3e      	ldr	r3, [pc, #248]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d54:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <HAL_UART_MspInit+0x230>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d60:	230c      	movs	r3, #12
 8003d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d70:	2307      	movs	r3, #7
 8003d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d7e:	f000 feff 	bl	8004b80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003d82:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003d84:	4a35      	ldr	r2, [pc, #212]	@ (8003e5c <HAL_UART_MspInit+0x248>)
 8003d86:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003d88:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003d8a:	221a      	movs	r2, #26
 8003d8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d8e:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d94:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003d9c:	2280      	movs	r2, #128	@ 0x80
 8003d9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003db2:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003db8:	4827      	ldr	r0, [pc, #156]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003dba:	f000 fbaf 	bl	800451c <HAL_DMA_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003dc4:	f7ff fd5a 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a23      	ldr	r2, [pc, #140]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003dcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003dd0:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_UART_MspInit+0x244>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003dd6:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003dd8:	4a22      	ldr	r2, [pc, #136]	@ (8003e64 <HAL_UART_MspInit+0x250>)
 8003dda:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003ddc:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003dde:	221b      	movs	r2, #27
 8003de0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003de4:	2210      	movs	r2, #16
 8003de6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dee:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dfa:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e06:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e0c:	4814      	ldr	r0, [pc, #80]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003e0e:	f000 fb85 	bl	800451c <HAL_DMA_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003e18:	f7ff fd30 	bl	800387c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003e20:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e22:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <HAL_UART_MspInit+0x24c>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2026      	movs	r0, #38	@ 0x26
 8003e2e:	f000 fb40 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e32:	2026      	movs	r0, #38	@ 0x26
 8003e34:	f000 fb57 	bl	80044e6 <HAL_NVIC_EnableIRQ>
}
 8003e38:	bf00      	nop
 8003e3a:	3780      	adds	r7, #128	@ 0x80
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	48000800 	.word	0x48000800
 8003e4c:	200009c4 	.word	0x200009c4
 8003e50:	4002041c 	.word	0x4002041c
 8003e54:	40004400 	.word	0x40004400
 8003e58:	20000a24 	.word	0x20000a24
 8003e5c:	4002001c 	.word	0x4002001c
 8003e60:	20000a84 	.word	0x20000a84
 8003e64:	40020008 	.word	0x40020008

08003e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <NMI_Handler+0x4>

08003e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <HardFault_Handler+0x4>

08003e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e7c:	bf00      	nop
 8003e7e:	e7fd      	b.n	8003e7c <MemManage_Handler+0x4>

08003e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <BusFault_Handler+0x4>

08003e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <UsageFault_Handler+0x4>

08003e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ebe:	f000 f9dd 	bl	800427c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ecc:	4802      	ldr	r0, [pc, #8]	@ (8003ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8003ece:	f000 fd08 	bl	80048e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000a84 	.word	0x20000a84

08003edc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ee0:	4802      	ldr	r0, [pc, #8]	@ (8003eec <DMA1_Channel2_IRQHandler+0x10>)
 8003ee2:	f000 fcfe 	bl	80048e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000a24 	.word	0x20000a24

08003ef0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ef4:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <DMA1_Channel3_IRQHandler+0x10>)
 8003ef6:	f000 fcf4 	bl	80048e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200007cc 	.word	0x200007cc

08003f04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003f08:	2020      	movs	r0, #32
 8003f0a:	f000 ffeb 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f18:	4802      	ldr	r0, [pc, #8]	@ (8003f24 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003f1a:	f003 f821 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000238 	.word	0x20000238

08003f28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f2c:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003f2e:	f003 f817 	bl	8006f60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003f32:	4803      	ldr	r0, [pc, #12]	@ (8003f40 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003f34:	f003 f814 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000238 	.word	0x20000238
 8003f40:	20000700 	.word	0x20000700

08003f44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <TIM4_IRQHandler+0x10>)
 8003f4a:	f003 f809 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000049c 	.word	0x2000049c

08003f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <USART2_IRQHandler+0x10>)
 8003f5e:	f004 ffc3 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200008f8 	.word	0x200008f8

08003f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003f70:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f74:	f000 ffb6 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003f78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f7c:	f000 ffb2 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003f88:	4802      	ldr	r0, [pc, #8]	@ (8003f94 <TIM5_IRQHandler+0x10>)
 8003f8a:	f002 ffe9 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000568 	.word	0x20000568

08003f98 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <TIM7_DAC_IRQHandler+0x10>)
 8003f9e:	f002 ffdf 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000634 	.word	0x20000634

08003fac <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003fb0:	4802      	ldr	r0, [pc, #8]	@ (8003fbc <DMA2_Channel2_IRQHandler+0x10>)
 8003fb2:	f000 fc96 	bl	80048e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200009c4 	.word	0x200009c4

08003fc0 <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b09b      	sub	sp, #108	@ 0x6c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 8003fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8004100 <updateLED+0x140>)
 8003fce:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 8003fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8004104 <updateLED+0x144>)
 8003fda:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fe8:	e076      	b.n	80040d8 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 8003fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d032      	beq.n	800405c <updateLED+0x9c>
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	dc46      	bgt.n	8004088 <updateLED+0xc8>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d002      	beq.n	8004004 <updateLED+0x44>
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d016      	beq.n	8004030 <updateLED+0x70>
 8004002:	e041      	b.n	8004088 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8004004:	f107 0414 	add.w	r4, r7, #20
 8004008:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800400c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 8004012:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004016:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800401a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800401c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8004020:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004024:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800402a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800402e:	e041      	b.n	80040b4 <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 8004030:	f107 0414 	add.w	r4, r7, #20
 8004034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800403a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800403e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004042:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 800404c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004050:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 800405a:	e02b      	b.n	80040b4 <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 800405c:	f107 0414 	add.w	r4, r7, #20
 8004060:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800406a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800406e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8004078:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800407c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8004086:	e015      	b.n	80040b4 <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8004088:	f107 0414 	add.w	r4, r7, #20
 800408c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8004096:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800409a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800409e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 80040a4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80040a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 80040b2:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 80040b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	333c      	adds	r3, #60	@ 0x3c
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <updateLED+0x148>)
 80040c4:	4413      	add	r3, r2
 80040c6:	f107 0114 	add.w	r1, r7, #20
 80040ca:	2230      	movs	r2, #48	@ 0x30
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 fc7b 	bl	800a9c8 <memcpy>
	for (int i = 0; i < 3; i++){
 80040d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d4:	3301      	adds	r3, #1
 80040d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040da:	2b02      	cmp	r3, #2
 80040dc:	dd85      	ble.n	8003fea <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 80040de:	2278      	movs	r2, #120	@ 0x78
 80040e0:	2100      	movs	r1, #0
 80040e2:	4809      	ldr	r0, [pc, #36]	@ (8004108 <updateLED+0x148>)
 80040e4:	f006 fc44 	bl	800a970 <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 80040e8:	2384      	movs	r3, #132	@ 0x84
 80040ea:	4a07      	ldr	r2, [pc, #28]	@ (8004108 <updateLED+0x148>)
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f002 fa3c 	bl	800656c <HAL_TIM_PWM_Start_DMA>
 80040f4:	4603      	mov	r3, r0

}
 80040f6:	4618      	mov	r0, r3
 80040f8:	376c      	adds	r7, #108	@ 0x6c
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	bf00      	nop
 8004100:	0800a9fc 	.word	0x0800a9fc
 8004104:	0800aa0c 	.word	0x0800aa0c
 8004108:	20001250 	.word	0x20001250

0800410c <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 8004112:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004116:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 8004118:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800411c:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 800411e:	f000 f8bf 	bl	80042a0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 800412a:	2100      	movs	r1, #0
 800412c:	68b8      	ldr	r0, [r7, #8]
 800412e:	f7ff facf 	bl	80036d0 <serviceMotor>

	while(HAL_GetTick() < Timeout){
 8004132:	e00a      	b.n	800414a <HomeZ+0x3e>
		if(getZStop() == 1){
 8004134:	f7ff faf4 	bl	8003720 <getZStop>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HomeZ+0x3e>
			//HAL_Delay(50);
			serviceMotor(0, 0);
 800413e:	2100      	movs	r1, #0
 8004140:	2000      	movs	r0, #0
 8004142:	f7ff fac5 	bl	80036d0 <serviceMotor>
			return 0;
 8004146:	2300      	movs	r3, #0
 8004148:	e006      	b.n	8004158 <HomeZ+0x4c>
	while(HAL_GetTick() < Timeout){
 800414a:	f000 f8a9 	bl	80042a0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4293      	cmp	r3, r2
 8004154:	d8ee      	bhi.n	8004134 <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 8004156:	2301      	movs	r3, #1

}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <SystemInit+0x20>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416a:	4a05      	ldr	r2, [pc, #20]	@ (8004180 <SystemInit+0x20>)
 800416c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004184:	480d      	ldr	r0, [pc, #52]	@ (80041bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004186:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004188:	f7ff ffea 	bl	8004160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800418c:	480c      	ldr	r0, [pc, #48]	@ (80041c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800418e:	490d      	ldr	r1, [pc, #52]	@ (80041c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004190:	4a0d      	ldr	r2, [pc, #52]	@ (80041c8 <LoopForever+0xe>)
  movs r3, #0
 8004192:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004194:	e002      	b.n	800419c <LoopCopyDataInit>

08004196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800419a:	3304      	adds	r3, #4

0800419c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800419c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800419e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041a0:	d3f9      	bcc.n	8004196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041a2:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80041a4:	4c0a      	ldr	r4, [pc, #40]	@ (80041d0 <LoopForever+0x16>)
  movs r3, #0
 80041a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041a8:	e001      	b.n	80041ae <LoopFillZerobss>

080041aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041ac:	3204      	adds	r2, #4

080041ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041b0:	d3fb      	bcc.n	80041aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041b2:	f006 fbe5 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041b6:	f7fd fa4f 	bl	8001658 <main>

080041ba <LoopForever>:

LoopForever:
    b LoopForever
 80041ba:	e7fe      	b.n	80041ba <LoopForever>
  ldr   r0, =_estack
 80041bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041c4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80041c8:	0800aa6c 	.word	0x0800aa6c
  ldr r2, =_sbss
 80041cc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80041d0:	2000135c 	.word	0x2000135c

080041d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041d4:	e7fe      	b.n	80041d4 <ADC1_2_IRQHandler>

080041d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e0:	2003      	movs	r0, #3
 80041e2:	f000 f95b 	bl	800449c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041e6:	2000      	movs	r0, #0
 80041e8:	f000 f80e 	bl	8004208 <HAL_InitTick>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	71fb      	strb	r3, [r7, #7]
 80041f6:	e001      	b.n	80041fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041f8:	f7ff fb46 	bl	8003888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041fc:	79fb      	ldrb	r3, [r7, #7]

}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <HAL_InitTick+0x68>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d022      	beq.n	8004262 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800421c:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <HAL_InitTick+0x6c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <HAL_InitTick+0x68>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004228:	fbb1 f3f3 	udiv	r3, r1, r3
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f966 	bl	8004502 <HAL_SYSTICK_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d809      	bhi.n	8004256 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004242:	2200      	movs	r2, #0
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	f000 f932 	bl	80044b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <HAL_InitTick+0x70>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e007      	b.n	8004266 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e004      	b.n	8004266 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e001      	b.n	8004266 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000214 	.word	0x20000214
 8004274:	2000020c 	.word	0x2000020c
 8004278:	20000210 	.word	0x20000210

0800427c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_IncTick+0x1c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_IncTick+0x20>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4413      	add	r3, r2
 800428a:	4a03      	ldr	r2, [pc, #12]	@ (8004298 <HAL_IncTick+0x1c>)
 800428c:	6013      	str	r3, [r2, #0]
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20001358 	.word	0x20001358
 800429c:	20000214 	.word	0x20000214

080042a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return uwTick;
 80042a4:	4b03      	ldr	r3, [pc, #12]	@ (80042b4 <HAL_GetTick+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20001358 	.word	0x20001358

080042b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff ffee 	bl	80042a0 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d004      	beq.n	80042dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_Delay+0x40>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042dc:	bf00      	nop
 80042de:	f7ff ffdf 	bl	80042a0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d8f7      	bhi.n	80042de <HAL_Delay+0x26>
  {
  }
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000214 	.word	0x20000214

080042fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <__NVIC_SetPriorityGrouping+0x44>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004318:	4013      	ands	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800432e:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <__NVIC_SetPriorityGrouping+0x44>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60d3      	str	r3, [r2, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <__NVIC_GetPriorityGrouping+0x18>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	f003 0307 	and.w	r3, r3, #7
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	db0b      	blt.n	800438a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	f003 021f 	and.w	r2, r3, #31
 8004378:	4907      	ldr	r1, [pc, #28]	@ (8004398 <__NVIC_EnableIRQ+0x38>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2001      	movs	r0, #1
 8004382:	fa00 f202 	lsl.w	r2, r0, r2
 8004386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	@ (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	@ (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	@ 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004468:	d301      	bcc.n	800446e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446e:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <SysTick_Config+0x40>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004476:	210f      	movs	r1, #15
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f7ff ff8e 	bl	800439c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <SysTick_Config+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004486:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <SysTick_Config+0x40>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000e010 	.word	0xe000e010

0800449c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff29 	bl	80042fc <__NVIC_SetPriorityGrouping>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044c0:	f7ff ff40 	bl	8004344 <__NVIC_GetPriorityGrouping>
 80044c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7ff ff90 	bl	80043f0 <NVIC_EncodePriority>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff5f 	bl	800439c <__NVIC_SetPriority>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	4603      	mov	r3, r0
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff33 	bl	8004360 <__NVIC_EnableIRQ>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ffa4 	bl	8004458 <SysTick_Config>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e08d      	b.n	800464a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_DMA_Init+0x138>)
 8004536:	429a      	cmp	r2, r3
 8004538:	d80f      	bhi.n	800455a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	4b45      	ldr	r3, [pc, #276]	@ (8004658 <HAL_DMA_Init+0x13c>)
 8004542:	4413      	add	r3, r2
 8004544:	4a45      	ldr	r2, [pc, #276]	@ (800465c <HAL_DMA_Init+0x140>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <HAL_DMA_Init+0x144>)
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
 8004558:	e00e      	b.n	8004578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <HAL_DMA_Init+0x148>)
 8004562:	4413      	add	r3, r2
 8004564:	4a3d      	ldr	r2, [pc, #244]	@ (800465c <HAL_DMA_Init+0x140>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	009a      	lsls	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a3c      	ldr	r2, [pc, #240]	@ (8004668 <HAL_DMA_Init+0x14c>)
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800459c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa76 	bl	8004abc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d8:	d102      	bne.n	80045e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_DMA_Init+0x104>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d80c      	bhi.n	8004620 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa96 	bl	8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	e008      	b.n	8004632 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40020407 	.word	0x40020407
 8004658:	bffdfff8 	.word	0xbffdfff8
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	40020000 	.word	0x40020000
 8004664:	bffdfbf8 	.word	0xbffdfbf8
 8004668:	40020400 	.word	0x40020400

0800466c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_DMA_Start_IT+0x20>
 8004688:	2302      	movs	r3, #2
 800468a:	e066      	b.n	800475a <HAL_DMA_Start_IT+0xee>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d155      	bne.n	800474c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f9bb 	bl	8004a40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 020e 	orr.w	r2, r2, #14
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00f      	b.n	8004704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0204 	bic.w	r2, r2, #4
 80046f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 020a 	orr.w	r2, r2, #10
 8004702:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004720:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004738:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e005      	b.n	8004758 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d005      	beq.n	8004786 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e037      	b.n	80047f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 020e 	bic.w	r2, r2, #14
 8004794:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f003 021f 	and.w	r2, r3, #31
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d00d      	beq.n	8004848 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e047      	b.n	80048d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 020e 	bic.w	r2, r2, #14
 8004856:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004872:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f202 	lsl.w	r2, r1, r2
 800488a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004894:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
    }
  }
  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2204      	movs	r2, #4
 8004904:	409a      	lsls	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d026      	beq.n	800495c <HAL_DMA_IRQHandler+0x7a>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d021      	beq.n	800495c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0204 	bic.w	r2, r2, #4
 8004934:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2104      	movs	r1, #4
 8004944:	fa01 f202 	lsl.w	r2, r1, r2
 8004948:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d071      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800495a:	e06c      	b.n	8004a36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2202      	movs	r2, #2
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02e      	beq.n	80049ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d029      	beq.n	80049ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 020a 	bic.w	r2, r2, #10
 8004996:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2102      	movs	r1, #2
 80049ae:	fa01 f202 	lsl.w	r2, r1, r2
 80049b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d038      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049cc:	e033      	b.n	8004a36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2208      	movs	r2, #8
 80049d8:	409a      	lsls	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02a      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d025      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 020e 	bic.w	r2, r2, #14
 80049fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
}
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f003 021f 	and.w	r2, r3, #31
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d108      	bne.n	8004aa0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a9e:	e007      	b.n	8004ab0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	60da      	str	r2, [r3, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d802      	bhi.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e001      	b.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ad6:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ad8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3b08      	subs	r3, #8
 8004ae6:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	009a      	lsls	r2, r3, #2
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a0b      	ldr	r2, [pc, #44]	@ (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2201      	movs	r2, #1
 8004b10:	409a      	lsls	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40020407 	.word	0x40020407
 8004b28:	40020800 	.word	0x40020800
 8004b2c:	40020820 	.word	0x40020820
 8004b30:	cccccccd 	.word	0xcccccccd
 8004b34:	40020880 	.word	0x40020880

08004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a08      	ldr	r2, [pc, #32]	@ (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b5a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	1000823f 	.word	0x1000823f
 8004b7c:	40020940 	.word	0x40020940

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b8e:	e15a      	b.n	8004e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2101      	movs	r1, #1
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 814c 	beq.w	8004e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d005      	beq.n	8004bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0201 	and.w	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d017      	beq.n	8004c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d123      	bne.n	8004cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	08da      	lsrs	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3208      	adds	r2, #8
 8004c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	220f      	movs	r2, #15
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3208      	adds	r2, #8
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80a6 	beq.w	8004e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e64 <HAL_GPIO_Init+0x2e4>)
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e64 <HAL_GPIO_Init+0x2e4>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d00:	4b58      	ldr	r3, [pc, #352]	@ (8004e64 <HAL_GPIO_Init+0x2e4>)
 8004d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d0c:	4a56      	ldr	r2, [pc, #344]	@ (8004e68 <HAL_GPIO_Init+0x2e8>)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	3302      	adds	r3, #2
 8004d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	220f      	movs	r2, #15
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d36:	d01f      	beq.n	8004d78 <HAL_GPIO_Init+0x1f8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8004e6c <HAL_GPIO_Init+0x2ec>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d019      	beq.n	8004d74 <HAL_GPIO_Init+0x1f4>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a4b      	ldr	r2, [pc, #300]	@ (8004e70 <HAL_GPIO_Init+0x2f0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_GPIO_Init+0x1f0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e74 <HAL_GPIO_Init+0x2f4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00d      	beq.n	8004d6c <HAL_GPIO_Init+0x1ec>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a49      	ldr	r2, [pc, #292]	@ (8004e78 <HAL_GPIO_Init+0x2f8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <HAL_GPIO_Init+0x1e8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a48      	ldr	r2, [pc, #288]	@ (8004e7c <HAL_GPIO_Init+0x2fc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_GPIO_Init+0x1e4>
 8004d60:	2305      	movs	r3, #5
 8004d62:	e00a      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d64:	2306      	movs	r3, #6
 8004d66:	e008      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	e006      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e004      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e002      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_GPIO_Init+0x1fa>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	f002 0203 	and.w	r2, r2, #3
 8004d80:	0092      	lsls	r2, r2, #2
 8004d82:	4093      	lsls	r3, r2
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d8a:	4937      	ldr	r1, [pc, #220]	@ (8004e68 <HAL_GPIO_Init+0x2e8>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	3302      	adds	r3, #2
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d98:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4013      	ands	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dbc:	4a30      	ldr	r2, [pc, #192]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004de6:	4a26      	ldr	r2, [pc, #152]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004dec:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e10:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <HAL_GPIO_Init+0x300>)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3301      	adds	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f47f ae9d 	bne.w	8004b90 <HAL_GPIO_Init+0x10>
  }
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	48000400 	.word	0x48000400
 8004e70:	48000800 	.word	0x48000800
 8004e74:	48000c00 	.word	0x48000c00
 8004e78:	48001000 	.word	0x48001000
 8004e7c:	48001400 	.word	0x48001400
 8004e80:	40010400 	.word	0x40010400

08004e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	887b      	ldrh	r3, [r7, #2]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e001      	b.n	8004ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ec4:	787b      	ldrb	r3, [r7, #1]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004efa:	4a05      	ldr	r2, [pc, #20]	@ (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fc18 	bl	8003738 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40010400 	.word	0x40010400

08004f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d141      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f22:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d131      	bne.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b47      	ldr	r3, [pc, #284]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f36:	4a46      	ldr	r2, [pc, #280]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f40:	4b43      	ldr	r3, [pc, #268]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f48:	4a41      	ldr	r2, [pc, #260]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f50:	4b40      	ldr	r3, [pc, #256]	@ (8005054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2232      	movs	r2, #50	@ 0x32
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	0c9b      	lsrs	r3, r3, #18
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f66:	e002      	b.n	8004f6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6e:	4b38      	ldr	r3, [pc, #224]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7a:	d102      	bne.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f2      	bne.n	8004f68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f82:	4b33      	ldr	r3, [pc, #204]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8e:	d158      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e057      	b.n	8005044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f94:	4b2e      	ldr	r3, [pc, #184]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fa4:	e04d      	b.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fac:	d141      	bne.n	8005032 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fae:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d131      	bne.n	8005020 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fbc:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc2:	4a23      	ldr	r2, [pc, #140]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fcc:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2232      	movs	r2, #50	@ 0x32
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	0c9b      	lsrs	r3, r3, #18
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff2:	e002      	b.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d102      	bne.n	800500e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f2      	bne.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800500e:	4b10      	ldr	r3, [pc, #64]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501a:	d112      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e011      	b.n	8005044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800502c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005030:	e007      	b.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005032:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800503a:	4a05      	ldr	r2, [pc, #20]	@ (8005050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005040:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40007000 	.word	0x40007000
 8005054:	2000020c 	.word	0x2000020c
 8005058:	431bde83 	.word	0x431bde83

0800505c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800506a:	6093      	str	r3, [r2, #8]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40007000 	.word	0x40007000

0800507c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e2fe      	b.n	800568c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d075      	beq.n	8005186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509a:	4b97      	ldr	r3, [pc, #604]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a4:	4b94      	ldr	r3, [pc, #592]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d102      	bne.n	80050ba <HAL_RCC_OscConfig+0x3e>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d002      	beq.n	80050c0 <HAL_RCC_OscConfig+0x44>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d10b      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	4b8d      	ldr	r3, [pc, #564]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05b      	beq.n	8005184 <HAL_RCC_OscConfig+0x108>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d157      	bne.n	8005184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e2d9      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e0:	d106      	bne.n	80050f0 <HAL_RCC_OscConfig+0x74>
 80050e2:	4b85      	ldr	r3, [pc, #532]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a84      	ldr	r2, [pc, #528]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e01d      	b.n	800512c <HAL_RCC_OscConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x98>
 80050fa:	4b7f      	ldr	r3, [pc, #508]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7e      	ldr	r2, [pc, #504]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7b      	ldr	r2, [pc, #492]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0xb0>
 8005114:	4b78      	ldr	r3, [pc, #480]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a77      	ldr	r2, [pc, #476]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800511a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b75      	ldr	r3, [pc, #468]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a74      	ldr	r2, [pc, #464]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800512a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7ff f8b4 	bl	80042a0 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513c:	f7ff f8b0 	bl	80042a0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e29e      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800514e:	4b6a      	ldr	r3, [pc, #424]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0xc0>
 800515a:	e014      	b.n	8005186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7ff f8a0 	bl	80042a0 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005164:	f7ff f89c 	bl	80042a0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	@ 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e28a      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005176:	4b60      	ldr	r3, [pc, #384]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0xe8>
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d075      	beq.n	800527e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005192:	4b59      	ldr	r3, [pc, #356]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519c:	4b56      	ldr	r3, [pc, #344]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_OscConfig+0x136>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_OscConfig+0x13c>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d11f      	bne.n	80051f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b8:	4b4f      	ldr	r3, [pc, #316]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x154>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e25d      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b49      	ldr	r3, [pc, #292]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	4946      	ldr	r1, [pc, #280]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051e4:	4b45      	ldr	r3, [pc, #276]	@ (80052fc <HAL_RCC_OscConfig+0x280>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff f80d 	bl	8004208 <HAL_InitTick>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d043      	beq.n	800527c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e249      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005200:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7ff f848 	bl	80042a0 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7ff f844 	bl	80042a0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e232      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	492d      	ldr	r1, [pc, #180]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
 8005246:	e01a      	b.n	800527e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005248:	4b2b      	ldr	r3, [pc, #172]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800524e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7ff f824 	bl	80042a0 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7ff f820 	bl	80042a0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e20e      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800526e:	4b22      	ldr	r3, [pc, #136]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1e0>
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d041      	beq.n	800530e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005292:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 8005294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005298:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fe fffd 	bl	80042a0 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052aa:	f7fe fff9 	bl	80042a0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1e7      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052bc:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80052be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ef      	beq.n	80052aa <HAL_RCC_OscConfig+0x22e>
 80052ca:	e020      	b.n	800530e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d2:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fe ffe0 	bl	80042a0 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e2:	e00d      	b.n	8005300 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fe ffdc 	bl	80042a0 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d906      	bls.n	8005300 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1ca      	b.n	800568c <HAL_RCC_OscConfig+0x610>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005300:	4b8c      	ldr	r3, [pc, #560]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ea      	bne.n	80052e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80a6 	beq.w	8005468 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531c:	2300      	movs	r3, #0
 800531e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005320:	4b84      	ldr	r3, [pc, #528]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_OscConfig+0x2b4>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x2b6>
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	4b7f      	ldr	r3, [pc, #508]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	4a7e      	ldr	r2, [pc, #504]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005340:	6593      	str	r3, [r2, #88]	@ 0x58
 8005342:	4b7c      	ldr	r3, [pc, #496]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800534e:	2301      	movs	r3, #1
 8005350:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	4b79      	ldr	r3, [pc, #484]	@ (8005538 <HAL_RCC_OscConfig+0x4bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d118      	bne.n	8005390 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535e:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCC_OscConfig+0x4bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a75      	ldr	r2, [pc, #468]	@ (8005538 <HAL_RCC_OscConfig+0x4bc>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536a:	f7fe ff99 	bl	80042a0 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fe ff95 	bl	80042a0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e183      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005384:	4b6c      	ldr	r3, [pc, #432]	@ (8005538 <HAL_RCC_OscConfig+0x4bc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d108      	bne.n	80053aa <HAL_RCC_OscConfig+0x32e>
 8005398:	4b66      	ldr	r3, [pc, #408]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	4a65      	ldr	r2, [pc, #404]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053a8:	e024      	b.n	80053f4 <HAL_RCC_OscConfig+0x378>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d110      	bne.n	80053d4 <HAL_RCC_OscConfig+0x358>
 80053b2:	4b60      	ldr	r3, [pc, #384]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053d2:	e00f      	b.n	80053f4 <HAL_RCC_OscConfig+0x378>
 80053d4:	4b57      	ldr	r3, [pc, #348]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	4a56      	ldr	r2, [pc, #344]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053e4:	4b53      	ldr	r3, [pc, #332]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ea:	4a52      	ldr	r2, [pc, #328]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d016      	beq.n	800542a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fe ff50 	bl	80042a0 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005402:	e00a      	b.n	800541a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fe ff4c 	bl	80042a0 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e138      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541a:	4b46      	ldr	r3, [pc, #280]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ed      	beq.n	8005404 <HAL_RCC_OscConfig+0x388>
 8005428:	e015      	b.n	8005456 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fe ff39 	bl	80042a0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fe ff35 	bl	80042a0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e121      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005448:	4b3a      	ldr	r3, [pc, #232]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1ed      	bne.n	8005432 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005456:	7ffb      	ldrb	r3, [r7, #31]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545c:	4b35      	ldr	r3, [pc, #212]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	4a34      	ldr	r2, [pc, #208]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005466:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d03c      	beq.n	80054ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01c      	beq.n	80054b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800547c:	4b2d      	ldr	r3, [pc, #180]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005482:	4a2c      	ldr	r2, [pc, #176]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fe ff08 	bl	80042a0 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005494:	f7fe ff04 	bl	80042a0 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e0f2      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054a6:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ef      	beq.n	8005494 <HAL_RCC_OscConfig+0x418>
 80054b4:	e01b      	b.n	80054ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80054b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fe feeb 	bl	80042a0 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ce:	f7fe fee7 	bl	80042a0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0d5      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1ef      	bne.n	80054ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80c9 	beq.w	800568a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 030c 	and.w	r3, r3, #12
 8005500:	2b0c      	cmp	r3, #12
 8005502:	f000 8083 	beq.w	800560c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d15e      	bne.n	80055cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a08      	ldr	r2, [pc, #32]	@ (8005534 <HAL_RCC_OscConfig+0x4b8>)
 8005514:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fe fec1 	bl	80042a0 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005520:	e00c      	b.n	800553c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005522:	f7fe febd 	bl	80042a0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d905      	bls.n	800553c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0ab      	b.n	800568c <HAL_RCC_OscConfig+0x610>
 8005534:	40021000 	.word	0x40021000
 8005538:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800553c:	4b55      	ldr	r3, [pc, #340]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ec      	bne.n	8005522 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005548:	4b52      	ldr	r3, [pc, #328]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	4b52      	ldr	r3, [pc, #328]	@ (8005698 <HAL_RCC_OscConfig+0x61c>)
 800554e:	4013      	ands	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6a11      	ldr	r1, [r2, #32]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005558:	3a01      	subs	r2, #1
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	4311      	orrs	r1, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005562:	0212      	lsls	r2, r2, #8
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	3a01      	subs	r2, #1
 800556e:	0552      	lsls	r2, r2, #21
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005576:	0852      	lsrs	r2, r2, #1
 8005578:	3a01      	subs	r2, #1
 800557a:	0652      	lsls	r2, r2, #25
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005582:	06d2      	lsls	r2, r2, #27
 8005584:	430a      	orrs	r2, r1
 8005586:	4943      	ldr	r1, [pc, #268]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 8005588:	4313      	orrs	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558c:	4b41      	ldr	r3, [pc, #260]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a40      	ldr	r2, [pc, #256]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005596:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005598:	4b3e      	ldr	r3, [pc, #248]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a3d      	ldr	r2, [pc, #244]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800559e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fe fe7c 	bl	80042a0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fe fe78 	bl	80042a0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e066      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055be:	4b35      	ldr	r3, [pc, #212]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x530>
 80055ca:	e05e      	b.n	800568a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055cc:	4b31      	ldr	r3, [pc, #196]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a30      	ldr	r2, [pc, #192]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 80055d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fe fe62 	bl	80042a0 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fe fe5e 	bl	80042a0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e04c      	b.n	800568c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f2:	4b28      	ldr	r3, [pc, #160]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055fe:	4b25      	ldr	r3, [pc, #148]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	4924      	ldr	r1, [pc, #144]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 8005604:	4b25      	ldr	r3, [pc, #148]	@ (800569c <HAL_RCC_OscConfig+0x620>)
 8005606:	4013      	ands	r3, r2
 8005608:	60cb      	str	r3, [r1, #12]
 800560a:	e03e      	b.n	800568a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e039      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005618:	4b1e      	ldr	r3, [pc, #120]	@ (8005694 <HAL_RCC_OscConfig+0x618>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 0203 	and.w	r2, r3, #3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	429a      	cmp	r2, r3
 800562a:	d12c      	bne.n	8005686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	3b01      	subs	r3, #1
 8005638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d123      	bne.n	8005686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d11b      	bne.n	8005686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d113      	bne.n	8005686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	3b01      	subs	r3, #1
 800566c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d109      	bne.n	8005686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	3b01      	subs	r3, #1
 8005680:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	019f800c 	.word	0x019f800c
 800569c:	feeefffc 	.word	0xfeeefffc

080056a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e11e      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b91      	ldr	r3, [pc, #580]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d910      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 020f 	bic.w	r2, r3, #15
 80056ce:	498c      	ldr	r1, [pc, #560]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e106      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d073      	beq.n	80057dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d129      	bne.n	8005750 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fc:	4b81      	ldr	r3, [pc, #516]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0f4      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800570c:	f000 f99e 	bl	8005a4c <RCC_GetSysClockFreqFromPLLSource>
 8005710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4a7c      	ldr	r2, [pc, #496]	@ (8005908 <HAL_RCC_ClockConfig+0x268>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d93f      	bls.n	800579a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800571a:	4b7a      	ldr	r3, [pc, #488]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d033      	beq.n	800579a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12f      	bne.n	800579a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800573a:	4b72      	ldr	r3, [pc, #456]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	4a70      	ldr	r2, [pc, #448]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800574a:	2380      	movs	r3, #128	@ 0x80
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e024      	b.n	800579a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d107      	bne.n	8005768 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005758:	4b6a      	ldr	r3, [pc, #424]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0c6      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005768:	4b66      	ldr	r3, [pc, #408]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0be      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005778:	f000 f8ce 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 800577c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4a61      	ldr	r2, [pc, #388]	@ (8005908 <HAL_RCC_ClockConfig+0x268>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d909      	bls.n	800579a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005786:	4b5f      	ldr	r3, [pc, #380]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578e:	4a5d      	ldr	r2, [pc, #372]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005794:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005796:	2380      	movs	r3, #128	@ 0x80
 8005798:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b5a      	ldr	r3, [pc, #360]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4957      	ldr	r1, [pc, #348]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ac:	f7fe fd78 	bl	80042a0 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fe fd74 	bl	80042a0 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e095      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f4:	4b43      	ldr	r3, [pc, #268]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a42      	ldr	r2, [pc, #264]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800580c:	4b3d      	ldr	r3, [pc, #244]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005814:	4a3b      	ldr	r2, [pc, #236]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800581a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800581c:	4b39      	ldr	r3, [pc, #228]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4936      	ldr	r1, [pc, #216]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
 800582e:	e008      	b.n	8005842 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b80      	cmp	r3, #128	@ 0x80
 8005834:	d105      	bne.n	8005842 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005836:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800583c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005840:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005842:	4b2f      	ldr	r3, [pc, #188]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d21d      	bcs.n	800588c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005850:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 020f 	bic.w	r2, r3, #15
 8005858:	4929      	ldr	r1, [pc, #164]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005860:	f7fe fd1e 	bl	80042a0 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fe fd1a 	bl	80042a0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e03b      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587e:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d1ed      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005898:	4b1a      	ldr	r3, [pc, #104]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4917      	ldr	r1, [pc, #92]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058b6:	4b13      	ldr	r3, [pc, #76]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	490f      	ldr	r1, [pc, #60]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058ca:	f000 f825 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	490c      	ldr	r1, [pc, #48]	@ (800590c <HAL_RCC_ClockConfig+0x26c>)
 80058dc:	5ccb      	ldrb	r3, [r1, r3]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	fa22 f303 	lsr.w	r3, r2, r3
 80058e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <HAL_RCC_ClockConfig+0x270>)
 80058e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005914 <HAL_RCC_ClockConfig+0x274>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fc8a 	bl	8004208 <HAL_InitTick>
 80058f4:	4603      	mov	r3, r0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40022000 	.word	0x40022000
 8005904:	40021000 	.word	0x40021000
 8005908:	04c4b400 	.word	0x04c4b400
 800590c:	0800aa1c 	.word	0x0800aa1c
 8005910:	2000020c 	.word	0x2000020c
 8005914:	20000210 	.word	0x20000210

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800591e:	4b2c      	ldr	r3, [pc, #176]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b04      	cmp	r3, #4
 8005928:	d102      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800592a:	4b2a      	ldr	r3, [pc, #168]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e047      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005930:	4b27      	ldr	r3, [pc, #156]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d102      	bne.n	8005942 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800593c:	4b26      	ldr	r3, [pc, #152]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e03e      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005942:	4b23      	ldr	r3, [pc, #140]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d136      	bne.n	80059bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800594e:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005958:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3301      	adds	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d10c      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800596c:	4a1a      	ldr	r2, [pc, #104]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005976:	68d2      	ldr	r2, [r2, #12]
 8005978:	0a12      	lsrs	r2, r2, #8
 800597a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	617b      	str	r3, [r7, #20]
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005986:	4a13      	ldr	r2, [pc, #76]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	4a10      	ldr	r2, [pc, #64]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005990:	68d2      	ldr	r2, [r2, #12]
 8005992:	0a12      	lsrs	r2, r2, #8
 8005994:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
      break;
 800599e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	0e5b      	lsrs	r3, r3, #25
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e001      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059c0:	693b      	ldr	r3, [r7, #16]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	00f42400 	.word	0x00f42400
 80059d8:	016e3600 	.word	0x016e3600

080059dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e0:	4b03      	ldr	r3, [pc, #12]	@ (80059f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	2000020c 	.word	0x2000020c

080059f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059f8:	f7ff fff0 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4904      	ldr	r1, [pc, #16]	@ (8005a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a0a:	5ccb      	ldrb	r3, [r1, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800aa2c 	.word	0x0800aa2c

08005a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a24:	f7ff ffda 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0adb      	lsrs	r3, r3, #11
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	4904      	ldr	r1, [pc, #16]	@ (8005a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	0800aa2c 	.word	0x0800aa2c

08005a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a52:	4b1e      	ldr	r3, [pc, #120]	@ (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d10c      	bne.n	8005a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a70:	4a17      	ldr	r2, [pc, #92]	@ (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a7a:	68d2      	ldr	r2, [r2, #12]
 8005a7c:	0a12      	lsrs	r2, r2, #8
 8005a7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	617b      	str	r3, [r7, #20]
    break;
 8005a88:	e00c      	b.n	8005aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	4a0e      	ldr	r2, [pc, #56]	@ (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a94:	68d2      	ldr	r2, [r2, #12]
 8005a96:	0a12      	lsrs	r2, r2, #8
 8005a98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]
    break;
 8005aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	0e5b      	lsrs	r3, r3, #25
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	016e3600 	.word	0x016e3600
 8005ad4:	00f42400 	.word	0x00f42400

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8098 	beq.w	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afa:	4b43      	ldr	r3, [pc, #268]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	4b40      	ldr	r3, [pc, #256]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b12:	4b3d      	ldr	r3, [pc, #244]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b22:	4b3a      	ldr	r3, [pc, #232]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a39      	ldr	r2, [pc, #228]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b2e:	f7fe fbb7 	bl	80042a0 <HAL_GetTick>
 8005b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b34:	e009      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fe fbb3 	bl	80042a0 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d902      	bls.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	74fb      	strb	r3, [r7, #19]
        break;
 8005b48:	e005      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b4a:	4b30      	ldr	r3, [pc, #192]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ef      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d159      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01e      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d019      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b78:	4b23      	ldr	r3, [pc, #140]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b84:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b94:	4b1c      	ldr	r3, [pc, #112]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ba4:	4a18      	ldr	r2, [pc, #96]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fe fb73 	bl	80042a0 <HAL_GetTick>
 8005bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbc:	e00b      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7fe fb6f 	bl	80042a0 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d902      	bls.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ec      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf8:	4903      	ldr	r1, [pc, #12]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	74bb      	strb	r3, [r7, #18]
 8005c06:	e005      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c14:	7c7b      	ldrb	r3, [r7, #17]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d105      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1e:	4aa6      	ldr	r2, [pc, #664]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c32:	4ba1      	ldr	r3, [pc, #644]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f023 0203 	bic.w	r2, r3, #3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	499d      	ldr	r1, [pc, #628]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c54:	4b98      	ldr	r3, [pc, #608]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	f023 020c 	bic.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4995      	ldr	r1, [pc, #596]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c76:	4b90      	ldr	r3, [pc, #576]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	498c      	ldr	r1, [pc, #560]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c98:	4b87      	ldr	r3, [pc, #540]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	4984      	ldr	r1, [pc, #528]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cba:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	497b      	ldr	r1, [pc, #492]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cdc:	4b76      	ldr	r3, [pc, #472]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	4973      	ldr	r1, [pc, #460]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	496a      	ldr	r1, [pc, #424]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d20:	4b65      	ldr	r3, [pc, #404]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4962      	ldr	r1, [pc, #392]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d42:	4b5d      	ldr	r3, [pc, #372]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	4959      	ldr	r1, [pc, #356]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d64:	4b54      	ldr	r3, [pc, #336]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d6a:	f023 0203 	bic.w	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	4951      	ldr	r1, [pc, #324]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d86:	4b4c      	ldr	r3, [pc, #304]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	4948      	ldr	r1, [pc, #288]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d015      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da8:	4b43      	ldr	r3, [pc, #268]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	4940      	ldr	r1, [pc, #256]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc6:	d105      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005de0:	4b35      	ldr	r3, [pc, #212]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	4932      	ldr	r1, [pc, #200]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dfe:	d105      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e00:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e18:	4b27      	ldr	r3, [pc, #156]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	4924      	ldr	r1, [pc, #144]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e36:	d105      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e38:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d015      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e50:	4b19      	ldr	r3, [pc, #100]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	4916      	ldr	r1, [pc, #88]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e6e:	d105      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e70:	4b11      	ldr	r3, [pc, #68]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a10      	ldr	r2, [pc, #64]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d019      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e88:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	4908      	ldr	r1, [pc, #32]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ea6:	d109      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea8:	4b03      	ldr	r3, [pc, #12]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a02      	ldr	r2, [pc, #8]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb2:	60d3      	str	r3, [r2, #12]
 8005eb4:	e002      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ec8:	4b29      	ldr	r3, [pc, #164]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	4926      	ldr	r1, [pc, #152]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ee6:	d105      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ee8:	4b21      	ldr	r3, [pc, #132]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a20      	ldr	r2, [pc, #128]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f00:	4b1b      	ldr	r3, [pc, #108]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f0e:	4918      	ldr	r1, [pc, #96]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f20:	4b13      	ldr	r3, [pc, #76]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a12      	ldr	r2, [pc, #72]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d015      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f38:	4b0d      	ldr	r3, [pc, #52]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f46:	490a      	ldr	r1, [pc, #40]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4a04      	ldr	r2, [pc, #16]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000

08005f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e054      	b.n	8006030 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d111      	bne.n	8005fb6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 faac 	bl	80084f8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <HAL_TIM_Base_Init+0xc4>)
 8005fac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f001 fdf5 	bl	8007bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	080038d1 	.word	0x080038d1

0800603c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e04c      	b.n	80060ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a26      	ldr	r2, [pc, #152]	@ (80060fc <HAL_TIM_Base_Start+0xc0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d01d      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a22      	ldr	r2, [pc, #136]	@ (8006100 <HAL_TIM_Base_Start+0xc4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a21      	ldr	r2, [pc, #132]	@ (8006104 <HAL_TIM_Base_Start+0xc8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1f      	ldr	r2, [pc, #124]	@ (8006108 <HAL_TIM_Base_Start+0xcc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1e      	ldr	r2, [pc, #120]	@ (800610c <HAL_TIM_Base_Start+0xd0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <HAL_TIM_Base_Start+0xd4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIM_Base_Start+0x70>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <HAL_TIM_Base_Start+0xd8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d115      	bne.n	80060d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	4b19      	ldr	r3, [pc, #100]	@ (8006118 <HAL_TIM_Base_Start+0xdc>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d015      	beq.n	80060ea <HAL_TIM_Base_Start+0xae>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c4:	d011      	beq.n	80060ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e008      	b.n	80060ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e000      	b.n	80060ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40015000 	.word	0x40015000
 8006118:	00010007 	.word	0x00010007

0800611c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	d001      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e054      	b.n	80061de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a26      	ldr	r2, [pc, #152]	@ (80061ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d01d      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a22      	ldr	r2, [pc, #136]	@ (80061f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a21      	ldr	r2, [pc, #132]	@ (80061f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1f      	ldr	r2, [pc, #124]	@ (80061f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1c      	ldr	r2, [pc, #112]	@ (8006200 <HAL_TIM_Base_Start_IT+0xe4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x80>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <HAL_TIM_Base_Start_IT+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d115      	bne.n	80061c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	4b19      	ldr	r3, [pc, #100]	@ (8006208 <HAL_TIM_Base_Start_IT+0xec>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d015      	beq.n	80061da <HAL_TIM_Base_Start_IT+0xbe>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b4:	d011      	beq.n	80061da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0201 	orr.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c6:	e008      	b.n	80061da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e000      	b.n	80061dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40014000 	.word	0x40014000
 8006204:	40015000 	.word	0x40015000
 8006208:	00010007 	.word	0x00010007

0800620c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10f      	bne.n	8006254 <HAL_TIM_Base_Stop_IT+0x48>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d107      	bne.n	8006254 <HAL_TIM_Base_Stop_IT+0x48>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e054      	b.n	8006328 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d111      	bne.n	80062ae <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 f930 	bl	80084f8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <HAL_TIM_PWM_Init+0xc4>)
 80062a4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f001 fc79 	bl	8007bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08006335 	.word	0x08006335

08006334 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_TIM_PWM_Start+0x24>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e03c      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d109      	bne.n	8006386 <HAL_TIM_PWM_Start+0x3e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e02f      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x58>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e022      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d109      	bne.n	80063ba <HAL_TIM_PWM_Start+0x72>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e015      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x8c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e008      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0a6      	b.n	800653c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xb6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063fc:	e023      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xc6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800640c:	e01b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800641c:	e013      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xe6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800642c:	e00b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b10      	cmp	r3, #16
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xf6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800643c:	e003      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f002 f82c 	bl	80084ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3a      	ldr	r2, [pc, #232]	@ (8006544 <HAL_TIM_PWM_Start+0x1fc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d018      	beq.n	8006490 <HAL_TIM_PWM_Start+0x148>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a39      	ldr	r2, [pc, #228]	@ (8006548 <HAL_TIM_PWM_Start+0x200>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <HAL_TIM_PWM_Start+0x148>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a37      	ldr	r2, [pc, #220]	@ (800654c <HAL_TIM_PWM_Start+0x204>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00e      	beq.n	8006490 <HAL_TIM_PWM_Start+0x148>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a36      	ldr	r2, [pc, #216]	@ (8006550 <HAL_TIM_PWM_Start+0x208>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d009      	beq.n	8006490 <HAL_TIM_PWM_Start+0x148>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a34      	ldr	r2, [pc, #208]	@ (8006554 <HAL_TIM_PWM_Start+0x20c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <HAL_TIM_PWM_Start+0x148>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a33      	ldr	r2, [pc, #204]	@ (8006558 <HAL_TIM_PWM_Start+0x210>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <HAL_TIM_PWM_Start+0x14c>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <HAL_TIM_PWM_Start+0x14e>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a25      	ldr	r2, [pc, #148]	@ (8006544 <HAL_TIM_PWM_Start+0x1fc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d01d      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a26      	ldr	r2, [pc, #152]	@ (800655c <HAL_TIM_PWM_Start+0x214>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a24      	ldr	r2, [pc, #144]	@ (8006560 <HAL_TIM_PWM_Start+0x218>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a23      	ldr	r2, [pc, #140]	@ (8006564 <HAL_TIM_PWM_Start+0x21c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <HAL_TIM_PWM_Start+0x200>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	@ (800654c <HAL_TIM_PWM_Start+0x204>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_PWM_Start+0x1b2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <HAL_TIM_PWM_Start+0x210>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d115      	bne.n	8006526 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	4b19      	ldr	r3, [pc, #100]	@ (8006568 <HAL_TIM_PWM_Start+0x220>)
 8006502:	4013      	ands	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b06      	cmp	r3, #6
 800650a:	d015      	beq.n	8006538 <HAL_TIM_PWM_Start+0x1f0>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006512:	d011      	beq.n	8006538 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	e008      	b.n	8006538 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e000      	b.n	800653a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40012c00 	.word	0x40012c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	40015000 	.word	0x40015000
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00
 8006568:	00010007 	.word	0x00010007

0800656c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d109      	bne.n	8006598 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e03c      	b.n	8006612 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d109      	bne.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	e02f      	b.n	8006612 <HAL_TIM_PWM_Start_DMA+0xa6>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d109      	bne.n	80065cc <HAL_TIM_PWM_Start_DMA+0x60>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	bf0c      	ite	eq
 80065c4:	2301      	moveq	r3, #1
 80065c6:	2300      	movne	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	e022      	b.n	8006612 <HAL_TIM_PWM_Start_DMA+0xa6>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b0c      	cmp	r3, #12
 80065d0:	d109      	bne.n	80065e6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e015      	b.n	8006612 <HAL_TIM_PWM_Start_DMA+0xa6>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d109      	bne.n	8006600 <HAL_TIM_PWM_Start_DMA+0x94>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e008      	b.n	8006612 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
 8006618:	e1b5      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	e03c      	b.n	80066ae <HAL_TIM_PWM_Start_DMA+0x142>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d109      	bne.n	800664e <HAL_TIM_PWM_Start_DMA+0xe2>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	e02f      	b.n	80066ae <HAL_TIM_PWM_Start_DMA+0x142>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d109      	bne.n	8006668 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e022      	b.n	80066ae <HAL_TIM_PWM_Start_DMA+0x142>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b0c      	cmp	r3, #12
 800666c:	d109      	bne.n	8006682 <HAL_TIM_PWM_Start_DMA+0x116>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	e015      	b.n	80066ae <HAL_TIM_PWM_Start_DMA+0x142>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b10      	cmp	r3, #16
 8006686:	d109      	bne.n	800669c <HAL_TIM_PWM_Start_DMA+0x130>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	bf0c      	ite	eq
 8006694:	2301      	moveq	r3, #1
 8006696:	2300      	movne	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e008      	b.n	80066ae <HAL_TIM_PWM_Start_DMA+0x142>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	bf0c      	ite	eq
 80066a8:	2301      	moveq	r3, #1
 80066aa:	2300      	movne	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d034      	beq.n	800671c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_TIM_PWM_Start_DMA+0x152>
 80066b8:	887b      	ldrh	r3, [r7, #2]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e161      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start_DMA+0x166>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d0:	e026      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_PWM_Start_DMA+0x176>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e0:	e01e      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start_DMA+0x186>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f0:	e016      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_PWM_Start_DMA+0x196>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006700:	e00e      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006710:	e006      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800671a:	e001      	b.n	8006720 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e132      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	f200 80ae 	bhi.w	8006884 <HAL_TIM_PWM_Start_DMA+0x318>
 8006728:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006765 	.word	0x08006765
 8006734:	08006885 	.word	0x08006885
 8006738:	08006885 	.word	0x08006885
 800673c:	08006885 	.word	0x08006885
 8006740:	080067ad 	.word	0x080067ad
 8006744:	08006885 	.word	0x08006885
 8006748:	08006885 	.word	0x08006885
 800674c:	08006885 	.word	0x08006885
 8006750:	080067f5 	.word	0x080067f5
 8006754:	08006885 	.word	0x08006885
 8006758:	08006885 	.word	0x08006885
 800675c:	08006885 	.word	0x08006885
 8006760:	0800683d 	.word	0x0800683d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	4a89      	ldr	r2, [pc, #548]	@ (8006990 <HAL_TIM_PWM_Start_DMA+0x424>)
 800676a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	4a88      	ldr	r2, [pc, #544]	@ (8006994 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	4a87      	ldr	r2, [pc, #540]	@ (8006998 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800677a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3334      	adds	r3, #52	@ 0x34
 8006788:	461a      	mov	r2, r3
 800678a:	887b      	ldrh	r3, [r7, #2]
 800678c:	f7fd ff6e 	bl	800466c <HAL_DMA_Start_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e0f5      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a8:	60da      	str	r2, [r3, #12]
      break;
 80067aa:	e06e      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	4a77      	ldr	r2, [pc, #476]	@ (8006990 <HAL_TIM_PWM_Start_DMA+0x424>)
 80067b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	4a76      	ldr	r2, [pc, #472]	@ (8006994 <HAL_TIM_PWM_Start_DMA+0x428>)
 80067ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	4a75      	ldr	r2, [pc, #468]	@ (8006998 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80067c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3338      	adds	r3, #56	@ 0x38
 80067d0:	461a      	mov	r2, r3
 80067d2:	887b      	ldrh	r3, [r7, #2]
 80067d4:	f7fd ff4a 	bl	800466c <HAL_DMA_Start_IT>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0d1      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067f0:	60da      	str	r2, [r3, #12]
      break;
 80067f2:	e04a      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	4a65      	ldr	r2, [pc, #404]	@ (8006990 <HAL_TIM_PWM_Start_DMA+0x424>)
 80067fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4a64      	ldr	r2, [pc, #400]	@ (8006994 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006802:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	4a63      	ldr	r2, [pc, #396]	@ (8006998 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800680a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	333c      	adds	r3, #60	@ 0x3c
 8006818:	461a      	mov	r2, r3
 800681a:	887b      	ldrh	r3, [r7, #2]
 800681c:	f7fd ff26 	bl	800466c <HAL_DMA_Start_IT>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0ad      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006838:	60da      	str	r2, [r3, #12]
      break;
 800683a:	e026      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	4a53      	ldr	r2, [pc, #332]	@ (8006990 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006842:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	4a52      	ldr	r2, [pc, #328]	@ (8006994 <HAL_TIM_PWM_Start_DMA+0x428>)
 800684a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006850:	4a51      	ldr	r2, [pc, #324]	@ (8006998 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006852:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3340      	adds	r3, #64	@ 0x40
 8006860:	461a      	mov	r2, r3
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	f7fd ff02 	bl	800466c <HAL_DMA_Start_IT>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e089      	b.n	8006986 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006880:	60da      	str	r2, [r3, #12]
      break;
 8006882:	e002      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	bf00      	nop
  }

  if (status == HAL_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d179      	bne.n	8006984 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2201      	movs	r2, #1
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f001 fe07 	bl	80084ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a3e      	ldr	r2, [pc, #248]	@ (800699c <HAL_TIM_PWM_Start_DMA+0x430>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_TIM_PWM_Start_DMA+0x36e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3c      	ldr	r2, [pc, #240]	@ (80069a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_TIM_PWM_Start_DMA+0x36e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3b      	ldr	r2, [pc, #236]	@ (80069a4 <HAL_TIM_PWM_Start_DMA+0x438>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_PWM_Start_DMA+0x36e>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a39      	ldr	r2, [pc, #228]	@ (80069a8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_TIM_PWM_Start_DMA+0x36e>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a38      	ldr	r2, [pc, #224]	@ (80069ac <HAL_TIM_PWM_Start_DMA+0x440>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_TIM_PWM_Start_DMA+0x36e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a36      	ldr	r2, [pc, #216]	@ (80069b0 <HAL_TIM_PWM_Start_DMA+0x444>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <HAL_TIM_PWM_Start_DMA+0x372>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <HAL_TIM_PWM_Start_DMA+0x374>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a28      	ldr	r2, [pc, #160]	@ (800699c <HAL_TIM_PWM_Start_DMA+0x430>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006906:	d01d      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a29      	ldr	r2, [pc, #164]	@ (80069b4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a28      	ldr	r2, [pc, #160]	@ (80069b8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a26      	ldr	r2, [pc, #152]	@ (80069bc <HAL_TIM_PWM_Start_DMA+0x450>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	@ (80069a4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1c      	ldr	r2, [pc, #112]	@ (80069b0 <HAL_TIM_PWM_Start_DMA+0x444>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d115      	bne.n	8006970 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800694c:	4013      	ands	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d015      	beq.n	8006982 <HAL_TIM_PWM_Start_DMA+0x416>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695c:	d011      	beq.n	8006982 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	e008      	b.n	8006982 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e000      	b.n	8006984 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	08007a9f 	.word	0x08007a9f
 8006994:	08007b4b 	.word	0x08007b4b
 8006998:	08007a09 	.word	0x08007a09
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800
 80069b0:	40015000 	.word	0x40015000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	00010007 	.word	0x00010007

080069c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d855      	bhi.n	8006a84 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a85 	.word	0x08006a85
 80069e8:	08006a85 	.word	0x08006a85
 80069ec:	08006a85 	.word	0x08006a85
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a85 	.word	0x08006a85
 80069f8:	08006a85 	.word	0x08006a85
 80069fc:	08006a85 	.word	0x08006a85
 8006a00:	08006a4d 	.word	0x08006a4d
 8006a04:	08006a85 	.word	0x08006a85
 8006a08:	08006a85 	.word	0x08006a85
 8006a0c:	08006a85 	.word	0x08006a85
 8006a10:	08006a69 	.word	0x08006a69
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fd fef3 	bl	8004814 <HAL_DMA_Abort_IT>
      break;
 8006a2e:	e02c      	b.n	8006a8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fee5 	bl	8004814 <HAL_DMA_Abort_IT>
      break;
 8006a4a:	e01e      	b.n	8006a8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fd fed7 	bl	8004814 <HAL_DMA_Abort_IT>
      break;
 8006a66:	e010      	b.n	8006a8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd fec9 	bl	8004814 <HAL_DMA_Abort_IT>
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
      break;
 8006a88:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8086 	bne.w	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2200      	movs	r2, #0
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 fd06 	bl	80084ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a40      	ldr	r2, [pc, #256]	@ (8006ba8 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a3f      	ldr	r2, [pc, #252]	@ (8006bac <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8006bb0 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb4 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3a      	ldr	r2, [pc, #232]	@ (8006bb8 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_PWM_Stop_DMA+0x118>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a39      	ldr	r2, [pc, #228]	@ (8006bbc <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d017      	beq.n	8006b16 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b54:	e023      	b.n	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d104      	bne.n	8006b66 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b64:	e01b      	b.n	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d104      	bne.n	8006b76 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b74:	e013      	b.n	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d104      	bne.n	8006b86 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b84:	e00b      	b.n	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d104      	bne.n	8006b96 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b94:	e003      	b.n	8006b9e <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40013400 	.word	0x40013400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	40015000 	.word	0x40015000

08006bc0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006be0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d108      	bne.n	8006c02 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d105      	bne.n	8006c02 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf6:	7b7b      	ldrb	r3, [r7, #13]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bfc:	7b3b      	ldrb	r3, [r7, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d001      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e059      	b.n	8006cba <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0202 	orr.w	r2, r2, #2
 8006c34:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0204 	orr.w	r2, r2, #4
 8006c44:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fc2c 	bl	80084ac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	2104      	movs	r1, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 fc25 	bl	80084ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a17      	ldr	r2, [pc, #92]	@ (8006cc4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a15      	ldr	r2, [pc, #84]	@ (8006cc8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a14      	ldr	r2, [pc, #80]	@ (8006ccc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a12      	ldr	r2, [pc, #72]	@ (8006cd0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a11      	ldr	r2, [pc, #68]	@ (8006cd4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800
 8006cd8:	40015000 	.word	0x40015000

08006cdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0a2      	b.n	8006e36 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d111      	bne.n	8006d20 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fbf7 	bl	80084f8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a4a      	ldr	r2, [pc, #296]	@ (8006e40 <HAL_TIM_Encoder_Init+0x164>)
 8006d16:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f000 ff36 	bl	8007bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	4313      	orrs	r3, r2
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006d92:	f023 030c 	bic.w	r3, r3, #12
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	4313      	orrs	r3, r2
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	011a      	lsls	r2, r3, #4
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	031b      	lsls	r3, r3, #12
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006dd0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006dd8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	4313      	orrs	r3, r2
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08003add 	.word	0x08003add

08006e44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d102      	bne.n	8006e80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e7a:	7b7b      	ldrb	r3, [r7, #13]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d001      	beq.n	8006e84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e069      	b.n	8006f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e94:	e031      	b.n	8006efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d110      	bne.n	8006ebe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d102      	bne.n	8006ea8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ea2:	7b3b      	ldrb	r3, [r7, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d001      	beq.n	8006eac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e055      	b.n	8006f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ebc:	e01d      	b.n	8006efa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d108      	bne.n	8006ed6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d105      	bne.n	8006ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eca:	7b7b      	ldrb	r3, [r7, #13]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d102      	bne.n	8006ed6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ed0:	7b3b      	ldrb	r3, [r7, #12]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d001      	beq.n	8006eda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e03e      	b.n	8006f58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_TIM_Encoder_Start+0xc4>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d008      	beq.n	8006f18 <HAL_TIM_Encoder_Start+0xd4>
 8006f06:	e00f      	b.n	8006f28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 facb 	bl	80084ac <TIM_CCxChannelCmd>
      break;
 8006f16:	e016      	b.n	8006f46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2104      	movs	r1, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fac3 	bl	80084ac <TIM_CCxChannelCmd>
      break;
 8006f26:	e00e      	b.n	8006f46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fabb 	bl	80084ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fab4 	bl	80084ac <TIM_CCxChannelCmd>
      break;
 8006f44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d026      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d021      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0202 	mvn.w	r2, #2
 8006f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
 8006fb4:	e009      	b.n	8006fca <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d026      	beq.n	8007028 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d021      	beq.n	8007028 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0204 	mvn.w	r2, #4
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	e009      	b.n	8007022 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d026      	beq.n	8007080 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d021      	beq.n	8007080 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0208 	mvn.w	r2, #8
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2204      	movs	r2, #4
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	e009      	b.n	800707a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	d026      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d021      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0210 	mvn.w	r2, #16
 800709c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2208      	movs	r2, #8
 80070a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
 80070bc:	e009      	b.n	80070d2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0201 	mvn.w	r2, #1
 80070f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00e      	beq.n	8007132 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00e      	beq.n	800715a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800714e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0220 	mvn.w	r2, #32
 800719e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00e      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00e      	beq.n	80071fa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80071ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00e      	beq.n	8007222 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800726e:	2302      	movs	r3, #2
 8007270:	e0ff      	b.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b14      	cmp	r3, #20
 800727e:	f200 80f0 	bhi.w	8007462 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007282:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072dd 	.word	0x080072dd
 800728c:	08007463 	.word	0x08007463
 8007290:	08007463 	.word	0x08007463
 8007294:	08007463 	.word	0x08007463
 8007298:	0800731d 	.word	0x0800731d
 800729c:	08007463 	.word	0x08007463
 80072a0:	08007463 	.word	0x08007463
 80072a4:	08007463 	.word	0x08007463
 80072a8:	0800735f 	.word	0x0800735f
 80072ac:	08007463 	.word	0x08007463
 80072b0:	08007463 	.word	0x08007463
 80072b4:	08007463 	.word	0x08007463
 80072b8:	0800739f 	.word	0x0800739f
 80072bc:	08007463 	.word	0x08007463
 80072c0:	08007463 	.word	0x08007463
 80072c4:	08007463 	.word	0x08007463
 80072c8:	080073e1 	.word	0x080073e1
 80072cc:	08007463 	.word	0x08007463
 80072d0:	08007463 	.word	0x08007463
 80072d4:	08007463 	.word	0x08007463
 80072d8:	08007421 	.word	0x08007421
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fd1c 	bl	8007d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0204 	bic.w	r2, r2, #4
 8007306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	619a      	str	r2, [r3, #24]
      break;
 800731a:	e0a5      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fd96 	bl	8007e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6999      	ldr	r1, [r3, #24]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	021a      	lsls	r2, r3, #8
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	619a      	str	r2, [r3, #24]
      break;
 800735c:	e084      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fe09 	bl	8007f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0208 	orr.w	r2, r2, #8
 8007378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0204 	bic.w	r2, r2, #4
 8007388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69d9      	ldr	r1, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	61da      	str	r2, [r3, #28]
      break;
 800739c:	e064      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fe7b 	bl	80080a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69d9      	ldr	r1, [r3, #28]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	021a      	lsls	r2, r3, #8
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	61da      	str	r2, [r3, #28]
      break;
 80073de:	e043      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 feee 	bl	80081c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0208 	orr.w	r2, r2, #8
 80073fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0204 	bic.w	r2, r2, #4
 800740a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800741e:	e023      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 ff38 	bl	800829c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800743a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800744a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	021a      	lsls	r2, r3, #8
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007460:	e002      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
      break;
 8007466:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop

0800747c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_TIM_ConfigClockSource+0x1c>
 8007494:	2302      	movs	r3, #2
 8007496:	e0f6      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x20a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80074b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a6f      	ldr	r2, [pc, #444]	@ (8007690 <HAL_TIM_ConfigClockSource+0x214>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	f000 80c1 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 80074d8:	4a6d      	ldr	r2, [pc, #436]	@ (8007690 <HAL_TIM_ConfigClockSource+0x214>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	f200 80c6 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 80074e0:	4a6c      	ldr	r2, [pc, #432]	@ (8007694 <HAL_TIM_ConfigClockSource+0x218>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	f000 80b9 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 80074e8:	4a6a      	ldr	r2, [pc, #424]	@ (8007694 <HAL_TIM_ConfigClockSource+0x218>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	f200 80be 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 80074f0:	4a69      	ldr	r2, [pc, #420]	@ (8007698 <HAL_TIM_ConfigClockSource+0x21c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	f000 80b1 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 80074f8:	4a67      	ldr	r2, [pc, #412]	@ (8007698 <HAL_TIM_ConfigClockSource+0x21c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	f200 80b6 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007500:	4a66      	ldr	r2, [pc, #408]	@ (800769c <HAL_TIM_ConfigClockSource+0x220>)
 8007502:	4293      	cmp	r3, r2
 8007504:	f000 80a9 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007508:	4a64      	ldr	r2, [pc, #400]	@ (800769c <HAL_TIM_ConfigClockSource+0x220>)
 800750a:	4293      	cmp	r3, r2
 800750c:	f200 80ae 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007510:	4a63      	ldr	r2, [pc, #396]	@ (80076a0 <HAL_TIM_ConfigClockSource+0x224>)
 8007512:	4293      	cmp	r3, r2
 8007514:	f000 80a1 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007518:	4a61      	ldr	r2, [pc, #388]	@ (80076a0 <HAL_TIM_ConfigClockSource+0x224>)
 800751a:	4293      	cmp	r3, r2
 800751c:	f200 80a6 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007520:	4a60      	ldr	r2, [pc, #384]	@ (80076a4 <HAL_TIM_ConfigClockSource+0x228>)
 8007522:	4293      	cmp	r3, r2
 8007524:	f000 8099 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007528:	4a5e      	ldr	r2, [pc, #376]	@ (80076a4 <HAL_TIM_ConfigClockSource+0x228>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f200 809e 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007530:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007534:	f000 8091 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007538:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800753c:	f200 8096 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007544:	f000 8089 	beq.w	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754c:	f200 808e 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007554:	d03e      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x158>
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800755a:	f200 8087 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007562:	f000 8086 	beq.w	8007672 <HAL_TIM_ConfigClockSource+0x1f6>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800756a:	d87f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 800756c:	2b70      	cmp	r3, #112	@ 0x70
 800756e:	d01a      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x12a>
 8007570:	2b70      	cmp	r3, #112	@ 0x70
 8007572:	d87b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007574:	2b60      	cmp	r3, #96	@ 0x60
 8007576:	d050      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x19e>
 8007578:	2b60      	cmp	r3, #96	@ 0x60
 800757a:	d877      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 800757c:	2b50      	cmp	r3, #80	@ 0x50
 800757e:	d03c      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x17e>
 8007580:	2b50      	cmp	r3, #80	@ 0x50
 8007582:	d873      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007584:	2b40      	cmp	r3, #64	@ 0x40
 8007586:	d058      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x1be>
 8007588:	2b40      	cmp	r3, #64	@ 0x40
 800758a:	d86f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 800758c:	2b30      	cmp	r3, #48	@ 0x30
 800758e:	d064      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007590:	2b30      	cmp	r3, #48	@ 0x30
 8007592:	d86b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d060      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x1de>
 8007598:	2b20      	cmp	r3, #32
 800759a:	d867      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05c      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x1de>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d05a      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x1de>
 80075a4:	e062      	b.n	800766c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075b6:	f000 ff59 	bl	800846c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	609a      	str	r2, [r3, #8]
      break;
 80075d2:	e04f      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e4:	f000 ff42 	bl	800846c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075f6:	609a      	str	r2, [r3, #8]
      break;
 80075f8:	e03c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007606:	461a      	mov	r2, r3
 8007608:	f000 feb4 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2150      	movs	r1, #80	@ 0x50
 8007612:	4618      	mov	r0, r3
 8007614:	f000 ff0d 	bl	8008432 <TIM_ITRx_SetConfig>
      break;
 8007618:	e02c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fed3 	bl	80083d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2160      	movs	r1, #96	@ 0x60
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fefd 	bl	8008432 <TIM_ITRx_SetConfig>
      break;
 8007638:	e01c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	461a      	mov	r2, r3
 8007648:	f000 fe94 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2140      	movs	r1, #64	@ 0x40
 8007652:	4618      	mov	r0, r3
 8007654:	f000 feed 	bl	8008432 <TIM_ITRx_SetConfig>
      break;
 8007658:	e00c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f000 fee4 	bl	8008432 <TIM_ITRx_SetConfig>
      break;
 800766a:	e003      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e000      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	00100070 	.word	0x00100070
 8007694:	00100060 	.word	0x00100060
 8007698:	00100050 	.word	0x00100050
 800769c:	00100040 	.word	0x00100040
 80076a0:	00100030 	.word	0x00100030
 80076a4:	00100020 	.word	0x00100020

080076a8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	460b      	mov	r3, r1
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e14a      	b.n	80079fa <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	f040 80dd 	bne.w	800792c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b1f      	cmp	r3, #31
 8007776:	f200 80d6 	bhi.w	8007926 <HAL_TIM_RegisterCallback+0x1de>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <HAL_TIM_RegisterCallback+0x38>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007801 	.word	0x08007801
 8007784:	08007809 	.word	0x08007809
 8007788:	08007811 	.word	0x08007811
 800778c:	08007819 	.word	0x08007819
 8007790:	08007821 	.word	0x08007821
 8007794:	08007829 	.word	0x08007829
 8007798:	08007831 	.word	0x08007831
 800779c:	08007839 	.word	0x08007839
 80077a0:	08007841 	.word	0x08007841
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007851 	.word	0x08007851
 80077ac:	08007859 	.word	0x08007859
 80077b0:	08007861 	.word	0x08007861
 80077b4:	08007869 	.word	0x08007869
 80077b8:	08007873 	.word	0x08007873
 80077bc:	0800787d 	.word	0x0800787d
 80077c0:	08007887 	.word	0x08007887
 80077c4:	08007891 	.word	0x08007891
 80077c8:	0800789b 	.word	0x0800789b
 80077cc:	080078a5 	.word	0x080078a5
 80077d0:	080078af 	.word	0x080078af
 80077d4:	080078b9 	.word	0x080078b9
 80077d8:	080078c3 	.word	0x080078c3
 80077dc:	080078cd 	.word	0x080078cd
 80077e0:	080078d7 	.word	0x080078d7
 80077e4:	080078e1 	.word	0x080078e1
 80077e8:	080078eb 	.word	0x080078eb
 80077ec:	080078f5 	.word	0x080078f5
 80077f0:	080078ff 	.word	0x080078ff
 80077f4:	08007909 	.word	0x08007909
 80077f8:	08007913 	.word	0x08007913
 80077fc:	0800791d 	.word	0x0800791d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007806:	e0f7      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800780e:	e0f3      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007816:	e0ef      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800781e:	e0eb      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007826:	e0e7      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800782e:	e0e3      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007836:	e0df      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800783e:	e0db      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007846:	e0d7      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800784e:	e0d3      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007856:	e0cf      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800785e:	e0cb      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007866:	e0c7      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007870:	e0c2      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800787a:	e0bd      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007884:	e0b8      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800788e:	e0b3      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007898:	e0ae      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80078a2:	e0a9      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80078ac:	e0a4      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80078b6:	e09f      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80078c0:	e09a      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80078ca:	e095      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80078d4:	e090      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80078de:	e08b      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80078e8:	e086      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80078f2:	e081      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80078fc:	e07c      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007906:	e077      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007910:	e072      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800791a:	e06d      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007924:	e068      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
        break;
 800792a:	e065      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d15d      	bne.n	80079f4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	2b0d      	cmp	r3, #13
 800793c:	d857      	bhi.n	80079ee <HAL_TIM_RegisterCallback+0x2a6>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <HAL_TIM_RegisterCallback+0x1fc>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800797d 	.word	0x0800797d
 8007948:	08007985 	.word	0x08007985
 800794c:	0800798d 	.word	0x0800798d
 8007950:	08007995 	.word	0x08007995
 8007954:	0800799d 	.word	0x0800799d
 8007958:	080079a5 	.word	0x080079a5
 800795c:	080079ad 	.word	0x080079ad
 8007960:	080079b5 	.word	0x080079b5
 8007964:	080079bd 	.word	0x080079bd
 8007968:	080079c5 	.word	0x080079c5
 800796c:	080079cd 	.word	0x080079cd
 8007970:	080079d5 	.word	0x080079d5
 8007974:	080079dd 	.word	0x080079dd
 8007978:	080079e5 	.word	0x080079e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007982:	e039      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800798a:	e035      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007992:	e031      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800799a:	e02d      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80079a2:	e029      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80079aa:	e025      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80079b2:	e021      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80079ba:	e01d      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80079c2:	e019      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80079ca:	e015      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80079d2:	e011      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80079da:	e00d      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80079e2:	e009      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80079ec:	e004      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
        break;
 80079f2:	e001      	b.n	80079f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d107      	bne.n	8007a30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a2e:	e02a      	b.n	8007a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d107      	bne.n	8007a4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a48:	e01d      	b.n	8007a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d107      	bne.n	8007a64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2204      	movs	r2, #4
 8007a58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a62:	e010      	b.n	8007a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d107      	bne.n	8007a7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2208      	movs	r2, #8
 8007a72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a7c:	e003      	b.n	8007a86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	771a      	strb	r2, [r3, #28]
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aaa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d10b      	bne.n	8007ace <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d136      	bne.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007acc:	e031      	b.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d10b      	bne.n	8007af0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2202      	movs	r2, #2
 8007adc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d125      	bne.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aee:	e020      	b.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d10b      	bne.n	8007b12 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2204      	movs	r2, #4
 8007afe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d114      	bne.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b10:	e00f      	b.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d10a      	bne.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2208      	movs	r2, #8
 8007b20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	771a      	strb	r2, [r3, #28]
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d103      	bne.n	8007b6a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	771a      	strb	r2, [r3, #28]
 8007b68:	e019      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d103      	bne.n	8007b7c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	771a      	strb	r2, [r3, #28]
 8007b7a:	e010      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d103      	bne.n	8007b8e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	771a      	strb	r2, [r3, #28]
 8007b8c:	e007      	b.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d102      	bne.n	8007b9e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2208      	movs	r2, #8
 8007b9c:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	771a      	strb	r2, [r3, #28]
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a4c      	ldr	r2, [pc, #304]	@ (8007cfc <TIM_Base_SetConfig+0x144>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d017      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd6:	d013      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a49      	ldr	r2, [pc, #292]	@ (8007d00 <TIM_Base_SetConfig+0x148>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00f      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a48      	ldr	r2, [pc, #288]	@ (8007d04 <TIM_Base_SetConfig+0x14c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a47      	ldr	r2, [pc, #284]	@ (8007d08 <TIM_Base_SetConfig+0x150>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a46      	ldr	r2, [pc, #280]	@ (8007d0c <TIM_Base_SetConfig+0x154>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_Base_SetConfig+0x48>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a45      	ldr	r2, [pc, #276]	@ (8007d10 <TIM_Base_SetConfig+0x158>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d108      	bne.n	8007c12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a39      	ldr	r2, [pc, #228]	@ (8007cfc <TIM_Base_SetConfig+0x144>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d023      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c20:	d01f      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a36      	ldr	r2, [pc, #216]	@ (8007d00 <TIM_Base_SetConfig+0x148>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01b      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a35      	ldr	r2, [pc, #212]	@ (8007d04 <TIM_Base_SetConfig+0x14c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d017      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a34      	ldr	r2, [pc, #208]	@ (8007d08 <TIM_Base_SetConfig+0x150>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	@ (8007d0c <TIM_Base_SetConfig+0x154>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00f      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a33      	ldr	r2, [pc, #204]	@ (8007d14 <TIM_Base_SetConfig+0x15c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a32      	ldr	r2, [pc, #200]	@ (8007d18 <TIM_Base_SetConfig+0x160>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a31      	ldr	r2, [pc, #196]	@ (8007d1c <TIM_Base_SetConfig+0x164>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_Base_SetConfig+0xaa>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8007d10 <TIM_Base_SetConfig+0x158>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <TIM_Base_SetConfig+0x144>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <TIM_Base_SetConfig+0x110>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d0c <TIM_Base_SetConfig+0x154>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x110>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a1a      	ldr	r2, [pc, #104]	@ (8007d14 <TIM_Base_SetConfig+0x15c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x110>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a19      	ldr	r2, [pc, #100]	@ (8007d18 <TIM_Base_SetConfig+0x160>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <TIM_Base_SetConfig+0x110>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a18      	ldr	r2, [pc, #96]	@ (8007d1c <TIM_Base_SetConfig+0x164>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x110>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a13      	ldr	r2, [pc, #76]	@ (8007d10 <TIM_Base_SetConfig+0x158>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d103      	bne.n	8007cd0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d105      	bne.n	8007cee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f023 0201 	bic.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	611a      	str	r2, [r3, #16]
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40013400 	.word	0x40013400
 8007d10:	40015000 	.word	0x40015000
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40014400 	.word	0x40014400
 8007d1c:	40014800 	.word	0x40014800

08007d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	f023 0201 	bic.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 0302 	bic.w	r3, r3, #2
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a30      	ldr	r2, [pc, #192]	@ (8007e3c <TIM_OC1_SetConfig+0x11c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <TIM_OC1_SetConfig+0x88>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a2f      	ldr	r2, [pc, #188]	@ (8007e40 <TIM_OC1_SetConfig+0x120>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00f      	beq.n	8007da8 <TIM_OC1_SetConfig+0x88>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e44 <TIM_OC1_SetConfig+0x124>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00b      	beq.n	8007da8 <TIM_OC1_SetConfig+0x88>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <TIM_OC1_SetConfig+0x128>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d007      	beq.n	8007da8 <TIM_OC1_SetConfig+0x88>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <TIM_OC1_SetConfig+0x12c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d003      	beq.n	8007da8 <TIM_OC1_SetConfig+0x88>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e50 <TIM_OC1_SetConfig+0x130>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d10c      	bne.n	8007dc2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f023 0308 	bic.w	r3, r3, #8
 8007dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f023 0304 	bic.w	r3, r3, #4
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e3c <TIM_OC1_SetConfig+0x11c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <TIM_OC1_SetConfig+0xd2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8007e40 <TIM_OC1_SetConfig+0x120>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00f      	beq.n	8007df2 <TIM_OC1_SetConfig+0xd2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e44 <TIM_OC1_SetConfig+0x124>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_OC1_SetConfig+0xd2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e48 <TIM_OC1_SetConfig+0x128>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_OC1_SetConfig+0xd2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a19      	ldr	r2, [pc, #100]	@ (8007e4c <TIM_OC1_SetConfig+0x12c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_OC1_SetConfig+0xd2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a18      	ldr	r2, [pc, #96]	@ (8007e50 <TIM_OC1_SetConfig+0x130>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d111      	bne.n	8007e16 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	621a      	str	r2, [r3, #32]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	40013400 	.word	0x40013400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400
 8007e4c:	40014800 	.word	0x40014800
 8007e50:	40015000 	.word	0x40015000

08007e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f023 0210 	bic.w	r2, r3, #16
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0320 	bic.w	r3, r3, #32
 8007ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f64 <TIM_OC2_SetConfig+0x110>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d007      	beq.n	8007ec8 <TIM_OC2_SetConfig+0x74>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a2b      	ldr	r2, [pc, #172]	@ (8007f68 <TIM_OC2_SetConfig+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_OC2_SetConfig+0x74>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8007f6c <TIM_OC2_SetConfig+0x118>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10d      	bne.n	8007ee4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f64 <TIM_OC2_SetConfig+0x110>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d013      	beq.n	8007f14 <TIM_OC2_SetConfig+0xc0>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a1e      	ldr	r2, [pc, #120]	@ (8007f68 <TIM_OC2_SetConfig+0x114>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00f      	beq.n	8007f14 <TIM_OC2_SetConfig+0xc0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <TIM_OC2_SetConfig+0x11c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00b      	beq.n	8007f14 <TIM_OC2_SetConfig+0xc0>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a1d      	ldr	r2, [pc, #116]	@ (8007f74 <TIM_OC2_SetConfig+0x120>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d007      	beq.n	8007f14 <TIM_OC2_SetConfig+0xc0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	@ (8007f78 <TIM_OC2_SetConfig+0x124>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_OC2_SetConfig+0xc0>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a17      	ldr	r2, [pc, #92]	@ (8007f6c <TIM_OC2_SetConfig+0x118>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d113      	bne.n	8007f3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	621a      	str	r2, [r3, #32]
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40013400 	.word	0x40013400
 8007f6c:	40015000 	.word	0x40015000
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8008088 <TIM_OC3_SetConfig+0x10c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_OC3_SetConfig+0x72>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800808c <TIM_OC3_SetConfig+0x110>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_OC3_SetConfig+0x72>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a29      	ldr	r2, [pc, #164]	@ (8008090 <TIM_OC3_SetConfig+0x114>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d10d      	bne.n	800800a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a1e      	ldr	r2, [pc, #120]	@ (8008088 <TIM_OC3_SetConfig+0x10c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <TIM_OC3_SetConfig+0xbe>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <TIM_OC3_SetConfig+0x110>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_OC3_SetConfig+0xbe>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1d      	ldr	r2, [pc, #116]	@ (8008094 <TIM_OC3_SetConfig+0x118>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_OC3_SetConfig+0xbe>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a1c      	ldr	r2, [pc, #112]	@ (8008098 <TIM_OC3_SetConfig+0x11c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_OC3_SetConfig+0xbe>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1b      	ldr	r2, [pc, #108]	@ (800809c <TIM_OC3_SetConfig+0x120>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_OC3_SetConfig+0xbe>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a16      	ldr	r2, [pc, #88]	@ (8008090 <TIM_OC3_SetConfig+0x114>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d113      	bne.n	8008062 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40013400 	.word	0x40013400
 8008090:	40015000 	.word	0x40015000
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	40014800 	.word	0x40014800

080080a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	031b      	lsls	r3, r3, #12
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2c      	ldr	r2, [pc, #176]	@ (80081b0 <TIM_OC4_SetConfig+0x110>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d007      	beq.n	8008114 <TIM_OC4_SetConfig+0x74>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a2b      	ldr	r2, [pc, #172]	@ (80081b4 <TIM_OC4_SetConfig+0x114>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_OC4_SetConfig+0x74>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a2a      	ldr	r2, [pc, #168]	@ (80081b8 <TIM_OC4_SetConfig+0x118>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10d      	bne.n	8008130 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800811a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800812e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1f      	ldr	r2, [pc, #124]	@ (80081b0 <TIM_OC4_SetConfig+0x110>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <TIM_OC4_SetConfig+0xc0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1e      	ldr	r2, [pc, #120]	@ (80081b4 <TIM_OC4_SetConfig+0x114>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00f      	beq.n	8008160 <TIM_OC4_SetConfig+0xc0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <TIM_OC4_SetConfig+0x11c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00b      	beq.n	8008160 <TIM_OC4_SetConfig+0xc0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <TIM_OC4_SetConfig+0x120>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d007      	beq.n	8008160 <TIM_OC4_SetConfig+0xc0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <TIM_OC4_SetConfig+0x124>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_OC4_SetConfig+0xc0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a17      	ldr	r2, [pc, #92]	@ (80081b8 <TIM_OC4_SetConfig+0x118>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d113      	bne.n	8008188 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008166:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800816e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	019b      	lsls	r3, r3, #6
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	019b      	lsls	r3, r3, #6
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40013400 	.word	0x40013400
 80081b8:	40015000 	.word	0x40015000
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800

080081c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800820c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <TIM_OC5_SetConfig+0xbc>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <TIM_OC5_SetConfig+0x82>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a18      	ldr	r2, [pc, #96]	@ (8008288 <TIM_OC5_SetConfig+0xc0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00f      	beq.n	800824a <TIM_OC5_SetConfig+0x82>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a17      	ldr	r2, [pc, #92]	@ (800828c <TIM_OC5_SetConfig+0xc4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00b      	beq.n	800824a <TIM_OC5_SetConfig+0x82>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a16      	ldr	r2, [pc, #88]	@ (8008290 <TIM_OC5_SetConfig+0xc8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <TIM_OC5_SetConfig+0x82>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a15      	ldr	r2, [pc, #84]	@ (8008294 <TIM_OC5_SetConfig+0xcc>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_OC5_SetConfig+0x82>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a14      	ldr	r2, [pc, #80]	@ (8008298 <TIM_OC5_SetConfig+0xd0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d109      	bne.n	800825e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	40012c00 	.word	0x40012c00
 8008288:	40013400 	.word	0x40013400
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800
 8008298:	40015000 	.word	0x40015000

0800829c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	051b      	lsls	r3, r3, #20
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a1a      	ldr	r2, [pc, #104]	@ (800835c <TIM_OC6_SetConfig+0xc0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d013      	beq.n	8008320 <TIM_OC6_SetConfig+0x84>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a19      	ldr	r2, [pc, #100]	@ (8008360 <TIM_OC6_SetConfig+0xc4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00f      	beq.n	8008320 <TIM_OC6_SetConfig+0x84>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a18      	ldr	r2, [pc, #96]	@ (8008364 <TIM_OC6_SetConfig+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00b      	beq.n	8008320 <TIM_OC6_SetConfig+0x84>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a17      	ldr	r2, [pc, #92]	@ (8008368 <TIM_OC6_SetConfig+0xcc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d007      	beq.n	8008320 <TIM_OC6_SetConfig+0x84>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a16      	ldr	r2, [pc, #88]	@ (800836c <TIM_OC6_SetConfig+0xd0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC6_SetConfig+0x84>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a15      	ldr	r2, [pc, #84]	@ (8008370 <TIM_OC6_SetConfig+0xd4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d109      	bne.n	8008334 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	029b      	lsls	r3, r3, #10
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40013400 	.word	0x40013400
 8008364:	40014000 	.word	0x40014000
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800
 8008370:	40015000 	.word	0x40015000

08008374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0201 	bic.w	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800839e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f023 030a 	bic.w	r3, r3, #10
 80083b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f023 0210 	bic.w	r2, r3, #16
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	031b      	lsls	r3, r3, #12
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	621a      	str	r2, [r3, #32]
}
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	f043 0307 	orr.w	r3, r3, #7
 8008458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	431a      	orrs	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4313      	orrs	r3, r2
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	609a      	str	r2, [r3, #8]
}
 80084a0:	bf00      	nop
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 031f 	and.w	r3, r3, #31
 80084be:	2201      	movs	r2, #1
 80084c0:	fa02 f303 	lsl.w	r3, r2, r3
 80084c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1a      	ldr	r2, [r3, #32]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	43db      	mvns	r3, r3
 80084ce:	401a      	ands	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1a      	ldr	r2, [r3, #32]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	431a      	orrs	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
	...

080084f8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a26      	ldr	r2, [pc, #152]	@ (800859c <TIM_ResetCallback+0xa4>)
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a25      	ldr	r2, [pc, #148]	@ (80085a0 <TIM_ResetCallback+0xa8>)
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a24      	ldr	r2, [pc, #144]	@ (80085a4 <TIM_ResetCallback+0xac>)
 8008514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a23      	ldr	r2, [pc, #140]	@ (80085a8 <TIM_ResetCallback+0xb0>)
 800851c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a22      	ldr	r2, [pc, #136]	@ (80085ac <TIM_ResetCallback+0xb4>)
 8008524:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a21      	ldr	r2, [pc, #132]	@ (80085b0 <TIM_ResetCallback+0xb8>)
 800852c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a20      	ldr	r2, [pc, #128]	@ (80085b4 <TIM_ResetCallback+0xbc>)
 8008534:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <TIM_ResetCallback+0xc0>)
 800853c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1e      	ldr	r2, [pc, #120]	@ (80085bc <TIM_ResetCallback+0xc4>)
 8008544:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a1d      	ldr	r2, [pc, #116]	@ (80085c0 <TIM_ResetCallback+0xc8>)
 800854c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a1c      	ldr	r2, [pc, #112]	@ (80085c4 <TIM_ResetCallback+0xcc>)
 8008554:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a1b      	ldr	r2, [pc, #108]	@ (80085c8 <TIM_ResetCallback+0xd0>)
 800855c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1a      	ldr	r2, [pc, #104]	@ (80085cc <TIM_ResetCallback+0xd4>)
 8008564:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a19      	ldr	r2, [pc, #100]	@ (80085d0 <TIM_ResetCallback+0xd8>)
 800856c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a18      	ldr	r2, [pc, #96]	@ (80085d4 <TIM_ResetCallback+0xdc>)
 8008574:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a17      	ldr	r2, [pc, #92]	@ (80085d8 <TIM_ResetCallback+0xe0>)
 800857c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a16      	ldr	r2, [pc, #88]	@ (80085dc <TIM_ResetCallback+0xe4>)
 8008584:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a15      	ldr	r2, [pc, #84]	@ (80085e0 <TIM_ResetCallback+0xe8>)
 800858c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	080037c9 	.word	0x080037c9
 80085a0:	080076a9 	.word	0x080076a9
 80085a4:	0800770d 	.word	0x0800770d
 80085a8:	08007721 	.word	0x08007721
 80085ac:	080076d1 	.word	0x080076d1
 80085b0:	080076e5 	.word	0x080076e5
 80085b4:	080076bd 	.word	0x080076bd
 80085b8:	0800379d 	.word	0x0800379d
 80085bc:	080076f9 	.word	0x080076f9
 80085c0:	08007735 	.word	0x08007735
 80085c4:	08008a7d 	.word	0x08008a7d
 80085c8:	08008a91 	.word	0x08008a91
 80085cc:	08008aa5 	.word	0x08008aa5
 80085d0:	08008ab9 	.word	0x08008ab9
 80085d4:	08008acd 	.word	0x08008acd
 80085d8:	08008ae1 	.word	0x08008ae1
 80085dc:	08008af5 	.word	0x08008af5
 80085e0:	08008b09 	.word	0x08008b09

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e074      	b.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a34      	ldr	r2, [pc, #208]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d009      	beq.n	800863a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a33      	ldr	r2, [pc, #204]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d004      	beq.n	800863a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a31      	ldr	r2, [pc, #196]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d108      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008640:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a21      	ldr	r2, [pc, #132]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d022      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867c:	d01d      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1f      	ldr	r2, [pc, #124]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d018      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1d      	ldr	r2, [pc, #116]	@ (8008704 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1c      	ldr	r2, [pc, #112]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a18      	ldr	r2, [pc, #96]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a11      	ldr	r2, [pc, #68]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10c      	bne.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40012c00 	.word	0x40012c00
 80086f8:	40013400 	.word	0x40013400
 80086fc:	40015000 	.word	0x40015000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40014000 	.word	0x40014000

08008710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008728:	2302      	movs	r3, #2
 800872a:	e078      	b.n	800881e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1c      	ldr	r2, [pc, #112]	@ (800882c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d009      	beq.n	80087d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008830 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d004      	beq.n	80087d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a19      	ldr	r2, [pc, #100]	@ (8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d11c      	bne.n	800880c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	051b      	lsls	r3, r3, #20
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40013400 	.word	0x40013400
 8008834:	40015000 	.word	0x40015000

08008838 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008838:	b480      	push	{r7}
 800883a:	b08b      	sub	sp, #44	@ 0x2c
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008854:	2302      	movs	r3, #2
 8008856:	e10b      	b.n	8008a70 <HAL_TIMEx_ConfigBreakInput+0x238>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b80      	cmp	r3, #128	@ 0x80
 8008866:	f000 8096 	beq.w	8008996 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800886a:	2b80      	cmp	r3, #128	@ 0x80
 800886c:	f200 809c 	bhi.w	80089a8 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008870:	2b20      	cmp	r3, #32
 8008872:	d849      	bhi.n	8008908 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8097 	beq.w	80089a8 <HAL_TIMEx_ConfigBreakInput+0x170>
 800887a:	3b01      	subs	r3, #1
 800887c:	2b1f      	cmp	r3, #31
 800887e:	f200 8093 	bhi.w	80089a8 <HAL_TIMEx_ConfigBreakInput+0x170>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <HAL_TIMEx_ConfigBreakInput+0x50>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	0800890f 	.word	0x0800890f
 800888c:	08008923 	.word	0x08008923
 8008890:	080089a9 	.word	0x080089a9
 8008894:	08008937 	.word	0x08008937
 8008898:	080089a9 	.word	0x080089a9
 800889c:	080089a9 	.word	0x080089a9
 80088a0:	080089a9 	.word	0x080089a9
 80088a4:	0800894b 	.word	0x0800894b
 80088a8:	080089a9 	.word	0x080089a9
 80088ac:	080089a9 	.word	0x080089a9
 80088b0:	080089a9 	.word	0x080089a9
 80088b4:	080089a9 	.word	0x080089a9
 80088b8:	080089a9 	.word	0x080089a9
 80088bc:	080089a9 	.word	0x080089a9
 80088c0:	080089a9 	.word	0x080089a9
 80088c4:	0800895f 	.word	0x0800895f
 80088c8:	080089a9 	.word	0x080089a9
 80088cc:	080089a9 	.word	0x080089a9
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	080089a9 	.word	0x080089a9
 80088d8:	080089a9 	.word	0x080089a9
 80088dc:	080089a9 	.word	0x080089a9
 80088e0:	080089a9 	.word	0x080089a9
 80088e4:	080089a9 	.word	0x080089a9
 80088e8:	080089a9 	.word	0x080089a9
 80088ec:	080089a9 	.word	0x080089a9
 80088f0:	080089a9 	.word	0x080089a9
 80088f4:	080089a9 	.word	0x080089a9
 80088f8:	080089a9 	.word	0x080089a9
 80088fc:	080089a9 	.word	0x080089a9
 8008900:	080089a9 	.word	0x080089a9
 8008904:	08008973 	.word	0x08008973
 8008908:	2b40      	cmp	r3, #64	@ 0x40
 800890a:	d03b      	beq.n	8008984 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800890c:	e04c      	b.n	80089a8 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800890e:	2301      	movs	r3, #1
 8008910:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008912:	2300      	movs	r3, #0
 8008914:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800891a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800891c:	2309      	movs	r3, #9
 800891e:	617b      	str	r3, [r7, #20]
      break;
 8008920:	e04b      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008922:	2302      	movs	r3, #2
 8008924:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008926:	2301      	movs	r3, #1
 8008928:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800892a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800892e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008930:	230a      	movs	r3, #10
 8008932:	617b      	str	r3, [r7, #20]
      break;
 8008934:	e041      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008936:	2304      	movs	r3, #4
 8008938:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800893a:	2302      	movs	r3, #2
 800893c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800893e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008942:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008944:	230b      	movs	r3, #11
 8008946:	617b      	str	r3, [r7, #20]
      break;
 8008948:	e037      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800894a:	2308      	movs	r3, #8
 800894c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800894e:	2303      	movs	r3, #3
 8008950:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008956:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008958:	230c      	movs	r3, #12
 800895a:	617b      	str	r3, [r7, #20]
      break;
 800895c:	e02d      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800895e:	2310      	movs	r3, #16
 8008960:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008962:	2304      	movs	r3, #4
 8008964:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800896a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800896c:	230d      	movs	r3, #13
 800896e:	617b      	str	r3, [r7, #20]
      break;
 8008970:	e023      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8008972:	2320      	movs	r3, #32
 8008974:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008976:	2305      	movs	r3, #5
 8008978:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
      break;
 8008982:	e01a      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8008984:	2340      	movs	r3, #64	@ 0x40
 8008986:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008988:	2306      	movs	r3, #6
 800898a:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
      break;
 8008994:	e011      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8008996:	2380      	movs	r3, #128	@ 0x80
 8008998:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800899a:	2307      	movs	r3, #7
 800899c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
      break;
 80089a6:	e008      	b.n	80089ba <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
      break;
 80089b8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d003      	beq.n	80089c8 <HAL_TIMEx_ConfigBreakInput+0x190>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d025      	beq.n	8008a12 <HAL_TIMEx_ConfigBreakInput+0x1da>
 80089c6:	e049      	b.n	8008a5c <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ce:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	43db      	mvns	r3, r3
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4013      	ands	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	409a      	lsls	r2, r3
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	4013      	ands	r3, r2
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	43db      	mvns	r3, r3
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4013      	ands	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	409a      	lsls	r2, r3
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4013      	ands	r3, r2
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008a10:	e028      	b.n	8008a64 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a18:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4013      	ands	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	409a      	lsls	r2, r3
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008a5a:	e003      	b.n	8008a64 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008a62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	372c      	adds	r7, #44	@ 0x2c
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e050      	b.n	8008bd0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d114      	bne.n	8008b62 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fdc5 	bl	80096d0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a21      	ldr	r2, [pc, #132]	@ (8008bd8 <HAL_UART_Init+0xbc>)
 8008b54:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2224      	movs	r2, #36	@ 0x24
 8008b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0201 	bic.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 f8f2 	bl	8009d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fdf3 	bl	8009774 <UART_SetConfig>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e01b      	b.n	8008bd0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 f971 	bl	8009eb0 <UART_CheckIdleState>
 8008bce:	4603      	mov	r3, r0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	08003c15 	.word	0x08003c15

08008bdc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	460b      	mov	r3, r1
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e09c      	b.n	8008d42 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d16c      	bne.n	8008cec <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008c12:	7afb      	ldrb	r3, [r7, #11]
 8008c14:	2b0c      	cmp	r3, #12
 8008c16:	d85e      	bhi.n	8008cd6 <HAL_UART_RegisterCallback+0xfa>
 8008c18:	a201      	add	r2, pc, #4	@ (adr r2, 8008c20 <HAL_UART_RegisterCallback+0x44>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c55 	.word	0x08008c55
 8008c24:	08008c5f 	.word	0x08008c5f
 8008c28:	08008c69 	.word	0x08008c69
 8008c2c:	08008c73 	.word	0x08008c73
 8008c30:	08008c7d 	.word	0x08008c7d
 8008c34:	08008c87 	.word	0x08008c87
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008c9b 	.word	0x08008c9b
 8008c40:	08008ca5 	.word	0x08008ca5
 8008c44:	08008caf 	.word	0x08008caf
 8008c48:	08008cb9 	.word	0x08008cb9
 8008c4c:	08008cc3 	.word	0x08008cc3
 8008c50:	08008ccd 	.word	0x08008ccd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008c5c:	e070      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008c66:	e06b      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008c70:	e066      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008c7a:	e061      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008c84:	e05c      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008c8e:	e057      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008c98:	e052      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008ca2:	e04d      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008cac:	e048      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008cb6:	e043      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008cc0:	e03e      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008cca:	e039      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008cd4:	e034      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
        break;
 8008cea:	e029      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d11a      	bne.n	8008d2c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	2b0b      	cmp	r3, #11
 8008cfa:	d002      	beq.n	8008d02 <HAL_UART_RegisterCallback+0x126>
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	d005      	beq.n	8008d0c <HAL_UART_RegisterCallback+0x130>
 8008d00:	e009      	b.n	8008d16 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008d0a:	e019      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008d14:	e014      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	75fb      	strb	r3, [r7, #23]
        break;
 8008d2a:	e009      	b.n	8008d40 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	@ 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d167      	bne.n	8008e38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <HAL_UART_Transmit_DMA+0x24>
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e060      	b.n	8008e3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	88fa      	ldrh	r2, [r7, #6]
 8008d82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2221      	movs	r2, #33	@ 0x21
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d028      	beq.n	8008df8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008daa:	4a26      	ldr	r2, [pc, #152]	@ (8008e44 <HAL_UART_Transmit_DMA+0xf4>)
 8008dac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008db2:	4a25      	ldr	r2, [pc, #148]	@ (8008e48 <HAL_UART_Transmit_DMA+0xf8>)
 8008db4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008dba:	4a24      	ldr	r2, [pc, #144]	@ (8008e4c <HAL_UART_Transmit_DMA+0xfc>)
 8008dbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3328      	adds	r3, #40	@ 0x28
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	88fb      	ldrh	r3, [r7, #6]
 8008dda:	f7fb fc47 	bl	800466c <HAL_DMA_Start_IT>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2210      	movs	r2, #16
 8008de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e020      	b.n	8008e3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2240      	movs	r2, #64	@ 0x40
 8008dfe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3308      	adds	r3, #8
 8008e06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e20:	623a      	str	r2, [r7, #32]
 8008e22:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e5      	bne.n	8008e00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e000      	b.n	8008e3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008e38:	2302      	movs	r3, #2
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3728      	adds	r7, #40	@ 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	0800a37b 	.word	0x0800a37b
 8008e48:	0800a419 	.word	0x0800a419
 8008e4c:	0800a5b3 	.word	0x0800a5b3

08008e50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	@ 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	d137      	bne.n	8008ed8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_UART_Receive_DMA+0x24>
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e030      	b.n	8008eda <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a18      	ldr	r2, [pc, #96]	@ (8008ee4 <HAL_UART_Receive_DMA+0x94>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d01f      	beq.n	8008ec8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d018      	beq.n	8008ec8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	623b      	str	r3, [r7, #32]
 8008eb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	69f9      	ldr	r1, [r7, #28]
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e6      	bne.n	8008e96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f001 f906 	bl	800a0e0 <UART_Start_Receive_DMA>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	e000      	b.n	8008eda <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ed8:	2302      	movs	r3, #2
  }
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3728      	adds	r7, #40	@ 0x28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	40008000 	.word	0x40008000

08008ee8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	@ 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f16:	4013      	ands	r3, r2
 8008f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d11b      	bne.n	8008f5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d105      	bne.n	8008f48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 82f3 	beq.w	8009538 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
      }
      return;
 8008f5a:	e2ed      	b.n	8009538 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 8129 	beq.w	80091b8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f6a:	4b90      	ldr	r3, [pc, #576]	@ (80091ac <HAL_UART_IRQHandler+0x2c4>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f76:	4b8e      	ldr	r3, [pc, #568]	@ (80091b0 <HAL_UART_IRQHandler+0x2c8>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 811c 	beq.w	80091b8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d011      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xc8>
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	f043 0201 	orr.w	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d011      	beq.n	8008fe0 <HAL_UART_IRQHandler+0xf8>
 8008fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d011      	beq.n	8009010 <HAL_UART_IRQHandler+0x128>
 8008fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009006:	f043 0202 	orr.w	r2, r3, #2
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d017      	beq.n	800904c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800901c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009028:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800902c:	4b5f      	ldr	r3, [pc, #380]	@ (80091ac <HAL_UART_IRQHandler+0x2c4>)
 800902e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2208      	movs	r2, #8
 800903a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009042:	f043 0208 	orr.w	r2, r3, #8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009054:	2b00      	cmp	r3, #0
 8009056:	d012      	beq.n	800907e <HAL_UART_IRQHandler+0x196>
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800905c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800906c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009074:	f043 0220 	orr.w	r2, r3, #32
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8259 	beq.w	800953c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d013      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d2:	2b40      	cmp	r3, #64	@ 0x40
 80090d4:	d005      	beq.n	80090e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d058      	beq.n	8009194 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 f8e3 	bl	800a2ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f2:	2b40      	cmp	r3, #64	@ 0x40
 80090f4:	d148      	bne.n	8009188 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800910c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009122:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800912e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800913a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1d9      	bne.n	80090f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009148:	2b00      	cmp	r3, #0
 800914a:	d017      	beq.n	800917c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009152:	4a18      	ldr	r2, [pc, #96]	@ (80091b4 <HAL_UART_IRQHandler+0x2cc>)
 8009154:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800915c:	4618      	mov	r0, r3
 800915e:	f7fb fb59 	bl	8004814 <HAL_DMA_Abort_IT>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01f      	beq.n	80091a8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800916e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917a:	e015      	b.n	80091a8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009186:	e00f      	b.n	80091a8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009192:	e009      	b.n	80091a8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80091a6:	e1c9      	b.n	800953c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a8:	bf00      	nop
    return;
 80091aa:	e1c7      	b.n	800953c <HAL_UART_IRQHandler+0x654>
 80091ac:	10000001 	.word	0x10000001
 80091b0:	04000120 	.word	0x04000120
 80091b4:	0800a637 	.word	0x0800a637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091bc:	2b01      	cmp	r3, #1
 80091be:	f040 8157 	bne.w	8009470 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c6:	f003 0310 	and.w	r3, r3, #16
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8150 	beq.w	8009470 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8149 	beq.w	8009470 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2210      	movs	r2, #16
 80091e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f0:	2b40      	cmp	r3, #64	@ 0x40
 80091f2:	f040 80bd 	bne.w	8009370 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009204:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 8199 	beq.w	8009540 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009218:	429a      	cmp	r2, r3
 800921a:	f080 8191 	bcs.w	8009540 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009224:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 8087 	bne.w	800934a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800926a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800927e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1da      	bne.n	800923c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009298:	f023 0301 	bic.w	r3, r3, #1
 800929c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e1      	bne.n	8009286 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e3      	bne.n	80092c2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009318:	f023 0310 	bic.w	r3, r3, #16
 800931c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800932a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800932c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e4      	bne.n	8009308 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009344:	4618      	mov	r0, r3
 8009346:	f7fb fa0c 	bl	8004762 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2202      	movs	r2, #2
 800934e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009362:	b292      	uxth	r2, r2
 8009364:	1a8a      	subs	r2, r1, r2
 8009366:	b292      	uxth	r2, r2
 8009368:	4611      	mov	r1, r2
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800936e:	e0e7      	b.n	8009540 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 80d9 	beq.w	8009544 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80d4 	beq.w	8009544 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093be:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e4      	bne.n	800939c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	623b      	str	r3, [r7, #32]
   return(result);
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80093fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e1      	bne.n	80093d2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 0310 	bic.w	r3, r3, #16
 8009436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	69b9      	ldr	r1, [r7, #24]
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	617b      	str	r3, [r7, #20]
   return(result);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009464:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009468:	4611      	mov	r1, r2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800946e:	e069      	b.n	8009544 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d010      	beq.n	800949e <HAL_UART_IRQHandler+0x5b6>
 800947c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009490:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800949c:	e055      	b.n	800954a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800949e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80094aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d03e      	beq.n	8009548 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
    }
    return;
 80094d2:	e039      	b.n	8009548 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <HAL_UART_IRQHandler+0x60c>
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f8ba 	bl	800a666 <UART_EndTransmit_IT>
    return;
 80094f2:	e02a      	b.n	800954a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <HAL_UART_IRQHandler+0x630>
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009504:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009516:	e018      	b.n	800954a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800951c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d012      	beq.n	800954a <HAL_UART_IRQHandler+0x662>
 8009524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009528:	2b00      	cmp	r3, #0
 800952a:	da0e      	bge.n	800954a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009536:	e008      	b.n	800954a <HAL_UART_IRQHandler+0x662>
      return;
 8009538:	bf00      	nop
 800953a:	e006      	b.n	800954a <HAL_UART_IRQHandler+0x662>
    return;
 800953c:	bf00      	nop
 800953e:	e004      	b.n	800954a <HAL_UART_IRQHandler+0x662>
      return;
 8009540:	bf00      	nop
 8009542:	e002      	b.n	800954a <HAL_UART_IRQHandler+0x662>
      return;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <HAL_UART_IRQHandler+0x662>
    return;
 8009548:	bf00      	nop
  }
}
 800954a:	37e8      	adds	r7, #232	@ 0xe8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a09      	ldr	r2, [pc, #36]	@ (800963c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d009      	beq.n	8009630 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	615a      	str	r2, [r3, #20]
  }
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	40008000 	.word	0x40008000

08009640 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a18      	ldr	r2, [pc, #96]	@ (80096b0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d027      	beq.n	80096a2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009658:	2b20      	cmp	r3, #32
 800965a:	d120      	bne.n	800969e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009662:	2b01      	cmp	r3, #1
 8009664:	d101      	bne.n	800966a <HAL_UART_EnableReceiverTimeout+0x2a>
 8009666:	2302      	movs	r3, #2
 8009668:	e01c      	b.n	80096a4 <HAL_UART_EnableReceiverTimeout+0x64>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2224      	movs	r2, #36	@ 0x24
 8009676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009688:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e002      	b.n	80096a4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
 80096a0:	e000      	b.n	80096a4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
  }
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	40008000 	.word	0x40008000

080096b4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a1a      	ldr	r2, [pc, #104]	@ (8009744 <UART_InitCallbacksToDefault+0x74>)
 80096dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a19      	ldr	r2, [pc, #100]	@ (8009748 <UART_InitCallbacksToDefault+0x78>)
 80096e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a18      	ldr	r2, [pc, #96]	@ (800974c <UART_InitCallbacksToDefault+0x7c>)
 80096ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a17      	ldr	r2, [pc, #92]	@ (8009750 <UART_InitCallbacksToDefault+0x80>)
 80096f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <UART_InitCallbacksToDefault+0x84>)
 80096fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a15      	ldr	r2, [pc, #84]	@ (8009758 <UART_InitCallbacksToDefault+0x88>)
 8009704:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a14      	ldr	r2, [pc, #80]	@ (800975c <UART_InitCallbacksToDefault+0x8c>)
 800970c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a13      	ldr	r2, [pc, #76]	@ (8009760 <UART_InitCallbacksToDefault+0x90>)
 8009714:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a12      	ldr	r2, [pc, #72]	@ (8009764 <UART_InitCallbacksToDefault+0x94>)
 800971c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a11      	ldr	r2, [pc, #68]	@ (8009768 <UART_InitCallbacksToDefault+0x98>)
 8009724:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a10      	ldr	r2, [pc, #64]	@ (800976c <UART_InitCallbacksToDefault+0x9c>)
 800972c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a0f      	ldr	r2, [pc, #60]	@ (8009770 <UART_InitCallbacksToDefault+0xa0>)
 8009734:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	08009565 	.word	0x08009565
 8009748:	08009551 	.word	0x08009551
 800974c:	0800958d 	.word	0x0800958d
 8009750:	08009579 	.word	0x08009579
 8009754:	080095a1 	.word	0x080095a1
 8009758:	080095b5 	.word	0x080095b5
 800975c:	080095c9 	.word	0x080095c9
 8009760:	080095dd 	.word	0x080095dd
 8009764:	0800a6c1 	.word	0x0800a6c1
 8009768:	0800a6d5 	.word	0x0800a6d5
 800976c:	0800a6e9 	.word	0x0800a6e9
 8009770:	080095f1 	.word	0x080095f1

08009774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009778:	b08c      	sub	sp, #48	@ 0x30
 800977a:	af00      	add	r7, sp, #0
 800977c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	431a      	orrs	r2, r3
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	431a      	orrs	r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	4313      	orrs	r3, r2
 800979a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4baa      	ldr	r3, [pc, #680]	@ (8009a4c <UART_SetConfig+0x2d8>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097ac:	430b      	orrs	r3, r1
 80097ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a9f      	ldr	r2, [pc, #636]	@ (8009a50 <UART_SetConfig+0x2dc>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d004      	beq.n	80097e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097dc:	4313      	orrs	r3, r2
 80097de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80097ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	6812      	ldr	r2, [r2, #0]
 80097f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097f4:	430b      	orrs	r3, r1
 80097f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	f023 010f 	bic.w	r1, r3, #15
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a90      	ldr	r2, [pc, #576]	@ (8009a54 <UART_SetConfig+0x2e0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d125      	bne.n	8009864 <UART_SetConfig+0xf0>
 8009818:	4b8f      	ldr	r3, [pc, #572]	@ (8009a58 <UART_SetConfig+0x2e4>)
 800981a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d81a      	bhi.n	800985c <UART_SetConfig+0xe8>
 8009826:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <UART_SetConfig+0xb8>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	0800983d 	.word	0x0800983d
 8009830:	0800984d 	.word	0x0800984d
 8009834:	08009845 	.word	0x08009845
 8009838:	08009855 	.word	0x08009855
 800983c:	2301      	movs	r3, #1
 800983e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009842:	e116      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009844:	2302      	movs	r3, #2
 8009846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984a:	e112      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800984c:	2304      	movs	r3, #4
 800984e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009852:	e10e      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009854:	2308      	movs	r3, #8
 8009856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800985a:	e10a      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800985c:	2310      	movs	r3, #16
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e106      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a7c      	ldr	r2, [pc, #496]	@ (8009a5c <UART_SetConfig+0x2e8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d138      	bne.n	80098e0 <UART_SetConfig+0x16c>
 800986e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a58 <UART_SetConfig+0x2e4>)
 8009870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009874:	f003 030c 	and.w	r3, r3, #12
 8009878:	2b0c      	cmp	r3, #12
 800987a:	d82d      	bhi.n	80098d8 <UART_SetConfig+0x164>
 800987c:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <UART_SetConfig+0x110>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098b9 	.word	0x080098b9
 8009888:	080098d9 	.word	0x080098d9
 800988c:	080098d9 	.word	0x080098d9
 8009890:	080098d9 	.word	0x080098d9
 8009894:	080098c9 	.word	0x080098c9
 8009898:	080098d9 	.word	0x080098d9
 800989c:	080098d9 	.word	0x080098d9
 80098a0:	080098d9 	.word	0x080098d9
 80098a4:	080098c1 	.word	0x080098c1
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	080098d9 	.word	0x080098d9
 80098b0:	080098d9 	.word	0x080098d9
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	2300      	movs	r3, #0
 80098ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098be:	e0d8      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80098c0:	2302      	movs	r3, #2
 80098c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c6:	e0d4      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ce:	e0d0      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d6:	e0cc      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098de:	e0c8      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a5e      	ldr	r2, [pc, #376]	@ (8009a60 <UART_SetConfig+0x2ec>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d125      	bne.n	8009936 <UART_SetConfig+0x1c2>
 80098ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009a58 <UART_SetConfig+0x2e4>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098f4:	2b30      	cmp	r3, #48	@ 0x30
 80098f6:	d016      	beq.n	8009926 <UART_SetConfig+0x1b2>
 80098f8:	2b30      	cmp	r3, #48	@ 0x30
 80098fa:	d818      	bhi.n	800992e <UART_SetConfig+0x1ba>
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d00a      	beq.n	8009916 <UART_SetConfig+0x1a2>
 8009900:	2b20      	cmp	r3, #32
 8009902:	d814      	bhi.n	800992e <UART_SetConfig+0x1ba>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <UART_SetConfig+0x19a>
 8009908:	2b10      	cmp	r3, #16
 800990a:	d008      	beq.n	800991e <UART_SetConfig+0x1aa>
 800990c:	e00f      	b.n	800992e <UART_SetConfig+0x1ba>
 800990e:	2300      	movs	r3, #0
 8009910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009914:	e0ad      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009916:	2302      	movs	r3, #2
 8009918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800991c:	e0a9      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800991e:	2304      	movs	r3, #4
 8009920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009924:	e0a5      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009926:	2308      	movs	r3, #8
 8009928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992c:	e0a1      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800992e:	2310      	movs	r3, #16
 8009930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009934:	e09d      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a4a      	ldr	r2, [pc, #296]	@ (8009a64 <UART_SetConfig+0x2f0>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d125      	bne.n	800998c <UART_SetConfig+0x218>
 8009940:	4b45      	ldr	r3, [pc, #276]	@ (8009a58 <UART_SetConfig+0x2e4>)
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800994a:	2bc0      	cmp	r3, #192	@ 0xc0
 800994c:	d016      	beq.n	800997c <UART_SetConfig+0x208>
 800994e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009950:	d818      	bhi.n	8009984 <UART_SetConfig+0x210>
 8009952:	2b80      	cmp	r3, #128	@ 0x80
 8009954:	d00a      	beq.n	800996c <UART_SetConfig+0x1f8>
 8009956:	2b80      	cmp	r3, #128	@ 0x80
 8009958:	d814      	bhi.n	8009984 <UART_SetConfig+0x210>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <UART_SetConfig+0x1f0>
 800995e:	2b40      	cmp	r3, #64	@ 0x40
 8009960:	d008      	beq.n	8009974 <UART_SetConfig+0x200>
 8009962:	e00f      	b.n	8009984 <UART_SetConfig+0x210>
 8009964:	2300      	movs	r3, #0
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996a:	e082      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800996c:	2302      	movs	r3, #2
 800996e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009972:	e07e      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997a:	e07a      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009982:	e076      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998a:	e072      	b.n	8009a72 <UART_SetConfig+0x2fe>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a35      	ldr	r2, [pc, #212]	@ (8009a68 <UART_SetConfig+0x2f4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d12a      	bne.n	80099ec <UART_SetConfig+0x278>
 8009996:	4b30      	ldr	r3, [pc, #192]	@ (8009a58 <UART_SetConfig+0x2e4>)
 8009998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800999c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099a4:	d01a      	beq.n	80099dc <UART_SetConfig+0x268>
 80099a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099aa:	d81b      	bhi.n	80099e4 <UART_SetConfig+0x270>
 80099ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b0:	d00c      	beq.n	80099cc <UART_SetConfig+0x258>
 80099b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b6:	d815      	bhi.n	80099e4 <UART_SetConfig+0x270>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <UART_SetConfig+0x250>
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c0:	d008      	beq.n	80099d4 <UART_SetConfig+0x260>
 80099c2:	e00f      	b.n	80099e4 <UART_SetConfig+0x270>
 80099c4:	2300      	movs	r3, #0
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ca:	e052      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80099cc:	2302      	movs	r3, #2
 80099ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d2:	e04e      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099da:	e04a      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e2:	e046      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	e042      	b.n	8009a72 <UART_SetConfig+0x2fe>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <UART_SetConfig+0x2dc>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d13a      	bne.n	8009a6c <UART_SetConfig+0x2f8>
 80099f6:	4b18      	ldr	r3, [pc, #96]	@ (8009a58 <UART_SetConfig+0x2e4>)
 80099f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a04:	d01a      	beq.n	8009a3c <UART_SetConfig+0x2c8>
 8009a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a0a:	d81b      	bhi.n	8009a44 <UART_SetConfig+0x2d0>
 8009a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a10:	d00c      	beq.n	8009a2c <UART_SetConfig+0x2b8>
 8009a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a16:	d815      	bhi.n	8009a44 <UART_SetConfig+0x2d0>
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <UART_SetConfig+0x2b0>
 8009a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a20:	d008      	beq.n	8009a34 <UART_SetConfig+0x2c0>
 8009a22:	e00f      	b.n	8009a44 <UART_SetConfig+0x2d0>
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e022      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e01e      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3a:	e01a      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	e016      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e012      	b.n	8009a72 <UART_SetConfig+0x2fe>
 8009a4c:	cfff69f3 	.word	0xcfff69f3
 8009a50:	40008000 	.word	0x40008000
 8009a54:	40013800 	.word	0x40013800
 8009a58:	40021000 	.word	0x40021000
 8009a5c:	40004400 	.word	0x40004400
 8009a60:	40004800 	.word	0x40004800
 8009a64:	40004c00 	.word	0x40004c00
 8009a68:	40005000 	.word	0x40005000
 8009a6c:	2310      	movs	r3, #16
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4aae      	ldr	r2, [pc, #696]	@ (8009d30 <UART_SetConfig+0x5bc>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	f040 8097 	bne.w	8009bac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	d823      	bhi.n	8009ace <UART_SetConfig+0x35a>
 8009a86:	a201      	add	r2, pc, #4	@ (adr r2, 8009a8c <UART_SetConfig+0x318>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009acf 	.word	0x08009acf
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009acf 	.word	0x08009acf
 8009a9c:	08009abf 	.word	0x08009abf
 8009aa0:	08009acf 	.word	0x08009acf
 8009aa4:	08009acf 	.word	0x08009acf
 8009aa8:	08009acf 	.word	0x08009acf
 8009aac:	08009ac7 	.word	0x08009ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab0:	f7fb ffa0 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8009ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ab6:	e010      	b.n	8009ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ab8:	4b9e      	ldr	r3, [pc, #632]	@ (8009d34 <UART_SetConfig+0x5c0>)
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009abc:	e00d      	b.n	8009ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009abe:	f7fb ff2b 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8009ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ac4:	e009      	b.n	8009ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009acc:	e005      	b.n	8009ada <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8130 	beq.w	8009d42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae6:	4a94      	ldr	r2, [pc, #592]	@ (8009d38 <UART_SetConfig+0x5c4>)
 8009ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aec:	461a      	mov	r2, r3
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d305      	bcc.n	8009b12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d903      	bls.n	8009b1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b18:	e113      	b.n	8009d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	60fa      	str	r2, [r7, #12]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b26:	4a84      	ldr	r2, [pc, #528]	@ (8009d38 <UART_SetConfig+0x5c4>)
 8009b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2200      	movs	r2, #0
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b3c:	f7f7 f8e0 	bl	8000d00 <__aeabi_uldivmod>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4610      	mov	r0, r2
 8009b46:	4619      	mov	r1, r3
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	f04f 0300 	mov.w	r3, #0
 8009b50:	020b      	lsls	r3, r1, #8
 8009b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b56:	0202      	lsls	r2, r0, #8
 8009b58:	6979      	ldr	r1, [r7, #20]
 8009b5a:	6849      	ldr	r1, [r1, #4]
 8009b5c:	0849      	lsrs	r1, r1, #1
 8009b5e:	2000      	movs	r0, #0
 8009b60:	460c      	mov	r4, r1
 8009b62:	4605      	mov	r5, r0
 8009b64:	eb12 0804 	adds.w	r8, r2, r4
 8009b68:	eb43 0905 	adc.w	r9, r3, r5
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	469a      	mov	sl, r3
 8009b74:	4693      	mov	fp, r2
 8009b76:	4652      	mov	r2, sl
 8009b78:	465b      	mov	r3, fp
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	f7f7 f8bf 	bl	8000d00 <__aeabi_uldivmod>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	4613      	mov	r3, r2
 8009b88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b90:	d308      	bcc.n	8009ba4 <UART_SetConfig+0x430>
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b98:	d204      	bcs.n	8009ba4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6a3a      	ldr	r2, [r7, #32]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	e0ce      	b.n	8009d42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009baa:	e0ca      	b.n	8009d42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb4:	d166      	bne.n	8009c84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d827      	bhi.n	8009c0e <UART_SetConfig+0x49a>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <UART_SetConfig+0x450>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009bf1 	.word	0x08009bf1
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	08009c0f 	.word	0x08009c0f
 8009bd4:	08009bff 	.word	0x08009bff
 8009bd8:	08009c0f 	.word	0x08009c0f
 8009bdc:	08009c0f 	.word	0x08009c0f
 8009be0:	08009c0f 	.word	0x08009c0f
 8009be4:	08009c07 	.word	0x08009c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be8:	f7fb ff04 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bee:	e014      	b.n	8009c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf0:	f7fb ff16 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 8009bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bf6:	e010      	b.n	8009c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8009d34 <UART_SetConfig+0x5c0>)
 8009bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bfc:	e00d      	b.n	8009c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bfe:	f7fb fe8b 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8009c02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c04:	e009      	b.n	8009c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c0c:	e005      	b.n	8009c1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 8090 	beq.w	8009d42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c26:	4a44      	ldr	r2, [pc, #272]	@ (8009d38 <UART_SetConfig+0x5c4>)
 8009c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c34:	005a      	lsls	r2, r3, #1
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	441a      	add	r2, r3
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	d916      	bls.n	8009c7c <UART_SetConfig+0x508>
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c54:	d212      	bcs.n	8009c7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	f023 030f 	bic.w	r3, r3, #15
 8009c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	8bfb      	ldrh	r3, [r7, #30]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	8bfa      	ldrh	r2, [r7, #30]
 8009c78:	60da      	str	r2, [r3, #12]
 8009c7a:	e062      	b.n	8009d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c82:	e05e      	b.n	8009d42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d828      	bhi.n	8009cde <UART_SetConfig+0x56a>
 8009c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <UART_SetConfig+0x520>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cc1 	.word	0x08009cc1
 8009c9c:	08009cc9 	.word	0x08009cc9
 8009ca0:	08009cdf 	.word	0x08009cdf
 8009ca4:	08009ccf 	.word	0x08009ccf
 8009ca8:	08009cdf 	.word	0x08009cdf
 8009cac:	08009cdf 	.word	0x08009cdf
 8009cb0:	08009cdf 	.word	0x08009cdf
 8009cb4:	08009cd7 	.word	0x08009cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb8:	f7fb fe9c 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8009cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cbe:	e014      	b.n	8009cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc0:	f7fb feae 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 8009cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cc6:	e010      	b.n	8009cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <UART_SetConfig+0x5c0>)
 8009cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ccc:	e00d      	b.n	8009cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cce:	f7fb fe23 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8009cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cd4:	e009      	b.n	8009cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cdc:	e005      	b.n	8009cea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d028      	beq.n	8009d42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	4a10      	ldr	r2, [pc, #64]	@ (8009d38 <UART_SetConfig+0x5c4>)
 8009cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	441a      	add	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d910      	bls.n	8009d3c <UART_SetConfig+0x5c8>
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d20:	d20c      	bcs.n	8009d3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60da      	str	r2, [r3, #12]
 8009d2c:	e009      	b.n	8009d42 <UART_SetConfig+0x5ce>
 8009d2e:	bf00      	nop
 8009d30:	40008000 	.word	0x40008000
 8009d34:	00f42400 	.word	0x00f42400
 8009d38:	0800aa34 	.word	0x0800aa34
      }
      else
      {
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3730      	adds	r7, #48	@ 0x30
 8009d66:	46bd      	mov	sp, r7
 8009d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01a      	beq.n	8009e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e6a:	d10a      	bne.n	8009e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b098      	sub	sp, #96	@ 0x60
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ec0:	f7fa f9ee 	bl	80042a0 <HAL_GetTick>
 8009ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d12f      	bne.n	8009f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009edc:	2200      	movs	r2, #0
 8009ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f88e 	bl	800a004 <UART_WaitOnFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d022      	beq.n	8009f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e6      	bne.n	8009eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e063      	b.n	8009ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d149      	bne.n	8009fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f857 	bl	800a004 <UART_WaitOnFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d03c      	beq.n	8009fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	623b      	str	r3, [r7, #32]
   return(result);
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e6      	bne.n	8009f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f023 0301 	bic.w	r3, r3, #1
 8009fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fae:	61fa      	str	r2, [r7, #28]
 8009fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb2:	69b9      	ldr	r1, [r7, #24]
 8009fb4:	69fa      	ldr	r2, [r7, #28]
 8009fb6:	e841 2300 	strex	r3, r2, [r1]
 8009fba:	617b      	str	r3, [r7, #20]
   return(result);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e5      	bne.n	8009f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e012      	b.n	8009ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3758      	adds	r7, #88	@ 0x58
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	4613      	mov	r3, r2
 800a012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a014:	e04f      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01c:	d04b      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01e:	f7fa f93f 	bl	80042a0 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d302      	bcc.n	800a034 <UART_WaitOnFlagUntilTimeout+0x30>
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e04e      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d037      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b80      	cmp	r3, #128	@ 0x80
 800a04a:	d034      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b40      	cmp	r3, #64	@ 0x40
 800a050:	d031      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	f003 0308 	and.w	r3, r3, #8
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d110      	bne.n	800a082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2208      	movs	r2, #8
 800a066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f920 	bl	800a2ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2208      	movs	r2, #8
 800a072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e029      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a08c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a090:	d111      	bne.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a09a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f906 	bl	800a2ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e00f      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	bf0c      	ite	eq
 800a0c6:	2301      	moveq	r3, #1
 800a0c8:	2300      	movne	r3, #0
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d0a0      	beq.n	800a016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b096      	sub	sp, #88	@ 0x58
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2222      	movs	r2, #34	@ 0x22
 800a108:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a112:	2b00      	cmp	r3, #0
 800a114:	d02d      	beq.n	800a172 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11c:	4a40      	ldr	r2, [pc, #256]	@ (800a220 <UART_Start_Receive_DMA+0x140>)
 800a11e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a126:	4a3f      	ldr	r2, [pc, #252]	@ (800a224 <UART_Start_Receive_DMA+0x144>)
 800a128:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a130:	4a3d      	ldr	r2, [pc, #244]	@ (800a228 <UART_Start_Receive_DMA+0x148>)
 800a132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13a:	2200      	movs	r2, #0
 800a13c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3324      	adds	r3, #36	@ 0x24
 800a14a:	4619      	mov	r1, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a150:	461a      	mov	r2, r3
 800a152:	88fb      	ldrh	r3, [r7, #6]
 800a154:	f7fa fa8a 	bl	800466c <HAL_DMA_Start_IT>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2210      	movs	r2, #16
 800a162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e051      	b.n	800a216 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d018      	beq.n	800a1ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a18e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a19a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a19e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e6      	bne.n	800a17a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	f043 0301 	orr.w	r3, r3, #1
 800a1c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1cc:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e5      	bne.n	800a1ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a200:	623a      	str	r2, [r7, #32]
 800a202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	6a3a      	ldr	r2, [r7, #32]
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3758      	adds	r7, #88	@ 0x58
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	0800a439 	.word	0x0800a439
 800a224:	0800a56d 	.word	0x0800a56d
 800a228:	0800a5b3 	.word	0x0800a5b3

0800a22c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b08f      	sub	sp, #60	@ 0x3c
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	61fb      	str	r3, [r7, #28]
   return(result);
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a254:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e6      	bne.n	800a234 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	60bb      	str	r3, [r7, #8]
   return(result);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a27c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a286:	61ba      	str	r2, [r7, #24]
 800a288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6979      	ldr	r1, [r7, #20]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	613b      	str	r3, [r7, #16]
   return(result);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a2a2:	bf00      	nop
 800a2a4:	373c      	adds	r7, #60	@ 0x3c
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b095      	sub	sp, #84	@ 0x54
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2fe:	f023 0301 	bic.w	r3, r3, #1
 800a302:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e3      	bne.n	800a2e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a324:	2b01      	cmp	r3, #1
 800a326:	d118      	bne.n	800a35a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	60bb      	str	r3, [r7, #8]
   return(result);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	f023 0310 	bic.w	r3, r3, #16
 800a33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a346:	61bb      	str	r3, [r7, #24]
 800a348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6979      	ldr	r1, [r7, #20]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	613b      	str	r3, [r7, #16]
   return(result);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e6      	bne.n	800a328 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2220      	movs	r2, #32
 800a35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a36e:	bf00      	nop
 800a370:	3754      	adds	r7, #84	@ 0x54
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b090      	sub	sp, #64	@ 0x40
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d137      	bne.n	800a406 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a398:	2200      	movs	r2, #0
 800a39a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3be:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e5      	bne.n	800a39e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e6      	bne.n	800a3d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a404:	e004      	b.n	800a410 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a40c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a40e:	4798      	blx	r3
}
 800a410:	bf00      	nop
 800a412:	3740      	adds	r7, #64	@ 0x40
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a424:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b09c      	sub	sp, #112	@ 0x70
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b00      	cmp	r3, #0
 800a452:	d171      	bne.n	800a538 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a456:	2200      	movs	r2, #0
 800a458:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a45c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a46a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a46c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a470:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a47a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a47c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a480:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e6      	bne.n	800a45c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a0:	f023 0301 	bic.w	r3, r3, #1
 800a4a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e5      	bne.n	800a4c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a502:	2b01      	cmp	r3, #1
 800a504:	d118      	bne.n	800a538 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	60fb      	str	r3, [r7, #12]
   return(result);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0310 	bic.w	r3, r3, #16
 800a51a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a51c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	69b9      	ldr	r1, [r7, #24]
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	617b      	str	r3, [r7, #20]
   return(result);
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e6      	bne.n	800a506 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a53a:	2200      	movs	r2, #0
 800a53c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a53e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a542:	2b01      	cmp	r3, #1
 800a544:	d109      	bne.n	800a55a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a548:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a54c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a54e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a552:	4611      	mov	r1, r2
 800a554:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a556:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a558:	e004      	b.n	800a564 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a55c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a560:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a562:	4798      	blx	r3
}
 800a564:	bf00      	nop
 800a566:	3770      	adds	r7, #112	@ 0x70
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a578:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d10b      	bne.n	800a5a0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a594:	0852      	lsrs	r2, r2, #1
 800a596:	b292      	uxth	r2, r2
 800a598:	4611      	mov	r1, r2
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a59e:	e004      	b.n	800a5aa <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	4798      	blx	r3
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b086      	sub	sp, #24
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5da:	2b80      	cmp	r3, #128	@ 0x80
 800a5dc:	d109      	bne.n	800a5f2 <UART_DMAError+0x40>
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b21      	cmp	r3, #33	@ 0x21
 800a5e2:	d106      	bne.n	800a5f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5ec:	6978      	ldr	r0, [r7, #20]
 800a5ee:	f7ff fe1d 	bl	800a22c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fc:	2b40      	cmp	r3, #64	@ 0x40
 800a5fe:	d109      	bne.n	800a614 <UART_DMAError+0x62>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b22      	cmp	r3, #34	@ 0x22
 800a604:	d106      	bne.n	800a614 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a60e:	6978      	ldr	r0, [r7, #20]
 800a610:	f7ff fe4d 	bl	800a2ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a61a:	f043 0210 	orr.w	r2, r3, #16
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a62a:	6978      	ldr	r0, [r7, #20]
 800a62c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a62e:	bf00      	nop
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	e853 3f00 	ldrex	r3, [r3]
 800a67a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a690:	6979      	ldr	r1, [r7, #20]
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	e841 2300 	strex	r3, r2, [r1]
 800a698:	613b      	str	r3, [r7, #16]
   return(result);
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e6      	bne.n	800a66e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b8:	bf00      	nop
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d101      	bne.n	800a712 <HAL_UARTEx_DisableFifoMode+0x16>
 800a70e:	2302      	movs	r3, #2
 800a710:	e027      	b.n	800a762 <HAL_UARTEx_DisableFifoMode+0x66>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2224      	movs	r2, #36	@ 0x24
 800a71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0201 	bic.w	r2, r2, #1
 800a738:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a740:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a782:	2302      	movs	r3, #2
 800a784:	e02d      	b.n	800a7e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2224      	movs	r2, #36	@ 0x24
 800a792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f850 	bl	800a868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e02d      	b.n	800a85e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2224      	movs	r2, #36	@ 0x24
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0201 	bic.w	r2, r2, #1
 800a828:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f812 	bl	800a868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2220      	movs	r2, #32
 800a850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a874:	2b00      	cmp	r3, #0
 800a876:	d108      	bne.n	800a88a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a888:	e031      	b.n	800a8ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a88a:	2308      	movs	r3, #8
 800a88c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a88e:	2308      	movs	r3, #8
 800a890:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	0e5b      	lsrs	r3, r3, #25
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	0f5b      	lsrs	r3, r3, #29
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	f003 0307 	and.w	r3, r3, #7
 800a8b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	7b3a      	ldrb	r2, [r7, #12]
 800a8b6:	4911      	ldr	r1, [pc, #68]	@ (800a8fc <UARTEx_SetNbDataToProcess+0x94>)
 800a8b8:	5c8a      	ldrb	r2, [r1, r2]
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8be:	7b3a      	ldrb	r2, [r7, #12]
 800a8c0:	490f      	ldr	r1, [pc, #60]	@ (800a900 <UARTEx_SetNbDataToProcess+0x98>)
 800a8c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	7b7a      	ldrb	r2, [r7, #13]
 800a8d4:	4909      	ldr	r1, [pc, #36]	@ (800a8fc <UARTEx_SetNbDataToProcess+0x94>)
 800a8d6:	5c8a      	ldrb	r2, [r1, r2]
 800a8d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8dc:	7b7a      	ldrb	r2, [r7, #13]
 800a8de:	4908      	ldr	r1, [pc, #32]	@ (800a900 <UARTEx_SetNbDataToProcess+0x98>)
 800a8e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	0800aa4c 	.word	0x0800aa4c
 800a900:	0800aa54 	.word	0x0800aa54

0800a904 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	ed93 7a06 	vldr	s14, [r3, #24]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	edd3 7a07 	vldr	s15, [r3, #28]
 800a91a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	edd3 7a08 	vldr	s15, [r3, #32]
 800a924:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	edd3 7a06 	vldr	s15, [r3, #24]
 800a934:	eeb1 7a67 	vneg.f32	s14, s15
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a93e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a942:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a1a      	ldr	r2, [r3, #32]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d006      	beq.n	800a968 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	330c      	adds	r3, #12
 800a95e:	220c      	movs	r2, #12
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f000 f804 	bl	800a970 <memset>
  }

}
 800a968:	bf00      	nop
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <memset>:
 800a970:	4402      	add	r2, r0
 800a972:	4603      	mov	r3, r0
 800a974:	4293      	cmp	r3, r2
 800a976:	d100      	bne.n	800a97a <memset+0xa>
 800a978:	4770      	bx	lr
 800a97a:	f803 1b01 	strb.w	r1, [r3], #1
 800a97e:	e7f9      	b.n	800a974 <memset+0x4>

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b8 <__libc_init_array+0x38>)
 800a984:	4c0d      	ldr	r4, [pc, #52]	@ (800a9bc <__libc_init_array+0x3c>)
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	2600      	movs	r6, #0
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c0 <__libc_init_array+0x40>)
 800a992:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c4 <__libc_init_array+0x44>)
 800a994:	f000 f826 	bl	800a9e4 <_init>
 800a998:	1b64      	subs	r4, r4, r5
 800a99a:	10a4      	asrs	r4, r4, #2
 800a99c:	2600      	movs	r6, #0
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a8:	4798      	blx	r3
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b2:	4798      	blx	r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	0800aa64 	.word	0x0800aa64
 800a9bc:	0800aa64 	.word	0x0800aa64
 800a9c0:	0800aa64 	.word	0x0800aa64
 800a9c4:	0800aa68 	.word	0x0800aa68

0800a9c8 <memcpy>:
 800a9c8:	440a      	add	r2, r1
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9d0:	d100      	bne.n	800a9d4 <memcpy+0xc>
 800a9d2:	4770      	bx	lr
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	d1f9      	bne.n	800a9d6 <memcpy+0xe>
 800a9e2:	bd10      	pop	{r4, pc}

0800a9e4 <_init>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	bf00      	nop
 800a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ea:	bc08      	pop	{r3}
 800a9ec:	469e      	mov	lr, r3
 800a9ee:	4770      	bx	lr

0800a9f0 <_fini>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	bf00      	nop
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr
